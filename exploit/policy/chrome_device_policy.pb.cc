// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chrome_device_policy.proto

#include "chrome_device_policy.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccessibilitySettingsProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AllowBluetoothProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AllowKioskAppControlChromeVersionProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AllowNewUsersProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AllowRedeemChromeOsRegistrationOffersProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AndroidKioskAppInfoProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AttestationSettingsProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutoCleanupSettigsProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutoUpdateSettingsProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_policy_5fcommon_5fdefinitions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BooleanPolicyProto_policy_5fcommon_5fdefinitions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CameraEnabledProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CastReceiverNameProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataRoamingEnabledProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceAdvancedBatteryChargeModeProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceAuthDataCacheLifetimeProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceBatteryChargeModeProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceBootOnAcProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceDisplayResolutionProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceDockMacAddressSourceProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceEcryptfsMigrationStrategyProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceGpoCacheLifetimeProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceHeartbeatSettingsProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceKerberosEncryptionTypesProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DeviceLocalAccountInfoProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeviceLocalAccountsProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceLogUploadSettingsProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceLoginScreenAutoSelectCertificateForUrls_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceLoginScreenExtensionsProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceLoginScreenIsolateOriginsProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceLoginScreenPrivacyScreenEnabledProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceLoginScreenSitePerProcessProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceLoginScreenWebUsbAllowDevicesForUrlsProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceMachinePasswordChangeRateProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceNativePrintersAccessModeProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceNativePrintersBlacklistProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceNativePrintersProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceNativePrintersWhitelistProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeviceOffHoursProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceOpenNetworkConfigurationProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DevicePolicyRefreshRateProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DevicePowerPeakShiftProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DevicePowerwashAllowedProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceQuirksDownloadEnabledProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceRebootOnUserSignoutProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceReportingProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceScheduledUpdateCheckProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceSecondFactorAuthenticationProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceUnaffiliatedCrostiniAllowedProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceUsbPowerShareProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceUserPolicyLoopbackProcessingModeProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceWallpaperImageProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceWiFiAllowedProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceWiFiFastTransitionEnabledProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceWilcoDtcAllowedProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceWilcoDtcConfigurationProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisplayRotationDefaultProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EphemeralUsersEnabledProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExtensionCacheSizeProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GuestModeEnabledProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_policy_5fcommon_5fdefinitions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntegerPolicyProto_policy_5fcommon_5fdefinitions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KioskAppInfoProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginAuthenticationBehaviorProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginScreenDomainAutoCompleteProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginScreenInputMethodsProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginScreenLocalesProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginScreenPowerManagementProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginVideoCaptureAllowedUrlsProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MetricsEnabledProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkHostnameProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkThrottlingEnabledProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OBSOLETE_AppPackEntryProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OBSOLETE_AppPackProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OBSOLETE_DeviceProxySettingsProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OBSOLETE_ForcedLogoutTimeoutsProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OBSOLETE_MinimumRequiredVersionProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OBSOLETE_PinnedAppsProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OBSOLETE_ScreenSaverProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OBSOLETE_StartUpUrlsProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OBSOLETE_SupervisedUsersSettingsProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PluginVmAllowedProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PluginVmLicenseKeyProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_policy_5fcommon_5fdefinitions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PolicyOptions_policy_5fcommon_5fdefinitions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RebootOnShutdownProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReleaseChannelProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequiredClientCertificateForDeviceProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SAMLSettingsProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SamlLoginAuthenticationTypeProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShowUserNamesOnSigninProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartUpFlagsProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_policy_5fcommon_5fdefinitions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StringListPolicyProto_policy_5fcommon_5fdefinitions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_policy_5fcommon_5fdefinitions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StringPolicyProto_policy_5fcommon_5fdefinitions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemProxySettingsProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemSettingsProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemTimezoneProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemUse24HourClockProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TPMFirmwareUpdateSettingsProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnaffiliatedArcAllowedProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UptimeLimitProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UsbDetachableWhitelistProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UsbDeviceIdProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserWhitelistProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VariationsParameterProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VirtualMachinesAllowedProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WebKioskAppInfoProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WeeklyTimeIntervalProto_chrome_5fdevice_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WeeklyTimeProto_chrome_5fdevice_5fpolicy_2eproto;
namespace enterprise_management {
class DevicePolicyRefreshRateProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DevicePolicyRefreshRateProto> _instance;
} _DevicePolicyRefreshRateProto_default_instance_;
class UserWhitelistProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserWhitelistProto> _instance;
} _UserWhitelistProto_default_instance_;
class AllowNewUsersProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AllowNewUsersProto> _instance;
} _AllowNewUsersProto_default_instance_;
class GuestModeEnabledProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GuestModeEnabledProto> _instance;
} _GuestModeEnabledProto_default_instance_;
class ShowUserNamesOnSigninProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShowUserNamesOnSigninProto> _instance;
} _ShowUserNamesOnSigninProto_default_instance_;
class DataRoamingEnabledProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataRoamingEnabledProto> _instance;
} _DataRoamingEnabledProto_default_instance_;
class OBSOLETE_DeviceProxySettingsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OBSOLETE_DeviceProxySettingsProto> _instance;
} _OBSOLETE_DeviceProxySettingsProto_default_instance_;
class CameraEnabledProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraEnabledProto> _instance;
} _CameraEnabledProto_default_instance_;
class MetricsEnabledProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MetricsEnabledProto> _instance;
} _MetricsEnabledProto_default_instance_;
class ReleaseChannelProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReleaseChannelProto> _instance;
} _ReleaseChannelProto_default_instance_;
class DeviceOpenNetworkConfigurationProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceOpenNetworkConfigurationProto> _instance;
} _DeviceOpenNetworkConfigurationProto_default_instance_;
class NetworkHostnameProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkHostnameProto> _instance;
} _NetworkHostnameProto_default_instance_;
class DeviceReportingProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceReportingProto> _instance;
} _DeviceReportingProto_default_instance_;
class EphemeralUsersEnabledProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EphemeralUsersEnabledProto> _instance;
} _EphemeralUsersEnabledProto_default_instance_;
class OBSOLETE_AppPackEntryProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OBSOLETE_AppPackEntryProto> _instance;
} _OBSOLETE_AppPackEntryProto_default_instance_;
class OBSOLETE_AppPackProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OBSOLETE_AppPackProto> _instance;
} _OBSOLETE_AppPackProto_default_instance_;
class OBSOLETE_PinnedAppsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OBSOLETE_PinnedAppsProto> _instance;
} _OBSOLETE_PinnedAppsProto_default_instance_;
class OBSOLETE_ForcedLogoutTimeoutsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OBSOLETE_ForcedLogoutTimeoutsProto> _instance;
} _OBSOLETE_ForcedLogoutTimeoutsProto_default_instance_;
class OBSOLETE_ScreenSaverProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OBSOLETE_ScreenSaverProto> _instance;
} _OBSOLETE_ScreenSaverProto_default_instance_;
class AutoUpdateSettingsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutoUpdateSettingsProto> _instance;
} _AutoUpdateSettingsProto_default_instance_;
class OBSOLETE_StartUpUrlsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OBSOLETE_StartUpUrlsProto> _instance;
} _OBSOLETE_StartUpUrlsProto_default_instance_;
class SystemTimezoneProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemTimezoneProto> _instance;
} _SystemTimezoneProto_default_instance_;
class SystemUse24HourClockProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemUse24HourClockProto> _instance;
} _SystemUse24HourClockProto_default_instance_;
class KioskAppInfoProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KioskAppInfoProto> _instance;
} _KioskAppInfoProto_default_instance_;
class AndroidKioskAppInfoProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AndroidKioskAppInfoProto> _instance;
} _AndroidKioskAppInfoProto_default_instance_;
class WebKioskAppInfoProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WebKioskAppInfoProto> _instance;
} _WebKioskAppInfoProto_default_instance_;
class DeviceLocalAccountInfoProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceLocalAccountInfoProto> _instance;
} _DeviceLocalAccountInfoProto_default_instance_;
class DeviceLocalAccountsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceLocalAccountsProto> _instance;
} _DeviceLocalAccountsProto_default_instance_;
class AllowRedeemChromeOsRegistrationOffersProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AllowRedeemChromeOsRegistrationOffersProto> _instance;
} _AllowRedeemChromeOsRegistrationOffersProto_default_instance_;
class StartUpFlagsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartUpFlagsProto> _instance;
} _StartUpFlagsProto_default_instance_;
class UptimeLimitProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UptimeLimitProto> _instance;
} _UptimeLimitProto_default_instance_;
class VariationsParameterProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VariationsParameterProto> _instance;
} _VariationsParameterProto_default_instance_;
class AttestationSettingsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AttestationSettingsProto> _instance;
} _AttestationSettingsProto_default_instance_;
class AccessibilitySettingsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccessibilitySettingsProto> _instance;
} _AccessibilitySettingsProto_default_instance_;
class OBSOLETE_SupervisedUsersSettingsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OBSOLETE_SupervisedUsersSettingsProto> _instance;
} _OBSOLETE_SupervisedUsersSettingsProto_default_instance_;
class LoginScreenPowerManagementProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginScreenPowerManagementProto> _instance;
} _LoginScreenPowerManagementProto_default_instance_;
class AutoCleanupSettigsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutoCleanupSettigsProto> _instance;
} _AutoCleanupSettigsProto_default_instance_;
class SystemSettingsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemSettingsProto> _instance;
} _SystemSettingsProto_default_instance_;
class SAMLSettingsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SAMLSettingsProto> _instance;
} _SAMLSettingsProto_default_instance_;
class RebootOnShutdownProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RebootOnShutdownProto> _instance;
} _RebootOnShutdownProto_default_instance_;
class DeviceHeartbeatSettingsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceHeartbeatSettingsProto> _instance;
} _DeviceHeartbeatSettingsProto_default_instance_;
class ExtensionCacheSizeProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExtensionCacheSizeProto> _instance;
} _ExtensionCacheSizeProto_default_instance_;
class LoginScreenDomainAutoCompleteProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginScreenDomainAutoCompleteProto> _instance;
} _LoginScreenDomainAutoCompleteProto_default_instance_;
class DeviceLogUploadSettingsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceLogUploadSettingsProto> _instance;
} _DeviceLogUploadSettingsProto_default_instance_;
class DisplayRotationDefaultProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisplayRotationDefaultProto> _instance;
} _DisplayRotationDefaultProto_default_instance_;
class DeviceLoginScreenPrivacyScreenEnabledProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceLoginScreenPrivacyScreenEnabledProto> _instance;
} _DeviceLoginScreenPrivacyScreenEnabledProto_default_instance_;
class DeviceDisplayResolutionProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceDisplayResolutionProto> _instance;
} _DeviceDisplayResolutionProto_default_instance_;
class AllowKioskAppControlChromeVersionProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AllowKioskAppControlChromeVersionProto> _instance;
} _AllowKioskAppControlChromeVersionProto_default_instance_;
class LoginAuthenticationBehaviorProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginAuthenticationBehaviorProto> _instance;
} _LoginAuthenticationBehaviorProto_default_instance_;
class UsbDeviceIdProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsbDeviceIdProto> _instance;
} _UsbDeviceIdProto_default_instance_;
class UsbDetachableWhitelistProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsbDetachableWhitelistProto> _instance;
} _UsbDetachableWhitelistProto_default_instance_;
class AllowBluetoothProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AllowBluetoothProto> _instance;
} _AllowBluetoothProto_default_instance_;
class DeviceWiFiAllowedProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceWiFiAllowedProto> _instance;
} _DeviceWiFiAllowedProto_default_instance_;
class DeviceQuirksDownloadEnabledProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceQuirksDownloadEnabledProto> _instance;
} _DeviceQuirksDownloadEnabledProto_default_instance_;
class LoginVideoCaptureAllowedUrlsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginVideoCaptureAllowedUrlsProto> _instance;
} _LoginVideoCaptureAllowedUrlsProto_default_instance_;
class DeviceWiFiFastTransitionEnabledProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceWiFiFastTransitionEnabledProto> _instance;
} _DeviceWiFiFastTransitionEnabledProto_default_instance_;
class NetworkThrottlingEnabledProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkThrottlingEnabledProto> _instance;
} _NetworkThrottlingEnabledProto_default_instance_;
class DeviceLoginScreenExtensionsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceLoginScreenExtensionsProto> _instance;
} _DeviceLoginScreenExtensionsProto_default_instance_;
class LoginScreenLocalesProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginScreenLocalesProto> _instance;
} _LoginScreenLocalesProto_default_instance_;
class LoginScreenInputMethodsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginScreenInputMethodsProto> _instance;
} _LoginScreenInputMethodsProto_default_instance_;
class DeviceWallpaperImageProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceWallpaperImageProto> _instance;
} _DeviceWallpaperImageProto_default_instance_;
class DeviceEcryptfsMigrationStrategyProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceEcryptfsMigrationStrategyProto> _instance;
} _DeviceEcryptfsMigrationStrategyProto_default_instance_;
class DeviceSecondFactorAuthenticationProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceSecondFactorAuthenticationProto> _instance;
} _DeviceSecondFactorAuthenticationProto_default_instance_;
class CastReceiverNameProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CastReceiverNameProto> _instance;
} _CastReceiverNameProto_default_instance_;
class WeeklyTimeProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WeeklyTimeProto> _instance;
} _WeeklyTimeProto_default_instance_;
class WeeklyTimeIntervalProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WeeklyTimeIntervalProto> _instance;
} _WeeklyTimeIntervalProto_default_instance_;
class DeviceOffHoursProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceOffHoursProto> _instance;
} _DeviceOffHoursProto_default_instance_;
class DeviceNativePrintersProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceNativePrintersProto> _instance;
} _DeviceNativePrintersProto_default_instance_;
class DeviceNativePrintersAccessModeProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceNativePrintersAccessModeProto> _instance;
} _DeviceNativePrintersAccessModeProto_default_instance_;
class DeviceNativePrintersBlacklistProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceNativePrintersBlacklistProto> _instance;
} _DeviceNativePrintersBlacklistProto_default_instance_;
class DeviceNativePrintersWhitelistProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceNativePrintersWhitelistProto> _instance;
} _DeviceNativePrintersWhitelistProto_default_instance_;
class TPMFirmwareUpdateSettingsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TPMFirmwareUpdateSettingsProto> _instance;
} _TPMFirmwareUpdateSettingsProto_default_instance_;
class OBSOLETE_MinimumRequiredVersionProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OBSOLETE_MinimumRequiredVersionProto> _instance;
} _OBSOLETE_MinimumRequiredVersionProto_default_instance_;
class DeviceLoginScreenAutoSelectCertificateForUrlsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceLoginScreenAutoSelectCertificateForUrls> _instance;
} _DeviceLoginScreenAutoSelectCertificateForUrls_default_instance_;
class UnaffiliatedArcAllowedProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnaffiliatedArcAllowedProto> _instance;
} _UnaffiliatedArcAllowedProto_default_instance_;
class DeviceKerberosEncryptionTypesProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceKerberosEncryptionTypesProto> _instance;
} _DeviceKerberosEncryptionTypesProto_default_instance_;
class DeviceUserPolicyLoopbackProcessingModeProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceUserPolicyLoopbackProcessingModeProto> _instance;
} _DeviceUserPolicyLoopbackProcessingModeProto_default_instance_;
class DeviceLoginScreenIsolateOriginsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceLoginScreenIsolateOriginsProto> _instance;
} _DeviceLoginScreenIsolateOriginsProto_default_instance_;
class DeviceLoginScreenSitePerProcessProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceLoginScreenSitePerProcessProto> _instance;
} _DeviceLoginScreenSitePerProcessProto_default_instance_;
class VirtualMachinesAllowedProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VirtualMachinesAllowedProto> _instance;
} _VirtualMachinesAllowedProto_default_instance_;
class DeviceMachinePasswordChangeRateProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceMachinePasswordChangeRateProto> _instance;
} _DeviceMachinePasswordChangeRateProto_default_instance_;
class DeviceGpoCacheLifetimeProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceGpoCacheLifetimeProto> _instance;
} _DeviceGpoCacheLifetimeProto_default_instance_;
class DeviceAuthDataCacheLifetimeProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceAuthDataCacheLifetimeProto> _instance;
} _DeviceAuthDataCacheLifetimeProto_default_instance_;
class SamlLoginAuthenticationTypeProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SamlLoginAuthenticationTypeProto> _instance;
} _SamlLoginAuthenticationTypeProto_default_instance_;
class DeviceUnaffiliatedCrostiniAllowedProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceUnaffiliatedCrostiniAllowedProto> _instance;
} _DeviceUnaffiliatedCrostiniAllowedProto_default_instance_;
class PluginVmAllowedProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PluginVmAllowedProto> _instance;
} _PluginVmAllowedProto_default_instance_;
class PluginVmLicenseKeyProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PluginVmLicenseKeyProto> _instance;
} _PluginVmLicenseKeyProto_default_instance_;
class DeviceRebootOnUserSignoutProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceRebootOnUserSignoutProto> _instance;
} _DeviceRebootOnUserSignoutProto_default_instance_;
class DeviceWilcoDtcAllowedProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceWilcoDtcAllowedProto> _instance;
} _DeviceWilcoDtcAllowedProto_default_instance_;
class DeviceWilcoDtcConfigurationProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceWilcoDtcConfigurationProto> _instance;
} _DeviceWilcoDtcConfigurationProto_default_instance_;
class DevicePowerPeakShiftProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DevicePowerPeakShiftProto> _instance;
} _DevicePowerPeakShiftProto_default_instance_;
class DeviceBootOnAcProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceBootOnAcProto> _instance;
} _DeviceBootOnAcProto_default_instance_;
class DeviceDockMacAddressSourceProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceDockMacAddressSourceProto> _instance;
} _DeviceDockMacAddressSourceProto_default_instance_;
class DeviceAdvancedBatteryChargeModeProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceAdvancedBatteryChargeModeProto> _instance;
} _DeviceAdvancedBatteryChargeModeProto_default_instance_;
class DeviceBatteryChargeModeProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceBatteryChargeModeProto> _instance;
} _DeviceBatteryChargeModeProto_default_instance_;
class DeviceUsbPowerShareProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceUsbPowerShareProto> _instance;
} _DeviceUsbPowerShareProto_default_instance_;
class DeviceScheduledUpdateCheckProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceScheduledUpdateCheckProto> _instance;
} _DeviceScheduledUpdateCheckProto_default_instance_;
class DevicePowerwashAllowedProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DevicePowerwashAllowedProto> _instance;
} _DevicePowerwashAllowedProto_default_instance_;
class DeviceLoginScreenWebUsbAllowDevicesForUrlsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceLoginScreenWebUsbAllowDevicesForUrlsProto> _instance;
} _DeviceLoginScreenWebUsbAllowDevicesForUrlsProto_default_instance_;
class SystemProxySettingsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemProxySettingsProto> _instance;
} _SystemProxySettingsProto_default_instance_;
class RequiredClientCertificateForDeviceProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequiredClientCertificateForDeviceProto> _instance;
} _RequiredClientCertificateForDeviceProto_default_instance_;
class ChromeDeviceSettingsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChromeDeviceSettingsProto> _instance;
} _ChromeDeviceSettingsProto_default_instance_;
}  // namespace enterprise_management
static void InitDefaultsscc_info_AccessibilitySettingsProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_AccessibilitySettingsProto_default_instance_;
    new (ptr) ::enterprise_management::AccessibilitySettingsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::AccessibilitySettingsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccessibilitySettingsProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AccessibilitySettingsProto_chrome_5fdevice_5fpolicy_2eproto}, {
      &scc_info_PolicyOptions_policy_5fcommon_5fdefinitions_2eproto.base,}};

static void InitDefaultsscc_info_AllowBluetoothProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_AllowBluetoothProto_default_instance_;
    new (ptr) ::enterprise_management::AllowBluetoothProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::AllowBluetoothProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AllowBluetoothProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AllowBluetoothProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_AllowKioskAppControlChromeVersionProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_AllowKioskAppControlChromeVersionProto_default_instance_;
    new (ptr) ::enterprise_management::AllowKioskAppControlChromeVersionProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::AllowKioskAppControlChromeVersionProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AllowKioskAppControlChromeVersionProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AllowKioskAppControlChromeVersionProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_AllowNewUsersProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_AllowNewUsersProto_default_instance_;
    new (ptr) ::enterprise_management::AllowNewUsersProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::AllowNewUsersProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AllowNewUsersProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AllowNewUsersProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_AllowRedeemChromeOsRegistrationOffersProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_AllowRedeemChromeOsRegistrationOffersProto_default_instance_;
    new (ptr) ::enterprise_management::AllowRedeemChromeOsRegistrationOffersProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::AllowRedeemChromeOsRegistrationOffersProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AllowRedeemChromeOsRegistrationOffersProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AllowRedeemChromeOsRegistrationOffersProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_AndroidKioskAppInfoProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_AndroidKioskAppInfoProto_default_instance_;
    new (ptr) ::enterprise_management::AndroidKioskAppInfoProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::AndroidKioskAppInfoProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AndroidKioskAppInfoProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AndroidKioskAppInfoProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_AttestationSettingsProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_AttestationSettingsProto_default_instance_;
    new (ptr) ::enterprise_management::AttestationSettingsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::AttestationSettingsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AttestationSettingsProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AttestationSettingsProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_AutoCleanupSettigsProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_AutoCleanupSettigsProto_default_instance_;
    new (ptr) ::enterprise_management::AutoCleanupSettigsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::AutoCleanupSettigsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutoCleanupSettigsProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AutoCleanupSettigsProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_AutoUpdateSettingsProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_AutoUpdateSettingsProto_default_instance_;
    new (ptr) ::enterprise_management::AutoUpdateSettingsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::AutoUpdateSettingsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutoUpdateSettingsProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AutoUpdateSettingsProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_CameraEnabledProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_CameraEnabledProto_default_instance_;
    new (ptr) ::enterprise_management::CameraEnabledProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::CameraEnabledProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CameraEnabledProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CameraEnabledProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_CastReceiverNameProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_CastReceiverNameProto_default_instance_;
    new (ptr) ::enterprise_management::CastReceiverNameProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::CastReceiverNameProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CastReceiverNameProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CastReceiverNameProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_ChromeDeviceSettingsProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_ChromeDeviceSettingsProto_default_instance_;
    new (ptr) ::enterprise_management::ChromeDeviceSettingsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::ChromeDeviceSettingsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<97> scc_info_ChromeDeviceSettingsProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 97, 0, InitDefaultsscc_info_ChromeDeviceSettingsProto_chrome_5fdevice_5fpolicy_2eproto}, {
      &scc_info_DevicePolicyRefreshRateProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_UserWhitelistProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_GuestModeEnabledProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_OBSOLETE_DeviceProxySettingsProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_CameraEnabledProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_ShowUserNamesOnSigninProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_DataRoamingEnabledProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_AllowNewUsersProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_MetricsEnabledProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_ReleaseChannelProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_DeviceOpenNetworkConfigurationProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_DeviceReportingProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_EphemeralUsersEnabledProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_OBSOLETE_AppPackProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_OBSOLETE_ForcedLogoutTimeoutsProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_OBSOLETE_ScreenSaverProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_AutoUpdateSettingsProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_OBSOLETE_StartUpUrlsProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_OBSOLETE_PinnedAppsProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_SystemTimezoneProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_DeviceLocalAccountsProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_AllowRedeemChromeOsRegistrationOffersProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_StartUpFlagsProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_UptimeLimitProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_VariationsParameterProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_AttestationSettingsProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_AccessibilitySettingsProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_OBSOLETE_SupervisedUsersSettingsProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_LoginScreenPowerManagementProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_SystemUse24HourClockProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_AutoCleanupSettigsProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_SystemSettingsProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_SAMLSettingsProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_RebootOnShutdownProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_DeviceHeartbeatSettingsProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_ExtensionCacheSizeProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_LoginScreenDomainAutoCompleteProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_DeviceLogUploadSettingsProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_DisplayRotationDefaultProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_AllowKioskAppControlChromeVersionProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_LoginAuthenticationBehaviorProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_UsbDetachableWhitelistProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_AllowBluetoothProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_DeviceQuirksDownloadEnabledProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_LoginVideoCaptureAllowedUrlsProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_DeviceLoginScreenExtensionsProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_NetworkThrottlingEnabledProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_DeviceWallpaperImageProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_LoginScreenLocalesProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_LoginScreenInputMethodsProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_DeviceEcryptfsMigrationStrategyProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_DeviceSecondFactorAuthenticationProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_CastReceiverNameProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_DeviceOffHoursProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_DeviceNativePrintersProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_DeviceNativePrintersAccessModeProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_DeviceNativePrintersBlacklistProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_DeviceNativePrintersWhitelistProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_TPMFirmwareUpdateSettingsProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_OBSOLETE_MinimumRequiredVersionProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_DeviceLoginScreenAutoSelectCertificateForUrls_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_UnaffiliatedArcAllowedProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_NetworkHostnameProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_DeviceKerberosEncryptionTypesProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_DeviceUserPolicyLoopbackProcessingModeProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_DeviceLoginScreenIsolateOriginsProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_DeviceLoginScreenSitePerProcessProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_VirtualMachinesAllowedProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_DeviceMachinePasswordChangeRateProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_SamlLoginAuthenticationTypeProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_DeviceUnaffiliatedCrostiniAllowedProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_DeviceWiFiFastTransitionEnabledProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_DeviceDisplayResolutionProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_PluginVmAllowedProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_DeviceGpoCacheLifetimeProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_DeviceAuthDataCacheLifetimeProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_PluginVmLicenseKeyProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_DeviceRebootOnUserSignoutProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_DeviceWilcoDtcAllowedProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_DeviceWilcoDtcConfigurationProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_DeviceWiFiAllowedProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_DevicePowerPeakShiftProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_DeviceBootOnAcProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_DeviceDockMacAddressSourceProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_DeviceAdvancedBatteryChargeModeProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_DeviceBatteryChargeModeProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_DeviceUsbPowerShareProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_DeviceScheduledUpdateCheckProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_DevicePowerwashAllowedProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_DeviceLoginScreenWebUsbAllowDevicesForUrlsProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_BooleanPolicyProto_policy_5fcommon_5fdefinitions_2eproto.base,
      &scc_info_StringListPolicyProto_policy_5fcommon_5fdefinitions_2eproto.base,
      &scc_info_StringPolicyProto_policy_5fcommon_5fdefinitions_2eproto.base,
      &scc_info_SystemProxySettingsProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_IntegerPolicyProto_policy_5fcommon_5fdefinitions_2eproto.base,
      &scc_info_DeviceLoginScreenPrivacyScreenEnabledProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_RequiredClientCertificateForDeviceProto_chrome_5fdevice_5fpolicy_2eproto.base,}};

static void InitDefaultsscc_info_DataRoamingEnabledProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DataRoamingEnabledProto_default_instance_;
    new (ptr) ::enterprise_management::DataRoamingEnabledProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DataRoamingEnabledProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataRoamingEnabledProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DataRoamingEnabledProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_DeviceAdvancedBatteryChargeModeProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceAdvancedBatteryChargeModeProto_default_instance_;
    new (ptr) ::enterprise_management::DeviceAdvancedBatteryChargeModeProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceAdvancedBatteryChargeModeProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceAdvancedBatteryChargeModeProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceAdvancedBatteryChargeModeProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_DeviceAuthDataCacheLifetimeProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceAuthDataCacheLifetimeProto_default_instance_;
    new (ptr) ::enterprise_management::DeviceAuthDataCacheLifetimeProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceAuthDataCacheLifetimeProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceAuthDataCacheLifetimeProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceAuthDataCacheLifetimeProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_DeviceBatteryChargeModeProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceBatteryChargeModeProto_default_instance_;
    new (ptr) ::enterprise_management::DeviceBatteryChargeModeProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceBatteryChargeModeProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceBatteryChargeModeProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceBatteryChargeModeProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_DeviceBootOnAcProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceBootOnAcProto_default_instance_;
    new (ptr) ::enterprise_management::DeviceBootOnAcProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceBootOnAcProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceBootOnAcProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceBootOnAcProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_DeviceDisplayResolutionProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceDisplayResolutionProto_default_instance_;
    new (ptr) ::enterprise_management::DeviceDisplayResolutionProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceDisplayResolutionProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceDisplayResolutionProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceDisplayResolutionProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_DeviceDockMacAddressSourceProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceDockMacAddressSourceProto_default_instance_;
    new (ptr) ::enterprise_management::DeviceDockMacAddressSourceProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceDockMacAddressSourceProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceDockMacAddressSourceProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceDockMacAddressSourceProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_DeviceEcryptfsMigrationStrategyProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceEcryptfsMigrationStrategyProto_default_instance_;
    new (ptr) ::enterprise_management::DeviceEcryptfsMigrationStrategyProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceEcryptfsMigrationStrategyProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceEcryptfsMigrationStrategyProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceEcryptfsMigrationStrategyProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_DeviceGpoCacheLifetimeProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceGpoCacheLifetimeProto_default_instance_;
    new (ptr) ::enterprise_management::DeviceGpoCacheLifetimeProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceGpoCacheLifetimeProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceGpoCacheLifetimeProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceGpoCacheLifetimeProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_DeviceHeartbeatSettingsProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceHeartbeatSettingsProto_default_instance_;
    new (ptr) ::enterprise_management::DeviceHeartbeatSettingsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceHeartbeatSettingsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceHeartbeatSettingsProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceHeartbeatSettingsProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_DeviceKerberosEncryptionTypesProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceKerberosEncryptionTypesProto_default_instance_;
    new (ptr) ::enterprise_management::DeviceKerberosEncryptionTypesProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceKerberosEncryptionTypesProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceKerberosEncryptionTypesProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceKerberosEncryptionTypesProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_DeviceLocalAccountInfoProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceLocalAccountInfoProto_default_instance_;
    new (ptr) ::enterprise_management::DeviceLocalAccountInfoProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceLocalAccountInfoProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DeviceLocalAccountInfoProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_DeviceLocalAccountInfoProto_chrome_5fdevice_5fpolicy_2eproto}, {
      &scc_info_KioskAppInfoProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_AndroidKioskAppInfoProto_chrome_5fdevice_5fpolicy_2eproto.base,
      &scc_info_WebKioskAppInfoProto_chrome_5fdevice_5fpolicy_2eproto.base,}};

static void InitDefaultsscc_info_DeviceLocalAccountsProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceLocalAccountsProto_default_instance_;
    new (ptr) ::enterprise_management::DeviceLocalAccountsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceLocalAccountsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeviceLocalAccountsProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeviceLocalAccountsProto_chrome_5fdevice_5fpolicy_2eproto}, {
      &scc_info_DeviceLocalAccountInfoProto_chrome_5fdevice_5fpolicy_2eproto.base,}};

static void InitDefaultsscc_info_DeviceLogUploadSettingsProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceLogUploadSettingsProto_default_instance_;
    new (ptr) ::enterprise_management::DeviceLogUploadSettingsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceLogUploadSettingsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceLogUploadSettingsProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceLogUploadSettingsProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_DeviceLoginScreenAutoSelectCertificateForUrls_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceLoginScreenAutoSelectCertificateForUrls_default_instance_;
    new (ptr) ::enterprise_management::DeviceLoginScreenAutoSelectCertificateForUrls();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceLoginScreenAutoSelectCertificateForUrls::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceLoginScreenAutoSelectCertificateForUrls_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceLoginScreenAutoSelectCertificateForUrls_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_DeviceLoginScreenExtensionsProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceLoginScreenExtensionsProto_default_instance_;
    new (ptr) ::enterprise_management::DeviceLoginScreenExtensionsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceLoginScreenExtensionsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceLoginScreenExtensionsProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceLoginScreenExtensionsProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_DeviceLoginScreenIsolateOriginsProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceLoginScreenIsolateOriginsProto_default_instance_;
    new (ptr) ::enterprise_management::DeviceLoginScreenIsolateOriginsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceLoginScreenIsolateOriginsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceLoginScreenIsolateOriginsProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceLoginScreenIsolateOriginsProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_DeviceLoginScreenPrivacyScreenEnabledProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceLoginScreenPrivacyScreenEnabledProto_default_instance_;
    new (ptr) ::enterprise_management::DeviceLoginScreenPrivacyScreenEnabledProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceLoginScreenPrivacyScreenEnabledProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceLoginScreenPrivacyScreenEnabledProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceLoginScreenPrivacyScreenEnabledProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_DeviceLoginScreenSitePerProcessProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceLoginScreenSitePerProcessProto_default_instance_;
    new (ptr) ::enterprise_management::DeviceLoginScreenSitePerProcessProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceLoginScreenSitePerProcessProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceLoginScreenSitePerProcessProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceLoginScreenSitePerProcessProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_DeviceLoginScreenWebUsbAllowDevicesForUrlsProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceLoginScreenWebUsbAllowDevicesForUrlsProto_default_instance_;
    new (ptr) ::enterprise_management::DeviceLoginScreenWebUsbAllowDevicesForUrlsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceLoginScreenWebUsbAllowDevicesForUrlsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceLoginScreenWebUsbAllowDevicesForUrlsProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceLoginScreenWebUsbAllowDevicesForUrlsProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_DeviceMachinePasswordChangeRateProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceMachinePasswordChangeRateProto_default_instance_;
    new (ptr) ::enterprise_management::DeviceMachinePasswordChangeRateProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceMachinePasswordChangeRateProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceMachinePasswordChangeRateProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceMachinePasswordChangeRateProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_DeviceNativePrintersAccessModeProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceNativePrintersAccessModeProto_default_instance_;
    new (ptr) ::enterprise_management::DeviceNativePrintersAccessModeProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceNativePrintersAccessModeProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceNativePrintersAccessModeProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceNativePrintersAccessModeProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_DeviceNativePrintersBlacklistProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceNativePrintersBlacklistProto_default_instance_;
    new (ptr) ::enterprise_management::DeviceNativePrintersBlacklistProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceNativePrintersBlacklistProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceNativePrintersBlacklistProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceNativePrintersBlacklistProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_DeviceNativePrintersProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceNativePrintersProto_default_instance_;
    new (ptr) ::enterprise_management::DeviceNativePrintersProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceNativePrintersProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceNativePrintersProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceNativePrintersProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_DeviceNativePrintersWhitelistProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceNativePrintersWhitelistProto_default_instance_;
    new (ptr) ::enterprise_management::DeviceNativePrintersWhitelistProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceNativePrintersWhitelistProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceNativePrintersWhitelistProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceNativePrintersWhitelistProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_DeviceOffHoursProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceOffHoursProto_default_instance_;
    new (ptr) ::enterprise_management::DeviceOffHoursProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceOffHoursProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeviceOffHoursProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeviceOffHoursProto_chrome_5fdevice_5fpolicy_2eproto}, {
      &scc_info_WeeklyTimeIntervalProto_chrome_5fdevice_5fpolicy_2eproto.base,}};

static void InitDefaultsscc_info_DeviceOpenNetworkConfigurationProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceOpenNetworkConfigurationProto_default_instance_;
    new (ptr) ::enterprise_management::DeviceOpenNetworkConfigurationProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceOpenNetworkConfigurationProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceOpenNetworkConfigurationProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceOpenNetworkConfigurationProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_DevicePolicyRefreshRateProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DevicePolicyRefreshRateProto_default_instance_;
    new (ptr) ::enterprise_management::DevicePolicyRefreshRateProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DevicePolicyRefreshRateProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DevicePolicyRefreshRateProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DevicePolicyRefreshRateProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_DevicePowerPeakShiftProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DevicePowerPeakShiftProto_default_instance_;
    new (ptr) ::enterprise_management::DevicePowerPeakShiftProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DevicePowerPeakShiftProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DevicePowerPeakShiftProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DevicePowerPeakShiftProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_DevicePowerwashAllowedProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DevicePowerwashAllowedProto_default_instance_;
    new (ptr) ::enterprise_management::DevicePowerwashAllowedProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DevicePowerwashAllowedProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DevicePowerwashAllowedProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DevicePowerwashAllowedProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_DeviceQuirksDownloadEnabledProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceQuirksDownloadEnabledProto_default_instance_;
    new (ptr) ::enterprise_management::DeviceQuirksDownloadEnabledProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceQuirksDownloadEnabledProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceQuirksDownloadEnabledProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceQuirksDownloadEnabledProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_DeviceRebootOnUserSignoutProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceRebootOnUserSignoutProto_default_instance_;
    new (ptr) ::enterprise_management::DeviceRebootOnUserSignoutProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceRebootOnUserSignoutProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceRebootOnUserSignoutProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceRebootOnUserSignoutProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_DeviceReportingProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceReportingProto_default_instance_;
    new (ptr) ::enterprise_management::DeviceReportingProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceReportingProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceReportingProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceReportingProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_DeviceScheduledUpdateCheckProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceScheduledUpdateCheckProto_default_instance_;
    new (ptr) ::enterprise_management::DeviceScheduledUpdateCheckProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceScheduledUpdateCheckProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceScheduledUpdateCheckProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceScheduledUpdateCheckProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_DeviceSecondFactorAuthenticationProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceSecondFactorAuthenticationProto_default_instance_;
    new (ptr) ::enterprise_management::DeviceSecondFactorAuthenticationProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceSecondFactorAuthenticationProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceSecondFactorAuthenticationProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceSecondFactorAuthenticationProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_DeviceUnaffiliatedCrostiniAllowedProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceUnaffiliatedCrostiniAllowedProto_default_instance_;
    new (ptr) ::enterprise_management::DeviceUnaffiliatedCrostiniAllowedProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceUnaffiliatedCrostiniAllowedProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceUnaffiliatedCrostiniAllowedProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceUnaffiliatedCrostiniAllowedProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_DeviceUsbPowerShareProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceUsbPowerShareProto_default_instance_;
    new (ptr) ::enterprise_management::DeviceUsbPowerShareProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceUsbPowerShareProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceUsbPowerShareProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceUsbPowerShareProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_DeviceUserPolicyLoopbackProcessingModeProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceUserPolicyLoopbackProcessingModeProto_default_instance_;
    new (ptr) ::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceUserPolicyLoopbackProcessingModeProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceUserPolicyLoopbackProcessingModeProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_DeviceWallpaperImageProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceWallpaperImageProto_default_instance_;
    new (ptr) ::enterprise_management::DeviceWallpaperImageProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceWallpaperImageProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceWallpaperImageProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceWallpaperImageProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_DeviceWiFiAllowedProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceWiFiAllowedProto_default_instance_;
    new (ptr) ::enterprise_management::DeviceWiFiAllowedProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceWiFiAllowedProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceWiFiAllowedProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceWiFiAllowedProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_DeviceWiFiFastTransitionEnabledProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceWiFiFastTransitionEnabledProto_default_instance_;
    new (ptr) ::enterprise_management::DeviceWiFiFastTransitionEnabledProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceWiFiFastTransitionEnabledProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceWiFiFastTransitionEnabledProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceWiFiFastTransitionEnabledProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_DeviceWilcoDtcAllowedProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceWilcoDtcAllowedProto_default_instance_;
    new (ptr) ::enterprise_management::DeviceWilcoDtcAllowedProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceWilcoDtcAllowedProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceWilcoDtcAllowedProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceWilcoDtcAllowedProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_DeviceWilcoDtcConfigurationProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DeviceWilcoDtcConfigurationProto_default_instance_;
    new (ptr) ::enterprise_management::DeviceWilcoDtcConfigurationProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DeviceWilcoDtcConfigurationProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceWilcoDtcConfigurationProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceWilcoDtcConfigurationProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_DisplayRotationDefaultProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_DisplayRotationDefaultProto_default_instance_;
    new (ptr) ::enterprise_management::DisplayRotationDefaultProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::DisplayRotationDefaultProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisplayRotationDefaultProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DisplayRotationDefaultProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_EphemeralUsersEnabledProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_EphemeralUsersEnabledProto_default_instance_;
    new (ptr) ::enterprise_management::EphemeralUsersEnabledProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::EphemeralUsersEnabledProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EphemeralUsersEnabledProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EphemeralUsersEnabledProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_ExtensionCacheSizeProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_ExtensionCacheSizeProto_default_instance_;
    new (ptr) ::enterprise_management::ExtensionCacheSizeProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::ExtensionCacheSizeProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExtensionCacheSizeProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ExtensionCacheSizeProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_GuestModeEnabledProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_GuestModeEnabledProto_default_instance_;
    new (ptr) ::enterprise_management::GuestModeEnabledProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::GuestModeEnabledProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GuestModeEnabledProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GuestModeEnabledProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_KioskAppInfoProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_KioskAppInfoProto_default_instance_;
    new (ptr) ::enterprise_management::KioskAppInfoProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::KioskAppInfoProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KioskAppInfoProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KioskAppInfoProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_LoginAuthenticationBehaviorProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_LoginAuthenticationBehaviorProto_default_instance_;
    new (ptr) ::enterprise_management::LoginAuthenticationBehaviorProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::LoginAuthenticationBehaviorProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginAuthenticationBehaviorProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginAuthenticationBehaviorProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_LoginScreenDomainAutoCompleteProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_LoginScreenDomainAutoCompleteProto_default_instance_;
    new (ptr) ::enterprise_management::LoginScreenDomainAutoCompleteProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::LoginScreenDomainAutoCompleteProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginScreenDomainAutoCompleteProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginScreenDomainAutoCompleteProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_LoginScreenInputMethodsProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_LoginScreenInputMethodsProto_default_instance_;
    new (ptr) ::enterprise_management::LoginScreenInputMethodsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::LoginScreenInputMethodsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginScreenInputMethodsProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginScreenInputMethodsProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_LoginScreenLocalesProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_LoginScreenLocalesProto_default_instance_;
    new (ptr) ::enterprise_management::LoginScreenLocalesProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::LoginScreenLocalesProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginScreenLocalesProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginScreenLocalesProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_LoginScreenPowerManagementProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_LoginScreenPowerManagementProto_default_instance_;
    new (ptr) ::enterprise_management::LoginScreenPowerManagementProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::LoginScreenPowerManagementProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginScreenPowerManagementProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginScreenPowerManagementProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_LoginVideoCaptureAllowedUrlsProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_LoginVideoCaptureAllowedUrlsProto_default_instance_;
    new (ptr) ::enterprise_management::LoginVideoCaptureAllowedUrlsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::LoginVideoCaptureAllowedUrlsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginVideoCaptureAllowedUrlsProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginVideoCaptureAllowedUrlsProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_MetricsEnabledProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_MetricsEnabledProto_default_instance_;
    new (ptr) ::enterprise_management::MetricsEnabledProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::MetricsEnabledProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MetricsEnabledProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MetricsEnabledProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_NetworkHostnameProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_NetworkHostnameProto_default_instance_;
    new (ptr) ::enterprise_management::NetworkHostnameProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::NetworkHostnameProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkHostnameProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NetworkHostnameProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_NetworkThrottlingEnabledProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_NetworkThrottlingEnabledProto_default_instance_;
    new (ptr) ::enterprise_management::NetworkThrottlingEnabledProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::NetworkThrottlingEnabledProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkThrottlingEnabledProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NetworkThrottlingEnabledProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_OBSOLETE_AppPackEntryProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_OBSOLETE_AppPackEntryProto_default_instance_;
    new (ptr) ::enterprise_management::OBSOLETE_AppPackEntryProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::OBSOLETE_AppPackEntryProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OBSOLETE_AppPackEntryProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OBSOLETE_AppPackEntryProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_OBSOLETE_AppPackProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_OBSOLETE_AppPackProto_default_instance_;
    new (ptr) ::enterprise_management::OBSOLETE_AppPackProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::OBSOLETE_AppPackProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OBSOLETE_AppPackProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OBSOLETE_AppPackProto_chrome_5fdevice_5fpolicy_2eproto}, {
      &scc_info_OBSOLETE_AppPackEntryProto_chrome_5fdevice_5fpolicy_2eproto.base,}};

static void InitDefaultsscc_info_OBSOLETE_DeviceProxySettingsProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_OBSOLETE_DeviceProxySettingsProto_default_instance_;
    new (ptr) ::enterprise_management::OBSOLETE_DeviceProxySettingsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::OBSOLETE_DeviceProxySettingsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OBSOLETE_DeviceProxySettingsProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OBSOLETE_DeviceProxySettingsProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_OBSOLETE_ForcedLogoutTimeoutsProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_OBSOLETE_ForcedLogoutTimeoutsProto_default_instance_;
    new (ptr) ::enterprise_management::OBSOLETE_ForcedLogoutTimeoutsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::OBSOLETE_ForcedLogoutTimeoutsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OBSOLETE_ForcedLogoutTimeoutsProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OBSOLETE_ForcedLogoutTimeoutsProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_OBSOLETE_MinimumRequiredVersionProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_OBSOLETE_MinimumRequiredVersionProto_default_instance_;
    new (ptr) ::enterprise_management::OBSOLETE_MinimumRequiredVersionProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::OBSOLETE_MinimumRequiredVersionProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OBSOLETE_MinimumRequiredVersionProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OBSOLETE_MinimumRequiredVersionProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_OBSOLETE_PinnedAppsProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_OBSOLETE_PinnedAppsProto_default_instance_;
    new (ptr) ::enterprise_management::OBSOLETE_PinnedAppsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::OBSOLETE_PinnedAppsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OBSOLETE_PinnedAppsProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OBSOLETE_PinnedAppsProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_OBSOLETE_ScreenSaverProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_OBSOLETE_ScreenSaverProto_default_instance_;
    new (ptr) ::enterprise_management::OBSOLETE_ScreenSaverProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::OBSOLETE_ScreenSaverProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OBSOLETE_ScreenSaverProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OBSOLETE_ScreenSaverProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_OBSOLETE_StartUpUrlsProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_OBSOLETE_StartUpUrlsProto_default_instance_;
    new (ptr) ::enterprise_management::OBSOLETE_StartUpUrlsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::OBSOLETE_StartUpUrlsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OBSOLETE_StartUpUrlsProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OBSOLETE_StartUpUrlsProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_OBSOLETE_SupervisedUsersSettingsProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_OBSOLETE_SupervisedUsersSettingsProto_default_instance_;
    new (ptr) ::enterprise_management::OBSOLETE_SupervisedUsersSettingsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::OBSOLETE_SupervisedUsersSettingsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OBSOLETE_SupervisedUsersSettingsProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OBSOLETE_SupervisedUsersSettingsProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_PluginVmAllowedProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_PluginVmAllowedProto_default_instance_;
    new (ptr) ::enterprise_management::PluginVmAllowedProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::PluginVmAllowedProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PluginVmAllowedProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PluginVmAllowedProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_PluginVmLicenseKeyProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_PluginVmLicenseKeyProto_default_instance_;
    new (ptr) ::enterprise_management::PluginVmLicenseKeyProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::PluginVmLicenseKeyProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PluginVmLicenseKeyProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PluginVmLicenseKeyProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_RebootOnShutdownProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_RebootOnShutdownProto_default_instance_;
    new (ptr) ::enterprise_management::RebootOnShutdownProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::RebootOnShutdownProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RebootOnShutdownProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RebootOnShutdownProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_ReleaseChannelProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_ReleaseChannelProto_default_instance_;
    new (ptr) ::enterprise_management::ReleaseChannelProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::ReleaseChannelProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReleaseChannelProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReleaseChannelProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_RequiredClientCertificateForDeviceProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_RequiredClientCertificateForDeviceProto_default_instance_;
    new (ptr) ::enterprise_management::RequiredClientCertificateForDeviceProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::RequiredClientCertificateForDeviceProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequiredClientCertificateForDeviceProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequiredClientCertificateForDeviceProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_SAMLSettingsProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_SAMLSettingsProto_default_instance_;
    new (ptr) ::enterprise_management::SAMLSettingsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::SAMLSettingsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SAMLSettingsProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SAMLSettingsProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_SamlLoginAuthenticationTypeProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_SamlLoginAuthenticationTypeProto_default_instance_;
    new (ptr) ::enterprise_management::SamlLoginAuthenticationTypeProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::SamlLoginAuthenticationTypeProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SamlLoginAuthenticationTypeProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SamlLoginAuthenticationTypeProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_ShowUserNamesOnSigninProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_ShowUserNamesOnSigninProto_default_instance_;
    new (ptr) ::enterprise_management::ShowUserNamesOnSigninProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::ShowUserNamesOnSigninProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShowUserNamesOnSigninProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShowUserNamesOnSigninProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_StartUpFlagsProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_StartUpFlagsProto_default_instance_;
    new (ptr) ::enterprise_management::StartUpFlagsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::StartUpFlagsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartUpFlagsProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StartUpFlagsProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_SystemProxySettingsProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_SystemProxySettingsProto_default_instance_;
    new (ptr) ::enterprise_management::SystemProxySettingsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::SystemProxySettingsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemProxySettingsProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SystemProxySettingsProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_SystemSettingsProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_SystemSettingsProto_default_instance_;
    new (ptr) ::enterprise_management::SystemSettingsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::SystemSettingsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemSettingsProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SystemSettingsProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_SystemTimezoneProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_SystemTimezoneProto_default_instance_;
    new (ptr) ::enterprise_management::SystemTimezoneProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::SystemTimezoneProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemTimezoneProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SystemTimezoneProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_SystemUse24HourClockProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_SystemUse24HourClockProto_default_instance_;
    new (ptr) ::enterprise_management::SystemUse24HourClockProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::SystemUse24HourClockProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemUse24HourClockProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SystemUse24HourClockProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_TPMFirmwareUpdateSettingsProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_TPMFirmwareUpdateSettingsProto_default_instance_;
    new (ptr) ::enterprise_management::TPMFirmwareUpdateSettingsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::TPMFirmwareUpdateSettingsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TPMFirmwareUpdateSettingsProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TPMFirmwareUpdateSettingsProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_UnaffiliatedArcAllowedProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_UnaffiliatedArcAllowedProto_default_instance_;
    new (ptr) ::enterprise_management::UnaffiliatedArcAllowedProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::UnaffiliatedArcAllowedProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnaffiliatedArcAllowedProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnaffiliatedArcAllowedProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_UptimeLimitProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_UptimeLimitProto_default_instance_;
    new (ptr) ::enterprise_management::UptimeLimitProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::UptimeLimitProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UptimeLimitProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UptimeLimitProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_UsbDetachableWhitelistProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_UsbDetachableWhitelistProto_default_instance_;
    new (ptr) ::enterprise_management::UsbDetachableWhitelistProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::UsbDetachableWhitelistProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UsbDetachableWhitelistProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UsbDetachableWhitelistProto_chrome_5fdevice_5fpolicy_2eproto}, {
      &scc_info_UsbDeviceIdProto_chrome_5fdevice_5fpolicy_2eproto.base,}};

static void InitDefaultsscc_info_UsbDeviceIdProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_UsbDeviceIdProto_default_instance_;
    new (ptr) ::enterprise_management::UsbDeviceIdProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::UsbDeviceIdProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UsbDeviceIdProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UsbDeviceIdProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_UserWhitelistProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_UserWhitelistProto_default_instance_;
    new (ptr) ::enterprise_management::UserWhitelistProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::UserWhitelistProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserWhitelistProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserWhitelistProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_VariationsParameterProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_VariationsParameterProto_default_instance_;
    new (ptr) ::enterprise_management::VariationsParameterProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::VariationsParameterProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VariationsParameterProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VariationsParameterProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_VirtualMachinesAllowedProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_VirtualMachinesAllowedProto_default_instance_;
    new (ptr) ::enterprise_management::VirtualMachinesAllowedProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::VirtualMachinesAllowedProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VirtualMachinesAllowedProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VirtualMachinesAllowedProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_WebKioskAppInfoProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_WebKioskAppInfoProto_default_instance_;
    new (ptr) ::enterprise_management::WebKioskAppInfoProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::WebKioskAppInfoProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WebKioskAppInfoProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WebKioskAppInfoProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_WeeklyTimeIntervalProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_WeeklyTimeIntervalProto_default_instance_;
    new (ptr) ::enterprise_management::WeeklyTimeIntervalProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::WeeklyTimeIntervalProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WeeklyTimeIntervalProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WeeklyTimeIntervalProto_chrome_5fdevice_5fpolicy_2eproto}, {
      &scc_info_WeeklyTimeProto_chrome_5fdevice_5fpolicy_2eproto.base,}};

static void InitDefaultsscc_info_WeeklyTimeProto_chrome_5fdevice_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_WeeklyTimeProto_default_instance_;
    new (ptr) ::enterprise_management::WeeklyTimeProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::WeeklyTimeProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WeeklyTimeProto_chrome_5fdevice_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WeeklyTimeProto_chrome_5fdevice_5fpolicy_2eproto}, {}};

namespace enterprise_management {
bool AutoUpdateSettingsProto_ConnectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AutoUpdateSettingsProto_ConnectionType_strings[4] = {};

static const char AutoUpdateSettingsProto_ConnectionType_names[] =
  "CONNECTION_TYPE_BLUETOOTH"
  "CONNECTION_TYPE_CELLULAR"
  "CONNECTION_TYPE_ETHERNET"
  "CONNECTION_TYPE_WIFI";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AutoUpdateSettingsProto_ConnectionType_entries[] = {
  { {AutoUpdateSettingsProto_ConnectionType_names + 0, 25}, 3 },
  { {AutoUpdateSettingsProto_ConnectionType_names + 25, 24}, 4 },
  { {AutoUpdateSettingsProto_ConnectionType_names + 49, 24}, 0 },
  { {AutoUpdateSettingsProto_ConnectionType_names + 73, 20}, 1 },
};

static const int AutoUpdateSettingsProto_ConnectionType_entries_by_number[] = {
  2, // 0 -> CONNECTION_TYPE_ETHERNET
  3, // 1 -> CONNECTION_TYPE_WIFI
  0, // 3 -> CONNECTION_TYPE_BLUETOOTH
  1, // 4 -> CONNECTION_TYPE_CELLULAR
};

const std::string& AutoUpdateSettingsProto_ConnectionType_Name(
    AutoUpdateSettingsProto_ConnectionType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AutoUpdateSettingsProto_ConnectionType_entries,
          AutoUpdateSettingsProto_ConnectionType_entries_by_number,
          4, AutoUpdateSettingsProto_ConnectionType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AutoUpdateSettingsProto_ConnectionType_entries,
      AutoUpdateSettingsProto_ConnectionType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AutoUpdateSettingsProto_ConnectionType_strings[idx].get();
}
bool AutoUpdateSettingsProto_ConnectionType_Parse(
    const std::string& name, AutoUpdateSettingsProto_ConnectionType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AutoUpdateSettingsProto_ConnectionType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<AutoUpdateSettingsProto_ConnectionType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AutoUpdateSettingsProto_ConnectionType AutoUpdateSettingsProto::CONNECTION_TYPE_ETHERNET;
constexpr AutoUpdateSettingsProto_ConnectionType AutoUpdateSettingsProto::CONNECTION_TYPE_WIFI;
constexpr AutoUpdateSettingsProto_ConnectionType AutoUpdateSettingsProto::CONNECTION_TYPE_BLUETOOTH;
constexpr AutoUpdateSettingsProto_ConnectionType AutoUpdateSettingsProto::CONNECTION_TYPE_CELLULAR;
constexpr AutoUpdateSettingsProto_ConnectionType AutoUpdateSettingsProto::ConnectionType_MIN;
constexpr AutoUpdateSettingsProto_ConnectionType AutoUpdateSettingsProto::ConnectionType_MAX;
constexpr int AutoUpdateSettingsProto::ConnectionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool AutoUpdateSettingsProto_RollbackToTargetVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AutoUpdateSettingsProto_RollbackToTargetVersion_strings[4] = {};

static const char AutoUpdateSettingsProto_RollbackToTargetVersion_names[] =
  "ROLLBACK_AND_POWERWASH"
  "ROLLBACK_AND_RESTORE_IF_POSSIBLE"
  "ROLLBACK_DISABLED"
  "ROLLBACK_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AutoUpdateSettingsProto_RollbackToTargetVersion_entries[] = {
  { {AutoUpdateSettingsProto_RollbackToTargetVersion_names + 0, 22}, 2 },
  { {AutoUpdateSettingsProto_RollbackToTargetVersion_names + 22, 32}, 3 },
  { {AutoUpdateSettingsProto_RollbackToTargetVersion_names + 54, 17}, 1 },
  { {AutoUpdateSettingsProto_RollbackToTargetVersion_names + 71, 20}, 0 },
};

static const int AutoUpdateSettingsProto_RollbackToTargetVersion_entries_by_number[] = {
  3, // 0 -> ROLLBACK_UNSPECIFIED
  2, // 1 -> ROLLBACK_DISABLED
  0, // 2 -> ROLLBACK_AND_POWERWASH
  1, // 3 -> ROLLBACK_AND_RESTORE_IF_POSSIBLE
};

const std::string& AutoUpdateSettingsProto_RollbackToTargetVersion_Name(
    AutoUpdateSettingsProto_RollbackToTargetVersion value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AutoUpdateSettingsProto_RollbackToTargetVersion_entries,
          AutoUpdateSettingsProto_RollbackToTargetVersion_entries_by_number,
          4, AutoUpdateSettingsProto_RollbackToTargetVersion_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AutoUpdateSettingsProto_RollbackToTargetVersion_entries,
      AutoUpdateSettingsProto_RollbackToTargetVersion_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AutoUpdateSettingsProto_RollbackToTargetVersion_strings[idx].get();
}
bool AutoUpdateSettingsProto_RollbackToTargetVersion_Parse(
    const std::string& name, AutoUpdateSettingsProto_RollbackToTargetVersion* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AutoUpdateSettingsProto_RollbackToTargetVersion_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<AutoUpdateSettingsProto_RollbackToTargetVersion>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AutoUpdateSettingsProto_RollbackToTargetVersion AutoUpdateSettingsProto::ROLLBACK_UNSPECIFIED;
constexpr AutoUpdateSettingsProto_RollbackToTargetVersion AutoUpdateSettingsProto::ROLLBACK_DISABLED;
constexpr AutoUpdateSettingsProto_RollbackToTargetVersion AutoUpdateSettingsProto::ROLLBACK_AND_POWERWASH;
constexpr AutoUpdateSettingsProto_RollbackToTargetVersion AutoUpdateSettingsProto::ROLLBACK_AND_RESTORE_IF_POSSIBLE;
constexpr AutoUpdateSettingsProto_RollbackToTargetVersion AutoUpdateSettingsProto::RollbackToTargetVersion_MIN;
constexpr AutoUpdateSettingsProto_RollbackToTargetVersion AutoUpdateSettingsProto::RollbackToTargetVersion_MAX;
constexpr int AutoUpdateSettingsProto::RollbackToTargetVersion_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool SystemTimezoneProto_AutomaticTimezoneDetectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SystemTimezoneProto_AutomaticTimezoneDetectionType_strings[5] = {};

static const char SystemTimezoneProto_AutomaticTimezoneDetectionType_names[] =
  "DISABLED"
  "IP_ONLY"
  "SEND_ALL_LOCATION_INFO"
  "SEND_WIFI_ACCESS_POINTS"
  "USERS_DECIDE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SystemTimezoneProto_AutomaticTimezoneDetectionType_entries[] = {
  { {SystemTimezoneProto_AutomaticTimezoneDetectionType_names + 0, 8}, 1 },
  { {SystemTimezoneProto_AutomaticTimezoneDetectionType_names + 8, 7}, 2 },
  { {SystemTimezoneProto_AutomaticTimezoneDetectionType_names + 15, 22}, 4 },
  { {SystemTimezoneProto_AutomaticTimezoneDetectionType_names + 37, 23}, 3 },
  { {SystemTimezoneProto_AutomaticTimezoneDetectionType_names + 60, 12}, 0 },
};

static const int SystemTimezoneProto_AutomaticTimezoneDetectionType_entries_by_number[] = {
  4, // 0 -> USERS_DECIDE
  0, // 1 -> DISABLED
  1, // 2 -> IP_ONLY
  3, // 3 -> SEND_WIFI_ACCESS_POINTS
  2, // 4 -> SEND_ALL_LOCATION_INFO
};

const std::string& SystemTimezoneProto_AutomaticTimezoneDetectionType_Name(
    SystemTimezoneProto_AutomaticTimezoneDetectionType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SystemTimezoneProto_AutomaticTimezoneDetectionType_entries,
          SystemTimezoneProto_AutomaticTimezoneDetectionType_entries_by_number,
          5, SystemTimezoneProto_AutomaticTimezoneDetectionType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SystemTimezoneProto_AutomaticTimezoneDetectionType_entries,
      SystemTimezoneProto_AutomaticTimezoneDetectionType_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SystemTimezoneProto_AutomaticTimezoneDetectionType_strings[idx].get();
}
bool SystemTimezoneProto_AutomaticTimezoneDetectionType_Parse(
    const std::string& name, SystemTimezoneProto_AutomaticTimezoneDetectionType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SystemTimezoneProto_AutomaticTimezoneDetectionType_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<SystemTimezoneProto_AutomaticTimezoneDetectionType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SystemTimezoneProto_AutomaticTimezoneDetectionType SystemTimezoneProto::USERS_DECIDE;
constexpr SystemTimezoneProto_AutomaticTimezoneDetectionType SystemTimezoneProto::DISABLED;
constexpr SystemTimezoneProto_AutomaticTimezoneDetectionType SystemTimezoneProto::IP_ONLY;
constexpr SystemTimezoneProto_AutomaticTimezoneDetectionType SystemTimezoneProto::SEND_WIFI_ACCESS_POINTS;
constexpr SystemTimezoneProto_AutomaticTimezoneDetectionType SystemTimezoneProto::SEND_ALL_LOCATION_INFO;
constexpr SystemTimezoneProto_AutomaticTimezoneDetectionType SystemTimezoneProto::AutomaticTimezoneDetectionType_MIN;
constexpr SystemTimezoneProto_AutomaticTimezoneDetectionType SystemTimezoneProto::AutomaticTimezoneDetectionType_MAX;
constexpr int SystemTimezoneProto::AutomaticTimezoneDetectionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DeviceLocalAccountInfoProto_AccountType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DeviceLocalAccountInfoProto_AccountType_strings[5] = {};

static const char DeviceLocalAccountInfoProto_AccountType_names[] =
  "ACCOUNT_TYPE_KIOSK_ANDROID_APP"
  "ACCOUNT_TYPE_KIOSK_APP"
  "ACCOUNT_TYPE_PUBLIC_SESSION"
  "ACCOUNT_TYPE_SAML_PUBLIC_SESSION"
  "ACCOUNT_TYPE_WEB_KIOSK_APP";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DeviceLocalAccountInfoProto_AccountType_entries[] = {
  { {DeviceLocalAccountInfoProto_AccountType_names + 0, 30}, 2 },
  { {DeviceLocalAccountInfoProto_AccountType_names + 30, 22}, 1 },
  { {DeviceLocalAccountInfoProto_AccountType_names + 52, 27}, 0 },
  { {DeviceLocalAccountInfoProto_AccountType_names + 79, 32}, 3 },
  { {DeviceLocalAccountInfoProto_AccountType_names + 111, 26}, 4 },
};

static const int DeviceLocalAccountInfoProto_AccountType_entries_by_number[] = {
  2, // 0 -> ACCOUNT_TYPE_PUBLIC_SESSION
  1, // 1 -> ACCOUNT_TYPE_KIOSK_APP
  0, // 2 -> ACCOUNT_TYPE_KIOSK_ANDROID_APP
  3, // 3 -> ACCOUNT_TYPE_SAML_PUBLIC_SESSION
  4, // 4 -> ACCOUNT_TYPE_WEB_KIOSK_APP
};

const std::string& DeviceLocalAccountInfoProto_AccountType_Name(
    DeviceLocalAccountInfoProto_AccountType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DeviceLocalAccountInfoProto_AccountType_entries,
          DeviceLocalAccountInfoProto_AccountType_entries_by_number,
          5, DeviceLocalAccountInfoProto_AccountType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DeviceLocalAccountInfoProto_AccountType_entries,
      DeviceLocalAccountInfoProto_AccountType_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DeviceLocalAccountInfoProto_AccountType_strings[idx].get();
}
bool DeviceLocalAccountInfoProto_AccountType_Parse(
    const std::string& name, DeviceLocalAccountInfoProto_AccountType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DeviceLocalAccountInfoProto_AccountType_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<DeviceLocalAccountInfoProto_AccountType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DeviceLocalAccountInfoProto_AccountType DeviceLocalAccountInfoProto::ACCOUNT_TYPE_PUBLIC_SESSION;
constexpr DeviceLocalAccountInfoProto_AccountType DeviceLocalAccountInfoProto::ACCOUNT_TYPE_KIOSK_APP;
constexpr DeviceLocalAccountInfoProto_AccountType DeviceLocalAccountInfoProto::ACCOUNT_TYPE_KIOSK_ANDROID_APP;
constexpr DeviceLocalAccountInfoProto_AccountType DeviceLocalAccountInfoProto::ACCOUNT_TYPE_SAML_PUBLIC_SESSION;
constexpr DeviceLocalAccountInfoProto_AccountType DeviceLocalAccountInfoProto::ACCOUNT_TYPE_WEB_KIOSK_APP;
constexpr DeviceLocalAccountInfoProto_AccountType DeviceLocalAccountInfoProto::AccountType_MIN;
constexpr DeviceLocalAccountInfoProto_AccountType DeviceLocalAccountInfoProto::AccountType_MAX;
constexpr int DeviceLocalAccountInfoProto::AccountType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool AccessibilitySettingsProto_ScreenMagnifierType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AccessibilitySettingsProto_ScreenMagnifierType_strings[2] = {};

static const char AccessibilitySettingsProto_ScreenMagnifierType_names[] =
  "SCREEN_MAGNIFIER_TYPE_FULL"
  "SCREEN_MAGNIFIER_TYPE_NONE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AccessibilitySettingsProto_ScreenMagnifierType_entries[] = {
  { {AccessibilitySettingsProto_ScreenMagnifierType_names + 0, 26}, 1 },
  { {AccessibilitySettingsProto_ScreenMagnifierType_names + 26, 26}, 0 },
};

static const int AccessibilitySettingsProto_ScreenMagnifierType_entries_by_number[] = {
  1, // 0 -> SCREEN_MAGNIFIER_TYPE_NONE
  0, // 1 -> SCREEN_MAGNIFIER_TYPE_FULL
};

const std::string& AccessibilitySettingsProto_ScreenMagnifierType_Name(
    AccessibilitySettingsProto_ScreenMagnifierType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AccessibilitySettingsProto_ScreenMagnifierType_entries,
          AccessibilitySettingsProto_ScreenMagnifierType_entries_by_number,
          2, AccessibilitySettingsProto_ScreenMagnifierType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AccessibilitySettingsProto_ScreenMagnifierType_entries,
      AccessibilitySettingsProto_ScreenMagnifierType_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AccessibilitySettingsProto_ScreenMagnifierType_strings[idx].get();
}
bool AccessibilitySettingsProto_ScreenMagnifierType_Parse(
    const std::string& name, AccessibilitySettingsProto_ScreenMagnifierType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AccessibilitySettingsProto_ScreenMagnifierType_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<AccessibilitySettingsProto_ScreenMagnifierType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AccessibilitySettingsProto_ScreenMagnifierType AccessibilitySettingsProto::SCREEN_MAGNIFIER_TYPE_NONE;
constexpr AccessibilitySettingsProto_ScreenMagnifierType AccessibilitySettingsProto::SCREEN_MAGNIFIER_TYPE_FULL;
constexpr AccessibilitySettingsProto_ScreenMagnifierType AccessibilitySettingsProto::ScreenMagnifierType_MIN;
constexpr AccessibilitySettingsProto_ScreenMagnifierType AccessibilitySettingsProto::ScreenMagnifierType_MAX;
constexpr int AccessibilitySettingsProto::ScreenMagnifierType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DisplayRotationDefaultProto_Rotation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DisplayRotationDefaultProto_Rotation_strings[4] = {};

static const char DisplayRotationDefaultProto_Rotation_names[] =
  "ROTATE_0"
  "ROTATE_180"
  "ROTATE_270"
  "ROTATE_90";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DisplayRotationDefaultProto_Rotation_entries[] = {
  { {DisplayRotationDefaultProto_Rotation_names + 0, 8}, 0 },
  { {DisplayRotationDefaultProto_Rotation_names + 8, 10}, 2 },
  { {DisplayRotationDefaultProto_Rotation_names + 18, 10}, 3 },
  { {DisplayRotationDefaultProto_Rotation_names + 28, 9}, 1 },
};

static const int DisplayRotationDefaultProto_Rotation_entries_by_number[] = {
  0, // 0 -> ROTATE_0
  3, // 1 -> ROTATE_90
  1, // 2 -> ROTATE_180
  2, // 3 -> ROTATE_270
};

const std::string& DisplayRotationDefaultProto_Rotation_Name(
    DisplayRotationDefaultProto_Rotation value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DisplayRotationDefaultProto_Rotation_entries,
          DisplayRotationDefaultProto_Rotation_entries_by_number,
          4, DisplayRotationDefaultProto_Rotation_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DisplayRotationDefaultProto_Rotation_entries,
      DisplayRotationDefaultProto_Rotation_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DisplayRotationDefaultProto_Rotation_strings[idx].get();
}
bool DisplayRotationDefaultProto_Rotation_Parse(
    const std::string& name, DisplayRotationDefaultProto_Rotation* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DisplayRotationDefaultProto_Rotation_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<DisplayRotationDefaultProto_Rotation>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DisplayRotationDefaultProto_Rotation DisplayRotationDefaultProto::ROTATE_0;
constexpr DisplayRotationDefaultProto_Rotation DisplayRotationDefaultProto::ROTATE_90;
constexpr DisplayRotationDefaultProto_Rotation DisplayRotationDefaultProto::ROTATE_180;
constexpr DisplayRotationDefaultProto_Rotation DisplayRotationDefaultProto::ROTATE_270;
constexpr DisplayRotationDefaultProto_Rotation DisplayRotationDefaultProto::Rotation_MIN;
constexpr DisplayRotationDefaultProto_Rotation DisplayRotationDefaultProto::Rotation_MAX;
constexpr int DisplayRotationDefaultProto::Rotation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool LoginAuthenticationBehaviorProto_LoginBehavior_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LoginAuthenticationBehaviorProto_LoginBehavior_strings[2] = {};

static const char LoginAuthenticationBehaviorProto_LoginBehavior_names[] =
  "GAIA"
  "SAML_INTERSTITIAL";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry LoginAuthenticationBehaviorProto_LoginBehavior_entries[] = {
  { {LoginAuthenticationBehaviorProto_LoginBehavior_names + 0, 4}, 0 },
  { {LoginAuthenticationBehaviorProto_LoginBehavior_names + 4, 17}, 1 },
};

static const int LoginAuthenticationBehaviorProto_LoginBehavior_entries_by_number[] = {
  0, // 0 -> GAIA
  1, // 1 -> SAML_INTERSTITIAL
};

const std::string& LoginAuthenticationBehaviorProto_LoginBehavior_Name(
    LoginAuthenticationBehaviorProto_LoginBehavior value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          LoginAuthenticationBehaviorProto_LoginBehavior_entries,
          LoginAuthenticationBehaviorProto_LoginBehavior_entries_by_number,
          2, LoginAuthenticationBehaviorProto_LoginBehavior_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      LoginAuthenticationBehaviorProto_LoginBehavior_entries,
      LoginAuthenticationBehaviorProto_LoginBehavior_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     LoginAuthenticationBehaviorProto_LoginBehavior_strings[idx].get();
}
bool LoginAuthenticationBehaviorProto_LoginBehavior_Parse(
    const std::string& name, LoginAuthenticationBehaviorProto_LoginBehavior* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      LoginAuthenticationBehaviorProto_LoginBehavior_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<LoginAuthenticationBehaviorProto_LoginBehavior>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LoginAuthenticationBehaviorProto_LoginBehavior LoginAuthenticationBehaviorProto::GAIA;
constexpr LoginAuthenticationBehaviorProto_LoginBehavior LoginAuthenticationBehaviorProto::SAML_INTERSTITIAL;
constexpr LoginAuthenticationBehaviorProto_LoginBehavior LoginAuthenticationBehaviorProto::LoginBehavior_MIN;
constexpr LoginAuthenticationBehaviorProto_LoginBehavior LoginAuthenticationBehaviorProto::LoginBehavior_MAX;
constexpr int LoginAuthenticationBehaviorProto::LoginBehavior_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DeviceEcryptfsMigrationStrategyProto_MigrationStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DeviceEcryptfsMigrationStrategyProto_MigrationStrategy_strings[3] = {};

static const char DeviceEcryptfsMigrationStrategyProto_MigrationStrategy_names[] =
  "ALLOW_MIGRATION"
  "DISALLOW_ARC"
  "UNSET";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DeviceEcryptfsMigrationStrategyProto_MigrationStrategy_entries[] = {
  { {DeviceEcryptfsMigrationStrategyProto_MigrationStrategy_names + 0, 15}, 2 },
  { {DeviceEcryptfsMigrationStrategyProto_MigrationStrategy_names + 15, 12}, 1 },
  { {DeviceEcryptfsMigrationStrategyProto_MigrationStrategy_names + 27, 5}, 0 },
};

static const int DeviceEcryptfsMigrationStrategyProto_MigrationStrategy_entries_by_number[] = {
  2, // 0 -> UNSET
  1, // 1 -> DISALLOW_ARC
  0, // 2 -> ALLOW_MIGRATION
};

const std::string& DeviceEcryptfsMigrationStrategyProto_MigrationStrategy_Name(
    DeviceEcryptfsMigrationStrategyProto_MigrationStrategy value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DeviceEcryptfsMigrationStrategyProto_MigrationStrategy_entries,
          DeviceEcryptfsMigrationStrategyProto_MigrationStrategy_entries_by_number,
          3, DeviceEcryptfsMigrationStrategyProto_MigrationStrategy_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DeviceEcryptfsMigrationStrategyProto_MigrationStrategy_entries,
      DeviceEcryptfsMigrationStrategyProto_MigrationStrategy_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DeviceEcryptfsMigrationStrategyProto_MigrationStrategy_strings[idx].get();
}
bool DeviceEcryptfsMigrationStrategyProto_MigrationStrategy_Parse(
    const std::string& name, DeviceEcryptfsMigrationStrategyProto_MigrationStrategy* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DeviceEcryptfsMigrationStrategyProto_MigrationStrategy_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<DeviceEcryptfsMigrationStrategyProto_MigrationStrategy>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DeviceEcryptfsMigrationStrategyProto_MigrationStrategy DeviceEcryptfsMigrationStrategyProto::UNSET;
constexpr DeviceEcryptfsMigrationStrategyProto_MigrationStrategy DeviceEcryptfsMigrationStrategyProto::DISALLOW_ARC;
constexpr DeviceEcryptfsMigrationStrategyProto_MigrationStrategy DeviceEcryptfsMigrationStrategyProto::ALLOW_MIGRATION;
constexpr DeviceEcryptfsMigrationStrategyProto_MigrationStrategy DeviceEcryptfsMigrationStrategyProto::MigrationStrategy_MIN;
constexpr DeviceEcryptfsMigrationStrategyProto_MigrationStrategy DeviceEcryptfsMigrationStrategyProto::MigrationStrategy_MAX;
constexpr int DeviceEcryptfsMigrationStrategyProto::MigrationStrategy_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DeviceSecondFactorAuthenticationProto_U2fMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DeviceSecondFactorAuthenticationProto_U2fMode_strings[4] = {};

static const char DeviceSecondFactorAuthenticationProto_U2fMode_names[] =
  "DISABLED"
  "U2F"
  "U2F_EXTENDED"
  "UNSET";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DeviceSecondFactorAuthenticationProto_U2fMode_entries[] = {
  { {DeviceSecondFactorAuthenticationProto_U2fMode_names + 0, 8}, 1 },
  { {DeviceSecondFactorAuthenticationProto_U2fMode_names + 8, 3}, 2 },
  { {DeviceSecondFactorAuthenticationProto_U2fMode_names + 11, 12}, 3 },
  { {DeviceSecondFactorAuthenticationProto_U2fMode_names + 23, 5}, 0 },
};

static const int DeviceSecondFactorAuthenticationProto_U2fMode_entries_by_number[] = {
  3, // 0 -> UNSET
  0, // 1 -> DISABLED
  1, // 2 -> U2F
  2, // 3 -> U2F_EXTENDED
};

const std::string& DeviceSecondFactorAuthenticationProto_U2fMode_Name(
    DeviceSecondFactorAuthenticationProto_U2fMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DeviceSecondFactorAuthenticationProto_U2fMode_entries,
          DeviceSecondFactorAuthenticationProto_U2fMode_entries_by_number,
          4, DeviceSecondFactorAuthenticationProto_U2fMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DeviceSecondFactorAuthenticationProto_U2fMode_entries,
      DeviceSecondFactorAuthenticationProto_U2fMode_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DeviceSecondFactorAuthenticationProto_U2fMode_strings[idx].get();
}
bool DeviceSecondFactorAuthenticationProto_U2fMode_Parse(
    const std::string& name, DeviceSecondFactorAuthenticationProto_U2fMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DeviceSecondFactorAuthenticationProto_U2fMode_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<DeviceSecondFactorAuthenticationProto_U2fMode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DeviceSecondFactorAuthenticationProto_U2fMode DeviceSecondFactorAuthenticationProto::UNSET;
constexpr DeviceSecondFactorAuthenticationProto_U2fMode DeviceSecondFactorAuthenticationProto::DISABLED;
constexpr DeviceSecondFactorAuthenticationProto_U2fMode DeviceSecondFactorAuthenticationProto::U2F;
constexpr DeviceSecondFactorAuthenticationProto_U2fMode DeviceSecondFactorAuthenticationProto::U2F_EXTENDED;
constexpr DeviceSecondFactorAuthenticationProto_U2fMode DeviceSecondFactorAuthenticationProto::U2fMode_MIN;
constexpr DeviceSecondFactorAuthenticationProto_U2fMode DeviceSecondFactorAuthenticationProto::U2fMode_MAX;
constexpr int DeviceSecondFactorAuthenticationProto::U2fMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool WeeklyTimeProto_DayOfWeek_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WeeklyTimeProto_DayOfWeek_strings[8] = {};

static const char WeeklyTimeProto_DayOfWeek_names[] =
  "DAY_OF_WEEK_UNSPECIFIED"
  "FRIDAY"
  "MONDAY"
  "SATURDAY"
  "SUNDAY"
  "THURSDAY"
  "TUESDAY"
  "WEDNESDAY";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry WeeklyTimeProto_DayOfWeek_entries[] = {
  { {WeeklyTimeProto_DayOfWeek_names + 0, 23}, 0 },
  { {WeeklyTimeProto_DayOfWeek_names + 23, 6}, 5 },
  { {WeeklyTimeProto_DayOfWeek_names + 29, 6}, 1 },
  { {WeeklyTimeProto_DayOfWeek_names + 35, 8}, 6 },
  { {WeeklyTimeProto_DayOfWeek_names + 43, 6}, 7 },
  { {WeeklyTimeProto_DayOfWeek_names + 49, 8}, 4 },
  { {WeeklyTimeProto_DayOfWeek_names + 57, 7}, 2 },
  { {WeeklyTimeProto_DayOfWeek_names + 64, 9}, 3 },
};

static const int WeeklyTimeProto_DayOfWeek_entries_by_number[] = {
  0, // 0 -> DAY_OF_WEEK_UNSPECIFIED
  2, // 1 -> MONDAY
  6, // 2 -> TUESDAY
  7, // 3 -> WEDNESDAY
  5, // 4 -> THURSDAY
  1, // 5 -> FRIDAY
  3, // 6 -> SATURDAY
  4, // 7 -> SUNDAY
};

const std::string& WeeklyTimeProto_DayOfWeek_Name(
    WeeklyTimeProto_DayOfWeek value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          WeeklyTimeProto_DayOfWeek_entries,
          WeeklyTimeProto_DayOfWeek_entries_by_number,
          8, WeeklyTimeProto_DayOfWeek_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      WeeklyTimeProto_DayOfWeek_entries,
      WeeklyTimeProto_DayOfWeek_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     WeeklyTimeProto_DayOfWeek_strings[idx].get();
}
bool WeeklyTimeProto_DayOfWeek_Parse(
    const std::string& name, WeeklyTimeProto_DayOfWeek* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      WeeklyTimeProto_DayOfWeek_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<WeeklyTimeProto_DayOfWeek>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr WeeklyTimeProto_DayOfWeek WeeklyTimeProto::DAY_OF_WEEK_UNSPECIFIED;
constexpr WeeklyTimeProto_DayOfWeek WeeklyTimeProto::MONDAY;
constexpr WeeklyTimeProto_DayOfWeek WeeklyTimeProto::TUESDAY;
constexpr WeeklyTimeProto_DayOfWeek WeeklyTimeProto::WEDNESDAY;
constexpr WeeklyTimeProto_DayOfWeek WeeklyTimeProto::THURSDAY;
constexpr WeeklyTimeProto_DayOfWeek WeeklyTimeProto::FRIDAY;
constexpr WeeklyTimeProto_DayOfWeek WeeklyTimeProto::SATURDAY;
constexpr WeeklyTimeProto_DayOfWeek WeeklyTimeProto::SUNDAY;
constexpr WeeklyTimeProto_DayOfWeek WeeklyTimeProto::DayOfWeek_MIN;
constexpr WeeklyTimeProto_DayOfWeek WeeklyTimeProto::DayOfWeek_MAX;
constexpr int WeeklyTimeProto::DayOfWeek_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DeviceNativePrintersAccessModeProto_AccessMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DeviceNativePrintersAccessModeProto_AccessMode_strings[3] = {};

static const char DeviceNativePrintersAccessModeProto_AccessMode_names[] =
  "ACCESS_MODE_ALL"
  "ACCESS_MODE_BLACKLIST"
  "ACCESS_MODE_WHITELIST";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DeviceNativePrintersAccessModeProto_AccessMode_entries[] = {
  { {DeviceNativePrintersAccessModeProto_AccessMode_names + 0, 15}, 2 },
  { {DeviceNativePrintersAccessModeProto_AccessMode_names + 15, 21}, 0 },
  { {DeviceNativePrintersAccessModeProto_AccessMode_names + 36, 21}, 1 },
};

static const int DeviceNativePrintersAccessModeProto_AccessMode_entries_by_number[] = {
  1, // 0 -> ACCESS_MODE_BLACKLIST
  2, // 1 -> ACCESS_MODE_WHITELIST
  0, // 2 -> ACCESS_MODE_ALL
};

const std::string& DeviceNativePrintersAccessModeProto_AccessMode_Name(
    DeviceNativePrintersAccessModeProto_AccessMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DeviceNativePrintersAccessModeProto_AccessMode_entries,
          DeviceNativePrintersAccessModeProto_AccessMode_entries_by_number,
          3, DeviceNativePrintersAccessModeProto_AccessMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DeviceNativePrintersAccessModeProto_AccessMode_entries,
      DeviceNativePrintersAccessModeProto_AccessMode_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DeviceNativePrintersAccessModeProto_AccessMode_strings[idx].get();
}
bool DeviceNativePrintersAccessModeProto_AccessMode_Parse(
    const std::string& name, DeviceNativePrintersAccessModeProto_AccessMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DeviceNativePrintersAccessModeProto_AccessMode_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<DeviceNativePrintersAccessModeProto_AccessMode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DeviceNativePrintersAccessModeProto_AccessMode DeviceNativePrintersAccessModeProto::ACCESS_MODE_BLACKLIST;
constexpr DeviceNativePrintersAccessModeProto_AccessMode DeviceNativePrintersAccessModeProto::ACCESS_MODE_WHITELIST;
constexpr DeviceNativePrintersAccessModeProto_AccessMode DeviceNativePrintersAccessModeProto::ACCESS_MODE_ALL;
constexpr DeviceNativePrintersAccessModeProto_AccessMode DeviceNativePrintersAccessModeProto::AccessMode_MIN;
constexpr DeviceNativePrintersAccessModeProto_AccessMode DeviceNativePrintersAccessModeProto::AccessMode_MAX;
constexpr int DeviceNativePrintersAccessModeProto::AccessMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool TPMFirmwareUpdateSettingsProto_AutoUpdateMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TPMFirmwareUpdateSettingsProto_AutoUpdateMode_strings[5] = {};

static const char TPMFirmwareUpdateSettingsProto_AutoUpdateMode_names[] =
  "AUTO_UPDATE_MODE_UNSPECIFIED"
  "ENROLLMENT"
  "NEVER"
  "USER_ACKNOWLEDGMENT"
  "WITHOUT_ACKNOWLEDGMENT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TPMFirmwareUpdateSettingsProto_AutoUpdateMode_entries[] = {
  { {TPMFirmwareUpdateSettingsProto_AutoUpdateMode_names + 0, 28}, 0 },
  { {TPMFirmwareUpdateSettingsProto_AutoUpdateMode_names + 28, 10}, 4 },
  { {TPMFirmwareUpdateSettingsProto_AutoUpdateMode_names + 38, 5}, 1 },
  { {TPMFirmwareUpdateSettingsProto_AutoUpdateMode_names + 43, 19}, 2 },
  { {TPMFirmwareUpdateSettingsProto_AutoUpdateMode_names + 62, 22}, 3 },
};

static const int TPMFirmwareUpdateSettingsProto_AutoUpdateMode_entries_by_number[] = {
  0, // 0 -> AUTO_UPDATE_MODE_UNSPECIFIED
  2, // 1 -> NEVER
  3, // 2 -> USER_ACKNOWLEDGMENT
  4, // 3 -> WITHOUT_ACKNOWLEDGMENT
  1, // 4 -> ENROLLMENT
};

const std::string& TPMFirmwareUpdateSettingsProto_AutoUpdateMode_Name(
    TPMFirmwareUpdateSettingsProto_AutoUpdateMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TPMFirmwareUpdateSettingsProto_AutoUpdateMode_entries,
          TPMFirmwareUpdateSettingsProto_AutoUpdateMode_entries_by_number,
          5, TPMFirmwareUpdateSettingsProto_AutoUpdateMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TPMFirmwareUpdateSettingsProto_AutoUpdateMode_entries,
      TPMFirmwareUpdateSettingsProto_AutoUpdateMode_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TPMFirmwareUpdateSettingsProto_AutoUpdateMode_strings[idx].get();
}
bool TPMFirmwareUpdateSettingsProto_AutoUpdateMode_Parse(
    const std::string& name, TPMFirmwareUpdateSettingsProto_AutoUpdateMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TPMFirmwareUpdateSettingsProto_AutoUpdateMode_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<TPMFirmwareUpdateSettingsProto_AutoUpdateMode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TPMFirmwareUpdateSettingsProto_AutoUpdateMode TPMFirmwareUpdateSettingsProto::AUTO_UPDATE_MODE_UNSPECIFIED;
constexpr TPMFirmwareUpdateSettingsProto_AutoUpdateMode TPMFirmwareUpdateSettingsProto::NEVER;
constexpr TPMFirmwareUpdateSettingsProto_AutoUpdateMode TPMFirmwareUpdateSettingsProto::USER_ACKNOWLEDGMENT;
constexpr TPMFirmwareUpdateSettingsProto_AutoUpdateMode TPMFirmwareUpdateSettingsProto::WITHOUT_ACKNOWLEDGMENT;
constexpr TPMFirmwareUpdateSettingsProto_AutoUpdateMode TPMFirmwareUpdateSettingsProto::ENROLLMENT;
constexpr TPMFirmwareUpdateSettingsProto_AutoUpdateMode TPMFirmwareUpdateSettingsProto::AutoUpdateMode_MIN;
constexpr TPMFirmwareUpdateSettingsProto_AutoUpdateMode TPMFirmwareUpdateSettingsProto::AutoUpdateMode_MAX;
constexpr int TPMFirmwareUpdateSettingsProto::AutoUpdateMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DeviceKerberosEncryptionTypesProto_Types_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DeviceKerberosEncryptionTypesProto_Types_strings[3] = {};

static const char DeviceKerberosEncryptionTypesProto_Types_names[] =
  "ENC_TYPES_ALL"
  "ENC_TYPES_LEGACY"
  "ENC_TYPES_STRONG";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DeviceKerberosEncryptionTypesProto_Types_entries[] = {
  { {DeviceKerberosEncryptionTypesProto_Types_names + 0, 13}, 0 },
  { {DeviceKerberosEncryptionTypesProto_Types_names + 13, 16}, 2 },
  { {DeviceKerberosEncryptionTypesProto_Types_names + 29, 16}, 1 },
};

static const int DeviceKerberosEncryptionTypesProto_Types_entries_by_number[] = {
  0, // 0 -> ENC_TYPES_ALL
  2, // 1 -> ENC_TYPES_STRONG
  1, // 2 -> ENC_TYPES_LEGACY
};

const std::string& DeviceKerberosEncryptionTypesProto_Types_Name(
    DeviceKerberosEncryptionTypesProto_Types value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DeviceKerberosEncryptionTypesProto_Types_entries,
          DeviceKerberosEncryptionTypesProto_Types_entries_by_number,
          3, DeviceKerberosEncryptionTypesProto_Types_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DeviceKerberosEncryptionTypesProto_Types_entries,
      DeviceKerberosEncryptionTypesProto_Types_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DeviceKerberosEncryptionTypesProto_Types_strings[idx].get();
}
bool DeviceKerberosEncryptionTypesProto_Types_Parse(
    const std::string& name, DeviceKerberosEncryptionTypesProto_Types* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DeviceKerberosEncryptionTypesProto_Types_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<DeviceKerberosEncryptionTypesProto_Types>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DeviceKerberosEncryptionTypesProto_Types DeviceKerberosEncryptionTypesProto::ENC_TYPES_ALL;
constexpr DeviceKerberosEncryptionTypesProto_Types DeviceKerberosEncryptionTypesProto::ENC_TYPES_STRONG;
constexpr DeviceKerberosEncryptionTypesProto_Types DeviceKerberosEncryptionTypesProto::ENC_TYPES_LEGACY;
constexpr DeviceKerberosEncryptionTypesProto_Types DeviceKerberosEncryptionTypesProto::Types_MIN;
constexpr DeviceKerberosEncryptionTypesProto_Types DeviceKerberosEncryptionTypesProto::Types_MAX;
constexpr int DeviceKerberosEncryptionTypesProto::Types_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DeviceUserPolicyLoopbackProcessingModeProto_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DeviceUserPolicyLoopbackProcessingModeProto_Mode_strings[3] = {};

static const char DeviceUserPolicyLoopbackProcessingModeProto_Mode_names[] =
  "USER_POLICY_MODE_DEFAULT"
  "USER_POLICY_MODE_MERGE"
  "USER_POLICY_MODE_REPLACE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DeviceUserPolicyLoopbackProcessingModeProto_Mode_entries[] = {
  { {DeviceUserPolicyLoopbackProcessingModeProto_Mode_names + 0, 24}, 0 },
  { {DeviceUserPolicyLoopbackProcessingModeProto_Mode_names + 24, 22}, 1 },
  { {DeviceUserPolicyLoopbackProcessingModeProto_Mode_names + 46, 24}, 2 },
};

static const int DeviceUserPolicyLoopbackProcessingModeProto_Mode_entries_by_number[] = {
  0, // 0 -> USER_POLICY_MODE_DEFAULT
  1, // 1 -> USER_POLICY_MODE_MERGE
  2, // 2 -> USER_POLICY_MODE_REPLACE
};

const std::string& DeviceUserPolicyLoopbackProcessingModeProto_Mode_Name(
    DeviceUserPolicyLoopbackProcessingModeProto_Mode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DeviceUserPolicyLoopbackProcessingModeProto_Mode_entries,
          DeviceUserPolicyLoopbackProcessingModeProto_Mode_entries_by_number,
          3, DeviceUserPolicyLoopbackProcessingModeProto_Mode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DeviceUserPolicyLoopbackProcessingModeProto_Mode_entries,
      DeviceUserPolicyLoopbackProcessingModeProto_Mode_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DeviceUserPolicyLoopbackProcessingModeProto_Mode_strings[idx].get();
}
bool DeviceUserPolicyLoopbackProcessingModeProto_Mode_Parse(
    const std::string& name, DeviceUserPolicyLoopbackProcessingModeProto_Mode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DeviceUserPolicyLoopbackProcessingModeProto_Mode_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<DeviceUserPolicyLoopbackProcessingModeProto_Mode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DeviceUserPolicyLoopbackProcessingModeProto_Mode DeviceUserPolicyLoopbackProcessingModeProto::USER_POLICY_MODE_DEFAULT;
constexpr DeviceUserPolicyLoopbackProcessingModeProto_Mode DeviceUserPolicyLoopbackProcessingModeProto::USER_POLICY_MODE_MERGE;
constexpr DeviceUserPolicyLoopbackProcessingModeProto_Mode DeviceUserPolicyLoopbackProcessingModeProto::USER_POLICY_MODE_REPLACE;
constexpr DeviceUserPolicyLoopbackProcessingModeProto_Mode DeviceUserPolicyLoopbackProcessingModeProto::Mode_MIN;
constexpr DeviceUserPolicyLoopbackProcessingModeProto_Mode DeviceUserPolicyLoopbackProcessingModeProto::Mode_MAX;
constexpr int DeviceUserPolicyLoopbackProcessingModeProto::Mode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool SamlLoginAuthenticationTypeProto_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SamlLoginAuthenticationTypeProto_Type_strings[2] = {};

static const char SamlLoginAuthenticationTypeProto_Type_names[] =
  "TYPE_CLIENT_CERTIFICATE"
  "TYPE_DEFAULT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SamlLoginAuthenticationTypeProto_Type_entries[] = {
  { {SamlLoginAuthenticationTypeProto_Type_names + 0, 23}, 1 },
  { {SamlLoginAuthenticationTypeProto_Type_names + 23, 12}, 0 },
};

static const int SamlLoginAuthenticationTypeProto_Type_entries_by_number[] = {
  1, // 0 -> TYPE_DEFAULT
  0, // 1 -> TYPE_CLIENT_CERTIFICATE
};

const std::string& SamlLoginAuthenticationTypeProto_Type_Name(
    SamlLoginAuthenticationTypeProto_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SamlLoginAuthenticationTypeProto_Type_entries,
          SamlLoginAuthenticationTypeProto_Type_entries_by_number,
          2, SamlLoginAuthenticationTypeProto_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SamlLoginAuthenticationTypeProto_Type_entries,
      SamlLoginAuthenticationTypeProto_Type_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SamlLoginAuthenticationTypeProto_Type_strings[idx].get();
}
bool SamlLoginAuthenticationTypeProto_Type_Parse(
    const std::string& name, SamlLoginAuthenticationTypeProto_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SamlLoginAuthenticationTypeProto_Type_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<SamlLoginAuthenticationTypeProto_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SamlLoginAuthenticationTypeProto_Type SamlLoginAuthenticationTypeProto::TYPE_DEFAULT;
constexpr SamlLoginAuthenticationTypeProto_Type SamlLoginAuthenticationTypeProto::TYPE_CLIENT_CERTIFICATE;
constexpr SamlLoginAuthenticationTypeProto_Type SamlLoginAuthenticationTypeProto::Type_MIN;
constexpr SamlLoginAuthenticationTypeProto_Type SamlLoginAuthenticationTypeProto::Type_MAX;
constexpr int SamlLoginAuthenticationTypeProto::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_strings[5] = {};

static const char DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_names[] =
  "ALWAYS"
  "ARC_SESSION"
  "NEVER"
  "REBOOT_ON_SIGNOUT_MODE_UNSPECIFIED"
  "VM_STARTED_OR_ARC_SESSION";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_entries[] = {
  { {DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_names + 0, 6}, 3 },
  { {DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_names + 6, 11}, 2 },
  { {DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_names + 17, 5}, 1 },
  { {DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_names + 22, 34}, 0 },
  { {DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_names + 56, 25}, 4 },
};

static const int DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_entries_by_number[] = {
  3, // 0 -> REBOOT_ON_SIGNOUT_MODE_UNSPECIFIED
  2, // 1 -> NEVER
  1, // 2 -> ARC_SESSION
  0, // 3 -> ALWAYS
  4, // 4 -> VM_STARTED_OR_ARC_SESSION
};

const std::string& DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_Name(
    DeviceRebootOnUserSignoutProto_RebootOnSignoutMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_entries,
          DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_entries_by_number,
          5, DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_entries,
      DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_strings[idx].get();
}
bool DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_Parse(
    const std::string& name, DeviceRebootOnUserSignoutProto_RebootOnSignoutMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<DeviceRebootOnUserSignoutProto_RebootOnSignoutMode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DeviceRebootOnUserSignoutProto_RebootOnSignoutMode DeviceRebootOnUserSignoutProto::REBOOT_ON_SIGNOUT_MODE_UNSPECIFIED;
constexpr DeviceRebootOnUserSignoutProto_RebootOnSignoutMode DeviceRebootOnUserSignoutProto::NEVER;
constexpr DeviceRebootOnUserSignoutProto_RebootOnSignoutMode DeviceRebootOnUserSignoutProto::ARC_SESSION;
constexpr DeviceRebootOnUserSignoutProto_RebootOnSignoutMode DeviceRebootOnUserSignoutProto::ALWAYS;
constexpr DeviceRebootOnUserSignoutProto_RebootOnSignoutMode DeviceRebootOnUserSignoutProto::VM_STARTED_OR_ARC_SESSION;
constexpr DeviceRebootOnUserSignoutProto_RebootOnSignoutMode DeviceRebootOnUserSignoutProto::RebootOnSignoutMode_MIN;
constexpr DeviceRebootOnUserSignoutProto_RebootOnSignoutMode DeviceRebootOnUserSignoutProto::RebootOnSignoutMode_MAX;
constexpr int DeviceRebootOnUserSignoutProto::RebootOnSignoutMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DeviceDockMacAddressSourceProto_Source_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DeviceDockMacAddressSourceProto_Source_strings[4] = {};

static const char DeviceDockMacAddressSourceProto_Source_names[] =
  "DEVICE_DOCK_MAC_ADDRESS"
  "DEVICE_NIC_MAC_ADDRESS"
  "DOCK_NIC_MAC_ADDRESS"
  "SOURCE_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DeviceDockMacAddressSourceProto_Source_entries[] = {
  { {DeviceDockMacAddressSourceProto_Source_names + 0, 23}, 1 },
  { {DeviceDockMacAddressSourceProto_Source_names + 23, 22}, 2 },
  { {DeviceDockMacAddressSourceProto_Source_names + 45, 20}, 3 },
  { {DeviceDockMacAddressSourceProto_Source_names + 65, 18}, 0 },
};

static const int DeviceDockMacAddressSourceProto_Source_entries_by_number[] = {
  3, // 0 -> SOURCE_UNSPECIFIED
  0, // 1 -> DEVICE_DOCK_MAC_ADDRESS
  1, // 2 -> DEVICE_NIC_MAC_ADDRESS
  2, // 3 -> DOCK_NIC_MAC_ADDRESS
};

const std::string& DeviceDockMacAddressSourceProto_Source_Name(
    DeviceDockMacAddressSourceProto_Source value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DeviceDockMacAddressSourceProto_Source_entries,
          DeviceDockMacAddressSourceProto_Source_entries_by_number,
          4, DeviceDockMacAddressSourceProto_Source_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DeviceDockMacAddressSourceProto_Source_entries,
      DeviceDockMacAddressSourceProto_Source_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DeviceDockMacAddressSourceProto_Source_strings[idx].get();
}
bool DeviceDockMacAddressSourceProto_Source_Parse(
    const std::string& name, DeviceDockMacAddressSourceProto_Source* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DeviceDockMacAddressSourceProto_Source_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<DeviceDockMacAddressSourceProto_Source>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DeviceDockMacAddressSourceProto_Source DeviceDockMacAddressSourceProto::SOURCE_UNSPECIFIED;
constexpr DeviceDockMacAddressSourceProto_Source DeviceDockMacAddressSourceProto::DEVICE_DOCK_MAC_ADDRESS;
constexpr DeviceDockMacAddressSourceProto_Source DeviceDockMacAddressSourceProto::DEVICE_NIC_MAC_ADDRESS;
constexpr DeviceDockMacAddressSourceProto_Source DeviceDockMacAddressSourceProto::DOCK_NIC_MAC_ADDRESS;
constexpr DeviceDockMacAddressSourceProto_Source DeviceDockMacAddressSourceProto::Source_MIN;
constexpr DeviceDockMacAddressSourceProto_Source DeviceDockMacAddressSourceProto::Source_MAX;
constexpr int DeviceDockMacAddressSourceProto::Source_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DeviceBatteryChargeModeProto_BatteryChargeMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DeviceBatteryChargeModeProto_BatteryChargeMode_strings[6] = {};

static const char DeviceBatteryChargeModeProto_BatteryChargeMode_names[] =
  "ADAPTIVE"
  "CUSTOM"
  "EXPRESS_CHARGE"
  "MODE_UNSPECIFIED"
  "PRIMARILY_AC_USE"
  "STANDARD";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DeviceBatteryChargeModeProto_BatteryChargeMode_entries[] = {
  { {DeviceBatteryChargeModeProto_BatteryChargeMode_names + 0, 8}, 4 },
  { {DeviceBatteryChargeModeProto_BatteryChargeMode_names + 8, 6}, 5 },
  { {DeviceBatteryChargeModeProto_BatteryChargeMode_names + 14, 14}, 2 },
  { {DeviceBatteryChargeModeProto_BatteryChargeMode_names + 28, 16}, 0 },
  { {DeviceBatteryChargeModeProto_BatteryChargeMode_names + 44, 16}, 3 },
  { {DeviceBatteryChargeModeProto_BatteryChargeMode_names + 60, 8}, 1 },
};

static const int DeviceBatteryChargeModeProto_BatteryChargeMode_entries_by_number[] = {
  3, // 0 -> MODE_UNSPECIFIED
  5, // 1 -> STANDARD
  2, // 2 -> EXPRESS_CHARGE
  4, // 3 -> PRIMARILY_AC_USE
  0, // 4 -> ADAPTIVE
  1, // 5 -> CUSTOM
};

const std::string& DeviceBatteryChargeModeProto_BatteryChargeMode_Name(
    DeviceBatteryChargeModeProto_BatteryChargeMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DeviceBatteryChargeModeProto_BatteryChargeMode_entries,
          DeviceBatteryChargeModeProto_BatteryChargeMode_entries_by_number,
          6, DeviceBatteryChargeModeProto_BatteryChargeMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DeviceBatteryChargeModeProto_BatteryChargeMode_entries,
      DeviceBatteryChargeModeProto_BatteryChargeMode_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DeviceBatteryChargeModeProto_BatteryChargeMode_strings[idx].get();
}
bool DeviceBatteryChargeModeProto_BatteryChargeMode_Parse(
    const std::string& name, DeviceBatteryChargeModeProto_BatteryChargeMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DeviceBatteryChargeModeProto_BatteryChargeMode_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<DeviceBatteryChargeModeProto_BatteryChargeMode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DeviceBatteryChargeModeProto_BatteryChargeMode DeviceBatteryChargeModeProto::MODE_UNSPECIFIED;
constexpr DeviceBatteryChargeModeProto_BatteryChargeMode DeviceBatteryChargeModeProto::STANDARD;
constexpr DeviceBatteryChargeModeProto_BatteryChargeMode DeviceBatteryChargeModeProto::EXPRESS_CHARGE;
constexpr DeviceBatteryChargeModeProto_BatteryChargeMode DeviceBatteryChargeModeProto::PRIMARILY_AC_USE;
constexpr DeviceBatteryChargeModeProto_BatteryChargeMode DeviceBatteryChargeModeProto::ADAPTIVE;
constexpr DeviceBatteryChargeModeProto_BatteryChargeMode DeviceBatteryChargeModeProto::CUSTOM;
constexpr DeviceBatteryChargeModeProto_BatteryChargeMode DeviceBatteryChargeModeProto::BatteryChargeMode_MIN;
constexpr DeviceBatteryChargeModeProto_BatteryChargeMode DeviceBatteryChargeModeProto::BatteryChargeMode_MAX;
constexpr int DeviceBatteryChargeModeProto::BatteryChargeMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void DevicePolicyRefreshRateProto::InitAsDefaultInstance() {
}
class DevicePolicyRefreshRateProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DevicePolicyRefreshRateProto>()._has_bits_);
  static void set_has_device_policy_refresh_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DevicePolicyRefreshRateProto::DevicePolicyRefreshRateProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.DevicePolicyRefreshRateProto)
}
DevicePolicyRefreshRateProto::DevicePolicyRefreshRateProto(const DevicePolicyRefreshRateProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  device_policy_refresh_rate_ = from.device_policy_refresh_rate_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DevicePolicyRefreshRateProto)
}

void DevicePolicyRefreshRateProto::SharedCtor() {
  device_policy_refresh_rate_ = PROTOBUF_LONGLONG(0);
}

DevicePolicyRefreshRateProto::~DevicePolicyRefreshRateProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.DevicePolicyRefreshRateProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DevicePolicyRefreshRateProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DevicePolicyRefreshRateProto::ArenaDtor(void* object) {
  DevicePolicyRefreshRateProto* _this = reinterpret_cast< DevicePolicyRefreshRateProto* >(object);
  (void)_this;
}
void DevicePolicyRefreshRateProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DevicePolicyRefreshRateProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DevicePolicyRefreshRateProto& DevicePolicyRefreshRateProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DevicePolicyRefreshRateProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void DevicePolicyRefreshRateProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DevicePolicyRefreshRateProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_policy_refresh_rate_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DevicePolicyRefreshRateProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 device_policy_refresh_rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_device_policy_refresh_rate(&has_bits);
          device_policy_refresh_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DevicePolicyRefreshRateProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.DevicePolicyRefreshRateProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 device_policy_refresh_rate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_device_policy_refresh_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.DevicePolicyRefreshRateProto)
  return target;
}

size_t DevicePolicyRefreshRateProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DevicePolicyRefreshRateProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 device_policy_refresh_rate = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_device_policy_refresh_rate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DevicePolicyRefreshRateProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DevicePolicyRefreshRateProto*>(
      &from));
}

void DevicePolicyRefreshRateProto::MergeFrom(const DevicePolicyRefreshRateProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DevicePolicyRefreshRateProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device_policy_refresh_rate()) {
    _internal_set_device_policy_refresh_rate(from._internal_device_policy_refresh_rate());
  }
}

void DevicePolicyRefreshRateProto::CopyFrom(const DevicePolicyRefreshRateProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DevicePolicyRefreshRateProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DevicePolicyRefreshRateProto::IsInitialized() const {
  return true;
}

void DevicePolicyRefreshRateProto::InternalSwap(DevicePolicyRefreshRateProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(device_policy_refresh_rate_, other->device_policy_refresh_rate_);
}

std::string DevicePolicyRefreshRateProto::GetTypeName() const {
  return "enterprise_management.DevicePolicyRefreshRateProto";
}


// ===================================================================

void UserWhitelistProto::InitAsDefaultInstance() {
}
class UserWhitelistProto::_Internal {
 public:
};

UserWhitelistProto::UserWhitelistProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  user_whitelist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.UserWhitelistProto)
}
UserWhitelistProto::UserWhitelistProto(const UserWhitelistProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      user_whitelist_(from.user_whitelist_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.UserWhitelistProto)
}

void UserWhitelistProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserWhitelistProto_chrome_5fdevice_5fpolicy_2eproto.base);
}

UserWhitelistProto::~UserWhitelistProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.UserWhitelistProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void UserWhitelistProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserWhitelistProto::ArenaDtor(void* object) {
  UserWhitelistProto* _this = reinterpret_cast< UserWhitelistProto* >(object);
  (void)_this;
}
void UserWhitelistProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserWhitelistProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserWhitelistProto& UserWhitelistProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserWhitelistProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void UserWhitelistProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.UserWhitelistProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_whitelist_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UserWhitelistProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string user_whitelist = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_whitelist();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserWhitelistProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.UserWhitelistProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string user_whitelist = 1;
  for (int i = 0, n = this->_internal_user_whitelist_size(); i < n; i++) {
    const auto& s = this->_internal_user_whitelist(i);
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.UserWhitelistProto)
  return target;
}

size_t UserWhitelistProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.UserWhitelistProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string user_whitelist = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(user_whitelist_.size());
  for (int i = 0, n = user_whitelist_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      user_whitelist_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserWhitelistProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UserWhitelistProto*>(
      &from));
}

void UserWhitelistProto::MergeFrom(const UserWhitelistProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.UserWhitelistProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_whitelist_.MergeFrom(from.user_whitelist_);
}

void UserWhitelistProto::CopyFrom(const UserWhitelistProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.UserWhitelistProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserWhitelistProto::IsInitialized() const {
  return true;
}

void UserWhitelistProto::InternalSwap(UserWhitelistProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  user_whitelist_.InternalSwap(&other->user_whitelist_);
}

std::string UserWhitelistProto::GetTypeName() const {
  return "enterprise_management.UserWhitelistProto";
}


// ===================================================================

void AllowNewUsersProto::InitAsDefaultInstance() {
}
class AllowNewUsersProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AllowNewUsersProto>()._has_bits_);
  static void set_has_allow_new_users(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AllowNewUsersProto::AllowNewUsersProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.AllowNewUsersProto)
}
AllowNewUsersProto::AllowNewUsersProto(const AllowNewUsersProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  allow_new_users_ = from.allow_new_users_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.AllowNewUsersProto)
}

void AllowNewUsersProto::SharedCtor() {
  allow_new_users_ = true;
}

AllowNewUsersProto::~AllowNewUsersProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.AllowNewUsersProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AllowNewUsersProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AllowNewUsersProto::ArenaDtor(void* object) {
  AllowNewUsersProto* _this = reinterpret_cast< AllowNewUsersProto* >(object);
  (void)_this;
}
void AllowNewUsersProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AllowNewUsersProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllowNewUsersProto& AllowNewUsersProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AllowNewUsersProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void AllowNewUsersProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.AllowNewUsersProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allow_new_users_ = true;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AllowNewUsersProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool allow_new_users = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_allow_new_users(&has_bits);
          allow_new_users_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllowNewUsersProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.AllowNewUsersProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool allow_new_users = 1 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_allow_new_users(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.AllowNewUsersProto)
  return target;
}

size_t AllowNewUsersProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.AllowNewUsersProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool allow_new_users = 1 [default = true];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllowNewUsersProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AllowNewUsersProto*>(
      &from));
}

void AllowNewUsersProto::MergeFrom(const AllowNewUsersProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.AllowNewUsersProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_allow_new_users()) {
    _internal_set_allow_new_users(from._internal_allow_new_users());
  }
}

void AllowNewUsersProto::CopyFrom(const AllowNewUsersProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.AllowNewUsersProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllowNewUsersProto::IsInitialized() const {
  return true;
}

void AllowNewUsersProto::InternalSwap(AllowNewUsersProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(allow_new_users_, other->allow_new_users_);
}

std::string AllowNewUsersProto::GetTypeName() const {
  return "enterprise_management.AllowNewUsersProto";
}


// ===================================================================

void GuestModeEnabledProto::InitAsDefaultInstance() {
}
class GuestModeEnabledProto::_Internal {
 public:
  using HasBits = decltype(std::declval<GuestModeEnabledProto>()._has_bits_);
  static void set_has_guest_mode_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GuestModeEnabledProto::GuestModeEnabledProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.GuestModeEnabledProto)
}
GuestModeEnabledProto::GuestModeEnabledProto(const GuestModeEnabledProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  guest_mode_enabled_ = from.guest_mode_enabled_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.GuestModeEnabledProto)
}

void GuestModeEnabledProto::SharedCtor() {
  guest_mode_enabled_ = true;
}

GuestModeEnabledProto::~GuestModeEnabledProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.GuestModeEnabledProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GuestModeEnabledProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GuestModeEnabledProto::ArenaDtor(void* object) {
  GuestModeEnabledProto* _this = reinterpret_cast< GuestModeEnabledProto* >(object);
  (void)_this;
}
void GuestModeEnabledProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GuestModeEnabledProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GuestModeEnabledProto& GuestModeEnabledProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GuestModeEnabledProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void GuestModeEnabledProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.GuestModeEnabledProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  guest_mode_enabled_ = true;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GuestModeEnabledProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool guest_mode_enabled = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_guest_mode_enabled(&has_bits);
          guest_mode_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GuestModeEnabledProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.GuestModeEnabledProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool guest_mode_enabled = 1 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_guest_mode_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.GuestModeEnabledProto)
  return target;
}

size_t GuestModeEnabledProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.GuestModeEnabledProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool guest_mode_enabled = 1 [default = true];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuestModeEnabledProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GuestModeEnabledProto*>(
      &from));
}

void GuestModeEnabledProto::MergeFrom(const GuestModeEnabledProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.GuestModeEnabledProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_guest_mode_enabled()) {
    _internal_set_guest_mode_enabled(from._internal_guest_mode_enabled());
  }
}

void GuestModeEnabledProto::CopyFrom(const GuestModeEnabledProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.GuestModeEnabledProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuestModeEnabledProto::IsInitialized() const {
  return true;
}

void GuestModeEnabledProto::InternalSwap(GuestModeEnabledProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(guest_mode_enabled_, other->guest_mode_enabled_);
}

std::string GuestModeEnabledProto::GetTypeName() const {
  return "enterprise_management.GuestModeEnabledProto";
}


// ===================================================================

void ShowUserNamesOnSigninProto::InitAsDefaultInstance() {
}
class ShowUserNamesOnSigninProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ShowUserNamesOnSigninProto>()._has_bits_);
  static void set_has_show_user_names(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ShowUserNamesOnSigninProto::ShowUserNamesOnSigninProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.ShowUserNamesOnSigninProto)
}
ShowUserNamesOnSigninProto::ShowUserNamesOnSigninProto(const ShowUserNamesOnSigninProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  show_user_names_ = from.show_user_names_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.ShowUserNamesOnSigninProto)
}

void ShowUserNamesOnSigninProto::SharedCtor() {
  show_user_names_ = true;
}

ShowUserNamesOnSigninProto::~ShowUserNamesOnSigninProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.ShowUserNamesOnSigninProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ShowUserNamesOnSigninProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ShowUserNamesOnSigninProto::ArenaDtor(void* object) {
  ShowUserNamesOnSigninProto* _this = reinterpret_cast< ShowUserNamesOnSigninProto* >(object);
  (void)_this;
}
void ShowUserNamesOnSigninProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShowUserNamesOnSigninProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShowUserNamesOnSigninProto& ShowUserNamesOnSigninProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShowUserNamesOnSigninProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void ShowUserNamesOnSigninProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.ShowUserNamesOnSigninProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  show_user_names_ = true;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ShowUserNamesOnSigninProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool show_user_names = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_show_user_names(&has_bits);
          show_user_names_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShowUserNamesOnSigninProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.ShowUserNamesOnSigninProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool show_user_names = 1 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_show_user_names(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.ShowUserNamesOnSigninProto)
  return target;
}

size_t ShowUserNamesOnSigninProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.ShowUserNamesOnSigninProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool show_user_names = 1 [default = true];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShowUserNamesOnSigninProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ShowUserNamesOnSigninProto*>(
      &from));
}

void ShowUserNamesOnSigninProto::MergeFrom(const ShowUserNamesOnSigninProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.ShowUserNamesOnSigninProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_show_user_names()) {
    _internal_set_show_user_names(from._internal_show_user_names());
  }
}

void ShowUserNamesOnSigninProto::CopyFrom(const ShowUserNamesOnSigninProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.ShowUserNamesOnSigninProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowUserNamesOnSigninProto::IsInitialized() const {
  return true;
}

void ShowUserNamesOnSigninProto::InternalSwap(ShowUserNamesOnSigninProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(show_user_names_, other->show_user_names_);
}

std::string ShowUserNamesOnSigninProto::GetTypeName() const {
  return "enterprise_management.ShowUserNamesOnSigninProto";
}


// ===================================================================

void DataRoamingEnabledProto::InitAsDefaultInstance() {
}
class DataRoamingEnabledProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DataRoamingEnabledProto>()._has_bits_);
  static void set_has_data_roaming_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DataRoamingEnabledProto::DataRoamingEnabledProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.DataRoamingEnabledProto)
}
DataRoamingEnabledProto::DataRoamingEnabledProto(const DataRoamingEnabledProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  data_roaming_enabled_ = from.data_roaming_enabled_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DataRoamingEnabledProto)
}

void DataRoamingEnabledProto::SharedCtor() {
  data_roaming_enabled_ = false;
}

DataRoamingEnabledProto::~DataRoamingEnabledProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.DataRoamingEnabledProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DataRoamingEnabledProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DataRoamingEnabledProto::ArenaDtor(void* object) {
  DataRoamingEnabledProto* _this = reinterpret_cast< DataRoamingEnabledProto* >(object);
  (void)_this;
}
void DataRoamingEnabledProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataRoamingEnabledProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataRoamingEnabledProto& DataRoamingEnabledProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataRoamingEnabledProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void DataRoamingEnabledProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DataRoamingEnabledProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_roaming_enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DataRoamingEnabledProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool data_roaming_enabled = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_data_roaming_enabled(&has_bits);
          data_roaming_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataRoamingEnabledProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.DataRoamingEnabledProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool data_roaming_enabled = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_data_roaming_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.DataRoamingEnabledProto)
  return target;
}

size_t DataRoamingEnabledProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DataRoamingEnabledProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool data_roaming_enabled = 1 [default = false];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataRoamingEnabledProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DataRoamingEnabledProto*>(
      &from));
}

void DataRoamingEnabledProto::MergeFrom(const DataRoamingEnabledProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DataRoamingEnabledProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data_roaming_enabled()) {
    _internal_set_data_roaming_enabled(from._internal_data_roaming_enabled());
  }
}

void DataRoamingEnabledProto::CopyFrom(const DataRoamingEnabledProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DataRoamingEnabledProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataRoamingEnabledProto::IsInitialized() const {
  return true;
}

void DataRoamingEnabledProto::InternalSwap(DataRoamingEnabledProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(data_roaming_enabled_, other->data_roaming_enabled_);
}

std::string DataRoamingEnabledProto::GetTypeName() const {
  return "enterprise_management.DataRoamingEnabledProto";
}


// ===================================================================

void OBSOLETE_DeviceProxySettingsProto::InitAsDefaultInstance() {
}
class OBSOLETE_DeviceProxySettingsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<OBSOLETE_DeviceProxySettingsProto>()._has_bits_);
  static void set_has_obsolete_proxy_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_obsolete_proxy_server(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_obsolete_proxy_pac_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_obsolete_proxy_bypass_list(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

OBSOLETE_DeviceProxySettingsProto::OBSOLETE_DeviceProxySettingsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.OBSOLETE_DeviceProxySettingsProto)
}
OBSOLETE_DeviceProxySettingsProto::OBSOLETE_DeviceProxySettingsProto(const OBSOLETE_DeviceProxySettingsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  obsolete_proxy_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_obsolete_proxy_mode()) {
    obsolete_proxy_mode_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_obsolete_proxy_mode(),
      GetArena());
  }
  obsolete_proxy_server_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_obsolete_proxy_server()) {
    obsolete_proxy_server_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_obsolete_proxy_server(),
      GetArena());
  }
  obsolete_proxy_pac_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_obsolete_proxy_pac_url()) {
    obsolete_proxy_pac_url_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_obsolete_proxy_pac_url(),
      GetArena());
  }
  obsolete_proxy_bypass_list_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_obsolete_proxy_bypass_list()) {
    obsolete_proxy_bypass_list_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_obsolete_proxy_bypass_list(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.OBSOLETE_DeviceProxySettingsProto)
}

void OBSOLETE_DeviceProxySettingsProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OBSOLETE_DeviceProxySettingsProto_chrome_5fdevice_5fpolicy_2eproto.base);
  obsolete_proxy_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  obsolete_proxy_server_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  obsolete_proxy_pac_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  obsolete_proxy_bypass_list_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OBSOLETE_DeviceProxySettingsProto::~OBSOLETE_DeviceProxySettingsProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.OBSOLETE_DeviceProxySettingsProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void OBSOLETE_DeviceProxySettingsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  obsolete_proxy_mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  obsolete_proxy_server_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  obsolete_proxy_pac_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  obsolete_proxy_bypass_list_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OBSOLETE_DeviceProxySettingsProto::ArenaDtor(void* object) {
  OBSOLETE_DeviceProxySettingsProto* _this = reinterpret_cast< OBSOLETE_DeviceProxySettingsProto* >(object);
  (void)_this;
}
void OBSOLETE_DeviceProxySettingsProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OBSOLETE_DeviceProxySettingsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OBSOLETE_DeviceProxySettingsProto& OBSOLETE_DeviceProxySettingsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OBSOLETE_DeviceProxySettingsProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void OBSOLETE_DeviceProxySettingsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.OBSOLETE_DeviceProxySettingsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      obsolete_proxy_mode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      obsolete_proxy_server_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      obsolete_proxy_pac_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      obsolete_proxy_bypass_list_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* OBSOLETE_DeviceProxySettingsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string OBSOLETE_proxy_mode = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_obsolete_proxy_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string OBSOLETE_proxy_server = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_obsolete_proxy_server();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string OBSOLETE_proxy_pac_url = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_obsolete_proxy_pac_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string OBSOLETE_proxy_bypass_list = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_obsolete_proxy_bypass_list();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OBSOLETE_DeviceProxySettingsProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.OBSOLETE_DeviceProxySettingsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string OBSOLETE_proxy_mode = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_obsolete_proxy_mode(), target);
  }

  // optional string OBSOLETE_proxy_server = 2 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_obsolete_proxy_server(), target);
  }

  // optional string OBSOLETE_proxy_pac_url = 3 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_obsolete_proxy_pac_url(), target);
  }

  // optional string OBSOLETE_proxy_bypass_list = 4 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_obsolete_proxy_bypass_list(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.OBSOLETE_DeviceProxySettingsProto)
  return target;
}

size_t OBSOLETE_DeviceProxySettingsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.OBSOLETE_DeviceProxySettingsProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string OBSOLETE_proxy_mode = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_obsolete_proxy_mode());
    }

    // optional string OBSOLETE_proxy_server = 2 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_obsolete_proxy_server());
    }

    // optional string OBSOLETE_proxy_pac_url = 3 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_obsolete_proxy_pac_url());
    }

    // optional string OBSOLETE_proxy_bypass_list = 4 [deprecated = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_obsolete_proxy_bypass_list());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OBSOLETE_DeviceProxySettingsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const OBSOLETE_DeviceProxySettingsProto*>(
      &from));
}

void OBSOLETE_DeviceProxySettingsProto::MergeFrom(const OBSOLETE_DeviceProxySettingsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.OBSOLETE_DeviceProxySettingsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_obsolete_proxy_mode(from._internal_obsolete_proxy_mode());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_obsolete_proxy_server(from._internal_obsolete_proxy_server());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_obsolete_proxy_pac_url(from._internal_obsolete_proxy_pac_url());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_obsolete_proxy_bypass_list(from._internal_obsolete_proxy_bypass_list());
    }
  }
}

void OBSOLETE_DeviceProxySettingsProto::CopyFrom(const OBSOLETE_DeviceProxySettingsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.OBSOLETE_DeviceProxySettingsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OBSOLETE_DeviceProxySettingsProto::IsInitialized() const {
  return true;
}

void OBSOLETE_DeviceProxySettingsProto::InternalSwap(OBSOLETE_DeviceProxySettingsProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  obsolete_proxy_mode_.Swap(&other->obsolete_proxy_mode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  obsolete_proxy_server_.Swap(&other->obsolete_proxy_server_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  obsolete_proxy_pac_url_.Swap(&other->obsolete_proxy_pac_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  obsolete_proxy_bypass_list_.Swap(&other->obsolete_proxy_bypass_list_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string OBSOLETE_DeviceProxySettingsProto::GetTypeName() const {
  return "enterprise_management.OBSOLETE_DeviceProxySettingsProto";
}


// ===================================================================

void CameraEnabledProto::InitAsDefaultInstance() {
}
class CameraEnabledProto::_Internal {
 public:
  using HasBits = decltype(std::declval<CameraEnabledProto>()._has_bits_);
  static void set_has_camera_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CameraEnabledProto::CameraEnabledProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.CameraEnabledProto)
}
CameraEnabledProto::CameraEnabledProto(const CameraEnabledProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  camera_enabled_ = from.camera_enabled_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.CameraEnabledProto)
}

void CameraEnabledProto::SharedCtor() {
  camera_enabled_ = false;
}

CameraEnabledProto::~CameraEnabledProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.CameraEnabledProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CameraEnabledProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CameraEnabledProto::ArenaDtor(void* object) {
  CameraEnabledProto* _this = reinterpret_cast< CameraEnabledProto* >(object);
  (void)_this;
}
void CameraEnabledProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraEnabledProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraEnabledProto& CameraEnabledProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraEnabledProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void CameraEnabledProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.CameraEnabledProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  camera_enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CameraEnabledProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool camera_enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_camera_enabled(&has_bits);
          camera_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraEnabledProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.CameraEnabledProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool camera_enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_camera_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.CameraEnabledProto)
  return target;
}

size_t CameraEnabledProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.CameraEnabledProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool camera_enabled = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraEnabledProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CameraEnabledProto*>(
      &from));
}

void CameraEnabledProto::MergeFrom(const CameraEnabledProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.CameraEnabledProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_camera_enabled()) {
    _internal_set_camera_enabled(from._internal_camera_enabled());
  }
}

void CameraEnabledProto::CopyFrom(const CameraEnabledProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.CameraEnabledProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraEnabledProto::IsInitialized() const {
  return true;
}

void CameraEnabledProto::InternalSwap(CameraEnabledProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(camera_enabled_, other->camera_enabled_);
}

std::string CameraEnabledProto::GetTypeName() const {
  return "enterprise_management.CameraEnabledProto";
}


// ===================================================================

void MetricsEnabledProto::InitAsDefaultInstance() {
}
class MetricsEnabledProto::_Internal {
 public:
  using HasBits = decltype(std::declval<MetricsEnabledProto>()._has_bits_);
  static void set_has_metrics_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MetricsEnabledProto::MetricsEnabledProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.MetricsEnabledProto)
}
MetricsEnabledProto::MetricsEnabledProto(const MetricsEnabledProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  metrics_enabled_ = from.metrics_enabled_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.MetricsEnabledProto)
}

void MetricsEnabledProto::SharedCtor() {
  metrics_enabled_ = false;
}

MetricsEnabledProto::~MetricsEnabledProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.MetricsEnabledProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void MetricsEnabledProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MetricsEnabledProto::ArenaDtor(void* object) {
  MetricsEnabledProto* _this = reinterpret_cast< MetricsEnabledProto* >(object);
  (void)_this;
}
void MetricsEnabledProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetricsEnabledProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MetricsEnabledProto& MetricsEnabledProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MetricsEnabledProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void MetricsEnabledProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.MetricsEnabledProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metrics_enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MetricsEnabledProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool metrics_enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_metrics_enabled(&has_bits);
          metrics_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetricsEnabledProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.MetricsEnabledProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool metrics_enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_metrics_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.MetricsEnabledProto)
  return target;
}

size_t MetricsEnabledProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.MetricsEnabledProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool metrics_enabled = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetricsEnabledProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MetricsEnabledProto*>(
      &from));
}

void MetricsEnabledProto::MergeFrom(const MetricsEnabledProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.MetricsEnabledProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_metrics_enabled()) {
    _internal_set_metrics_enabled(from._internal_metrics_enabled());
  }
}

void MetricsEnabledProto::CopyFrom(const MetricsEnabledProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.MetricsEnabledProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricsEnabledProto::IsInitialized() const {
  return true;
}

void MetricsEnabledProto::InternalSwap(MetricsEnabledProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(metrics_enabled_, other->metrics_enabled_);
}

std::string MetricsEnabledProto::GetTypeName() const {
  return "enterprise_management.MetricsEnabledProto";
}


// ===================================================================

void ReleaseChannelProto::InitAsDefaultInstance() {
}
class ReleaseChannelProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ReleaseChannelProto>()._has_bits_);
  static void set_has_release_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_release_channel_delegated(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ReleaseChannelProto::ReleaseChannelProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.ReleaseChannelProto)
}
ReleaseChannelProto::ReleaseChannelProto(const ReleaseChannelProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  release_channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_release_channel()) {
    release_channel_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_release_channel(),
      GetArena());
  }
  release_channel_delegated_ = from.release_channel_delegated_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.ReleaseChannelProto)
}

void ReleaseChannelProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReleaseChannelProto_chrome_5fdevice_5fpolicy_2eproto.base);
  release_channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  release_channel_delegated_ = false;
}

ReleaseChannelProto::~ReleaseChannelProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.ReleaseChannelProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ReleaseChannelProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  release_channel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReleaseChannelProto::ArenaDtor(void* object) {
  ReleaseChannelProto* _this = reinterpret_cast< ReleaseChannelProto* >(object);
  (void)_this;
}
void ReleaseChannelProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReleaseChannelProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReleaseChannelProto& ReleaseChannelProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReleaseChannelProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void ReleaseChannelProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.ReleaseChannelProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    release_channel_.ClearNonDefaultToEmpty();
  }
  release_channel_delegated_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ReleaseChannelProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string release_channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_release_channel();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool release_channel_delegated = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_release_channel_delegated(&has_bits);
          release_channel_delegated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReleaseChannelProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.ReleaseChannelProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string release_channel = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_release_channel(), target);
  }

  // optional bool release_channel_delegated = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_release_channel_delegated(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.ReleaseChannelProto)
  return target;
}

size_t ReleaseChannelProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.ReleaseChannelProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string release_channel = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_release_channel());
    }

    // optional bool release_channel_delegated = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReleaseChannelProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ReleaseChannelProto*>(
      &from));
}

void ReleaseChannelProto::MergeFrom(const ReleaseChannelProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.ReleaseChannelProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_release_channel(from._internal_release_channel());
    }
    if (cached_has_bits & 0x00000002u) {
      release_channel_delegated_ = from.release_channel_delegated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReleaseChannelProto::CopyFrom(const ReleaseChannelProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.ReleaseChannelProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseChannelProto::IsInitialized() const {
  return true;
}

void ReleaseChannelProto::InternalSwap(ReleaseChannelProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  release_channel_.Swap(&other->release_channel_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(release_channel_delegated_, other->release_channel_delegated_);
}

std::string ReleaseChannelProto::GetTypeName() const {
  return "enterprise_management.ReleaseChannelProto";
}


// ===================================================================

void DeviceOpenNetworkConfigurationProto::InitAsDefaultInstance() {
}
class DeviceOpenNetworkConfigurationProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceOpenNetworkConfigurationProto>()._has_bits_);
  static void set_has_open_network_configuration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeviceOpenNetworkConfigurationProto::DeviceOpenNetworkConfigurationProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.DeviceOpenNetworkConfigurationProto)
}
DeviceOpenNetworkConfigurationProto::DeviceOpenNetworkConfigurationProto(const DeviceOpenNetworkConfigurationProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  open_network_configuration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_open_network_configuration()) {
    open_network_configuration_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_open_network_configuration(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceOpenNetworkConfigurationProto)
}

void DeviceOpenNetworkConfigurationProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceOpenNetworkConfigurationProto_chrome_5fdevice_5fpolicy_2eproto.base);
  open_network_configuration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeviceOpenNetworkConfigurationProto::~DeviceOpenNetworkConfigurationProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceOpenNetworkConfigurationProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeviceOpenNetworkConfigurationProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  open_network_configuration_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceOpenNetworkConfigurationProto::ArenaDtor(void* object) {
  DeviceOpenNetworkConfigurationProto* _this = reinterpret_cast< DeviceOpenNetworkConfigurationProto* >(object);
  (void)_this;
}
void DeviceOpenNetworkConfigurationProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceOpenNetworkConfigurationProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceOpenNetworkConfigurationProto& DeviceOpenNetworkConfigurationProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceOpenNetworkConfigurationProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void DeviceOpenNetworkConfigurationProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceOpenNetworkConfigurationProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    open_network_configuration_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceOpenNetworkConfigurationProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string open_network_configuration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_open_network_configuration();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceOpenNetworkConfigurationProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.DeviceOpenNetworkConfigurationProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string open_network_configuration = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_open_network_configuration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.DeviceOpenNetworkConfigurationProto)
  return target;
}

size_t DeviceOpenNetworkConfigurationProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceOpenNetworkConfigurationProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string open_network_configuration = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_open_network_configuration());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceOpenNetworkConfigurationProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceOpenNetworkConfigurationProto*>(
      &from));
}

void DeviceOpenNetworkConfigurationProto::MergeFrom(const DeviceOpenNetworkConfigurationProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceOpenNetworkConfigurationProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_open_network_configuration()) {
    _internal_set_open_network_configuration(from._internal_open_network_configuration());
  }
}

void DeviceOpenNetworkConfigurationProto::CopyFrom(const DeviceOpenNetworkConfigurationProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceOpenNetworkConfigurationProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceOpenNetworkConfigurationProto::IsInitialized() const {
  return true;
}

void DeviceOpenNetworkConfigurationProto::InternalSwap(DeviceOpenNetworkConfigurationProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  open_network_configuration_.Swap(&other->open_network_configuration_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string DeviceOpenNetworkConfigurationProto::GetTypeName() const {
  return "enterprise_management.DeviceOpenNetworkConfigurationProto";
}


// ===================================================================

void NetworkHostnameProto::InitAsDefaultInstance() {
}
class NetworkHostnameProto::_Internal {
 public:
  using HasBits = decltype(std::declval<NetworkHostnameProto>()._has_bits_);
  static void set_has_device_hostname_template(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NetworkHostnameProto::NetworkHostnameProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.NetworkHostnameProto)
}
NetworkHostnameProto::NetworkHostnameProto(const NetworkHostnameProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  device_hostname_template_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_device_hostname_template()) {
    device_hostname_template_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_hostname_template(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.NetworkHostnameProto)
}

void NetworkHostnameProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetworkHostnameProto_chrome_5fdevice_5fpolicy_2eproto.base);
  device_hostname_template_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NetworkHostnameProto::~NetworkHostnameProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.NetworkHostnameProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void NetworkHostnameProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_hostname_template_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NetworkHostnameProto::ArenaDtor(void* object) {
  NetworkHostnameProto* _this = reinterpret_cast< NetworkHostnameProto* >(object);
  (void)_this;
}
void NetworkHostnameProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetworkHostnameProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkHostnameProto& NetworkHostnameProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkHostnameProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void NetworkHostnameProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.NetworkHostnameProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    device_hostname_template_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* NetworkHostnameProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string device_hostname_template = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_hostname_template();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetworkHostnameProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.NetworkHostnameProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string device_hostname_template = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_hostname_template(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.NetworkHostnameProto)
  return target;
}

size_t NetworkHostnameProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.NetworkHostnameProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string device_hostname_template = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_hostname_template());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkHostnameProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const NetworkHostnameProto*>(
      &from));
}

void NetworkHostnameProto::MergeFrom(const NetworkHostnameProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.NetworkHostnameProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device_hostname_template()) {
    _internal_set_device_hostname_template(from._internal_device_hostname_template());
  }
}

void NetworkHostnameProto::CopyFrom(const NetworkHostnameProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.NetworkHostnameProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkHostnameProto::IsInitialized() const {
  return true;
}

void NetworkHostnameProto::InternalSwap(NetworkHostnameProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  device_hostname_template_.Swap(&other->device_hostname_template_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string NetworkHostnameProto::GetTypeName() const {
  return "enterprise_management.NetworkHostnameProto";
}


// ===================================================================

void DeviceReportingProto::InitAsDefaultInstance() {
}
class DeviceReportingProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceReportingProto>()._has_bits_);
  static void set_has_report_version_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_report_activity_times(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_report_boot_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_report_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_report_network_interfaces(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_report_users(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_report_hardware_status(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_report_session_status(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_report_os_update_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_report_running_kiosk_app(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_report_power_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_report_storage_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_report_board_status(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_report_cpu_info(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_report_graphics_status(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_report_crash_report_info(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_report_timezone_info(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_report_memory_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_report_backlight_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_device_status_frequency(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
};

DeviceReportingProto::DeviceReportingProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.DeviceReportingProto)
}
DeviceReportingProto::DeviceReportingProto(const DeviceReportingProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&report_location_, &from.report_location_,
    static_cast<size_t>(reinterpret_cast<char*>(&device_status_frequency_) -
    reinterpret_cast<char*>(&report_location_)) + sizeof(device_status_frequency_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceReportingProto)
}

void DeviceReportingProto::SharedCtor() {
  ::memset(&report_location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&report_backlight_info_) -
      reinterpret_cast<char*>(&report_location_)) + sizeof(report_backlight_info_));
  report_version_info_ = true;
  report_activity_times_ = true;
  report_boot_mode_ = true;
  report_network_interfaces_ = true;
  report_users_ = true;
  report_hardware_status_ = true;
  report_session_status_ = true;
  device_status_frequency_ = PROTOBUF_LONGLONG(10800000);
}

DeviceReportingProto::~DeviceReportingProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceReportingProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeviceReportingProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeviceReportingProto::ArenaDtor(void* object) {
  DeviceReportingProto* _this = reinterpret_cast< DeviceReportingProto* >(object);
  (void)_this;
}
void DeviceReportingProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceReportingProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceReportingProto& DeviceReportingProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceReportingProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void DeviceReportingProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceReportingProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&report_location_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&report_graphics_status_) -
        reinterpret_cast<char*>(&report_location_)) + sizeof(report_graphics_status_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&report_crash_report_info_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&report_backlight_info_) -
        reinterpret_cast<char*>(&report_crash_report_info_)) + sizeof(report_backlight_info_));
    report_version_info_ = true;
    report_activity_times_ = true;
    report_boot_mode_ = true;
    report_network_interfaces_ = true;
  }
  if (cached_has_bits & 0x000f0000u) {
    report_users_ = true;
    report_hardware_status_ = true;
    report_session_status_ = true;
    device_status_frequency_ = PROTOBUF_LONGLONG(10800000);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceReportingProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool report_version_info = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_report_version_info(&has_bits);
          report_version_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool report_activity_times = 2 [default = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_report_activity_times(&has_bits);
          report_activity_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool report_boot_mode = 3 [default = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_report_boot_mode(&has_bits);
          report_boot_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool report_location = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_report_location(&has_bits);
          report_location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool report_network_interfaces = 5 [default = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_report_network_interfaces(&has_bits);
          report_network_interfaces_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool report_users = 6 [default = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_report_users(&has_bits);
          report_users_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool report_hardware_status = 7 [default = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_report_hardware_status(&has_bits);
          report_hardware_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool report_session_status = 8 [default = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_report_session_status(&has_bits);
          report_session_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 device_status_frequency = 9 [default = 10800000];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_device_status_frequency(&has_bits);
          device_status_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool report_os_update_status = 10 [default = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_report_os_update_status(&has_bits);
          report_os_update_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool report_running_kiosk_app = 11 [default = false];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_report_running_kiosk_app(&has_bits);
          report_running_kiosk_app_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool report_power_status = 12 [default = false];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_report_power_status(&has_bits);
          report_power_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool report_storage_status = 13 [default = false];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_report_storage_status(&has_bits);
          report_storage_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool report_board_status = 14 [default = false];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_report_board_status(&has_bits);
          report_board_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool report_cpu_info = 15 [default = false];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_report_cpu_info(&has_bits);
          report_cpu_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool report_graphics_status = 16 [default = false];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_report_graphics_status(&has_bits);
          report_graphics_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool report_crash_report_info = 17 [default = false];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_report_crash_report_info(&has_bits);
          report_crash_report_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool report_timezone_info = 18 [default = false];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_report_timezone_info(&has_bits);
          report_timezone_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool report_memory_info = 19 [default = false];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_report_memory_info(&has_bits);
          report_memory_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool report_backlight_info = 20 [default = false];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_report_backlight_info(&has_bits);
          report_backlight_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceReportingProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.DeviceReportingProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool report_version_info = 1 [default = true];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_report_version_info(), target);
  }

  // optional bool report_activity_times = 2 [default = true];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_report_activity_times(), target);
  }

  // optional bool report_boot_mode = 3 [default = true];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_report_boot_mode(), target);
  }

  // optional bool report_location = 4 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_report_location(), target);
  }

  // optional bool report_network_interfaces = 5 [default = true];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_report_network_interfaces(), target);
  }

  // optional bool report_users = 6 [default = true];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_report_users(), target);
  }

  // optional bool report_hardware_status = 7 [default = true];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_report_hardware_status(), target);
  }

  // optional bool report_session_status = 8 [default = true];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_report_session_status(), target);
  }

  // optional int64 device_status_frequency = 9 [default = 10800000];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_device_status_frequency(), target);
  }

  // optional bool report_os_update_status = 10 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_report_os_update_status(), target);
  }

  // optional bool report_running_kiosk_app = 11 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_report_running_kiosk_app(), target);
  }

  // optional bool report_power_status = 12 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_report_power_status(), target);
  }

  // optional bool report_storage_status = 13 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_report_storage_status(), target);
  }

  // optional bool report_board_status = 14 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_report_board_status(), target);
  }

  // optional bool report_cpu_info = 15 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_report_cpu_info(), target);
  }

  // optional bool report_graphics_status = 16 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_report_graphics_status(), target);
  }

  // optional bool report_crash_report_info = 17 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_report_crash_report_info(), target);
  }

  // optional bool report_timezone_info = 18 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_report_timezone_info(), target);
  }

  // optional bool report_memory_info = 19 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_report_memory_info(), target);
  }

  // optional bool report_backlight_info = 20 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_report_backlight_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.DeviceReportingProto)
  return target;
}

size_t DeviceReportingProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceReportingProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool report_location = 4 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool report_os_update_status = 10 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool report_running_kiosk_app = 11 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool report_power_status = 12 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool report_storage_status = 13 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool report_board_status = 14 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool report_cpu_info = 15 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool report_graphics_status = 16 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool report_crash_report_info = 17 [default = false];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool report_timezone_info = 18 [default = false];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool report_memory_info = 19 [default = false];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool report_backlight_info = 20 [default = false];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool report_version_info = 1 [default = true];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool report_activity_times = 2 [default = true];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool report_boot_mode = 3 [default = true];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool report_network_interfaces = 5 [default = true];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional bool report_users = 6 [default = true];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional bool report_hardware_status = 7 [default = true];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 1;
    }

    // optional bool report_session_status = 8 [default = true];
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 1;
    }

    // optional int64 device_status_frequency = 9 [default = 10800000];
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_device_status_frequency());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceReportingProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceReportingProto*>(
      &from));
}

void DeviceReportingProto::MergeFrom(const DeviceReportingProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceReportingProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      report_location_ = from.report_location_;
    }
    if (cached_has_bits & 0x00000002u) {
      report_os_update_status_ = from.report_os_update_status_;
    }
    if (cached_has_bits & 0x00000004u) {
      report_running_kiosk_app_ = from.report_running_kiosk_app_;
    }
    if (cached_has_bits & 0x00000008u) {
      report_power_status_ = from.report_power_status_;
    }
    if (cached_has_bits & 0x00000010u) {
      report_storage_status_ = from.report_storage_status_;
    }
    if (cached_has_bits & 0x00000020u) {
      report_board_status_ = from.report_board_status_;
    }
    if (cached_has_bits & 0x00000040u) {
      report_cpu_info_ = from.report_cpu_info_;
    }
    if (cached_has_bits & 0x00000080u) {
      report_graphics_status_ = from.report_graphics_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      report_crash_report_info_ = from.report_crash_report_info_;
    }
    if (cached_has_bits & 0x00000200u) {
      report_timezone_info_ = from.report_timezone_info_;
    }
    if (cached_has_bits & 0x00000400u) {
      report_memory_info_ = from.report_memory_info_;
    }
    if (cached_has_bits & 0x00000800u) {
      report_backlight_info_ = from.report_backlight_info_;
    }
    if (cached_has_bits & 0x00001000u) {
      report_version_info_ = from.report_version_info_;
    }
    if (cached_has_bits & 0x00002000u) {
      report_activity_times_ = from.report_activity_times_;
    }
    if (cached_has_bits & 0x00004000u) {
      report_boot_mode_ = from.report_boot_mode_;
    }
    if (cached_has_bits & 0x00008000u) {
      report_network_interfaces_ = from.report_network_interfaces_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      report_users_ = from.report_users_;
    }
    if (cached_has_bits & 0x00020000u) {
      report_hardware_status_ = from.report_hardware_status_;
    }
    if (cached_has_bits & 0x00040000u) {
      report_session_status_ = from.report_session_status_;
    }
    if (cached_has_bits & 0x00080000u) {
      device_status_frequency_ = from.device_status_frequency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceReportingProto::CopyFrom(const DeviceReportingProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceReportingProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceReportingProto::IsInitialized() const {
  return true;
}

void DeviceReportingProto::InternalSwap(DeviceReportingProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceReportingProto, report_backlight_info_)
      + sizeof(DeviceReportingProto::report_backlight_info_)
      - PROTOBUF_FIELD_OFFSET(DeviceReportingProto, report_location_)>(
          reinterpret_cast<char*>(&report_location_),
          reinterpret_cast<char*>(&other->report_location_));
  swap(report_version_info_, other->report_version_info_);
  swap(report_activity_times_, other->report_activity_times_);
  swap(report_boot_mode_, other->report_boot_mode_);
  swap(report_network_interfaces_, other->report_network_interfaces_);
  swap(report_users_, other->report_users_);
  swap(report_hardware_status_, other->report_hardware_status_);
  swap(report_session_status_, other->report_session_status_);
  swap(device_status_frequency_, other->device_status_frequency_);
}

std::string DeviceReportingProto::GetTypeName() const {
  return "enterprise_management.DeviceReportingProto";
}


// ===================================================================

void EphemeralUsersEnabledProto::InitAsDefaultInstance() {
}
class EphemeralUsersEnabledProto::_Internal {
 public:
  using HasBits = decltype(std::declval<EphemeralUsersEnabledProto>()._has_bits_);
  static void set_has_ephemeral_users_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EphemeralUsersEnabledProto::EphemeralUsersEnabledProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.EphemeralUsersEnabledProto)
}
EphemeralUsersEnabledProto::EphemeralUsersEnabledProto(const EphemeralUsersEnabledProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ephemeral_users_enabled_ = from.ephemeral_users_enabled_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.EphemeralUsersEnabledProto)
}

void EphemeralUsersEnabledProto::SharedCtor() {
  ephemeral_users_enabled_ = false;
}

EphemeralUsersEnabledProto::~EphemeralUsersEnabledProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.EphemeralUsersEnabledProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EphemeralUsersEnabledProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EphemeralUsersEnabledProto::ArenaDtor(void* object) {
  EphemeralUsersEnabledProto* _this = reinterpret_cast< EphemeralUsersEnabledProto* >(object);
  (void)_this;
}
void EphemeralUsersEnabledProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EphemeralUsersEnabledProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EphemeralUsersEnabledProto& EphemeralUsersEnabledProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EphemeralUsersEnabledProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void EphemeralUsersEnabledProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.EphemeralUsersEnabledProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ephemeral_users_enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EphemeralUsersEnabledProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool ephemeral_users_enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ephemeral_users_enabled(&has_bits);
          ephemeral_users_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EphemeralUsersEnabledProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.EphemeralUsersEnabledProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool ephemeral_users_enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ephemeral_users_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.EphemeralUsersEnabledProto)
  return target;
}

size_t EphemeralUsersEnabledProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.EphemeralUsersEnabledProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool ephemeral_users_enabled = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EphemeralUsersEnabledProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EphemeralUsersEnabledProto*>(
      &from));
}

void EphemeralUsersEnabledProto::MergeFrom(const EphemeralUsersEnabledProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.EphemeralUsersEnabledProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ephemeral_users_enabled()) {
    _internal_set_ephemeral_users_enabled(from._internal_ephemeral_users_enabled());
  }
}

void EphemeralUsersEnabledProto::CopyFrom(const EphemeralUsersEnabledProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.EphemeralUsersEnabledProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EphemeralUsersEnabledProto::IsInitialized() const {
  return true;
}

void EphemeralUsersEnabledProto::InternalSwap(EphemeralUsersEnabledProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ephemeral_users_enabled_, other->ephemeral_users_enabled_);
}

std::string EphemeralUsersEnabledProto::GetTypeName() const {
  return "enterprise_management.EphemeralUsersEnabledProto";
}


// ===================================================================

void OBSOLETE_AppPackEntryProto::InitAsDefaultInstance() {
}
class OBSOLETE_AppPackEntryProto::_Internal {
 public:
  using HasBits = decltype(std::declval<OBSOLETE_AppPackEntryProto>()._has_bits_);
  static void set_has_obsolete_extension_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_obsolete_update_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_obsolete_online_only(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

OBSOLETE_AppPackEntryProto::OBSOLETE_AppPackEntryProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.OBSOLETE_AppPackEntryProto)
}
OBSOLETE_AppPackEntryProto::OBSOLETE_AppPackEntryProto(const OBSOLETE_AppPackEntryProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  obsolete_extension_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_obsolete_extension_id()) {
    obsolete_extension_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_obsolete_extension_id(),
      GetArena());
  }
  obsolete_update_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_obsolete_update_url()) {
    obsolete_update_url_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_obsolete_update_url(),
      GetArena());
  }
  obsolete_online_only_ = from.obsolete_online_only_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.OBSOLETE_AppPackEntryProto)
}

void OBSOLETE_AppPackEntryProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OBSOLETE_AppPackEntryProto_chrome_5fdevice_5fpolicy_2eproto.base);
  obsolete_extension_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  obsolete_update_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  obsolete_online_only_ = false;
}

OBSOLETE_AppPackEntryProto::~OBSOLETE_AppPackEntryProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.OBSOLETE_AppPackEntryProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void OBSOLETE_AppPackEntryProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  obsolete_extension_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  obsolete_update_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OBSOLETE_AppPackEntryProto::ArenaDtor(void* object) {
  OBSOLETE_AppPackEntryProto* _this = reinterpret_cast< OBSOLETE_AppPackEntryProto* >(object);
  (void)_this;
}
void OBSOLETE_AppPackEntryProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OBSOLETE_AppPackEntryProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OBSOLETE_AppPackEntryProto& OBSOLETE_AppPackEntryProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OBSOLETE_AppPackEntryProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void OBSOLETE_AppPackEntryProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.OBSOLETE_AppPackEntryProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      obsolete_extension_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      obsolete_update_url_.ClearNonDefaultToEmpty();
    }
  }
  obsolete_online_only_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* OBSOLETE_AppPackEntryProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string OBSOLETE_extension_id = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_obsolete_extension_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string OBSOLETE_update_url = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_obsolete_update_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool OBSOLETE_online_only = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_obsolete_online_only(&has_bits);
          obsolete_online_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OBSOLETE_AppPackEntryProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.OBSOLETE_AppPackEntryProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string OBSOLETE_extension_id = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_obsolete_extension_id(), target);
  }

  // optional string OBSOLETE_update_url = 2 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_obsolete_update_url(), target);
  }

  // optional bool OBSOLETE_online_only = 3 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_obsolete_online_only(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.OBSOLETE_AppPackEntryProto)
  return target;
}

size_t OBSOLETE_AppPackEntryProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.OBSOLETE_AppPackEntryProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string OBSOLETE_extension_id = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_obsolete_extension_id());
    }

    // optional string OBSOLETE_update_url = 2 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_obsolete_update_url());
    }

    // optional bool OBSOLETE_online_only = 3 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OBSOLETE_AppPackEntryProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const OBSOLETE_AppPackEntryProto*>(
      &from));
}

void OBSOLETE_AppPackEntryProto::MergeFrom(const OBSOLETE_AppPackEntryProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.OBSOLETE_AppPackEntryProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_obsolete_extension_id(from._internal_obsolete_extension_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_obsolete_update_url(from._internal_obsolete_update_url());
    }
    if (cached_has_bits & 0x00000004u) {
      obsolete_online_only_ = from.obsolete_online_only_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OBSOLETE_AppPackEntryProto::CopyFrom(const OBSOLETE_AppPackEntryProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.OBSOLETE_AppPackEntryProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OBSOLETE_AppPackEntryProto::IsInitialized() const {
  return true;
}

void OBSOLETE_AppPackEntryProto::InternalSwap(OBSOLETE_AppPackEntryProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  obsolete_extension_id_.Swap(&other->obsolete_extension_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  obsolete_update_url_.Swap(&other->obsolete_update_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(obsolete_online_only_, other->obsolete_online_only_);
}

std::string OBSOLETE_AppPackEntryProto::GetTypeName() const {
  return "enterprise_management.OBSOLETE_AppPackEntryProto";
}


// ===================================================================

void OBSOLETE_AppPackProto::InitAsDefaultInstance() {
}
class OBSOLETE_AppPackProto::_Internal {
 public:
};

OBSOLETE_AppPackProto::OBSOLETE_AppPackProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  app_pack_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.OBSOLETE_AppPackProto)
}
OBSOLETE_AppPackProto::OBSOLETE_AppPackProto(const OBSOLETE_AppPackProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      app_pack_(from.app_pack_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.OBSOLETE_AppPackProto)
}

void OBSOLETE_AppPackProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OBSOLETE_AppPackProto_chrome_5fdevice_5fpolicy_2eproto.base);
}

OBSOLETE_AppPackProto::~OBSOLETE_AppPackProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.OBSOLETE_AppPackProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void OBSOLETE_AppPackProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OBSOLETE_AppPackProto::ArenaDtor(void* object) {
  OBSOLETE_AppPackProto* _this = reinterpret_cast< OBSOLETE_AppPackProto* >(object);
  (void)_this;
}
void OBSOLETE_AppPackProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OBSOLETE_AppPackProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OBSOLETE_AppPackProto& OBSOLETE_AppPackProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OBSOLETE_AppPackProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void OBSOLETE_AppPackProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.OBSOLETE_AppPackProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_pack_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* OBSOLETE_AppPackProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .enterprise_management.OBSOLETE_AppPackEntryProto app_pack = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_app_pack(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OBSOLETE_AppPackProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.OBSOLETE_AppPackProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .enterprise_management.OBSOLETE_AppPackEntryProto app_pack = 1 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_app_pack_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_app_pack(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.OBSOLETE_AppPackProto)
  return target;
}

size_t OBSOLETE_AppPackProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.OBSOLETE_AppPackProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .enterprise_management.OBSOLETE_AppPackEntryProto app_pack = 1 [deprecated = true];
  total_size += 1UL * this->_internal_app_pack_size();
  for (const auto& msg : this->app_pack_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OBSOLETE_AppPackProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const OBSOLETE_AppPackProto*>(
      &from));
}

void OBSOLETE_AppPackProto::MergeFrom(const OBSOLETE_AppPackProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.OBSOLETE_AppPackProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  app_pack_.MergeFrom(from.app_pack_);
}

void OBSOLETE_AppPackProto::CopyFrom(const OBSOLETE_AppPackProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.OBSOLETE_AppPackProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OBSOLETE_AppPackProto::IsInitialized() const {
  return true;
}

void OBSOLETE_AppPackProto::InternalSwap(OBSOLETE_AppPackProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  app_pack_.InternalSwap(&other->app_pack_);
}

std::string OBSOLETE_AppPackProto::GetTypeName() const {
  return "enterprise_management.OBSOLETE_AppPackProto";
}


// ===================================================================

void OBSOLETE_PinnedAppsProto::InitAsDefaultInstance() {
}
class OBSOLETE_PinnedAppsProto::_Internal {
 public:
};

OBSOLETE_PinnedAppsProto::OBSOLETE_PinnedAppsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  obsolete_app_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.OBSOLETE_PinnedAppsProto)
}
OBSOLETE_PinnedAppsProto::OBSOLETE_PinnedAppsProto(const OBSOLETE_PinnedAppsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      obsolete_app_id_(from.obsolete_app_id_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.OBSOLETE_PinnedAppsProto)
}

void OBSOLETE_PinnedAppsProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OBSOLETE_PinnedAppsProto_chrome_5fdevice_5fpolicy_2eproto.base);
}

OBSOLETE_PinnedAppsProto::~OBSOLETE_PinnedAppsProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.OBSOLETE_PinnedAppsProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void OBSOLETE_PinnedAppsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OBSOLETE_PinnedAppsProto::ArenaDtor(void* object) {
  OBSOLETE_PinnedAppsProto* _this = reinterpret_cast< OBSOLETE_PinnedAppsProto* >(object);
  (void)_this;
}
void OBSOLETE_PinnedAppsProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OBSOLETE_PinnedAppsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OBSOLETE_PinnedAppsProto& OBSOLETE_PinnedAppsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OBSOLETE_PinnedAppsProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void OBSOLETE_PinnedAppsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.OBSOLETE_PinnedAppsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obsolete_app_id_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* OBSOLETE_PinnedAppsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string OBSOLETE_app_id = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_obsolete_app_id();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OBSOLETE_PinnedAppsProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.OBSOLETE_PinnedAppsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string OBSOLETE_app_id = 1 [deprecated = true];
  for (int i = 0, n = this->_internal_obsolete_app_id_size(); i < n; i++) {
    const auto& s = this->_internal_obsolete_app_id(i);
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.OBSOLETE_PinnedAppsProto)
  return target;
}

size_t OBSOLETE_PinnedAppsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.OBSOLETE_PinnedAppsProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string OBSOLETE_app_id = 1 [deprecated = true];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(obsolete_app_id_.size());
  for (int i = 0, n = obsolete_app_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      obsolete_app_id_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OBSOLETE_PinnedAppsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const OBSOLETE_PinnedAppsProto*>(
      &from));
}

void OBSOLETE_PinnedAppsProto::MergeFrom(const OBSOLETE_PinnedAppsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.OBSOLETE_PinnedAppsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obsolete_app_id_.MergeFrom(from.obsolete_app_id_);
}

void OBSOLETE_PinnedAppsProto::CopyFrom(const OBSOLETE_PinnedAppsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.OBSOLETE_PinnedAppsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OBSOLETE_PinnedAppsProto::IsInitialized() const {
  return true;
}

void OBSOLETE_PinnedAppsProto::InternalSwap(OBSOLETE_PinnedAppsProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  obsolete_app_id_.InternalSwap(&other->obsolete_app_id_);
}

std::string OBSOLETE_PinnedAppsProto::GetTypeName() const {
  return "enterprise_management.OBSOLETE_PinnedAppsProto";
}


// ===================================================================

void OBSOLETE_ForcedLogoutTimeoutsProto::InitAsDefaultInstance() {
}
class OBSOLETE_ForcedLogoutTimeoutsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<OBSOLETE_ForcedLogoutTimeoutsProto>()._has_bits_);
  static void set_has_obsolete_idle_logout_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_obsolete_idle_logout_warning_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

OBSOLETE_ForcedLogoutTimeoutsProto::OBSOLETE_ForcedLogoutTimeoutsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.OBSOLETE_ForcedLogoutTimeoutsProto)
}
OBSOLETE_ForcedLogoutTimeoutsProto::OBSOLETE_ForcedLogoutTimeoutsProto(const OBSOLETE_ForcedLogoutTimeoutsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&obsolete_idle_logout_timeout_, &from.obsolete_idle_logout_timeout_,
    static_cast<size_t>(reinterpret_cast<char*>(&obsolete_idle_logout_warning_duration_) -
    reinterpret_cast<char*>(&obsolete_idle_logout_timeout_)) + sizeof(obsolete_idle_logout_warning_duration_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.OBSOLETE_ForcedLogoutTimeoutsProto)
}

void OBSOLETE_ForcedLogoutTimeoutsProto::SharedCtor() {
  ::memset(&obsolete_idle_logout_timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obsolete_idle_logout_warning_duration_) -
      reinterpret_cast<char*>(&obsolete_idle_logout_timeout_)) + sizeof(obsolete_idle_logout_warning_duration_));
}

OBSOLETE_ForcedLogoutTimeoutsProto::~OBSOLETE_ForcedLogoutTimeoutsProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.OBSOLETE_ForcedLogoutTimeoutsProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void OBSOLETE_ForcedLogoutTimeoutsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OBSOLETE_ForcedLogoutTimeoutsProto::ArenaDtor(void* object) {
  OBSOLETE_ForcedLogoutTimeoutsProto* _this = reinterpret_cast< OBSOLETE_ForcedLogoutTimeoutsProto* >(object);
  (void)_this;
}
void OBSOLETE_ForcedLogoutTimeoutsProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OBSOLETE_ForcedLogoutTimeoutsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OBSOLETE_ForcedLogoutTimeoutsProto& OBSOLETE_ForcedLogoutTimeoutsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OBSOLETE_ForcedLogoutTimeoutsProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void OBSOLETE_ForcedLogoutTimeoutsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.OBSOLETE_ForcedLogoutTimeoutsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&obsolete_idle_logout_timeout_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&obsolete_idle_logout_warning_duration_) -
        reinterpret_cast<char*>(&obsolete_idle_logout_timeout_)) + sizeof(obsolete_idle_logout_warning_duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* OBSOLETE_ForcedLogoutTimeoutsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 OBSOLETE_idle_logout_timeout = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_obsolete_idle_logout_timeout(&has_bits);
          obsolete_idle_logout_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 OBSOLETE_idle_logout_warning_duration = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_obsolete_idle_logout_warning_duration(&has_bits);
          obsolete_idle_logout_warning_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OBSOLETE_ForcedLogoutTimeoutsProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.OBSOLETE_ForcedLogoutTimeoutsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 OBSOLETE_idle_logout_timeout = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_obsolete_idle_logout_timeout(), target);
  }

  // optional int64 OBSOLETE_idle_logout_warning_duration = 2 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_obsolete_idle_logout_warning_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.OBSOLETE_ForcedLogoutTimeoutsProto)
  return target;
}

size_t OBSOLETE_ForcedLogoutTimeoutsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.OBSOLETE_ForcedLogoutTimeoutsProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 OBSOLETE_idle_logout_timeout = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_obsolete_idle_logout_timeout());
    }

    // optional int64 OBSOLETE_idle_logout_warning_duration = 2 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_obsolete_idle_logout_warning_duration());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OBSOLETE_ForcedLogoutTimeoutsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const OBSOLETE_ForcedLogoutTimeoutsProto*>(
      &from));
}

void OBSOLETE_ForcedLogoutTimeoutsProto::MergeFrom(const OBSOLETE_ForcedLogoutTimeoutsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.OBSOLETE_ForcedLogoutTimeoutsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      obsolete_idle_logout_timeout_ = from.obsolete_idle_logout_timeout_;
    }
    if (cached_has_bits & 0x00000002u) {
      obsolete_idle_logout_warning_duration_ = from.obsolete_idle_logout_warning_duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OBSOLETE_ForcedLogoutTimeoutsProto::CopyFrom(const OBSOLETE_ForcedLogoutTimeoutsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.OBSOLETE_ForcedLogoutTimeoutsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OBSOLETE_ForcedLogoutTimeoutsProto::IsInitialized() const {
  return true;
}

void OBSOLETE_ForcedLogoutTimeoutsProto::InternalSwap(OBSOLETE_ForcedLogoutTimeoutsProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OBSOLETE_ForcedLogoutTimeoutsProto, obsolete_idle_logout_warning_duration_)
      + sizeof(OBSOLETE_ForcedLogoutTimeoutsProto::obsolete_idle_logout_warning_duration_)
      - PROTOBUF_FIELD_OFFSET(OBSOLETE_ForcedLogoutTimeoutsProto, obsolete_idle_logout_timeout_)>(
          reinterpret_cast<char*>(&obsolete_idle_logout_timeout_),
          reinterpret_cast<char*>(&other->obsolete_idle_logout_timeout_));
}

std::string OBSOLETE_ForcedLogoutTimeoutsProto::GetTypeName() const {
  return "enterprise_management.OBSOLETE_ForcedLogoutTimeoutsProto";
}


// ===================================================================

void OBSOLETE_ScreenSaverProto::InitAsDefaultInstance() {
}
class OBSOLETE_ScreenSaverProto::_Internal {
 public:
  using HasBits = decltype(std::declval<OBSOLETE_ScreenSaverProto>()._has_bits_);
  static void set_has_obsolete_screen_saver_extension_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_obsolete_screen_saver_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

OBSOLETE_ScreenSaverProto::OBSOLETE_ScreenSaverProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.OBSOLETE_ScreenSaverProto)
}
OBSOLETE_ScreenSaverProto::OBSOLETE_ScreenSaverProto(const OBSOLETE_ScreenSaverProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  obsolete_screen_saver_extension_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_obsolete_screen_saver_extension_id()) {
    obsolete_screen_saver_extension_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_obsolete_screen_saver_extension_id(),
      GetArena());
  }
  obsolete_screen_saver_timeout_ = from.obsolete_screen_saver_timeout_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.OBSOLETE_ScreenSaverProto)
}

void OBSOLETE_ScreenSaverProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OBSOLETE_ScreenSaverProto_chrome_5fdevice_5fpolicy_2eproto.base);
  obsolete_screen_saver_extension_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  obsolete_screen_saver_timeout_ = PROTOBUF_LONGLONG(0);
}

OBSOLETE_ScreenSaverProto::~OBSOLETE_ScreenSaverProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.OBSOLETE_ScreenSaverProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void OBSOLETE_ScreenSaverProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  obsolete_screen_saver_extension_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OBSOLETE_ScreenSaverProto::ArenaDtor(void* object) {
  OBSOLETE_ScreenSaverProto* _this = reinterpret_cast< OBSOLETE_ScreenSaverProto* >(object);
  (void)_this;
}
void OBSOLETE_ScreenSaverProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OBSOLETE_ScreenSaverProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OBSOLETE_ScreenSaverProto& OBSOLETE_ScreenSaverProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OBSOLETE_ScreenSaverProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void OBSOLETE_ScreenSaverProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.OBSOLETE_ScreenSaverProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    obsolete_screen_saver_extension_id_.ClearNonDefaultToEmpty();
  }
  obsolete_screen_saver_timeout_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* OBSOLETE_ScreenSaverProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string OBSOLETE_screen_saver_extension_id = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_obsolete_screen_saver_extension_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 OBSOLETE_screen_saver_timeout = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_obsolete_screen_saver_timeout(&has_bits);
          obsolete_screen_saver_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OBSOLETE_ScreenSaverProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.OBSOLETE_ScreenSaverProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string OBSOLETE_screen_saver_extension_id = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_obsolete_screen_saver_extension_id(), target);
  }

  // optional int64 OBSOLETE_screen_saver_timeout = 2 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_obsolete_screen_saver_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.OBSOLETE_ScreenSaverProto)
  return target;
}

size_t OBSOLETE_ScreenSaverProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.OBSOLETE_ScreenSaverProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string OBSOLETE_screen_saver_extension_id = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_obsolete_screen_saver_extension_id());
    }

    // optional int64 OBSOLETE_screen_saver_timeout = 2 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_obsolete_screen_saver_timeout());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OBSOLETE_ScreenSaverProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const OBSOLETE_ScreenSaverProto*>(
      &from));
}

void OBSOLETE_ScreenSaverProto::MergeFrom(const OBSOLETE_ScreenSaverProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.OBSOLETE_ScreenSaverProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_obsolete_screen_saver_extension_id(from._internal_obsolete_screen_saver_extension_id());
    }
    if (cached_has_bits & 0x00000002u) {
      obsolete_screen_saver_timeout_ = from.obsolete_screen_saver_timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OBSOLETE_ScreenSaverProto::CopyFrom(const OBSOLETE_ScreenSaverProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.OBSOLETE_ScreenSaverProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OBSOLETE_ScreenSaverProto::IsInitialized() const {
  return true;
}

void OBSOLETE_ScreenSaverProto::InternalSwap(OBSOLETE_ScreenSaverProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  obsolete_screen_saver_extension_id_.Swap(&other->obsolete_screen_saver_extension_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(obsolete_screen_saver_timeout_, other->obsolete_screen_saver_timeout_);
}

std::string OBSOLETE_ScreenSaverProto::GetTypeName() const {
  return "enterprise_management.OBSOLETE_ScreenSaverProto";
}


// ===================================================================

void AutoUpdateSettingsProto::InitAsDefaultInstance() {
}
class AutoUpdateSettingsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AutoUpdateSettingsProto>()._has_bits_);
  static void set_has_update_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_target_version_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_version_display_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_scatter_factor_in_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_obsolete_reboot_after_update(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_http_downloads_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_reboot_after_update(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_p2p_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_rollback_to_target_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_rollback_allowed_milestones(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_disallowed_time_intervals(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_staging_schedule(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_device_quick_fix_build_token(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

AutoUpdateSettingsProto::AutoUpdateSettingsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  allowed_connection_types_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.AutoUpdateSettingsProto)
}
AutoUpdateSettingsProto::AutoUpdateSettingsProto(const AutoUpdateSettingsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      allowed_connection_types_(from.allowed_connection_types_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  target_version_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_target_version_prefix()) {
    target_version_prefix_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_target_version_prefix(),
      GetArena());
  }
  target_version_display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_target_version_display_name()) {
    target_version_display_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_target_version_display_name(),
      GetArena());
  }
  disallowed_time_intervals_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_disallowed_time_intervals()) {
    disallowed_time_intervals_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_disallowed_time_intervals(),
      GetArena());
  }
  staging_schedule_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_staging_schedule()) {
    staging_schedule_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_staging_schedule(),
      GetArena());
  }
  device_quick_fix_build_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_device_quick_fix_build_token()) {
    device_quick_fix_build_token_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_quick_fix_build_token(),
      GetArena());
  }
  ::memcpy(&scatter_factor_in_seconds_, &from.scatter_factor_in_seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&rollback_to_target_version_) -
    reinterpret_cast<char*>(&scatter_factor_in_seconds_)) + sizeof(rollback_to_target_version_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.AutoUpdateSettingsProto)
}

void AutoUpdateSettingsProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AutoUpdateSettingsProto_chrome_5fdevice_5fpolicy_2eproto.base);
  target_version_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_version_display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  disallowed_time_intervals_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  staging_schedule_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_quick_fix_build_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&scatter_factor_in_seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rollback_allowed_milestones_) -
      reinterpret_cast<char*>(&scatter_factor_in_seconds_)) + sizeof(rollback_allowed_milestones_));
  rollback_to_target_version_ = 1;
}

AutoUpdateSettingsProto::~AutoUpdateSettingsProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.AutoUpdateSettingsProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AutoUpdateSettingsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  target_version_prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_version_display_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  disallowed_time_intervals_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  staging_schedule_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_quick_fix_build_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AutoUpdateSettingsProto::ArenaDtor(void* object) {
  AutoUpdateSettingsProto* _this = reinterpret_cast< AutoUpdateSettingsProto* >(object);
  (void)_this;
}
void AutoUpdateSettingsProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AutoUpdateSettingsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutoUpdateSettingsProto& AutoUpdateSettingsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutoUpdateSettingsProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void AutoUpdateSettingsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.AutoUpdateSettingsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allowed_connection_types_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      target_version_prefix_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      target_version_display_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      disallowed_time_intervals_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      staging_schedule_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      device_quick_fix_build_token_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&scatter_factor_in_seconds_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&obsolete_reboot_after_update_) -
        reinterpret_cast<char*>(&scatter_factor_in_seconds_)) + sizeof(obsolete_reboot_after_update_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&http_downloads_enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rollback_allowed_milestones_) -
        reinterpret_cast<char*>(&http_downloads_enabled_)) + sizeof(rollback_allowed_milestones_));
    rollback_to_target_version_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AutoUpdateSettingsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool update_disabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_update_disabled(&has_bits);
          update_disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string target_version_prefix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_target_version_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string target_version_display_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_target_version_display_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 scatter_factor_in_seconds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_scatter_factor_in_seconds(&has_bits);
          scatter_factor_in_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .enterprise_management.AutoUpdateSettingsProto.ConnectionType allowed_connection_types = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::enterprise_management::AutoUpdateSettingsProto_ConnectionType_IsValid(val))) {
              _internal_add_allowed_connection_types(static_cast<::enterprise_management::AutoUpdateSettingsProto_ConnectionType>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<std::string>(_internal_mutable_allowed_connection_types(), ptr, ctx, ::enterprise_management::AutoUpdateSettingsProto_ConnectionType_IsValid, &_internal_metadata_, 5);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool OBSOLETE_reboot_after_update = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_obsolete_reboot_after_update(&has_bits);
          obsolete_reboot_after_update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool http_downloads_enabled = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_http_downloads_enabled(&has_bits);
          http_downloads_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool reboot_after_update = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_reboot_after_update(&has_bits);
          reboot_after_update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool p2p_enabled = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_p2p_enabled(&has_bits);
          p2p_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.AutoUpdateSettingsProto.RollbackToTargetVersion rollback_to_target_version = 10 [default = ROLLBACK_DISABLED];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::AutoUpdateSettingsProto_RollbackToTargetVersion_IsValid(val))) {
            _internal_set_rollback_to_target_version(static_cast<::enterprise_management::AutoUpdateSettingsProto_RollbackToTargetVersion>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 rollback_allowed_milestones = 11 [default = 0];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_rollback_allowed_milestones(&has_bits);
          rollback_allowed_milestones_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string disallowed_time_intervals = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_disallowed_time_intervals();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string staging_schedule = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_staging_schedule();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string device_quick_fix_build_token = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_device_quick_fix_build_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AutoUpdateSettingsProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.AutoUpdateSettingsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool update_disabled = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_update_disabled(), target);
  }

  // optional string target_version_prefix = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_target_version_prefix(), target);
  }

  // optional string target_version_display_name = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_target_version_display_name(), target);
  }

  // optional int64 scatter_factor_in_seconds = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_scatter_factor_in_seconds(), target);
  }

  // repeated .enterprise_management.AutoUpdateSettingsProto.ConnectionType allowed_connection_types = 5;
  for (int i = 0, n = this->_internal_allowed_connection_types_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        5, this->_internal_allowed_connection_types(i), target);
  }

  // optional bool OBSOLETE_reboot_after_update = 6 [deprecated = true];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_obsolete_reboot_after_update(), target);
  }

  // optional bool http_downloads_enabled = 7 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_http_downloads_enabled(), target);
  }

  // optional bool reboot_after_update = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_reboot_after_update(), target);
  }

  // optional bool p2p_enabled = 9 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_p2p_enabled(), target);
  }

  // optional .enterprise_management.AutoUpdateSettingsProto.RollbackToTargetVersion rollback_to_target_version = 10 [default = ROLLBACK_DISABLED];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_rollback_to_target_version(), target);
  }

  // optional int32 rollback_allowed_milestones = 11 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_rollback_allowed_milestones(), target);
  }

  // optional string disallowed_time_intervals = 12;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_disallowed_time_intervals(), target);
  }

  // optional string staging_schedule = 14;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_staging_schedule(), target);
  }

  // optional string device_quick_fix_build_token = 15;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_device_quick_fix_build_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.AutoUpdateSettingsProto)
  return target;
}

size_t AutoUpdateSettingsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.AutoUpdateSettingsProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .enterprise_management.AutoUpdateSettingsProto.ConnectionType allowed_connection_types = 5;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_allowed_connection_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_allowed_connection_types(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string target_version_prefix = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_target_version_prefix());
    }

    // optional string target_version_display_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_target_version_display_name());
    }

    // optional string disallowed_time_intervals = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_disallowed_time_intervals());
    }

    // optional string staging_schedule = 14;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_staging_schedule());
    }

    // optional string device_quick_fix_build_token = 15;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_device_quick_fix_build_token());
    }

    // optional int64 scatter_factor_in_seconds = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_scatter_factor_in_seconds());
    }

    // optional bool update_disabled = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool OBSOLETE_reboot_after_update = 6 [deprecated = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional bool http_downloads_enabled = 7 [default = false];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool reboot_after_update = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool p2p_enabled = 9 [default = false];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional int32 rollback_allowed_milestones = 11 [default = 0];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rollback_allowed_milestones());
    }

    // optional .enterprise_management.AutoUpdateSettingsProto.RollbackToTargetVersion rollback_to_target_version = 10 [default = ROLLBACK_DISABLED];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rollback_to_target_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutoUpdateSettingsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AutoUpdateSettingsProto*>(
      &from));
}

void AutoUpdateSettingsProto::MergeFrom(const AutoUpdateSettingsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.AutoUpdateSettingsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allowed_connection_types_.MergeFrom(from.allowed_connection_types_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_target_version_prefix(from._internal_target_version_prefix());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_target_version_display_name(from._internal_target_version_display_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_disallowed_time_intervals(from._internal_disallowed_time_intervals());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_staging_schedule(from._internal_staging_schedule());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_device_quick_fix_build_token(from._internal_device_quick_fix_build_token());
    }
    if (cached_has_bits & 0x00000020u) {
      scatter_factor_in_seconds_ = from.scatter_factor_in_seconds_;
    }
    if (cached_has_bits & 0x00000040u) {
      update_disabled_ = from.update_disabled_;
    }
    if (cached_has_bits & 0x00000080u) {
      obsolete_reboot_after_update_ = from.obsolete_reboot_after_update_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      http_downloads_enabled_ = from.http_downloads_enabled_;
    }
    if (cached_has_bits & 0x00000200u) {
      reboot_after_update_ = from.reboot_after_update_;
    }
    if (cached_has_bits & 0x00000400u) {
      p2p_enabled_ = from.p2p_enabled_;
    }
    if (cached_has_bits & 0x00000800u) {
      rollback_allowed_milestones_ = from.rollback_allowed_milestones_;
    }
    if (cached_has_bits & 0x00001000u) {
      rollback_to_target_version_ = from.rollback_to_target_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AutoUpdateSettingsProto::CopyFrom(const AutoUpdateSettingsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.AutoUpdateSettingsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoUpdateSettingsProto::IsInitialized() const {
  return true;
}

void AutoUpdateSettingsProto::InternalSwap(AutoUpdateSettingsProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  allowed_connection_types_.InternalSwap(&other->allowed_connection_types_);
  target_version_prefix_.Swap(&other->target_version_prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  target_version_display_name_.Swap(&other->target_version_display_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  disallowed_time_intervals_.Swap(&other->disallowed_time_intervals_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  staging_schedule_.Swap(&other->staging_schedule_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_quick_fix_build_token_.Swap(&other->device_quick_fix_build_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutoUpdateSettingsProto, rollback_allowed_milestones_)
      + sizeof(AutoUpdateSettingsProto::rollback_allowed_milestones_)
      - PROTOBUF_FIELD_OFFSET(AutoUpdateSettingsProto, scatter_factor_in_seconds_)>(
          reinterpret_cast<char*>(&scatter_factor_in_seconds_),
          reinterpret_cast<char*>(&other->scatter_factor_in_seconds_));
  swap(rollback_to_target_version_, other->rollback_to_target_version_);
}

std::string AutoUpdateSettingsProto::GetTypeName() const {
  return "enterprise_management.AutoUpdateSettingsProto";
}


// ===================================================================

void OBSOLETE_StartUpUrlsProto::InitAsDefaultInstance() {
}
class OBSOLETE_StartUpUrlsProto::_Internal {
 public:
};

OBSOLETE_StartUpUrlsProto::OBSOLETE_StartUpUrlsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  obsolete_start_up_urls_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.OBSOLETE_StartUpUrlsProto)
}
OBSOLETE_StartUpUrlsProto::OBSOLETE_StartUpUrlsProto(const OBSOLETE_StartUpUrlsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      obsolete_start_up_urls_(from.obsolete_start_up_urls_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.OBSOLETE_StartUpUrlsProto)
}

void OBSOLETE_StartUpUrlsProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OBSOLETE_StartUpUrlsProto_chrome_5fdevice_5fpolicy_2eproto.base);
}

OBSOLETE_StartUpUrlsProto::~OBSOLETE_StartUpUrlsProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.OBSOLETE_StartUpUrlsProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void OBSOLETE_StartUpUrlsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OBSOLETE_StartUpUrlsProto::ArenaDtor(void* object) {
  OBSOLETE_StartUpUrlsProto* _this = reinterpret_cast< OBSOLETE_StartUpUrlsProto* >(object);
  (void)_this;
}
void OBSOLETE_StartUpUrlsProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OBSOLETE_StartUpUrlsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OBSOLETE_StartUpUrlsProto& OBSOLETE_StartUpUrlsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OBSOLETE_StartUpUrlsProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void OBSOLETE_StartUpUrlsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.OBSOLETE_StartUpUrlsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obsolete_start_up_urls_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* OBSOLETE_StartUpUrlsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string OBSOLETE_start_up_urls = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_obsolete_start_up_urls();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OBSOLETE_StartUpUrlsProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.OBSOLETE_StartUpUrlsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string OBSOLETE_start_up_urls = 1 [deprecated = true];
  for (int i = 0, n = this->_internal_obsolete_start_up_urls_size(); i < n; i++) {
    const auto& s = this->_internal_obsolete_start_up_urls(i);
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.OBSOLETE_StartUpUrlsProto)
  return target;
}

size_t OBSOLETE_StartUpUrlsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.OBSOLETE_StartUpUrlsProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string OBSOLETE_start_up_urls = 1 [deprecated = true];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(obsolete_start_up_urls_.size());
  for (int i = 0, n = obsolete_start_up_urls_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      obsolete_start_up_urls_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OBSOLETE_StartUpUrlsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const OBSOLETE_StartUpUrlsProto*>(
      &from));
}

void OBSOLETE_StartUpUrlsProto::MergeFrom(const OBSOLETE_StartUpUrlsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.OBSOLETE_StartUpUrlsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obsolete_start_up_urls_.MergeFrom(from.obsolete_start_up_urls_);
}

void OBSOLETE_StartUpUrlsProto::CopyFrom(const OBSOLETE_StartUpUrlsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.OBSOLETE_StartUpUrlsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OBSOLETE_StartUpUrlsProto::IsInitialized() const {
  return true;
}

void OBSOLETE_StartUpUrlsProto::InternalSwap(OBSOLETE_StartUpUrlsProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  obsolete_start_up_urls_.InternalSwap(&other->obsolete_start_up_urls_);
}

std::string OBSOLETE_StartUpUrlsProto::GetTypeName() const {
  return "enterprise_management.OBSOLETE_StartUpUrlsProto";
}


// ===================================================================

void SystemTimezoneProto::InitAsDefaultInstance() {
}
class SystemTimezoneProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemTimezoneProto>()._has_bits_);
  static void set_has_timezone(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timezone_detection_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SystemTimezoneProto::SystemTimezoneProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.SystemTimezoneProto)
}
SystemTimezoneProto::SystemTimezoneProto(const SystemTimezoneProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  timezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_timezone()) {
    timezone_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_timezone(),
      GetArena());
  }
  timezone_detection_type_ = from.timezone_detection_type_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.SystemTimezoneProto)
}

void SystemTimezoneProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SystemTimezoneProto_chrome_5fdevice_5fpolicy_2eproto.base);
  timezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timezone_detection_type_ = 0;
}

SystemTimezoneProto::~SystemTimezoneProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.SystemTimezoneProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SystemTimezoneProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  timezone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SystemTimezoneProto::ArenaDtor(void* object) {
  SystemTimezoneProto* _this = reinterpret_cast< SystemTimezoneProto* >(object);
  (void)_this;
}
void SystemTimezoneProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SystemTimezoneProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemTimezoneProto& SystemTimezoneProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemTimezoneProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void SystemTimezoneProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.SystemTimezoneProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    timezone_.ClearNonDefaultToEmpty();
  }
  timezone_detection_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SystemTimezoneProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string timezone = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_timezone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.SystemTimezoneProto.AutomaticTimezoneDetectionType timezone_detection_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::SystemTimezoneProto_AutomaticTimezoneDetectionType_IsValid(val))) {
            _internal_set_timezone_detection_type(static_cast<::enterprise_management::SystemTimezoneProto_AutomaticTimezoneDetectionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SystemTimezoneProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.SystemTimezoneProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string timezone = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_timezone(), target);
  }

  // optional .enterprise_management.SystemTimezoneProto.AutomaticTimezoneDetectionType timezone_detection_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_timezone_detection_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.SystemTimezoneProto)
  return target;
}

size_t SystemTimezoneProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.SystemTimezoneProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string timezone = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_timezone());
    }

    // optional .enterprise_management.SystemTimezoneProto.AutomaticTimezoneDetectionType timezone_detection_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_timezone_detection_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemTimezoneProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SystemTimezoneProto*>(
      &from));
}

void SystemTimezoneProto::MergeFrom(const SystemTimezoneProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.SystemTimezoneProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_timezone(from._internal_timezone());
    }
    if (cached_has_bits & 0x00000002u) {
      timezone_detection_type_ = from.timezone_detection_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SystemTimezoneProto::CopyFrom(const SystemTimezoneProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.SystemTimezoneProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemTimezoneProto::IsInitialized() const {
  return true;
}

void SystemTimezoneProto::InternalSwap(SystemTimezoneProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  timezone_.Swap(&other->timezone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(timezone_detection_type_, other->timezone_detection_type_);
}

std::string SystemTimezoneProto::GetTypeName() const {
  return "enterprise_management.SystemTimezoneProto";
}


// ===================================================================

void SystemUse24HourClockProto::InitAsDefaultInstance() {
}
class SystemUse24HourClockProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemUse24HourClockProto>()._has_bits_);
  static void set_has_use_24hour_clock(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SystemUse24HourClockProto::SystemUse24HourClockProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.SystemUse24HourClockProto)
}
SystemUse24HourClockProto::SystemUse24HourClockProto(const SystemUse24HourClockProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  use_24hour_clock_ = from.use_24hour_clock_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.SystemUse24HourClockProto)
}

void SystemUse24HourClockProto::SharedCtor() {
  use_24hour_clock_ = false;
}

SystemUse24HourClockProto::~SystemUse24HourClockProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.SystemUse24HourClockProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SystemUse24HourClockProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SystemUse24HourClockProto::ArenaDtor(void* object) {
  SystemUse24HourClockProto* _this = reinterpret_cast< SystemUse24HourClockProto* >(object);
  (void)_this;
}
void SystemUse24HourClockProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SystemUse24HourClockProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemUse24HourClockProto& SystemUse24HourClockProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemUse24HourClockProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void SystemUse24HourClockProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.SystemUse24HourClockProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  use_24hour_clock_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SystemUse24HourClockProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool use_24hour_clock = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_use_24hour_clock(&has_bits);
          use_24hour_clock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SystemUse24HourClockProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.SystemUse24HourClockProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool use_24hour_clock = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_use_24hour_clock(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.SystemUse24HourClockProto)
  return target;
}

size_t SystemUse24HourClockProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.SystemUse24HourClockProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool use_24hour_clock = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemUse24HourClockProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SystemUse24HourClockProto*>(
      &from));
}

void SystemUse24HourClockProto::MergeFrom(const SystemUse24HourClockProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.SystemUse24HourClockProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_use_24hour_clock()) {
    _internal_set_use_24hour_clock(from._internal_use_24hour_clock());
  }
}

void SystemUse24HourClockProto::CopyFrom(const SystemUse24HourClockProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.SystemUse24HourClockProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemUse24HourClockProto::IsInitialized() const {
  return true;
}

void SystemUse24HourClockProto::InternalSwap(SystemUse24HourClockProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(use_24hour_clock_, other->use_24hour_clock_);
}

std::string SystemUse24HourClockProto::GetTypeName() const {
  return "enterprise_management.SystemUse24HourClockProto";
}


// ===================================================================

void KioskAppInfoProto::InitAsDefaultInstance() {
}
class KioskAppInfoProto::_Internal {
 public:
  using HasBits = decltype(std::declval<KioskAppInfoProto>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_update_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

KioskAppInfoProto::KioskAppInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.KioskAppInfoProto)
}
KioskAppInfoProto::KioskAppInfoProto(const KioskAppInfoProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_app_id()) {
    app_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_app_id(),
      GetArena());
  }
  update_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_update_url()) {
    update_url_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_update_url(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.KioskAppInfoProto)
}

void KioskAppInfoProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KioskAppInfoProto_chrome_5fdevice_5fpolicy_2eproto.base);
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  update_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

KioskAppInfoProto::~KioskAppInfoProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.KioskAppInfoProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void KioskAppInfoProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  update_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KioskAppInfoProto::ArenaDtor(void* object) {
  KioskAppInfoProto* _this = reinterpret_cast< KioskAppInfoProto* >(object);
  (void)_this;
}
void KioskAppInfoProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KioskAppInfoProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KioskAppInfoProto& KioskAppInfoProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KioskAppInfoProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void KioskAppInfoProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.KioskAppInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      app_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      update_url_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* KioskAppInfoProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string update_url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_update_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KioskAppInfoProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.KioskAppInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app_id(), target);
  }

  // optional string update_url = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_update_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.KioskAppInfoProto)
  return target;
}

size_t KioskAppInfoProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.KioskAppInfoProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string app_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_app_id());
    }

    // optional string update_url = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_update_url());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KioskAppInfoProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const KioskAppInfoProto*>(
      &from));
}

void KioskAppInfoProto::MergeFrom(const KioskAppInfoProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.KioskAppInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_app_id(from._internal_app_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_update_url(from._internal_update_url());
    }
  }
}

void KioskAppInfoProto::CopyFrom(const KioskAppInfoProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.KioskAppInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KioskAppInfoProto::IsInitialized() const {
  return true;
}

void KioskAppInfoProto::InternalSwap(KioskAppInfoProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  app_id_.Swap(&other->app_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  update_url_.Swap(&other->update_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string KioskAppInfoProto::GetTypeName() const {
  return "enterprise_management.KioskAppInfoProto";
}


// ===================================================================

void AndroidKioskAppInfoProto::InitAsDefaultInstance() {
}
class AndroidKioskAppInfoProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AndroidKioskAppInfoProto>()._has_bits_);
  static void set_has_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_class_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_display_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

AndroidKioskAppInfoProto::AndroidKioskAppInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.AndroidKioskAppInfoProto)
}
AndroidKioskAppInfoProto::AndroidKioskAppInfoProto(const AndroidKioskAppInfoProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_package_name()) {
    package_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_package_name(),
      GetArena());
  }
  class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_class_name()) {
    class_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_class_name(),
      GetArena());
  }
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_action()) {
    action_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_action(),
      GetArena());
  }
  display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_display_name()) {
    display_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_display_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.AndroidKioskAppInfoProto)
}

void AndroidKioskAppInfoProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AndroidKioskAppInfoProto_chrome_5fdevice_5fpolicy_2eproto.base);
  package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AndroidKioskAppInfoProto::~AndroidKioskAppInfoProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.AndroidKioskAppInfoProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AndroidKioskAppInfoProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  package_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  class_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AndroidKioskAppInfoProto::ArenaDtor(void* object) {
  AndroidKioskAppInfoProto* _this = reinterpret_cast< AndroidKioskAppInfoProto* >(object);
  (void)_this;
}
void AndroidKioskAppInfoProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AndroidKioskAppInfoProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AndroidKioskAppInfoProto& AndroidKioskAppInfoProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AndroidKioskAppInfoProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void AndroidKioskAppInfoProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.AndroidKioskAppInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      package_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      class_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      action_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      display_name_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AndroidKioskAppInfoProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string package_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_package_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string class_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_class_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string display_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_display_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AndroidKioskAppInfoProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.AndroidKioskAppInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string package_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_package_name(), target);
  }

  // optional string class_name = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_class_name(), target);
  }

  // optional string action = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  // optional string display_name = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_display_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.AndroidKioskAppInfoProto)
  return target;
}

size_t AndroidKioskAppInfoProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.AndroidKioskAppInfoProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string package_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_package_name());
    }

    // optional string class_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_class_name());
    }

    // optional string action = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_action());
    }

    // optional string display_name = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_display_name());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AndroidKioskAppInfoProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AndroidKioskAppInfoProto*>(
      &from));
}

void AndroidKioskAppInfoProto::MergeFrom(const AndroidKioskAppInfoProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.AndroidKioskAppInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_package_name(from._internal_package_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_class_name(from._internal_class_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_action(from._internal_action());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_display_name(from._internal_display_name());
    }
  }
}

void AndroidKioskAppInfoProto::CopyFrom(const AndroidKioskAppInfoProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.AndroidKioskAppInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidKioskAppInfoProto::IsInitialized() const {
  return true;
}

void AndroidKioskAppInfoProto::InternalSwap(AndroidKioskAppInfoProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  package_name_.Swap(&other->package_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  class_name_.Swap(&other->class_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  display_name_.Swap(&other->display_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string AndroidKioskAppInfoProto::GetTypeName() const {
  return "enterprise_management.AndroidKioskAppInfoProto";
}


// ===================================================================

void WebKioskAppInfoProto::InitAsDefaultInstance() {
}
class WebKioskAppInfoProto::_Internal {
 public:
  using HasBits = decltype(std::declval<WebKioskAppInfoProto>()._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

WebKioskAppInfoProto::WebKioskAppInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.WebKioskAppInfoProto)
}
WebKioskAppInfoProto::WebKioskAppInfoProto(const WebKioskAppInfoProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url()) {
    url_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_url(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.WebKioskAppInfoProto)
}

void WebKioskAppInfoProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WebKioskAppInfoProto_chrome_5fdevice_5fpolicy_2eproto.base);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WebKioskAppInfoProto::~WebKioskAppInfoProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.WebKioskAppInfoProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void WebKioskAppInfoProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WebKioskAppInfoProto::ArenaDtor(void* object) {
  WebKioskAppInfoProto* _this = reinterpret_cast< WebKioskAppInfoProto* >(object);
  (void)_this;
}
void WebKioskAppInfoProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WebKioskAppInfoProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WebKioskAppInfoProto& WebKioskAppInfoProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WebKioskAppInfoProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void WebKioskAppInfoProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.WebKioskAppInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    url_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* WebKioskAppInfoProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WebKioskAppInfoProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.WebKioskAppInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.WebKioskAppInfoProto)
  return target;
}

size_t WebKioskAppInfoProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.WebKioskAppInfoProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string url = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WebKioskAppInfoProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const WebKioskAppInfoProto*>(
      &from));
}

void WebKioskAppInfoProto::MergeFrom(const WebKioskAppInfoProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.WebKioskAppInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_url()) {
    _internal_set_url(from._internal_url());
  }
}

void WebKioskAppInfoProto::CopyFrom(const WebKioskAppInfoProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.WebKioskAppInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebKioskAppInfoProto::IsInitialized() const {
  return true;
}

void WebKioskAppInfoProto::InternalSwap(WebKioskAppInfoProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string WebKioskAppInfoProto::GetTypeName() const {
  return "enterprise_management.WebKioskAppInfoProto";
}


// ===================================================================

void DeviceLocalAccountInfoProto::InitAsDefaultInstance() {
  ::enterprise_management::_DeviceLocalAccountInfoProto_default_instance_._instance.get_mutable()->kiosk_app_ = const_cast< ::enterprise_management::KioskAppInfoProto*>(
      ::enterprise_management::KioskAppInfoProto::internal_default_instance());
  ::enterprise_management::_DeviceLocalAccountInfoProto_default_instance_._instance.get_mutable()->android_kiosk_app_ = const_cast< ::enterprise_management::AndroidKioskAppInfoProto*>(
      ::enterprise_management::AndroidKioskAppInfoProto::internal_default_instance());
  ::enterprise_management::_DeviceLocalAccountInfoProto_default_instance_._instance.get_mutable()->web_kiosk_app_ = const_cast< ::enterprise_management::WebKioskAppInfoProto*>(
      ::enterprise_management::WebKioskAppInfoProto::internal_default_instance());
}
class DeviceLocalAccountInfoProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceLocalAccountInfoProto>()._has_bits_);
  static void set_has_deprecated_public_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::enterprise_management::KioskAppInfoProto& kiosk_app(const DeviceLocalAccountInfoProto* msg);
  static void set_has_kiosk_app(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::enterprise_management::AndroidKioskAppInfoProto& android_kiosk_app(const DeviceLocalAccountInfoProto* msg);
  static void set_has_android_kiosk_app(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::enterprise_management::WebKioskAppInfoProto& web_kiosk_app(const DeviceLocalAccountInfoProto* msg);
  static void set_has_web_kiosk_app(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::enterprise_management::KioskAppInfoProto&
DeviceLocalAccountInfoProto::_Internal::kiosk_app(const DeviceLocalAccountInfoProto* msg) {
  return *msg->kiosk_app_;
}
const ::enterprise_management::AndroidKioskAppInfoProto&
DeviceLocalAccountInfoProto::_Internal::android_kiosk_app(const DeviceLocalAccountInfoProto* msg) {
  return *msg->android_kiosk_app_;
}
const ::enterprise_management::WebKioskAppInfoProto&
DeviceLocalAccountInfoProto::_Internal::web_kiosk_app(const DeviceLocalAccountInfoProto* msg) {
  return *msg->web_kiosk_app_;
}
DeviceLocalAccountInfoProto::DeviceLocalAccountInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.DeviceLocalAccountInfoProto)
}
DeviceLocalAccountInfoProto::DeviceLocalAccountInfoProto(const DeviceLocalAccountInfoProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  deprecated_public_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_deprecated_public_session_id()) {
    deprecated_public_session_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_deprecated_public_session_id(),
      GetArena());
  }
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_account_id()) {
    account_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_account_id(),
      GetArena());
  }
  if (from._internal_has_kiosk_app()) {
    kiosk_app_ = new ::enterprise_management::KioskAppInfoProto(*from.kiosk_app_);
  } else {
    kiosk_app_ = nullptr;
  }
  if (from._internal_has_android_kiosk_app()) {
    android_kiosk_app_ = new ::enterprise_management::AndroidKioskAppInfoProto(*from.android_kiosk_app_);
  } else {
    android_kiosk_app_ = nullptr;
  }
  if (from._internal_has_web_kiosk_app()) {
    web_kiosk_app_ = new ::enterprise_management::WebKioskAppInfoProto(*from.web_kiosk_app_);
  } else {
    web_kiosk_app_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceLocalAccountInfoProto)
}

void DeviceLocalAccountInfoProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceLocalAccountInfoProto_chrome_5fdevice_5fpolicy_2eproto.base);
  deprecated_public_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&kiosk_app_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&kiosk_app_)) + sizeof(type_));
}

DeviceLocalAccountInfoProto::~DeviceLocalAccountInfoProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceLocalAccountInfoProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeviceLocalAccountInfoProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  deprecated_public_session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete kiosk_app_;
  if (this != internal_default_instance()) delete android_kiosk_app_;
  if (this != internal_default_instance()) delete web_kiosk_app_;
}

void DeviceLocalAccountInfoProto::ArenaDtor(void* object) {
  DeviceLocalAccountInfoProto* _this = reinterpret_cast< DeviceLocalAccountInfoProto* >(object);
  (void)_this;
}
void DeviceLocalAccountInfoProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceLocalAccountInfoProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceLocalAccountInfoProto& DeviceLocalAccountInfoProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceLocalAccountInfoProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void DeviceLocalAccountInfoProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceLocalAccountInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      deprecated_public_session_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(kiosk_app_ != nullptr);
      kiosk_app_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(android_kiosk_app_ != nullptr);
      android_kiosk_app_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(web_kiosk_app_ != nullptr);
      web_kiosk_app_->Clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceLocalAccountInfoProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string deprecated_public_session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_deprecated_public_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_account_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceLocalAccountInfoProto.AccountType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::DeviceLocalAccountInfoProto_AccountType_IsValid(val))) {
            _internal_set_type(static_cast<::enterprise_management::DeviceLocalAccountInfoProto_AccountType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.KioskAppInfoProto kiosk_app = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_kiosk_app(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.AndroidKioskAppInfoProto android_kiosk_app = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_android_kiosk_app(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.WebKioskAppInfoProto web_kiosk_app = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_web_kiosk_app(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceLocalAccountInfoProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.DeviceLocalAccountInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string deprecated_public_session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_deprecated_public_session_id(), target);
  }

  // optional string account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_account_id(), target);
  }

  // optional .enterprise_management.DeviceLocalAccountInfoProto.AccountType type = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // optional .enterprise_management.KioskAppInfoProto kiosk_app = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::kiosk_app(this), target, stream);
  }

  // optional .enterprise_management.AndroidKioskAppInfoProto android_kiosk_app = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::android_kiosk_app(this), target, stream);
  }

  // optional .enterprise_management.WebKioskAppInfoProto web_kiosk_app = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::web_kiosk_app(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.DeviceLocalAccountInfoProto)
  return target;
}

size_t DeviceLocalAccountInfoProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceLocalAccountInfoProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string deprecated_public_session_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_deprecated_public_session_id());
    }

    // optional string account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_account_id());
    }

    // optional .enterprise_management.KioskAppInfoProto kiosk_app = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kiosk_app_);
    }

    // optional .enterprise_management.AndroidKioskAppInfoProto android_kiosk_app = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *android_kiosk_app_);
    }

    // optional .enterprise_management.WebKioskAppInfoProto web_kiosk_app = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *web_kiosk_app_);
    }

    // optional .enterprise_management.DeviceLocalAccountInfoProto.AccountType type = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceLocalAccountInfoProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceLocalAccountInfoProto*>(
      &from));
}

void DeviceLocalAccountInfoProto::MergeFrom(const DeviceLocalAccountInfoProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceLocalAccountInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_deprecated_public_session_id(from._internal_deprecated_public_session_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_account_id(from._internal_account_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_kiosk_app()->::enterprise_management::KioskAppInfoProto::MergeFrom(from._internal_kiosk_app());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_android_kiosk_app()->::enterprise_management::AndroidKioskAppInfoProto::MergeFrom(from._internal_android_kiosk_app());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_web_kiosk_app()->::enterprise_management::WebKioskAppInfoProto::MergeFrom(from._internal_web_kiosk_app());
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceLocalAccountInfoProto::CopyFrom(const DeviceLocalAccountInfoProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceLocalAccountInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceLocalAccountInfoProto::IsInitialized() const {
  return true;
}

void DeviceLocalAccountInfoProto::InternalSwap(DeviceLocalAccountInfoProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  deprecated_public_session_id_.Swap(&other->deprecated_public_session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  account_id_.Swap(&other->account_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceLocalAccountInfoProto, type_)
      + sizeof(DeviceLocalAccountInfoProto::type_)
      - PROTOBUF_FIELD_OFFSET(DeviceLocalAccountInfoProto, kiosk_app_)>(
          reinterpret_cast<char*>(&kiosk_app_),
          reinterpret_cast<char*>(&other->kiosk_app_));
}

std::string DeviceLocalAccountInfoProto::GetTypeName() const {
  return "enterprise_management.DeviceLocalAccountInfoProto";
}


// ===================================================================

void DeviceLocalAccountsProto::InitAsDefaultInstance() {
}
class DeviceLocalAccountsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceLocalAccountsProto>()._has_bits_);
  static void set_has_auto_login_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_auto_login_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enable_auto_login_bailout(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_prompt_for_network_when_offline(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

DeviceLocalAccountsProto::DeviceLocalAccountsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  account_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.DeviceLocalAccountsProto)
}
DeviceLocalAccountsProto::DeviceLocalAccountsProto(const DeviceLocalAccountsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      account_(from.account_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  auto_login_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_auto_login_id()) {
    auto_login_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_auto_login_id(),
      GetArena());
  }
  ::memcpy(&auto_login_delay_, &from.auto_login_delay_,
    static_cast<size_t>(reinterpret_cast<char*>(&prompt_for_network_when_offline_) -
    reinterpret_cast<char*>(&auto_login_delay_)) + sizeof(prompt_for_network_when_offline_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceLocalAccountsProto)
}

void DeviceLocalAccountsProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceLocalAccountsProto_chrome_5fdevice_5fpolicy_2eproto.base);
  auto_login_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auto_login_delay_ = PROTOBUF_LONGLONG(0);
  enable_auto_login_bailout_ = true;
  prompt_for_network_when_offline_ = true;
}

DeviceLocalAccountsProto::~DeviceLocalAccountsProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceLocalAccountsProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeviceLocalAccountsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  auto_login_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceLocalAccountsProto::ArenaDtor(void* object) {
  DeviceLocalAccountsProto* _this = reinterpret_cast< DeviceLocalAccountsProto* >(object);
  (void)_this;
}
void DeviceLocalAccountsProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceLocalAccountsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceLocalAccountsProto& DeviceLocalAccountsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceLocalAccountsProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void DeviceLocalAccountsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceLocalAccountsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    auto_login_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    auto_login_delay_ = PROTOBUF_LONGLONG(0);
    enable_auto_login_bailout_ = true;
    prompt_for_network_when_offline_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceLocalAccountsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .enterprise_management.DeviceLocalAccountInfoProto account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_account(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string auto_login_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_auto_login_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 auto_login_delay = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_auto_login_delay(&has_bits);
          auto_login_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_auto_login_bailout = 4 [default = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_enable_auto_login_bailout(&has_bits);
          enable_auto_login_bailout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool prompt_for_network_when_offline = 5 [default = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_prompt_for_network_when_offline(&has_bits);
          prompt_for_network_when_offline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceLocalAccountsProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.DeviceLocalAccountsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .enterprise_management.DeviceLocalAccountInfoProto account = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_account_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_account(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional string auto_login_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_auto_login_id(), target);
  }

  // optional int64 auto_login_delay = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_auto_login_delay(), target);
  }

  // optional bool enable_auto_login_bailout = 4 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_enable_auto_login_bailout(), target);
  }

  // optional bool prompt_for_network_when_offline = 5 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_prompt_for_network_when_offline(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.DeviceLocalAccountsProto)
  return target;
}

size_t DeviceLocalAccountsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceLocalAccountsProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .enterprise_management.DeviceLocalAccountInfoProto account = 1;
  total_size += 1UL * this->_internal_account_size();
  for (const auto& msg : this->account_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string auto_login_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_auto_login_id());
    }

    // optional int64 auto_login_delay = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_auto_login_delay());
    }

    // optional bool enable_auto_login_bailout = 4 [default = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool prompt_for_network_when_offline = 5 [default = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceLocalAccountsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceLocalAccountsProto*>(
      &from));
}

void DeviceLocalAccountsProto::MergeFrom(const DeviceLocalAccountsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceLocalAccountsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_.MergeFrom(from.account_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_auto_login_id(from._internal_auto_login_id());
    }
    if (cached_has_bits & 0x00000002u) {
      auto_login_delay_ = from.auto_login_delay_;
    }
    if (cached_has_bits & 0x00000004u) {
      enable_auto_login_bailout_ = from.enable_auto_login_bailout_;
    }
    if (cached_has_bits & 0x00000008u) {
      prompt_for_network_when_offline_ = from.prompt_for_network_when_offline_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceLocalAccountsProto::CopyFrom(const DeviceLocalAccountsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceLocalAccountsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceLocalAccountsProto::IsInitialized() const {
  return true;
}

void DeviceLocalAccountsProto::InternalSwap(DeviceLocalAccountsProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  account_.InternalSwap(&other->account_);
  auto_login_id_.Swap(&other->auto_login_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(auto_login_delay_, other->auto_login_delay_);
  swap(enable_auto_login_bailout_, other->enable_auto_login_bailout_);
  swap(prompt_for_network_when_offline_, other->prompt_for_network_when_offline_);
}

std::string DeviceLocalAccountsProto::GetTypeName() const {
  return "enterprise_management.DeviceLocalAccountsProto";
}


// ===================================================================

void AllowRedeemChromeOsRegistrationOffersProto::InitAsDefaultInstance() {
}
class AllowRedeemChromeOsRegistrationOffersProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AllowRedeemChromeOsRegistrationOffersProto>()._has_bits_);
  static void set_has_allow_redeem_offers(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AllowRedeemChromeOsRegistrationOffersProto::AllowRedeemChromeOsRegistrationOffersProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.AllowRedeemChromeOsRegistrationOffersProto)
}
AllowRedeemChromeOsRegistrationOffersProto::AllowRedeemChromeOsRegistrationOffersProto(const AllowRedeemChromeOsRegistrationOffersProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  allow_redeem_offers_ = from.allow_redeem_offers_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.AllowRedeemChromeOsRegistrationOffersProto)
}

void AllowRedeemChromeOsRegistrationOffersProto::SharedCtor() {
  allow_redeem_offers_ = true;
}

AllowRedeemChromeOsRegistrationOffersProto::~AllowRedeemChromeOsRegistrationOffersProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.AllowRedeemChromeOsRegistrationOffersProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AllowRedeemChromeOsRegistrationOffersProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AllowRedeemChromeOsRegistrationOffersProto::ArenaDtor(void* object) {
  AllowRedeemChromeOsRegistrationOffersProto* _this = reinterpret_cast< AllowRedeemChromeOsRegistrationOffersProto* >(object);
  (void)_this;
}
void AllowRedeemChromeOsRegistrationOffersProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AllowRedeemChromeOsRegistrationOffersProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllowRedeemChromeOsRegistrationOffersProto& AllowRedeemChromeOsRegistrationOffersProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AllowRedeemChromeOsRegistrationOffersProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void AllowRedeemChromeOsRegistrationOffersProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.AllowRedeemChromeOsRegistrationOffersProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allow_redeem_offers_ = true;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AllowRedeemChromeOsRegistrationOffersProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool allow_redeem_offers = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_allow_redeem_offers(&has_bits);
          allow_redeem_offers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllowRedeemChromeOsRegistrationOffersProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.AllowRedeemChromeOsRegistrationOffersProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool allow_redeem_offers = 1 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_allow_redeem_offers(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.AllowRedeemChromeOsRegistrationOffersProto)
  return target;
}

size_t AllowRedeemChromeOsRegistrationOffersProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.AllowRedeemChromeOsRegistrationOffersProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool allow_redeem_offers = 1 [default = true];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllowRedeemChromeOsRegistrationOffersProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AllowRedeemChromeOsRegistrationOffersProto*>(
      &from));
}

void AllowRedeemChromeOsRegistrationOffersProto::MergeFrom(const AllowRedeemChromeOsRegistrationOffersProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.AllowRedeemChromeOsRegistrationOffersProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_allow_redeem_offers()) {
    _internal_set_allow_redeem_offers(from._internal_allow_redeem_offers());
  }
}

void AllowRedeemChromeOsRegistrationOffersProto::CopyFrom(const AllowRedeemChromeOsRegistrationOffersProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.AllowRedeemChromeOsRegistrationOffersProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllowRedeemChromeOsRegistrationOffersProto::IsInitialized() const {
  return true;
}

void AllowRedeemChromeOsRegistrationOffersProto::InternalSwap(AllowRedeemChromeOsRegistrationOffersProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(allow_redeem_offers_, other->allow_redeem_offers_);
}

std::string AllowRedeemChromeOsRegistrationOffersProto::GetTypeName() const {
  return "enterprise_management.AllowRedeemChromeOsRegistrationOffersProto";
}


// ===================================================================

void StartUpFlagsProto::InitAsDefaultInstance() {
}
class StartUpFlagsProto::_Internal {
 public:
};

StartUpFlagsProto::StartUpFlagsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  flags_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.StartUpFlagsProto)
}
StartUpFlagsProto::StartUpFlagsProto(const StartUpFlagsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      flags_(from.flags_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.StartUpFlagsProto)
}

void StartUpFlagsProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StartUpFlagsProto_chrome_5fdevice_5fpolicy_2eproto.base);
}

StartUpFlagsProto::~StartUpFlagsProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.StartUpFlagsProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void StartUpFlagsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StartUpFlagsProto::ArenaDtor(void* object) {
  StartUpFlagsProto* _this = reinterpret_cast< StartUpFlagsProto* >(object);
  (void)_this;
}
void StartUpFlagsProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartUpFlagsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartUpFlagsProto& StartUpFlagsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartUpFlagsProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void StartUpFlagsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.StartUpFlagsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StartUpFlagsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_flags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartUpFlagsProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.StartUpFlagsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string flags = 1;
  for (int i = 0, n = this->_internal_flags_size(); i < n; i++) {
    const auto& s = this->_internal_flags(i);
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.StartUpFlagsProto)
  return target;
}

size_t StartUpFlagsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.StartUpFlagsProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string flags = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(flags_.size());
  for (int i = 0, n = flags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      flags_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartUpFlagsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StartUpFlagsProto*>(
      &from));
}

void StartUpFlagsProto::MergeFrom(const StartUpFlagsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.StartUpFlagsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  flags_.MergeFrom(from.flags_);
}

void StartUpFlagsProto::CopyFrom(const StartUpFlagsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.StartUpFlagsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartUpFlagsProto::IsInitialized() const {
  return true;
}

void StartUpFlagsProto::InternalSwap(StartUpFlagsProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  flags_.InternalSwap(&other->flags_);
}

std::string StartUpFlagsProto::GetTypeName() const {
  return "enterprise_management.StartUpFlagsProto";
}


// ===================================================================

void UptimeLimitProto::InitAsDefaultInstance() {
}
class UptimeLimitProto::_Internal {
 public:
  using HasBits = decltype(std::declval<UptimeLimitProto>()._has_bits_);
  static void set_has_obsolete_uptime_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uptime_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

UptimeLimitProto::UptimeLimitProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.UptimeLimitProto)
}
UptimeLimitProto::UptimeLimitProto(const UptimeLimitProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&obsolete_uptime_limit_, &from.obsolete_uptime_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&uptime_limit_) -
    reinterpret_cast<char*>(&obsolete_uptime_limit_)) + sizeof(uptime_limit_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.UptimeLimitProto)
}

void UptimeLimitProto::SharedCtor() {
  ::memset(&obsolete_uptime_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uptime_limit_) -
      reinterpret_cast<char*>(&obsolete_uptime_limit_)) + sizeof(uptime_limit_));
}

UptimeLimitProto::~UptimeLimitProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.UptimeLimitProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void UptimeLimitProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UptimeLimitProto::ArenaDtor(void* object) {
  UptimeLimitProto* _this = reinterpret_cast< UptimeLimitProto* >(object);
  (void)_this;
}
void UptimeLimitProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UptimeLimitProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UptimeLimitProto& UptimeLimitProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UptimeLimitProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void UptimeLimitProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.UptimeLimitProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&obsolete_uptime_limit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uptime_limit_) -
        reinterpret_cast<char*>(&obsolete_uptime_limit_)) + sizeof(uptime_limit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UptimeLimitProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 OBSOLETE_uptime_limit = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_obsolete_uptime_limit(&has_bits);
          obsolete_uptime_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 uptime_limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_uptime_limit(&has_bits);
          uptime_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UptimeLimitProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.UptimeLimitProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 OBSOLETE_uptime_limit = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_obsolete_uptime_limit(), target);
  }

  // optional int64 uptime_limit = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_uptime_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.UptimeLimitProto)
  return target;
}

size_t UptimeLimitProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.UptimeLimitProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 OBSOLETE_uptime_limit = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_obsolete_uptime_limit());
    }

    // optional int64 uptime_limit = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_uptime_limit());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UptimeLimitProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UptimeLimitProto*>(
      &from));
}

void UptimeLimitProto::MergeFrom(const UptimeLimitProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.UptimeLimitProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      obsolete_uptime_limit_ = from.obsolete_uptime_limit_;
    }
    if (cached_has_bits & 0x00000002u) {
      uptime_limit_ = from.uptime_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UptimeLimitProto::CopyFrom(const UptimeLimitProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.UptimeLimitProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UptimeLimitProto::IsInitialized() const {
  return true;
}

void UptimeLimitProto::InternalSwap(UptimeLimitProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UptimeLimitProto, uptime_limit_)
      + sizeof(UptimeLimitProto::uptime_limit_)
      - PROTOBUF_FIELD_OFFSET(UptimeLimitProto, obsolete_uptime_limit_)>(
          reinterpret_cast<char*>(&obsolete_uptime_limit_),
          reinterpret_cast<char*>(&other->obsolete_uptime_limit_));
}

std::string UptimeLimitProto::GetTypeName() const {
  return "enterprise_management.UptimeLimitProto";
}


// ===================================================================

void VariationsParameterProto::InitAsDefaultInstance() {
}
class VariationsParameterProto::_Internal {
 public:
  using HasBits = decltype(std::declval<VariationsParameterProto>()._has_bits_);
  static void set_has_parameter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

VariationsParameterProto::VariationsParameterProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.VariationsParameterProto)
}
VariationsParameterProto::VariationsParameterProto(const VariationsParameterProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  parameter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_parameter()) {
    parameter_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_parameter(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.VariationsParameterProto)
}

void VariationsParameterProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VariationsParameterProto_chrome_5fdevice_5fpolicy_2eproto.base);
  parameter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VariationsParameterProto::~VariationsParameterProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.VariationsParameterProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void VariationsParameterProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  parameter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VariationsParameterProto::ArenaDtor(void* object) {
  VariationsParameterProto* _this = reinterpret_cast< VariationsParameterProto* >(object);
  (void)_this;
}
void VariationsParameterProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VariationsParameterProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VariationsParameterProto& VariationsParameterProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VariationsParameterProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void VariationsParameterProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.VariationsParameterProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    parameter_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* VariationsParameterProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string parameter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_parameter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VariationsParameterProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.VariationsParameterProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string parameter = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_parameter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.VariationsParameterProto)
  return target;
}

size_t VariationsParameterProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.VariationsParameterProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string parameter = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parameter());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VariationsParameterProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const VariationsParameterProto*>(
      &from));
}

void VariationsParameterProto::MergeFrom(const VariationsParameterProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.VariationsParameterProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_parameter()) {
    _internal_set_parameter(from._internal_parameter());
  }
}

void VariationsParameterProto::CopyFrom(const VariationsParameterProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.VariationsParameterProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariationsParameterProto::IsInitialized() const {
  return true;
}

void VariationsParameterProto::InternalSwap(VariationsParameterProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  parameter_.Swap(&other->parameter_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string VariationsParameterProto::GetTypeName() const {
  return "enterprise_management.VariationsParameterProto";
}


// ===================================================================

void AttestationSettingsProto::InitAsDefaultInstance() {
}
class AttestationSettingsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AttestationSettingsProto>()._has_bits_);
  static void set_has_attestation_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_content_protection_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AttestationSettingsProto::AttestationSettingsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.AttestationSettingsProto)
}
AttestationSettingsProto::AttestationSettingsProto(const AttestationSettingsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&attestation_enabled_, &from.attestation_enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&content_protection_enabled_) -
    reinterpret_cast<char*>(&attestation_enabled_)) + sizeof(content_protection_enabled_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.AttestationSettingsProto)
}

void AttestationSettingsProto::SharedCtor() {
  attestation_enabled_ = false;
  content_protection_enabled_ = true;
}

AttestationSettingsProto::~AttestationSettingsProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.AttestationSettingsProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AttestationSettingsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AttestationSettingsProto::ArenaDtor(void* object) {
  AttestationSettingsProto* _this = reinterpret_cast< AttestationSettingsProto* >(object);
  (void)_this;
}
void AttestationSettingsProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AttestationSettingsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AttestationSettingsProto& AttestationSettingsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AttestationSettingsProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void AttestationSettingsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.AttestationSettingsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    attestation_enabled_ = false;
    content_protection_enabled_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AttestationSettingsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool attestation_enabled = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_attestation_enabled(&has_bits);
          attestation_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool content_protection_enabled = 2 [default = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_content_protection_enabled(&has_bits);
          content_protection_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AttestationSettingsProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.AttestationSettingsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool attestation_enabled = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_attestation_enabled(), target);
  }

  // optional bool content_protection_enabled = 2 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_content_protection_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.AttestationSettingsProto)
  return target;
}

size_t AttestationSettingsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.AttestationSettingsProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool attestation_enabled = 1 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool content_protection_enabled = 2 [default = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AttestationSettingsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AttestationSettingsProto*>(
      &from));
}

void AttestationSettingsProto::MergeFrom(const AttestationSettingsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.AttestationSettingsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      attestation_enabled_ = from.attestation_enabled_;
    }
    if (cached_has_bits & 0x00000002u) {
      content_protection_enabled_ = from.content_protection_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AttestationSettingsProto::CopyFrom(const AttestationSettingsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.AttestationSettingsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttestationSettingsProto::IsInitialized() const {
  return true;
}

void AttestationSettingsProto::InternalSwap(AttestationSettingsProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(attestation_enabled_, other->attestation_enabled_);
  swap(content_protection_enabled_, other->content_protection_enabled_);
}

std::string AttestationSettingsProto::GetTypeName() const {
  return "enterprise_management.AttestationSettingsProto";
}


// ===================================================================

void AccessibilitySettingsProto::InitAsDefaultInstance() {
  ::enterprise_management::_AccessibilitySettingsProto_default_instance_._instance.get_mutable()->login_screen_large_cursor_enabled_options_ = const_cast< ::enterprise_management::PolicyOptions*>(
      ::enterprise_management::PolicyOptions::internal_default_instance());
  ::enterprise_management::_AccessibilitySettingsProto_default_instance_._instance.get_mutable()->login_screen_spoken_feedback_enabled_options_ = const_cast< ::enterprise_management::PolicyOptions*>(
      ::enterprise_management::PolicyOptions::internal_default_instance());
  ::enterprise_management::_AccessibilitySettingsProto_default_instance_._instance.get_mutable()->login_screen_high_contrast_enabled_options_ = const_cast< ::enterprise_management::PolicyOptions*>(
      ::enterprise_management::PolicyOptions::internal_default_instance());
  ::enterprise_management::_AccessibilitySettingsProto_default_instance_._instance.get_mutable()->login_screen_virtual_keyboard_enabled_options_ = const_cast< ::enterprise_management::PolicyOptions*>(
      ::enterprise_management::PolicyOptions::internal_default_instance());
  ::enterprise_management::_AccessibilitySettingsProto_default_instance_._instance.get_mutable()->login_screen_dictation_enabled_options_ = const_cast< ::enterprise_management::PolicyOptions*>(
      ::enterprise_management::PolicyOptions::internal_default_instance());
  ::enterprise_management::_AccessibilitySettingsProto_default_instance_._instance.get_mutable()->login_screen_select_to_speak_enabled_options_ = const_cast< ::enterprise_management::PolicyOptions*>(
      ::enterprise_management::PolicyOptions::internal_default_instance());
  ::enterprise_management::_AccessibilitySettingsProto_default_instance_._instance.get_mutable()->login_screen_cursor_highlight_enabled_options_ = const_cast< ::enterprise_management::PolicyOptions*>(
      ::enterprise_management::PolicyOptions::internal_default_instance());
  ::enterprise_management::_AccessibilitySettingsProto_default_instance_._instance.get_mutable()->login_screen_caret_highlight_enabled_options_ = const_cast< ::enterprise_management::PolicyOptions*>(
      ::enterprise_management::PolicyOptions::internal_default_instance());
  ::enterprise_management::_AccessibilitySettingsProto_default_instance_._instance.get_mutable()->login_screen_mono_audio_enabled_options_ = const_cast< ::enterprise_management::PolicyOptions*>(
      ::enterprise_management::PolicyOptions::internal_default_instance());
  ::enterprise_management::_AccessibilitySettingsProto_default_instance_._instance.get_mutable()->login_screen_autoclick_enabled_options_ = const_cast< ::enterprise_management::PolicyOptions*>(
      ::enterprise_management::PolicyOptions::internal_default_instance());
  ::enterprise_management::_AccessibilitySettingsProto_default_instance_._instance.get_mutable()->login_screen_sticky_keys_enabled_options_ = const_cast< ::enterprise_management::PolicyOptions*>(
      ::enterprise_management::PolicyOptions::internal_default_instance());
  ::enterprise_management::_AccessibilitySettingsProto_default_instance_._instance.get_mutable()->login_screen_keyboard_focus_highlight_enabled_options_ = const_cast< ::enterprise_management::PolicyOptions*>(
      ::enterprise_management::PolicyOptions::internal_default_instance());
  ::enterprise_management::_AccessibilitySettingsProto_default_instance_._instance.get_mutable()->login_screen_screen_magnifier_type_options_ = const_cast< ::enterprise_management::PolicyOptions*>(
      ::enterprise_management::PolicyOptions::internal_default_instance());
  ::enterprise_management::_AccessibilitySettingsProto_default_instance_._instance.get_mutable()->login_screen_show_options_in_system_tray_menu_enabled_options_ = const_cast< ::enterprise_management::PolicyOptions*>(
      ::enterprise_management::PolicyOptions::internal_default_instance());
  ::enterprise_management::_AccessibilitySettingsProto_default_instance_._instance.get_mutable()->login_screen_shortcuts_enabled_options_ = const_cast< ::enterprise_management::PolicyOptions*>(
      ::enterprise_management::PolicyOptions::internal_default_instance());
}
class AccessibilitySettingsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AccessibilitySettingsProto>()._has_bits_);
  static void set_has_login_screen_default_large_cursor_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_login_screen_default_spoken_feedback_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_login_screen_default_high_contrast_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_login_screen_default_screen_magnifier_type(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_login_screen_default_virtual_keyboard_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_login_screen_large_cursor_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::enterprise_management::PolicyOptions& login_screen_large_cursor_enabled_options(const AccessibilitySettingsProto* msg);
  static void set_has_login_screen_large_cursor_enabled_options(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_login_screen_spoken_feedback_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::enterprise_management::PolicyOptions& login_screen_spoken_feedback_enabled_options(const AccessibilitySettingsProto* msg);
  static void set_has_login_screen_spoken_feedback_enabled_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_login_screen_high_contrast_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::enterprise_management::PolicyOptions& login_screen_high_contrast_enabled_options(const AccessibilitySettingsProto* msg);
  static void set_has_login_screen_high_contrast_enabled_options(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_login_screen_virtual_keyboard_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::enterprise_management::PolicyOptions& login_screen_virtual_keyboard_enabled_options(const AccessibilitySettingsProto* msg);
  static void set_has_login_screen_virtual_keyboard_enabled_options(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_login_screen_dictation_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::enterprise_management::PolicyOptions& login_screen_dictation_enabled_options(const AccessibilitySettingsProto* msg);
  static void set_has_login_screen_dictation_enabled_options(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_login_screen_select_to_speak_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::enterprise_management::PolicyOptions& login_screen_select_to_speak_enabled_options(const AccessibilitySettingsProto* msg);
  static void set_has_login_screen_select_to_speak_enabled_options(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_login_screen_cursor_highlight_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::enterprise_management::PolicyOptions& login_screen_cursor_highlight_enabled_options(const AccessibilitySettingsProto* msg);
  static void set_has_login_screen_cursor_highlight_enabled_options(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_login_screen_caret_highlight_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::enterprise_management::PolicyOptions& login_screen_caret_highlight_enabled_options(const AccessibilitySettingsProto* msg);
  static void set_has_login_screen_caret_highlight_enabled_options(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_login_screen_mono_audio_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::enterprise_management::PolicyOptions& login_screen_mono_audio_enabled_options(const AccessibilitySettingsProto* msg);
  static void set_has_login_screen_mono_audio_enabled_options(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_login_screen_autoclick_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::enterprise_management::PolicyOptions& login_screen_autoclick_enabled_options(const AccessibilitySettingsProto* msg);
  static void set_has_login_screen_autoclick_enabled_options(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_login_screen_sticky_keys_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::enterprise_management::PolicyOptions& login_screen_sticky_keys_enabled_options(const AccessibilitySettingsProto* msg);
  static void set_has_login_screen_sticky_keys_enabled_options(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_login_screen_keyboard_focus_highlight_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static const ::enterprise_management::PolicyOptions& login_screen_keyboard_focus_highlight_enabled_options(const AccessibilitySettingsProto* msg);
  static void set_has_login_screen_keyboard_focus_highlight_enabled_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_login_screen_screen_magnifier_type(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static const ::enterprise_management::PolicyOptions& login_screen_screen_magnifier_type_options(const AccessibilitySettingsProto* msg);
  static void set_has_login_screen_screen_magnifier_type_options(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_login_screen_show_options_in_system_tray_menu_enabled(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static const ::enterprise_management::PolicyOptions& login_screen_show_options_in_system_tray_menu_enabled_options(const AccessibilitySettingsProto* msg);
  static void set_has_login_screen_show_options_in_system_tray_menu_enabled_options(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_login_screen_shortcuts_enabled(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static const ::enterprise_management::PolicyOptions& login_screen_shortcuts_enabled_options(const AccessibilitySettingsProto* msg);
  static void set_has_login_screen_shortcuts_enabled_options(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

const ::enterprise_management::PolicyOptions&
AccessibilitySettingsProto::_Internal::login_screen_large_cursor_enabled_options(const AccessibilitySettingsProto* msg) {
  return *msg->login_screen_large_cursor_enabled_options_;
}
const ::enterprise_management::PolicyOptions&
AccessibilitySettingsProto::_Internal::login_screen_spoken_feedback_enabled_options(const AccessibilitySettingsProto* msg) {
  return *msg->login_screen_spoken_feedback_enabled_options_;
}
const ::enterprise_management::PolicyOptions&
AccessibilitySettingsProto::_Internal::login_screen_high_contrast_enabled_options(const AccessibilitySettingsProto* msg) {
  return *msg->login_screen_high_contrast_enabled_options_;
}
const ::enterprise_management::PolicyOptions&
AccessibilitySettingsProto::_Internal::login_screen_virtual_keyboard_enabled_options(const AccessibilitySettingsProto* msg) {
  return *msg->login_screen_virtual_keyboard_enabled_options_;
}
const ::enterprise_management::PolicyOptions&
AccessibilitySettingsProto::_Internal::login_screen_dictation_enabled_options(const AccessibilitySettingsProto* msg) {
  return *msg->login_screen_dictation_enabled_options_;
}
const ::enterprise_management::PolicyOptions&
AccessibilitySettingsProto::_Internal::login_screen_select_to_speak_enabled_options(const AccessibilitySettingsProto* msg) {
  return *msg->login_screen_select_to_speak_enabled_options_;
}
const ::enterprise_management::PolicyOptions&
AccessibilitySettingsProto::_Internal::login_screen_cursor_highlight_enabled_options(const AccessibilitySettingsProto* msg) {
  return *msg->login_screen_cursor_highlight_enabled_options_;
}
const ::enterprise_management::PolicyOptions&
AccessibilitySettingsProto::_Internal::login_screen_caret_highlight_enabled_options(const AccessibilitySettingsProto* msg) {
  return *msg->login_screen_caret_highlight_enabled_options_;
}
const ::enterprise_management::PolicyOptions&
AccessibilitySettingsProto::_Internal::login_screen_mono_audio_enabled_options(const AccessibilitySettingsProto* msg) {
  return *msg->login_screen_mono_audio_enabled_options_;
}
const ::enterprise_management::PolicyOptions&
AccessibilitySettingsProto::_Internal::login_screen_autoclick_enabled_options(const AccessibilitySettingsProto* msg) {
  return *msg->login_screen_autoclick_enabled_options_;
}
const ::enterprise_management::PolicyOptions&
AccessibilitySettingsProto::_Internal::login_screen_sticky_keys_enabled_options(const AccessibilitySettingsProto* msg) {
  return *msg->login_screen_sticky_keys_enabled_options_;
}
const ::enterprise_management::PolicyOptions&
AccessibilitySettingsProto::_Internal::login_screen_keyboard_focus_highlight_enabled_options(const AccessibilitySettingsProto* msg) {
  return *msg->login_screen_keyboard_focus_highlight_enabled_options_;
}
const ::enterprise_management::PolicyOptions&
AccessibilitySettingsProto::_Internal::login_screen_screen_magnifier_type_options(const AccessibilitySettingsProto* msg) {
  return *msg->login_screen_screen_magnifier_type_options_;
}
const ::enterprise_management::PolicyOptions&
AccessibilitySettingsProto::_Internal::login_screen_show_options_in_system_tray_menu_enabled_options(const AccessibilitySettingsProto* msg) {
  return *msg->login_screen_show_options_in_system_tray_menu_enabled_options_;
}
const ::enterprise_management::PolicyOptions&
AccessibilitySettingsProto::_Internal::login_screen_shortcuts_enabled_options(const AccessibilitySettingsProto* msg) {
  return *msg->login_screen_shortcuts_enabled_options_;
}
void AccessibilitySettingsProto::clear_login_screen_large_cursor_enabled_options() {
  if (login_screen_large_cursor_enabled_options_ != nullptr) login_screen_large_cursor_enabled_options_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void AccessibilitySettingsProto::clear_login_screen_spoken_feedback_enabled_options() {
  if (login_screen_spoken_feedback_enabled_options_ != nullptr) login_screen_spoken_feedback_enabled_options_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void AccessibilitySettingsProto::clear_login_screen_high_contrast_enabled_options() {
  if (login_screen_high_contrast_enabled_options_ != nullptr) login_screen_high_contrast_enabled_options_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void AccessibilitySettingsProto::clear_login_screen_virtual_keyboard_enabled_options() {
  if (login_screen_virtual_keyboard_enabled_options_ != nullptr) login_screen_virtual_keyboard_enabled_options_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void AccessibilitySettingsProto::clear_login_screen_dictation_enabled_options() {
  if (login_screen_dictation_enabled_options_ != nullptr) login_screen_dictation_enabled_options_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void AccessibilitySettingsProto::clear_login_screen_select_to_speak_enabled_options() {
  if (login_screen_select_to_speak_enabled_options_ != nullptr) login_screen_select_to_speak_enabled_options_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void AccessibilitySettingsProto::clear_login_screen_cursor_highlight_enabled_options() {
  if (login_screen_cursor_highlight_enabled_options_ != nullptr) login_screen_cursor_highlight_enabled_options_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void AccessibilitySettingsProto::clear_login_screen_caret_highlight_enabled_options() {
  if (login_screen_caret_highlight_enabled_options_ != nullptr) login_screen_caret_highlight_enabled_options_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void AccessibilitySettingsProto::clear_login_screen_mono_audio_enabled_options() {
  if (login_screen_mono_audio_enabled_options_ != nullptr) login_screen_mono_audio_enabled_options_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void AccessibilitySettingsProto::clear_login_screen_autoclick_enabled_options() {
  if (login_screen_autoclick_enabled_options_ != nullptr) login_screen_autoclick_enabled_options_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void AccessibilitySettingsProto::clear_login_screen_sticky_keys_enabled_options() {
  if (login_screen_sticky_keys_enabled_options_ != nullptr) login_screen_sticky_keys_enabled_options_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void AccessibilitySettingsProto::clear_login_screen_keyboard_focus_highlight_enabled_options() {
  if (login_screen_keyboard_focus_highlight_enabled_options_ != nullptr) login_screen_keyboard_focus_highlight_enabled_options_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void AccessibilitySettingsProto::clear_login_screen_screen_magnifier_type_options() {
  if (login_screen_screen_magnifier_type_options_ != nullptr) login_screen_screen_magnifier_type_options_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
void AccessibilitySettingsProto::clear_login_screen_show_options_in_system_tray_menu_enabled_options() {
  if (login_screen_show_options_in_system_tray_menu_enabled_options_ != nullptr) login_screen_show_options_in_system_tray_menu_enabled_options_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
void AccessibilitySettingsProto::clear_login_screen_shortcuts_enabled_options() {
  if (login_screen_shortcuts_enabled_options_ != nullptr) login_screen_shortcuts_enabled_options_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
AccessibilitySettingsProto::AccessibilitySettingsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.AccessibilitySettingsProto)
}
AccessibilitySettingsProto::AccessibilitySettingsProto(const AccessibilitySettingsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_login_screen_large_cursor_enabled_options()) {
    login_screen_large_cursor_enabled_options_ = new ::enterprise_management::PolicyOptions(*from.login_screen_large_cursor_enabled_options_);
  } else {
    login_screen_large_cursor_enabled_options_ = nullptr;
  }
  if (from._internal_has_login_screen_spoken_feedback_enabled_options()) {
    login_screen_spoken_feedback_enabled_options_ = new ::enterprise_management::PolicyOptions(*from.login_screen_spoken_feedback_enabled_options_);
  } else {
    login_screen_spoken_feedback_enabled_options_ = nullptr;
  }
  if (from._internal_has_login_screen_high_contrast_enabled_options()) {
    login_screen_high_contrast_enabled_options_ = new ::enterprise_management::PolicyOptions(*from.login_screen_high_contrast_enabled_options_);
  } else {
    login_screen_high_contrast_enabled_options_ = nullptr;
  }
  if (from._internal_has_login_screen_virtual_keyboard_enabled_options()) {
    login_screen_virtual_keyboard_enabled_options_ = new ::enterprise_management::PolicyOptions(*from.login_screen_virtual_keyboard_enabled_options_);
  } else {
    login_screen_virtual_keyboard_enabled_options_ = nullptr;
  }
  if (from._internal_has_login_screen_dictation_enabled_options()) {
    login_screen_dictation_enabled_options_ = new ::enterprise_management::PolicyOptions(*from.login_screen_dictation_enabled_options_);
  } else {
    login_screen_dictation_enabled_options_ = nullptr;
  }
  if (from._internal_has_login_screen_select_to_speak_enabled_options()) {
    login_screen_select_to_speak_enabled_options_ = new ::enterprise_management::PolicyOptions(*from.login_screen_select_to_speak_enabled_options_);
  } else {
    login_screen_select_to_speak_enabled_options_ = nullptr;
  }
  if (from._internal_has_login_screen_cursor_highlight_enabled_options()) {
    login_screen_cursor_highlight_enabled_options_ = new ::enterprise_management::PolicyOptions(*from.login_screen_cursor_highlight_enabled_options_);
  } else {
    login_screen_cursor_highlight_enabled_options_ = nullptr;
  }
  if (from._internal_has_login_screen_caret_highlight_enabled_options()) {
    login_screen_caret_highlight_enabled_options_ = new ::enterprise_management::PolicyOptions(*from.login_screen_caret_highlight_enabled_options_);
  } else {
    login_screen_caret_highlight_enabled_options_ = nullptr;
  }
  if (from._internal_has_login_screen_mono_audio_enabled_options()) {
    login_screen_mono_audio_enabled_options_ = new ::enterprise_management::PolicyOptions(*from.login_screen_mono_audio_enabled_options_);
  } else {
    login_screen_mono_audio_enabled_options_ = nullptr;
  }
  if (from._internal_has_login_screen_autoclick_enabled_options()) {
    login_screen_autoclick_enabled_options_ = new ::enterprise_management::PolicyOptions(*from.login_screen_autoclick_enabled_options_);
  } else {
    login_screen_autoclick_enabled_options_ = nullptr;
  }
  if (from._internal_has_login_screen_sticky_keys_enabled_options()) {
    login_screen_sticky_keys_enabled_options_ = new ::enterprise_management::PolicyOptions(*from.login_screen_sticky_keys_enabled_options_);
  } else {
    login_screen_sticky_keys_enabled_options_ = nullptr;
  }
  if (from._internal_has_login_screen_keyboard_focus_highlight_enabled_options()) {
    login_screen_keyboard_focus_highlight_enabled_options_ = new ::enterprise_management::PolicyOptions(*from.login_screen_keyboard_focus_highlight_enabled_options_);
  } else {
    login_screen_keyboard_focus_highlight_enabled_options_ = nullptr;
  }
  if (from._internal_has_login_screen_screen_magnifier_type_options()) {
    login_screen_screen_magnifier_type_options_ = new ::enterprise_management::PolicyOptions(*from.login_screen_screen_magnifier_type_options_);
  } else {
    login_screen_screen_magnifier_type_options_ = nullptr;
  }
  if (from._internal_has_login_screen_show_options_in_system_tray_menu_enabled_options()) {
    login_screen_show_options_in_system_tray_menu_enabled_options_ = new ::enterprise_management::PolicyOptions(*from.login_screen_show_options_in_system_tray_menu_enabled_options_);
  } else {
    login_screen_show_options_in_system_tray_menu_enabled_options_ = nullptr;
  }
  if (from._internal_has_login_screen_shortcuts_enabled_options()) {
    login_screen_shortcuts_enabled_options_ = new ::enterprise_management::PolicyOptions(*from.login_screen_shortcuts_enabled_options_);
  } else {
    login_screen_shortcuts_enabled_options_ = nullptr;
  }
  ::memcpy(&login_screen_default_large_cursor_enabled_, &from.login_screen_default_large_cursor_enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&login_screen_screen_magnifier_type_) -
    reinterpret_cast<char*>(&login_screen_default_large_cursor_enabled_)) + sizeof(login_screen_screen_magnifier_type_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.AccessibilitySettingsProto)
}

void AccessibilitySettingsProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccessibilitySettingsProto_chrome_5fdevice_5fpolicy_2eproto.base);
  ::memset(&login_screen_large_cursor_enabled_options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&login_screen_screen_magnifier_type_) -
      reinterpret_cast<char*>(&login_screen_large_cursor_enabled_options_)) + sizeof(login_screen_screen_magnifier_type_));
}

AccessibilitySettingsProto::~AccessibilitySettingsProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.AccessibilitySettingsProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AccessibilitySettingsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete login_screen_large_cursor_enabled_options_;
  if (this != internal_default_instance()) delete login_screen_spoken_feedback_enabled_options_;
  if (this != internal_default_instance()) delete login_screen_high_contrast_enabled_options_;
  if (this != internal_default_instance()) delete login_screen_virtual_keyboard_enabled_options_;
  if (this != internal_default_instance()) delete login_screen_dictation_enabled_options_;
  if (this != internal_default_instance()) delete login_screen_select_to_speak_enabled_options_;
  if (this != internal_default_instance()) delete login_screen_cursor_highlight_enabled_options_;
  if (this != internal_default_instance()) delete login_screen_caret_highlight_enabled_options_;
  if (this != internal_default_instance()) delete login_screen_mono_audio_enabled_options_;
  if (this != internal_default_instance()) delete login_screen_autoclick_enabled_options_;
  if (this != internal_default_instance()) delete login_screen_sticky_keys_enabled_options_;
  if (this != internal_default_instance()) delete login_screen_keyboard_focus_highlight_enabled_options_;
  if (this != internal_default_instance()) delete login_screen_screen_magnifier_type_options_;
  if (this != internal_default_instance()) delete login_screen_show_options_in_system_tray_menu_enabled_options_;
  if (this != internal_default_instance()) delete login_screen_shortcuts_enabled_options_;
}

void AccessibilitySettingsProto::ArenaDtor(void* object) {
  AccessibilitySettingsProto* _this = reinterpret_cast< AccessibilitySettingsProto* >(object);
  (void)_this;
}
void AccessibilitySettingsProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccessibilitySettingsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccessibilitySettingsProto& AccessibilitySettingsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccessibilitySettingsProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void AccessibilitySettingsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.AccessibilitySettingsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(login_screen_large_cursor_enabled_options_ != nullptr);
      login_screen_large_cursor_enabled_options_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(login_screen_spoken_feedback_enabled_options_ != nullptr);
      login_screen_spoken_feedback_enabled_options_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(login_screen_high_contrast_enabled_options_ != nullptr);
      login_screen_high_contrast_enabled_options_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(login_screen_virtual_keyboard_enabled_options_ != nullptr);
      login_screen_virtual_keyboard_enabled_options_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(login_screen_dictation_enabled_options_ != nullptr);
      login_screen_dictation_enabled_options_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(login_screen_select_to_speak_enabled_options_ != nullptr);
      login_screen_select_to_speak_enabled_options_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(login_screen_cursor_highlight_enabled_options_ != nullptr);
      login_screen_cursor_highlight_enabled_options_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(login_screen_caret_highlight_enabled_options_ != nullptr);
      login_screen_caret_highlight_enabled_options_->Clear();
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(login_screen_mono_audio_enabled_options_ != nullptr);
      login_screen_mono_audio_enabled_options_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(login_screen_autoclick_enabled_options_ != nullptr);
      login_screen_autoclick_enabled_options_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(login_screen_sticky_keys_enabled_options_ != nullptr);
      login_screen_sticky_keys_enabled_options_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(login_screen_keyboard_focus_highlight_enabled_options_ != nullptr);
      login_screen_keyboard_focus_highlight_enabled_options_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(login_screen_screen_magnifier_type_options_ != nullptr);
      login_screen_screen_magnifier_type_options_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(login_screen_show_options_in_system_tray_menu_enabled_options_ != nullptr);
      login_screen_show_options_in_system_tray_menu_enabled_options_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(login_screen_shortcuts_enabled_options_ != nullptr);
      login_screen_shortcuts_enabled_options_->Clear();
    }
  }
  login_screen_default_large_cursor_enabled_ = false;
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&login_screen_default_spoken_feedback_enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&login_screen_virtual_keyboard_enabled_) -
        reinterpret_cast<char*>(&login_screen_default_spoken_feedback_enabled_)) + sizeof(login_screen_virtual_keyboard_enabled_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&login_screen_dictation_enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&login_screen_keyboard_focus_highlight_enabled_) -
        reinterpret_cast<char*>(&login_screen_dictation_enabled_)) + sizeof(login_screen_keyboard_focus_highlight_enabled_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&login_screen_show_options_in_system_tray_menu_enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&login_screen_screen_magnifier_type_) -
        reinterpret_cast<char*>(&login_screen_show_options_in_system_tray_menu_enabled_)) + sizeof(login_screen_screen_magnifier_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AccessibilitySettingsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool login_screen_default_large_cursor_enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_login_screen_default_large_cursor_enabled(&_has_bits_);
          login_screen_default_large_cursor_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool login_screen_default_spoken_feedback_enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_login_screen_default_spoken_feedback_enabled(&_has_bits_);
          login_screen_default_spoken_feedback_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool login_screen_default_high_contrast_enabled = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_login_screen_default_high_contrast_enabled(&_has_bits_);
          login_screen_default_high_contrast_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.AccessibilitySettingsProto.ScreenMagnifierType login_screen_default_screen_magnifier_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::AccessibilitySettingsProto_ScreenMagnifierType_IsValid(val))) {
            _internal_set_login_screen_default_screen_magnifier_type(static_cast<::enterprise_management::AccessibilitySettingsProto_ScreenMagnifierType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool login_screen_default_virtual_keyboard_enabled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_login_screen_default_virtual_keyboard_enabled(&_has_bits_);
          login_screen_default_virtual_keyboard_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool login_screen_large_cursor_enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_login_screen_large_cursor_enabled(&_has_bits_);
          login_screen_large_cursor_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.PolicyOptions login_screen_large_cursor_enabled_options = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_screen_large_cursor_enabled_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool login_screen_spoken_feedback_enabled = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_login_screen_spoken_feedback_enabled(&_has_bits_);
          login_screen_spoken_feedback_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.PolicyOptions login_screen_spoken_feedback_enabled_options = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_screen_spoken_feedback_enabled_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool login_screen_high_contrast_enabled = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_login_screen_high_contrast_enabled(&_has_bits_);
          login_screen_high_contrast_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.PolicyOptions login_screen_high_contrast_enabled_options = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_screen_high_contrast_enabled_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool login_screen_virtual_keyboard_enabled = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_login_screen_virtual_keyboard_enabled(&_has_bits_);
          login_screen_virtual_keyboard_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.PolicyOptions login_screen_virtual_keyboard_enabled_options = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_screen_virtual_keyboard_enabled_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool login_screen_dictation_enabled = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_login_screen_dictation_enabled(&_has_bits_);
          login_screen_dictation_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.PolicyOptions login_screen_dictation_enabled_options = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_screen_dictation_enabled_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool login_screen_select_to_speak_enabled = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_login_screen_select_to_speak_enabled(&_has_bits_);
          login_screen_select_to_speak_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.PolicyOptions login_screen_select_to_speak_enabled_options = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_screen_select_to_speak_enabled_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool login_screen_cursor_highlight_enabled = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_login_screen_cursor_highlight_enabled(&_has_bits_);
          login_screen_cursor_highlight_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.PolicyOptions login_screen_cursor_highlight_enabled_options = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_screen_cursor_highlight_enabled_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool login_screen_caret_highlight_enabled = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_login_screen_caret_highlight_enabled(&_has_bits_);
          login_screen_caret_highlight_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.PolicyOptions login_screen_caret_highlight_enabled_options = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_screen_caret_highlight_enabled_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool login_screen_mono_audio_enabled = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_login_screen_mono_audio_enabled(&_has_bits_);
          login_screen_mono_audio_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.PolicyOptions login_screen_mono_audio_enabled_options = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_screen_mono_audio_enabled_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool login_screen_autoclick_enabled = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_login_screen_autoclick_enabled(&_has_bits_);
          login_screen_autoclick_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.PolicyOptions login_screen_autoclick_enabled_options = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_screen_autoclick_enabled_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool login_screen_sticky_keys_enabled = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_login_screen_sticky_keys_enabled(&_has_bits_);
          login_screen_sticky_keys_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.PolicyOptions login_screen_sticky_keys_enabled_options = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_screen_sticky_keys_enabled_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool login_screen_keyboard_focus_highlight_enabled = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_login_screen_keyboard_focus_highlight_enabled(&_has_bits_);
          login_screen_keyboard_focus_highlight_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.PolicyOptions login_screen_keyboard_focus_highlight_enabled_options = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_screen_keyboard_focus_highlight_enabled_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 login_screen_screen_magnifier_type = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_login_screen_screen_magnifier_type(&_has_bits_);
          login_screen_screen_magnifier_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.PolicyOptions login_screen_screen_magnifier_type_options = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_screen_screen_magnifier_type_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool login_screen_show_options_in_system_tray_menu_enabled = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_login_screen_show_options_in_system_tray_menu_enabled(&_has_bits_);
          login_screen_show_options_in_system_tray_menu_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.PolicyOptions login_screen_show_options_in_system_tray_menu_enabled_options = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_screen_show_options_in_system_tray_menu_enabled_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool login_screen_shortcuts_enabled = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_login_screen_shortcuts_enabled(&_has_bits_);
          login_screen_shortcuts_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.PolicyOptions login_screen_shortcuts_enabled_options = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_screen_shortcuts_enabled_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccessibilitySettingsProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.AccessibilitySettingsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool login_screen_default_large_cursor_enabled = 1;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_login_screen_default_large_cursor_enabled(), target);
  }

  // optional bool login_screen_default_spoken_feedback_enabled = 2;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_login_screen_default_spoken_feedback_enabled(), target);
  }

  // optional bool login_screen_default_high_contrast_enabled = 3;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_login_screen_default_high_contrast_enabled(), target);
  }

  // optional .enterprise_management.AccessibilitySettingsProto.ScreenMagnifierType login_screen_default_screen_magnifier_type = 4;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_login_screen_default_screen_magnifier_type(), target);
  }

  // optional bool login_screen_default_virtual_keyboard_enabled = 5;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_login_screen_default_virtual_keyboard_enabled(), target);
  }

  // optional bool login_screen_large_cursor_enabled = 6;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_login_screen_large_cursor_enabled(), target);
  }

  // optional .enterprise_management.PolicyOptions login_screen_large_cursor_enabled_options = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::login_screen_large_cursor_enabled_options(this), target, stream);
  }

  // optional bool login_screen_spoken_feedback_enabled = 8;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_login_screen_spoken_feedback_enabled(), target);
  }

  // optional .enterprise_management.PolicyOptions login_screen_spoken_feedback_enabled_options = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::login_screen_spoken_feedback_enabled_options(this), target, stream);
  }

  // optional bool login_screen_high_contrast_enabled = 10;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_login_screen_high_contrast_enabled(), target);
  }

  // optional .enterprise_management.PolicyOptions login_screen_high_contrast_enabled_options = 11;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::login_screen_high_contrast_enabled_options(this), target, stream);
  }

  // optional bool login_screen_virtual_keyboard_enabled = 12;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_login_screen_virtual_keyboard_enabled(), target);
  }

  // optional .enterprise_management.PolicyOptions login_screen_virtual_keyboard_enabled_options = 13;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::login_screen_virtual_keyboard_enabled_options(this), target, stream);
  }

  // optional bool login_screen_dictation_enabled = 14;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_login_screen_dictation_enabled(), target);
  }

  // optional .enterprise_management.PolicyOptions login_screen_dictation_enabled_options = 15;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::login_screen_dictation_enabled_options(this), target, stream);
  }

  // optional bool login_screen_select_to_speak_enabled = 16;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_login_screen_select_to_speak_enabled(), target);
  }

  // optional .enterprise_management.PolicyOptions login_screen_select_to_speak_enabled_options = 17;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::login_screen_select_to_speak_enabled_options(this), target, stream);
  }

  // optional bool login_screen_cursor_highlight_enabled = 18;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_login_screen_cursor_highlight_enabled(), target);
  }

  // optional .enterprise_management.PolicyOptions login_screen_cursor_highlight_enabled_options = 19;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::login_screen_cursor_highlight_enabled_options(this), target, stream);
  }

  // optional bool login_screen_caret_highlight_enabled = 20;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_login_screen_caret_highlight_enabled(), target);
  }

  // optional .enterprise_management.PolicyOptions login_screen_caret_highlight_enabled_options = 21;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::login_screen_caret_highlight_enabled_options(this), target, stream);
  }

  // optional bool login_screen_mono_audio_enabled = 22;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_login_screen_mono_audio_enabled(), target);
  }

  // optional .enterprise_management.PolicyOptions login_screen_mono_audio_enabled_options = 23;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::login_screen_mono_audio_enabled_options(this), target, stream);
  }

  // optional bool login_screen_autoclick_enabled = 24;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_login_screen_autoclick_enabled(), target);
  }

  // optional .enterprise_management.PolicyOptions login_screen_autoclick_enabled_options = 25;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::login_screen_autoclick_enabled_options(this), target, stream);
  }

  // optional bool login_screen_sticky_keys_enabled = 26;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(26, this->_internal_login_screen_sticky_keys_enabled(), target);
  }

  // optional .enterprise_management.PolicyOptions login_screen_sticky_keys_enabled_options = 27;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::login_screen_sticky_keys_enabled_options(this), target, stream);
  }

  // optional bool login_screen_keyboard_focus_highlight_enabled = 28;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(28, this->_internal_login_screen_keyboard_focus_highlight_enabled(), target);
  }

  // optional .enterprise_management.PolicyOptions login_screen_keyboard_focus_highlight_enabled_options = 29;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::login_screen_keyboard_focus_highlight_enabled_options(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional int64 login_screen_screen_magnifier_type = 30;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(30, this->_internal_login_screen_screen_magnifier_type(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.PolicyOptions login_screen_screen_magnifier_type_options = 31;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::login_screen_screen_magnifier_type_options(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool login_screen_show_options_in_system_tray_menu_enabled = 32;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(32, this->_internal_login_screen_show_options_in_system_tray_menu_enabled(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.PolicyOptions login_screen_show_options_in_system_tray_menu_enabled_options = 33;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        33, _Internal::login_screen_show_options_in_system_tray_menu_enabled_options(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool login_screen_shortcuts_enabled = 34;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(34, this->_internal_login_screen_shortcuts_enabled(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.PolicyOptions login_screen_shortcuts_enabled_options = 35;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        35, _Internal::login_screen_shortcuts_enabled_options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.AccessibilitySettingsProto)
  return target;
}

size_t AccessibilitySettingsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.AccessibilitySettingsProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .enterprise_management.PolicyOptions login_screen_large_cursor_enabled_options = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *login_screen_large_cursor_enabled_options_);
    }

    // optional .enterprise_management.PolicyOptions login_screen_spoken_feedback_enabled_options = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *login_screen_spoken_feedback_enabled_options_);
    }

    // optional .enterprise_management.PolicyOptions login_screen_high_contrast_enabled_options = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *login_screen_high_contrast_enabled_options_);
    }

    // optional .enterprise_management.PolicyOptions login_screen_virtual_keyboard_enabled_options = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *login_screen_virtual_keyboard_enabled_options_);
    }

    // optional .enterprise_management.PolicyOptions login_screen_dictation_enabled_options = 15;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *login_screen_dictation_enabled_options_);
    }

    // optional .enterprise_management.PolicyOptions login_screen_select_to_speak_enabled_options = 17;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *login_screen_select_to_speak_enabled_options_);
    }

    // optional .enterprise_management.PolicyOptions login_screen_cursor_highlight_enabled_options = 19;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *login_screen_cursor_highlight_enabled_options_);
    }

    // optional .enterprise_management.PolicyOptions login_screen_caret_highlight_enabled_options = 21;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *login_screen_caret_highlight_enabled_options_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .enterprise_management.PolicyOptions login_screen_mono_audio_enabled_options = 23;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *login_screen_mono_audio_enabled_options_);
    }

    // optional .enterprise_management.PolicyOptions login_screen_autoclick_enabled_options = 25;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *login_screen_autoclick_enabled_options_);
    }

    // optional .enterprise_management.PolicyOptions login_screen_sticky_keys_enabled_options = 27;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *login_screen_sticky_keys_enabled_options_);
    }

    // optional .enterprise_management.PolicyOptions login_screen_keyboard_focus_highlight_enabled_options = 29;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *login_screen_keyboard_focus_highlight_enabled_options_);
    }

    // optional .enterprise_management.PolicyOptions login_screen_screen_magnifier_type_options = 31;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *login_screen_screen_magnifier_type_options_);
    }

    // optional .enterprise_management.PolicyOptions login_screen_show_options_in_system_tray_menu_enabled_options = 33;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *login_screen_show_options_in_system_tray_menu_enabled_options_);
    }

    // optional .enterprise_management.PolicyOptions login_screen_shortcuts_enabled_options = 35;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *login_screen_shortcuts_enabled_options_);
    }

    // optional bool login_screen_default_large_cursor_enabled = 1;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool login_screen_default_spoken_feedback_enabled = 2;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional bool login_screen_default_high_contrast_enabled = 3;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 1;
    }

    // optional bool login_screen_default_virtual_keyboard_enabled = 5;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 1;
    }

    // optional .enterprise_management.AccessibilitySettingsProto.ScreenMagnifierType login_screen_default_screen_magnifier_type = 4;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_login_screen_default_screen_magnifier_type());
    }

    // optional bool login_screen_large_cursor_enabled = 6;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 1;
    }

    // optional bool login_screen_spoken_feedback_enabled = 8;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 + 1;
    }

    // optional bool login_screen_high_contrast_enabled = 10;
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 + 1;
    }

    // optional bool login_screen_virtual_keyboard_enabled = 12;
    if (cached_has_bits & 0x00800000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool login_screen_dictation_enabled = 14;
    if (cached_has_bits & 0x01000000u) {
      total_size += 1 + 1;
    }

    // optional bool login_screen_select_to_speak_enabled = 16;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional bool login_screen_cursor_highlight_enabled = 18;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool login_screen_caret_highlight_enabled = 20;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool login_screen_mono_audio_enabled = 22;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool login_screen_autoclick_enabled = 24;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool login_screen_sticky_keys_enabled = 26;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool login_screen_keyboard_focus_highlight_enabled = 28;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    // optional bool login_screen_show_options_in_system_tray_menu_enabled = 32;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool login_screen_shortcuts_enabled = 34;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional int64 login_screen_screen_magnifier_type = 30;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_login_screen_screen_magnifier_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccessibilitySettingsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AccessibilitySettingsProto*>(
      &from));
}

void AccessibilitySettingsProto::MergeFrom(const AccessibilitySettingsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.AccessibilitySettingsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_login_screen_large_cursor_enabled_options()->::enterprise_management::PolicyOptions::MergeFrom(from._internal_login_screen_large_cursor_enabled_options());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_login_screen_spoken_feedback_enabled_options()->::enterprise_management::PolicyOptions::MergeFrom(from._internal_login_screen_spoken_feedback_enabled_options());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_login_screen_high_contrast_enabled_options()->::enterprise_management::PolicyOptions::MergeFrom(from._internal_login_screen_high_contrast_enabled_options());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_login_screen_virtual_keyboard_enabled_options()->::enterprise_management::PolicyOptions::MergeFrom(from._internal_login_screen_virtual_keyboard_enabled_options());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_login_screen_dictation_enabled_options()->::enterprise_management::PolicyOptions::MergeFrom(from._internal_login_screen_dictation_enabled_options());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_login_screen_select_to_speak_enabled_options()->::enterprise_management::PolicyOptions::MergeFrom(from._internal_login_screen_select_to_speak_enabled_options());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_login_screen_cursor_highlight_enabled_options()->::enterprise_management::PolicyOptions::MergeFrom(from._internal_login_screen_cursor_highlight_enabled_options());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_login_screen_caret_highlight_enabled_options()->::enterprise_management::PolicyOptions::MergeFrom(from._internal_login_screen_caret_highlight_enabled_options());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_login_screen_mono_audio_enabled_options()->::enterprise_management::PolicyOptions::MergeFrom(from._internal_login_screen_mono_audio_enabled_options());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_login_screen_autoclick_enabled_options()->::enterprise_management::PolicyOptions::MergeFrom(from._internal_login_screen_autoclick_enabled_options());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_login_screen_sticky_keys_enabled_options()->::enterprise_management::PolicyOptions::MergeFrom(from._internal_login_screen_sticky_keys_enabled_options());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_login_screen_keyboard_focus_highlight_enabled_options()->::enterprise_management::PolicyOptions::MergeFrom(from._internal_login_screen_keyboard_focus_highlight_enabled_options());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_login_screen_screen_magnifier_type_options()->::enterprise_management::PolicyOptions::MergeFrom(from._internal_login_screen_screen_magnifier_type_options());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_login_screen_show_options_in_system_tray_menu_enabled_options()->::enterprise_management::PolicyOptions::MergeFrom(from._internal_login_screen_show_options_in_system_tray_menu_enabled_options());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_login_screen_shortcuts_enabled_options()->::enterprise_management::PolicyOptions::MergeFrom(from._internal_login_screen_shortcuts_enabled_options());
    }
    if (cached_has_bits & 0x00008000u) {
      login_screen_default_large_cursor_enabled_ = from.login_screen_default_large_cursor_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      login_screen_default_spoken_feedback_enabled_ = from.login_screen_default_spoken_feedback_enabled_;
    }
    if (cached_has_bits & 0x00020000u) {
      login_screen_default_high_contrast_enabled_ = from.login_screen_default_high_contrast_enabled_;
    }
    if (cached_has_bits & 0x00040000u) {
      login_screen_default_virtual_keyboard_enabled_ = from.login_screen_default_virtual_keyboard_enabled_;
    }
    if (cached_has_bits & 0x00080000u) {
      login_screen_default_screen_magnifier_type_ = from.login_screen_default_screen_magnifier_type_;
    }
    if (cached_has_bits & 0x00100000u) {
      login_screen_large_cursor_enabled_ = from.login_screen_large_cursor_enabled_;
    }
    if (cached_has_bits & 0x00200000u) {
      login_screen_spoken_feedback_enabled_ = from.login_screen_spoken_feedback_enabled_;
    }
    if (cached_has_bits & 0x00400000u) {
      login_screen_high_contrast_enabled_ = from.login_screen_high_contrast_enabled_;
    }
    if (cached_has_bits & 0x00800000u) {
      login_screen_virtual_keyboard_enabled_ = from.login_screen_virtual_keyboard_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      login_screen_dictation_enabled_ = from.login_screen_dictation_enabled_;
    }
    if (cached_has_bits & 0x02000000u) {
      login_screen_select_to_speak_enabled_ = from.login_screen_select_to_speak_enabled_;
    }
    if (cached_has_bits & 0x04000000u) {
      login_screen_cursor_highlight_enabled_ = from.login_screen_cursor_highlight_enabled_;
    }
    if (cached_has_bits & 0x08000000u) {
      login_screen_caret_highlight_enabled_ = from.login_screen_caret_highlight_enabled_;
    }
    if (cached_has_bits & 0x10000000u) {
      login_screen_mono_audio_enabled_ = from.login_screen_mono_audio_enabled_;
    }
    if (cached_has_bits & 0x20000000u) {
      login_screen_autoclick_enabled_ = from.login_screen_autoclick_enabled_;
    }
    if (cached_has_bits & 0x40000000u) {
      login_screen_sticky_keys_enabled_ = from.login_screen_sticky_keys_enabled_;
    }
    if (cached_has_bits & 0x80000000u) {
      login_screen_keyboard_focus_highlight_enabled_ = from.login_screen_keyboard_focus_highlight_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      login_screen_show_options_in_system_tray_menu_enabled_ = from.login_screen_show_options_in_system_tray_menu_enabled_;
    }
    if (cached_has_bits & 0x00000002u) {
      login_screen_shortcuts_enabled_ = from.login_screen_shortcuts_enabled_;
    }
    if (cached_has_bits & 0x00000004u) {
      login_screen_screen_magnifier_type_ = from.login_screen_screen_magnifier_type_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void AccessibilitySettingsProto::CopyFrom(const AccessibilitySettingsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.AccessibilitySettingsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessibilitySettingsProto::IsInitialized() const {
  return true;
}

void AccessibilitySettingsProto::InternalSwap(AccessibilitySettingsProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccessibilitySettingsProto, login_screen_screen_magnifier_type_)
      + sizeof(AccessibilitySettingsProto::login_screen_screen_magnifier_type_)
      - PROTOBUF_FIELD_OFFSET(AccessibilitySettingsProto, login_screen_large_cursor_enabled_options_)>(
          reinterpret_cast<char*>(&login_screen_large_cursor_enabled_options_),
          reinterpret_cast<char*>(&other->login_screen_large_cursor_enabled_options_));
}

std::string AccessibilitySettingsProto::GetTypeName() const {
  return "enterprise_management.AccessibilitySettingsProto";
}


// ===================================================================

void OBSOLETE_SupervisedUsersSettingsProto::InitAsDefaultInstance() {
}
class OBSOLETE_SupervisedUsersSettingsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<OBSOLETE_SupervisedUsersSettingsProto>()._has_bits_);
  static void set_has_obsolete_supervised_users_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

OBSOLETE_SupervisedUsersSettingsProto::OBSOLETE_SupervisedUsersSettingsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.OBSOLETE_SupervisedUsersSettingsProto)
}
OBSOLETE_SupervisedUsersSettingsProto::OBSOLETE_SupervisedUsersSettingsProto(const OBSOLETE_SupervisedUsersSettingsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  obsolete_supervised_users_enabled_ = from.obsolete_supervised_users_enabled_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.OBSOLETE_SupervisedUsersSettingsProto)
}

void OBSOLETE_SupervisedUsersSettingsProto::SharedCtor() {
  obsolete_supervised_users_enabled_ = false;
}

OBSOLETE_SupervisedUsersSettingsProto::~OBSOLETE_SupervisedUsersSettingsProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.OBSOLETE_SupervisedUsersSettingsProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void OBSOLETE_SupervisedUsersSettingsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OBSOLETE_SupervisedUsersSettingsProto::ArenaDtor(void* object) {
  OBSOLETE_SupervisedUsersSettingsProto* _this = reinterpret_cast< OBSOLETE_SupervisedUsersSettingsProto* >(object);
  (void)_this;
}
void OBSOLETE_SupervisedUsersSettingsProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OBSOLETE_SupervisedUsersSettingsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OBSOLETE_SupervisedUsersSettingsProto& OBSOLETE_SupervisedUsersSettingsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OBSOLETE_SupervisedUsersSettingsProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void OBSOLETE_SupervisedUsersSettingsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.OBSOLETE_SupervisedUsersSettingsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obsolete_supervised_users_enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* OBSOLETE_SupervisedUsersSettingsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool OBSOLETE_supervised_users_enabled = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_obsolete_supervised_users_enabled(&has_bits);
          obsolete_supervised_users_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OBSOLETE_SupervisedUsersSettingsProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.OBSOLETE_SupervisedUsersSettingsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool OBSOLETE_supervised_users_enabled = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_obsolete_supervised_users_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.OBSOLETE_SupervisedUsersSettingsProto)
  return target;
}

size_t OBSOLETE_SupervisedUsersSettingsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.OBSOLETE_SupervisedUsersSettingsProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool OBSOLETE_supervised_users_enabled = 1 [deprecated = true];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OBSOLETE_SupervisedUsersSettingsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const OBSOLETE_SupervisedUsersSettingsProto*>(
      &from));
}

void OBSOLETE_SupervisedUsersSettingsProto::MergeFrom(const OBSOLETE_SupervisedUsersSettingsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.OBSOLETE_SupervisedUsersSettingsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_obsolete_supervised_users_enabled()) {
    _internal_set_obsolete_supervised_users_enabled(from._internal_obsolete_supervised_users_enabled());
  }
}

void OBSOLETE_SupervisedUsersSettingsProto::CopyFrom(const OBSOLETE_SupervisedUsersSettingsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.OBSOLETE_SupervisedUsersSettingsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OBSOLETE_SupervisedUsersSettingsProto::IsInitialized() const {
  return true;
}

void OBSOLETE_SupervisedUsersSettingsProto::InternalSwap(OBSOLETE_SupervisedUsersSettingsProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(obsolete_supervised_users_enabled_, other->obsolete_supervised_users_enabled_);
}

std::string OBSOLETE_SupervisedUsersSettingsProto::GetTypeName() const {
  return "enterprise_management.OBSOLETE_SupervisedUsersSettingsProto";
}


// ===================================================================

void LoginScreenPowerManagementProto::InitAsDefaultInstance() {
}
class LoginScreenPowerManagementProto::_Internal {
 public:
  using HasBits = decltype(std::declval<LoginScreenPowerManagementProto>()._has_bits_);
  static void set_has_login_screen_power_management(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LoginScreenPowerManagementProto::LoginScreenPowerManagementProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.LoginScreenPowerManagementProto)
}
LoginScreenPowerManagementProto::LoginScreenPowerManagementProto(const LoginScreenPowerManagementProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  login_screen_power_management_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_login_screen_power_management()) {
    login_screen_power_management_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_login_screen_power_management(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.LoginScreenPowerManagementProto)
}

void LoginScreenPowerManagementProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginScreenPowerManagementProto_chrome_5fdevice_5fpolicy_2eproto.base);
  login_screen_power_management_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LoginScreenPowerManagementProto::~LoginScreenPowerManagementProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.LoginScreenPowerManagementProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void LoginScreenPowerManagementProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  login_screen_power_management_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginScreenPowerManagementProto::ArenaDtor(void* object) {
  LoginScreenPowerManagementProto* _this = reinterpret_cast< LoginScreenPowerManagementProto* >(object);
  (void)_this;
}
void LoginScreenPowerManagementProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginScreenPowerManagementProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginScreenPowerManagementProto& LoginScreenPowerManagementProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginScreenPowerManagementProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void LoginScreenPowerManagementProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.LoginScreenPowerManagementProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    login_screen_power_management_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LoginScreenPowerManagementProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string login_screen_power_management = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_login_screen_power_management();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginScreenPowerManagementProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.LoginScreenPowerManagementProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string login_screen_power_management = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_login_screen_power_management(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.LoginScreenPowerManagementProto)
  return target;
}

size_t LoginScreenPowerManagementProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.LoginScreenPowerManagementProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string login_screen_power_management = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_login_screen_power_management());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginScreenPowerManagementProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LoginScreenPowerManagementProto*>(
      &from));
}

void LoginScreenPowerManagementProto::MergeFrom(const LoginScreenPowerManagementProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.LoginScreenPowerManagementProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_login_screen_power_management()) {
    _internal_set_login_screen_power_management(from._internal_login_screen_power_management());
  }
}

void LoginScreenPowerManagementProto::CopyFrom(const LoginScreenPowerManagementProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.LoginScreenPowerManagementProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginScreenPowerManagementProto::IsInitialized() const {
  return true;
}

void LoginScreenPowerManagementProto::InternalSwap(LoginScreenPowerManagementProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  login_screen_power_management_.Swap(&other->login_screen_power_management_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string LoginScreenPowerManagementProto::GetTypeName() const {
  return "enterprise_management.LoginScreenPowerManagementProto";
}


// ===================================================================

void AutoCleanupSettigsProto::InitAsDefaultInstance() {
}
class AutoCleanupSettigsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AutoCleanupSettigsProto>()._has_bits_);
  static void set_has_clean_up_strategy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AutoCleanupSettigsProto::AutoCleanupSettigsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.AutoCleanupSettigsProto)
}
AutoCleanupSettigsProto::AutoCleanupSettigsProto(const AutoCleanupSettigsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  clean_up_strategy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clean_up_strategy()) {
    clean_up_strategy_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_clean_up_strategy(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.AutoCleanupSettigsProto)
}

void AutoCleanupSettigsProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AutoCleanupSettigsProto_chrome_5fdevice_5fpolicy_2eproto.base);
  clean_up_strategy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AutoCleanupSettigsProto::~AutoCleanupSettigsProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.AutoCleanupSettigsProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AutoCleanupSettigsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clean_up_strategy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AutoCleanupSettigsProto::ArenaDtor(void* object) {
  AutoCleanupSettigsProto* _this = reinterpret_cast< AutoCleanupSettigsProto* >(object);
  (void)_this;
}
void AutoCleanupSettigsProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AutoCleanupSettigsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutoCleanupSettigsProto& AutoCleanupSettigsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutoCleanupSettigsProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void AutoCleanupSettigsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.AutoCleanupSettigsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    clean_up_strategy_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AutoCleanupSettigsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string clean_up_strategy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_clean_up_strategy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AutoCleanupSettigsProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.AutoCleanupSettigsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string clean_up_strategy = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clean_up_strategy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.AutoCleanupSettigsProto)
  return target;
}

size_t AutoCleanupSettigsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.AutoCleanupSettigsProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string clean_up_strategy = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clean_up_strategy());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutoCleanupSettigsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AutoCleanupSettigsProto*>(
      &from));
}

void AutoCleanupSettigsProto::MergeFrom(const AutoCleanupSettigsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.AutoCleanupSettigsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_clean_up_strategy()) {
    _internal_set_clean_up_strategy(from._internal_clean_up_strategy());
  }
}

void AutoCleanupSettigsProto::CopyFrom(const AutoCleanupSettigsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.AutoCleanupSettigsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoCleanupSettigsProto::IsInitialized() const {
  return true;
}

void AutoCleanupSettigsProto::InternalSwap(AutoCleanupSettigsProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  clean_up_strategy_.Swap(&other->clean_up_strategy_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string AutoCleanupSettigsProto::GetTypeName() const {
  return "enterprise_management.AutoCleanupSettigsProto";
}


// ===================================================================

void SystemSettingsProto::InitAsDefaultInstance() {
}
class SystemSettingsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemSettingsProto>()._has_bits_);
  static void set_has_block_devmode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SystemSettingsProto::SystemSettingsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.SystemSettingsProto)
}
SystemSettingsProto::SystemSettingsProto(const SystemSettingsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  block_devmode_ = from.block_devmode_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.SystemSettingsProto)
}

void SystemSettingsProto::SharedCtor() {
  block_devmode_ = false;
}

SystemSettingsProto::~SystemSettingsProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.SystemSettingsProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SystemSettingsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SystemSettingsProto::ArenaDtor(void* object) {
  SystemSettingsProto* _this = reinterpret_cast< SystemSettingsProto* >(object);
  (void)_this;
}
void SystemSettingsProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SystemSettingsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemSettingsProto& SystemSettingsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemSettingsProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void SystemSettingsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.SystemSettingsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_devmode_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SystemSettingsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool block_devmode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_block_devmode(&has_bits);
          block_devmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SystemSettingsProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.SystemSettingsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool block_devmode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_block_devmode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.SystemSettingsProto)
  return target;
}

size_t SystemSettingsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.SystemSettingsProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool block_devmode = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemSettingsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SystemSettingsProto*>(
      &from));
}

void SystemSettingsProto::MergeFrom(const SystemSettingsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.SystemSettingsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_block_devmode()) {
    _internal_set_block_devmode(from._internal_block_devmode());
  }
}

void SystemSettingsProto::CopyFrom(const SystemSettingsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.SystemSettingsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemSettingsProto::IsInitialized() const {
  return true;
}

void SystemSettingsProto::InternalSwap(SystemSettingsProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(block_devmode_, other->block_devmode_);
}

std::string SystemSettingsProto::GetTypeName() const {
  return "enterprise_management.SystemSettingsProto";
}


// ===================================================================

void SAMLSettingsProto::InitAsDefaultInstance() {
}
class SAMLSettingsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SAMLSettingsProto>()._has_bits_);
  static void set_has_transfer_saml_cookies(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SAMLSettingsProto::SAMLSettingsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.SAMLSettingsProto)
}
SAMLSettingsProto::SAMLSettingsProto(const SAMLSettingsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  transfer_saml_cookies_ = from.transfer_saml_cookies_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.SAMLSettingsProto)
}

void SAMLSettingsProto::SharedCtor() {
  transfer_saml_cookies_ = false;
}

SAMLSettingsProto::~SAMLSettingsProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.SAMLSettingsProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SAMLSettingsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SAMLSettingsProto::ArenaDtor(void* object) {
  SAMLSettingsProto* _this = reinterpret_cast< SAMLSettingsProto* >(object);
  (void)_this;
}
void SAMLSettingsProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SAMLSettingsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SAMLSettingsProto& SAMLSettingsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SAMLSettingsProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void SAMLSettingsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.SAMLSettingsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transfer_saml_cookies_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SAMLSettingsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool transfer_saml_cookies = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_transfer_saml_cookies(&has_bits);
          transfer_saml_cookies_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SAMLSettingsProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.SAMLSettingsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool transfer_saml_cookies = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_transfer_saml_cookies(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.SAMLSettingsProto)
  return target;
}

size_t SAMLSettingsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.SAMLSettingsProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool transfer_saml_cookies = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SAMLSettingsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SAMLSettingsProto*>(
      &from));
}

void SAMLSettingsProto::MergeFrom(const SAMLSettingsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.SAMLSettingsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_transfer_saml_cookies()) {
    _internal_set_transfer_saml_cookies(from._internal_transfer_saml_cookies());
  }
}

void SAMLSettingsProto::CopyFrom(const SAMLSettingsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.SAMLSettingsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SAMLSettingsProto::IsInitialized() const {
  return true;
}

void SAMLSettingsProto::InternalSwap(SAMLSettingsProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(transfer_saml_cookies_, other->transfer_saml_cookies_);
}

std::string SAMLSettingsProto::GetTypeName() const {
  return "enterprise_management.SAMLSettingsProto";
}


// ===================================================================

void RebootOnShutdownProto::InitAsDefaultInstance() {
}
class RebootOnShutdownProto::_Internal {
 public:
  using HasBits = decltype(std::declval<RebootOnShutdownProto>()._has_bits_);
  static void set_has_reboot_on_shutdown(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RebootOnShutdownProto::RebootOnShutdownProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.RebootOnShutdownProto)
}
RebootOnShutdownProto::RebootOnShutdownProto(const RebootOnShutdownProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  reboot_on_shutdown_ = from.reboot_on_shutdown_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.RebootOnShutdownProto)
}

void RebootOnShutdownProto::SharedCtor() {
  reboot_on_shutdown_ = false;
}

RebootOnShutdownProto::~RebootOnShutdownProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.RebootOnShutdownProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void RebootOnShutdownProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RebootOnShutdownProto::ArenaDtor(void* object) {
  RebootOnShutdownProto* _this = reinterpret_cast< RebootOnShutdownProto* >(object);
  (void)_this;
}
void RebootOnShutdownProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RebootOnShutdownProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RebootOnShutdownProto& RebootOnShutdownProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RebootOnShutdownProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void RebootOnShutdownProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.RebootOnShutdownProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reboot_on_shutdown_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RebootOnShutdownProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool reboot_on_shutdown = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_reboot_on_shutdown(&has_bits);
          reboot_on_shutdown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RebootOnShutdownProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.RebootOnShutdownProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool reboot_on_shutdown = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_reboot_on_shutdown(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.RebootOnShutdownProto)
  return target;
}

size_t RebootOnShutdownProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.RebootOnShutdownProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool reboot_on_shutdown = 1 [default = false];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RebootOnShutdownProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RebootOnShutdownProto*>(
      &from));
}

void RebootOnShutdownProto::MergeFrom(const RebootOnShutdownProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.RebootOnShutdownProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reboot_on_shutdown()) {
    _internal_set_reboot_on_shutdown(from._internal_reboot_on_shutdown());
  }
}

void RebootOnShutdownProto::CopyFrom(const RebootOnShutdownProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.RebootOnShutdownProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RebootOnShutdownProto::IsInitialized() const {
  return true;
}

void RebootOnShutdownProto::InternalSwap(RebootOnShutdownProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(reboot_on_shutdown_, other->reboot_on_shutdown_);
}

std::string RebootOnShutdownProto::GetTypeName() const {
  return "enterprise_management.RebootOnShutdownProto";
}


// ===================================================================

void DeviceHeartbeatSettingsProto::InitAsDefaultInstance() {
}
class DeviceHeartbeatSettingsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceHeartbeatSettingsProto>()._has_bits_);
  static void set_has_heartbeat_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_heartbeat_frequency(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DeviceHeartbeatSettingsProto::DeviceHeartbeatSettingsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.DeviceHeartbeatSettingsProto)
}
DeviceHeartbeatSettingsProto::DeviceHeartbeatSettingsProto(const DeviceHeartbeatSettingsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&heartbeat_enabled_, &from.heartbeat_enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&heartbeat_frequency_) -
    reinterpret_cast<char*>(&heartbeat_enabled_)) + sizeof(heartbeat_frequency_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceHeartbeatSettingsProto)
}

void DeviceHeartbeatSettingsProto::SharedCtor() {
  heartbeat_enabled_ = false;
  heartbeat_frequency_ = PROTOBUF_LONGLONG(120000);
}

DeviceHeartbeatSettingsProto::~DeviceHeartbeatSettingsProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceHeartbeatSettingsProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeviceHeartbeatSettingsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeviceHeartbeatSettingsProto::ArenaDtor(void* object) {
  DeviceHeartbeatSettingsProto* _this = reinterpret_cast< DeviceHeartbeatSettingsProto* >(object);
  (void)_this;
}
void DeviceHeartbeatSettingsProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceHeartbeatSettingsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceHeartbeatSettingsProto& DeviceHeartbeatSettingsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceHeartbeatSettingsProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void DeviceHeartbeatSettingsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceHeartbeatSettingsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    heartbeat_enabled_ = false;
    heartbeat_frequency_ = PROTOBUF_LONGLONG(120000);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceHeartbeatSettingsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool heartbeat_enabled = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_heartbeat_enabled(&has_bits);
          heartbeat_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 heartbeat_frequency = 2 [default = 120000];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_heartbeat_frequency(&has_bits);
          heartbeat_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceHeartbeatSettingsProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.DeviceHeartbeatSettingsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool heartbeat_enabled = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_heartbeat_enabled(), target);
  }

  // optional int64 heartbeat_frequency = 2 [default = 120000];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_heartbeat_frequency(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.DeviceHeartbeatSettingsProto)
  return target;
}

size_t DeviceHeartbeatSettingsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceHeartbeatSettingsProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool heartbeat_enabled = 1 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional int64 heartbeat_frequency = 2 [default = 120000];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_heartbeat_frequency());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceHeartbeatSettingsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceHeartbeatSettingsProto*>(
      &from));
}

void DeviceHeartbeatSettingsProto::MergeFrom(const DeviceHeartbeatSettingsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceHeartbeatSettingsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      heartbeat_enabled_ = from.heartbeat_enabled_;
    }
    if (cached_has_bits & 0x00000002u) {
      heartbeat_frequency_ = from.heartbeat_frequency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceHeartbeatSettingsProto::CopyFrom(const DeviceHeartbeatSettingsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceHeartbeatSettingsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceHeartbeatSettingsProto::IsInitialized() const {
  return true;
}

void DeviceHeartbeatSettingsProto::InternalSwap(DeviceHeartbeatSettingsProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(heartbeat_enabled_, other->heartbeat_enabled_);
  swap(heartbeat_frequency_, other->heartbeat_frequency_);
}

std::string DeviceHeartbeatSettingsProto::GetTypeName() const {
  return "enterprise_management.DeviceHeartbeatSettingsProto";
}


// ===================================================================

void ExtensionCacheSizeProto::InitAsDefaultInstance() {
}
class ExtensionCacheSizeProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ExtensionCacheSizeProto>()._has_bits_);
  static void set_has_extension_cache_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ExtensionCacheSizeProto::ExtensionCacheSizeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.ExtensionCacheSizeProto)
}
ExtensionCacheSizeProto::ExtensionCacheSizeProto(const ExtensionCacheSizeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  extension_cache_size_ = from.extension_cache_size_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.ExtensionCacheSizeProto)
}

void ExtensionCacheSizeProto::SharedCtor() {
  extension_cache_size_ = PROTOBUF_LONGLONG(0);
}

ExtensionCacheSizeProto::~ExtensionCacheSizeProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.ExtensionCacheSizeProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ExtensionCacheSizeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ExtensionCacheSizeProto::ArenaDtor(void* object) {
  ExtensionCacheSizeProto* _this = reinterpret_cast< ExtensionCacheSizeProto* >(object);
  (void)_this;
}
void ExtensionCacheSizeProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExtensionCacheSizeProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExtensionCacheSizeProto& ExtensionCacheSizeProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExtensionCacheSizeProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void ExtensionCacheSizeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.ExtensionCacheSizeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extension_cache_size_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ExtensionCacheSizeProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 extension_cache_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_extension_cache_size(&has_bits);
          extension_cache_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExtensionCacheSizeProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.ExtensionCacheSizeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 extension_cache_size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_extension_cache_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.ExtensionCacheSizeProto)
  return target;
}

size_t ExtensionCacheSizeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.ExtensionCacheSizeProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 extension_cache_size = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_extension_cache_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExtensionCacheSizeProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ExtensionCacheSizeProto*>(
      &from));
}

void ExtensionCacheSizeProto::MergeFrom(const ExtensionCacheSizeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.ExtensionCacheSizeProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_extension_cache_size()) {
    _internal_set_extension_cache_size(from._internal_extension_cache_size());
  }
}

void ExtensionCacheSizeProto::CopyFrom(const ExtensionCacheSizeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.ExtensionCacheSizeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtensionCacheSizeProto::IsInitialized() const {
  return true;
}

void ExtensionCacheSizeProto::InternalSwap(ExtensionCacheSizeProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(extension_cache_size_, other->extension_cache_size_);
}

std::string ExtensionCacheSizeProto::GetTypeName() const {
  return "enterprise_management.ExtensionCacheSizeProto";
}


// ===================================================================

void LoginScreenDomainAutoCompleteProto::InitAsDefaultInstance() {
}
class LoginScreenDomainAutoCompleteProto::_Internal {
 public:
  using HasBits = decltype(std::declval<LoginScreenDomainAutoCompleteProto>()._has_bits_);
  static void set_has_login_screen_domain_auto_complete(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LoginScreenDomainAutoCompleteProto::LoginScreenDomainAutoCompleteProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.LoginScreenDomainAutoCompleteProto)
}
LoginScreenDomainAutoCompleteProto::LoginScreenDomainAutoCompleteProto(const LoginScreenDomainAutoCompleteProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  login_screen_domain_auto_complete_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_login_screen_domain_auto_complete()) {
    login_screen_domain_auto_complete_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_login_screen_domain_auto_complete(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.LoginScreenDomainAutoCompleteProto)
}

void LoginScreenDomainAutoCompleteProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginScreenDomainAutoCompleteProto_chrome_5fdevice_5fpolicy_2eproto.base);
  login_screen_domain_auto_complete_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LoginScreenDomainAutoCompleteProto::~LoginScreenDomainAutoCompleteProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.LoginScreenDomainAutoCompleteProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void LoginScreenDomainAutoCompleteProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  login_screen_domain_auto_complete_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginScreenDomainAutoCompleteProto::ArenaDtor(void* object) {
  LoginScreenDomainAutoCompleteProto* _this = reinterpret_cast< LoginScreenDomainAutoCompleteProto* >(object);
  (void)_this;
}
void LoginScreenDomainAutoCompleteProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginScreenDomainAutoCompleteProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginScreenDomainAutoCompleteProto& LoginScreenDomainAutoCompleteProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginScreenDomainAutoCompleteProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void LoginScreenDomainAutoCompleteProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.LoginScreenDomainAutoCompleteProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    login_screen_domain_auto_complete_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LoginScreenDomainAutoCompleteProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string login_screen_domain_auto_complete = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_login_screen_domain_auto_complete();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginScreenDomainAutoCompleteProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.LoginScreenDomainAutoCompleteProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string login_screen_domain_auto_complete = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_login_screen_domain_auto_complete(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.LoginScreenDomainAutoCompleteProto)
  return target;
}

size_t LoginScreenDomainAutoCompleteProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.LoginScreenDomainAutoCompleteProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string login_screen_domain_auto_complete = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_login_screen_domain_auto_complete());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginScreenDomainAutoCompleteProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LoginScreenDomainAutoCompleteProto*>(
      &from));
}

void LoginScreenDomainAutoCompleteProto::MergeFrom(const LoginScreenDomainAutoCompleteProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.LoginScreenDomainAutoCompleteProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_login_screen_domain_auto_complete()) {
    _internal_set_login_screen_domain_auto_complete(from._internal_login_screen_domain_auto_complete());
  }
}

void LoginScreenDomainAutoCompleteProto::CopyFrom(const LoginScreenDomainAutoCompleteProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.LoginScreenDomainAutoCompleteProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginScreenDomainAutoCompleteProto::IsInitialized() const {
  return true;
}

void LoginScreenDomainAutoCompleteProto::InternalSwap(LoginScreenDomainAutoCompleteProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  login_screen_domain_auto_complete_.Swap(&other->login_screen_domain_auto_complete_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string LoginScreenDomainAutoCompleteProto::GetTypeName() const {
  return "enterprise_management.LoginScreenDomainAutoCompleteProto";
}


// ===================================================================

void DeviceLogUploadSettingsProto::InitAsDefaultInstance() {
}
class DeviceLogUploadSettingsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceLogUploadSettingsProto>()._has_bits_);
  static void set_has_system_log_upload_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeviceLogUploadSettingsProto::DeviceLogUploadSettingsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.DeviceLogUploadSettingsProto)
}
DeviceLogUploadSettingsProto::DeviceLogUploadSettingsProto(const DeviceLogUploadSettingsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  system_log_upload_enabled_ = from.system_log_upload_enabled_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceLogUploadSettingsProto)
}

void DeviceLogUploadSettingsProto::SharedCtor() {
  system_log_upload_enabled_ = false;
}

DeviceLogUploadSettingsProto::~DeviceLogUploadSettingsProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceLogUploadSettingsProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeviceLogUploadSettingsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeviceLogUploadSettingsProto::ArenaDtor(void* object) {
  DeviceLogUploadSettingsProto* _this = reinterpret_cast< DeviceLogUploadSettingsProto* >(object);
  (void)_this;
}
void DeviceLogUploadSettingsProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceLogUploadSettingsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceLogUploadSettingsProto& DeviceLogUploadSettingsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceLogUploadSettingsProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void DeviceLogUploadSettingsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceLogUploadSettingsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  system_log_upload_enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceLogUploadSettingsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool system_log_upload_enabled = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_system_log_upload_enabled(&has_bits);
          system_log_upload_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceLogUploadSettingsProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.DeviceLogUploadSettingsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool system_log_upload_enabled = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_system_log_upload_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.DeviceLogUploadSettingsProto)
  return target;
}

size_t DeviceLogUploadSettingsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceLogUploadSettingsProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool system_log_upload_enabled = 1 [default = false];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceLogUploadSettingsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceLogUploadSettingsProto*>(
      &from));
}

void DeviceLogUploadSettingsProto::MergeFrom(const DeviceLogUploadSettingsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceLogUploadSettingsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_system_log_upload_enabled()) {
    _internal_set_system_log_upload_enabled(from._internal_system_log_upload_enabled());
  }
}

void DeviceLogUploadSettingsProto::CopyFrom(const DeviceLogUploadSettingsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceLogUploadSettingsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceLogUploadSettingsProto::IsInitialized() const {
  return true;
}

void DeviceLogUploadSettingsProto::InternalSwap(DeviceLogUploadSettingsProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(system_log_upload_enabled_, other->system_log_upload_enabled_);
}

std::string DeviceLogUploadSettingsProto::GetTypeName() const {
  return "enterprise_management.DeviceLogUploadSettingsProto";
}


// ===================================================================

void DisplayRotationDefaultProto::InitAsDefaultInstance() {
}
class DisplayRotationDefaultProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DisplayRotationDefaultProto>()._has_bits_);
  static void set_has_display_rotation_default(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DisplayRotationDefaultProto::DisplayRotationDefaultProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.DisplayRotationDefaultProto)
}
DisplayRotationDefaultProto::DisplayRotationDefaultProto(const DisplayRotationDefaultProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  display_rotation_default_ = from.display_rotation_default_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DisplayRotationDefaultProto)
}

void DisplayRotationDefaultProto::SharedCtor() {
  display_rotation_default_ = 0;
}

DisplayRotationDefaultProto::~DisplayRotationDefaultProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.DisplayRotationDefaultProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DisplayRotationDefaultProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DisplayRotationDefaultProto::ArenaDtor(void* object) {
  DisplayRotationDefaultProto* _this = reinterpret_cast< DisplayRotationDefaultProto* >(object);
  (void)_this;
}
void DisplayRotationDefaultProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DisplayRotationDefaultProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisplayRotationDefaultProto& DisplayRotationDefaultProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisplayRotationDefaultProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void DisplayRotationDefaultProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DisplayRotationDefaultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  display_rotation_default_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DisplayRotationDefaultProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.DisplayRotationDefaultProto.Rotation display_rotation_default = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::DisplayRotationDefaultProto_Rotation_IsValid(val))) {
            _internal_set_display_rotation_default(static_cast<::enterprise_management::DisplayRotationDefaultProto_Rotation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DisplayRotationDefaultProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.DisplayRotationDefaultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.DisplayRotationDefaultProto.Rotation display_rotation_default = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_display_rotation_default(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.DisplayRotationDefaultProto)
  return target;
}

size_t DisplayRotationDefaultProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DisplayRotationDefaultProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .enterprise_management.DisplayRotationDefaultProto.Rotation display_rotation_default = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_display_rotation_default());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisplayRotationDefaultProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DisplayRotationDefaultProto*>(
      &from));
}

void DisplayRotationDefaultProto::MergeFrom(const DisplayRotationDefaultProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DisplayRotationDefaultProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_display_rotation_default()) {
    _internal_set_display_rotation_default(from._internal_display_rotation_default());
  }
}

void DisplayRotationDefaultProto::CopyFrom(const DisplayRotationDefaultProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DisplayRotationDefaultProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisplayRotationDefaultProto::IsInitialized() const {
  return true;
}

void DisplayRotationDefaultProto::InternalSwap(DisplayRotationDefaultProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(display_rotation_default_, other->display_rotation_default_);
}

std::string DisplayRotationDefaultProto::GetTypeName() const {
  return "enterprise_management.DisplayRotationDefaultProto";
}


// ===================================================================

void DeviceLoginScreenPrivacyScreenEnabledProto::InitAsDefaultInstance() {
}
class DeviceLoginScreenPrivacyScreenEnabledProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceLoginScreenPrivacyScreenEnabledProto>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeviceLoginScreenPrivacyScreenEnabledProto::DeviceLoginScreenPrivacyScreenEnabledProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.DeviceLoginScreenPrivacyScreenEnabledProto)
}
DeviceLoginScreenPrivacyScreenEnabledProto::DeviceLoginScreenPrivacyScreenEnabledProto(const DeviceLoginScreenPrivacyScreenEnabledProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceLoginScreenPrivacyScreenEnabledProto)
}

void DeviceLoginScreenPrivacyScreenEnabledProto::SharedCtor() {
  enabled_ = false;
}

DeviceLoginScreenPrivacyScreenEnabledProto::~DeviceLoginScreenPrivacyScreenEnabledProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceLoginScreenPrivacyScreenEnabledProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeviceLoginScreenPrivacyScreenEnabledProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeviceLoginScreenPrivacyScreenEnabledProto::ArenaDtor(void* object) {
  DeviceLoginScreenPrivacyScreenEnabledProto* _this = reinterpret_cast< DeviceLoginScreenPrivacyScreenEnabledProto* >(object);
  (void)_this;
}
void DeviceLoginScreenPrivacyScreenEnabledProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceLoginScreenPrivacyScreenEnabledProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceLoginScreenPrivacyScreenEnabledProto& DeviceLoginScreenPrivacyScreenEnabledProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceLoginScreenPrivacyScreenEnabledProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void DeviceLoginScreenPrivacyScreenEnabledProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceLoginScreenPrivacyScreenEnabledProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceLoginScreenPrivacyScreenEnabledProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enabled = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceLoginScreenPrivacyScreenEnabledProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.DeviceLoginScreenPrivacyScreenEnabledProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.DeviceLoginScreenPrivacyScreenEnabledProto)
  return target;
}

size_t DeviceLoginScreenPrivacyScreenEnabledProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceLoginScreenPrivacyScreenEnabledProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool enabled = 1 [default = false];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceLoginScreenPrivacyScreenEnabledProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceLoginScreenPrivacyScreenEnabledProto*>(
      &from));
}

void DeviceLoginScreenPrivacyScreenEnabledProto::MergeFrom(const DeviceLoginScreenPrivacyScreenEnabledProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceLoginScreenPrivacyScreenEnabledProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enabled()) {
    _internal_set_enabled(from._internal_enabled());
  }
}

void DeviceLoginScreenPrivacyScreenEnabledProto::CopyFrom(const DeviceLoginScreenPrivacyScreenEnabledProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceLoginScreenPrivacyScreenEnabledProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceLoginScreenPrivacyScreenEnabledProto::IsInitialized() const {
  return true;
}

void DeviceLoginScreenPrivacyScreenEnabledProto::InternalSwap(DeviceLoginScreenPrivacyScreenEnabledProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
}

std::string DeviceLoginScreenPrivacyScreenEnabledProto::GetTypeName() const {
  return "enterprise_management.DeviceLoginScreenPrivacyScreenEnabledProto";
}


// ===================================================================

void DeviceDisplayResolutionProto::InitAsDefaultInstance() {
}
class DeviceDisplayResolutionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceDisplayResolutionProto>()._has_bits_);
  static void set_has_device_display_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeviceDisplayResolutionProto::DeviceDisplayResolutionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.DeviceDisplayResolutionProto)
}
DeviceDisplayResolutionProto::DeviceDisplayResolutionProto(const DeviceDisplayResolutionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  device_display_resolution_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_device_display_resolution()) {
    device_display_resolution_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_display_resolution(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceDisplayResolutionProto)
}

void DeviceDisplayResolutionProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceDisplayResolutionProto_chrome_5fdevice_5fpolicy_2eproto.base);
  device_display_resolution_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeviceDisplayResolutionProto::~DeviceDisplayResolutionProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceDisplayResolutionProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeviceDisplayResolutionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_display_resolution_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceDisplayResolutionProto::ArenaDtor(void* object) {
  DeviceDisplayResolutionProto* _this = reinterpret_cast< DeviceDisplayResolutionProto* >(object);
  (void)_this;
}
void DeviceDisplayResolutionProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceDisplayResolutionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceDisplayResolutionProto& DeviceDisplayResolutionProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceDisplayResolutionProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void DeviceDisplayResolutionProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceDisplayResolutionProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    device_display_resolution_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceDisplayResolutionProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string device_display_resolution = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_display_resolution();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceDisplayResolutionProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.DeviceDisplayResolutionProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string device_display_resolution = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_display_resolution(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.DeviceDisplayResolutionProto)
  return target;
}

size_t DeviceDisplayResolutionProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceDisplayResolutionProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string device_display_resolution = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_display_resolution());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceDisplayResolutionProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceDisplayResolutionProto*>(
      &from));
}

void DeviceDisplayResolutionProto::MergeFrom(const DeviceDisplayResolutionProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceDisplayResolutionProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device_display_resolution()) {
    _internal_set_device_display_resolution(from._internal_device_display_resolution());
  }
}

void DeviceDisplayResolutionProto::CopyFrom(const DeviceDisplayResolutionProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceDisplayResolutionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceDisplayResolutionProto::IsInitialized() const {
  return true;
}

void DeviceDisplayResolutionProto::InternalSwap(DeviceDisplayResolutionProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  device_display_resolution_.Swap(&other->device_display_resolution_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string DeviceDisplayResolutionProto::GetTypeName() const {
  return "enterprise_management.DeviceDisplayResolutionProto";
}


// ===================================================================

void AllowKioskAppControlChromeVersionProto::InitAsDefaultInstance() {
}
class AllowKioskAppControlChromeVersionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AllowKioskAppControlChromeVersionProto>()._has_bits_);
  static void set_has_allow_kiosk_app_control_chrome_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AllowKioskAppControlChromeVersionProto::AllowKioskAppControlChromeVersionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.AllowKioskAppControlChromeVersionProto)
}
AllowKioskAppControlChromeVersionProto::AllowKioskAppControlChromeVersionProto(const AllowKioskAppControlChromeVersionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  allow_kiosk_app_control_chrome_version_ = from.allow_kiosk_app_control_chrome_version_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.AllowKioskAppControlChromeVersionProto)
}

void AllowKioskAppControlChromeVersionProto::SharedCtor() {
  allow_kiosk_app_control_chrome_version_ = false;
}

AllowKioskAppControlChromeVersionProto::~AllowKioskAppControlChromeVersionProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.AllowKioskAppControlChromeVersionProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AllowKioskAppControlChromeVersionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AllowKioskAppControlChromeVersionProto::ArenaDtor(void* object) {
  AllowKioskAppControlChromeVersionProto* _this = reinterpret_cast< AllowKioskAppControlChromeVersionProto* >(object);
  (void)_this;
}
void AllowKioskAppControlChromeVersionProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AllowKioskAppControlChromeVersionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllowKioskAppControlChromeVersionProto& AllowKioskAppControlChromeVersionProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AllowKioskAppControlChromeVersionProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void AllowKioskAppControlChromeVersionProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.AllowKioskAppControlChromeVersionProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allow_kiosk_app_control_chrome_version_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AllowKioskAppControlChromeVersionProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool allow_kiosk_app_control_chrome_version = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_allow_kiosk_app_control_chrome_version(&has_bits);
          allow_kiosk_app_control_chrome_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllowKioskAppControlChromeVersionProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.AllowKioskAppControlChromeVersionProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool allow_kiosk_app_control_chrome_version = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_allow_kiosk_app_control_chrome_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.AllowKioskAppControlChromeVersionProto)
  return target;
}

size_t AllowKioskAppControlChromeVersionProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.AllowKioskAppControlChromeVersionProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool allow_kiosk_app_control_chrome_version = 1 [default = false];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllowKioskAppControlChromeVersionProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AllowKioskAppControlChromeVersionProto*>(
      &from));
}

void AllowKioskAppControlChromeVersionProto::MergeFrom(const AllowKioskAppControlChromeVersionProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.AllowKioskAppControlChromeVersionProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_allow_kiosk_app_control_chrome_version()) {
    _internal_set_allow_kiosk_app_control_chrome_version(from._internal_allow_kiosk_app_control_chrome_version());
  }
}

void AllowKioskAppControlChromeVersionProto::CopyFrom(const AllowKioskAppControlChromeVersionProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.AllowKioskAppControlChromeVersionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllowKioskAppControlChromeVersionProto::IsInitialized() const {
  return true;
}

void AllowKioskAppControlChromeVersionProto::InternalSwap(AllowKioskAppControlChromeVersionProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(allow_kiosk_app_control_chrome_version_, other->allow_kiosk_app_control_chrome_version_);
}

std::string AllowKioskAppControlChromeVersionProto::GetTypeName() const {
  return "enterprise_management.AllowKioskAppControlChromeVersionProto";
}


// ===================================================================

void LoginAuthenticationBehaviorProto::InitAsDefaultInstance() {
}
class LoginAuthenticationBehaviorProto::_Internal {
 public:
  using HasBits = decltype(std::declval<LoginAuthenticationBehaviorProto>()._has_bits_);
  static void set_has_login_authentication_behavior(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LoginAuthenticationBehaviorProto::LoginAuthenticationBehaviorProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.LoginAuthenticationBehaviorProto)
}
LoginAuthenticationBehaviorProto::LoginAuthenticationBehaviorProto(const LoginAuthenticationBehaviorProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  login_authentication_behavior_ = from.login_authentication_behavior_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.LoginAuthenticationBehaviorProto)
}

void LoginAuthenticationBehaviorProto::SharedCtor() {
  login_authentication_behavior_ = 0;
}

LoginAuthenticationBehaviorProto::~LoginAuthenticationBehaviorProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.LoginAuthenticationBehaviorProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void LoginAuthenticationBehaviorProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LoginAuthenticationBehaviorProto::ArenaDtor(void* object) {
  LoginAuthenticationBehaviorProto* _this = reinterpret_cast< LoginAuthenticationBehaviorProto* >(object);
  (void)_this;
}
void LoginAuthenticationBehaviorProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginAuthenticationBehaviorProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginAuthenticationBehaviorProto& LoginAuthenticationBehaviorProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginAuthenticationBehaviorProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void LoginAuthenticationBehaviorProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.LoginAuthenticationBehaviorProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  login_authentication_behavior_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LoginAuthenticationBehaviorProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.LoginAuthenticationBehaviorProto.LoginBehavior login_authentication_behavior = 1 [default = GAIA];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::LoginAuthenticationBehaviorProto_LoginBehavior_IsValid(val))) {
            _internal_set_login_authentication_behavior(static_cast<::enterprise_management::LoginAuthenticationBehaviorProto_LoginBehavior>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginAuthenticationBehaviorProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.LoginAuthenticationBehaviorProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.LoginAuthenticationBehaviorProto.LoginBehavior login_authentication_behavior = 1 [default = GAIA];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_login_authentication_behavior(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.LoginAuthenticationBehaviorProto)
  return target;
}

size_t LoginAuthenticationBehaviorProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.LoginAuthenticationBehaviorProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .enterprise_management.LoginAuthenticationBehaviorProto.LoginBehavior login_authentication_behavior = 1 [default = GAIA];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_login_authentication_behavior());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginAuthenticationBehaviorProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LoginAuthenticationBehaviorProto*>(
      &from));
}

void LoginAuthenticationBehaviorProto::MergeFrom(const LoginAuthenticationBehaviorProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.LoginAuthenticationBehaviorProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_login_authentication_behavior()) {
    _internal_set_login_authentication_behavior(from._internal_login_authentication_behavior());
  }
}

void LoginAuthenticationBehaviorProto::CopyFrom(const LoginAuthenticationBehaviorProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.LoginAuthenticationBehaviorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginAuthenticationBehaviorProto::IsInitialized() const {
  return true;
}

void LoginAuthenticationBehaviorProto::InternalSwap(LoginAuthenticationBehaviorProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(login_authentication_behavior_, other->login_authentication_behavior_);
}

std::string LoginAuthenticationBehaviorProto::GetTypeName() const {
  return "enterprise_management.LoginAuthenticationBehaviorProto";
}


// ===================================================================

void UsbDeviceIdProto::InitAsDefaultInstance() {
}
class UsbDeviceIdProto::_Internal {
 public:
  using HasBits = decltype(std::declval<UsbDeviceIdProto>()._has_bits_);
  static void set_has_vendor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_product_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

UsbDeviceIdProto::UsbDeviceIdProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.UsbDeviceIdProto)
}
UsbDeviceIdProto::UsbDeviceIdProto(const UsbDeviceIdProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&vendor_id_, &from.vendor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&product_id_) -
    reinterpret_cast<char*>(&vendor_id_)) + sizeof(product_id_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.UsbDeviceIdProto)
}

void UsbDeviceIdProto::SharedCtor() {
  ::memset(&vendor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&product_id_) -
      reinterpret_cast<char*>(&vendor_id_)) + sizeof(product_id_));
}

UsbDeviceIdProto::~UsbDeviceIdProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.UsbDeviceIdProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void UsbDeviceIdProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UsbDeviceIdProto::ArenaDtor(void* object) {
  UsbDeviceIdProto* _this = reinterpret_cast< UsbDeviceIdProto* >(object);
  (void)_this;
}
void UsbDeviceIdProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UsbDeviceIdProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsbDeviceIdProto& UsbDeviceIdProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsbDeviceIdProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void UsbDeviceIdProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.UsbDeviceIdProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&vendor_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&product_id_) -
        reinterpret_cast<char*>(&vendor_id_)) + sizeof(product_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UsbDeviceIdProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 vendor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_vendor_id(&has_bits);
          vendor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 product_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_product_id(&has_bits);
          product_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsbDeviceIdProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.UsbDeviceIdProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 vendor_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_vendor_id(), target);
  }

  // optional int32 product_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_product_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.UsbDeviceIdProto)
  return target;
}

size_t UsbDeviceIdProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.UsbDeviceIdProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 vendor_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_vendor_id());
    }

    // optional int32 product_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_product_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsbDeviceIdProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UsbDeviceIdProto*>(
      &from));
}

void UsbDeviceIdProto::MergeFrom(const UsbDeviceIdProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.UsbDeviceIdProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      vendor_id_ = from.vendor_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      product_id_ = from.product_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UsbDeviceIdProto::CopyFrom(const UsbDeviceIdProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.UsbDeviceIdProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsbDeviceIdProto::IsInitialized() const {
  return true;
}

void UsbDeviceIdProto::InternalSwap(UsbDeviceIdProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UsbDeviceIdProto, product_id_)
      + sizeof(UsbDeviceIdProto::product_id_)
      - PROTOBUF_FIELD_OFFSET(UsbDeviceIdProto, vendor_id_)>(
          reinterpret_cast<char*>(&vendor_id_),
          reinterpret_cast<char*>(&other->vendor_id_));
}

std::string UsbDeviceIdProto::GetTypeName() const {
  return "enterprise_management.UsbDeviceIdProto";
}


// ===================================================================

void UsbDetachableWhitelistProto::InitAsDefaultInstance() {
}
class UsbDetachableWhitelistProto::_Internal {
 public:
};

UsbDetachableWhitelistProto::UsbDetachableWhitelistProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.UsbDetachableWhitelistProto)
}
UsbDetachableWhitelistProto::UsbDetachableWhitelistProto(const UsbDetachableWhitelistProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      id_(from.id_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.UsbDetachableWhitelistProto)
}

void UsbDetachableWhitelistProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UsbDetachableWhitelistProto_chrome_5fdevice_5fpolicy_2eproto.base);
}

UsbDetachableWhitelistProto::~UsbDetachableWhitelistProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.UsbDetachableWhitelistProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void UsbDetachableWhitelistProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UsbDetachableWhitelistProto::ArenaDtor(void* object) {
  UsbDetachableWhitelistProto* _this = reinterpret_cast< UsbDetachableWhitelistProto* >(object);
  (void)_this;
}
void UsbDetachableWhitelistProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UsbDetachableWhitelistProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsbDetachableWhitelistProto& UsbDetachableWhitelistProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsbDetachableWhitelistProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void UsbDetachableWhitelistProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.UsbDetachableWhitelistProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UsbDetachableWhitelistProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .enterprise_management.UsbDeviceIdProto id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsbDetachableWhitelistProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.UsbDetachableWhitelistProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .enterprise_management.UsbDeviceIdProto id = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_id(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.UsbDetachableWhitelistProto)
  return target;
}

size_t UsbDetachableWhitelistProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.UsbDetachableWhitelistProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .enterprise_management.UsbDeviceIdProto id = 1;
  total_size += 1UL * this->_internal_id_size();
  for (const auto& msg : this->id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsbDetachableWhitelistProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UsbDetachableWhitelistProto*>(
      &from));
}

void UsbDetachableWhitelistProto::MergeFrom(const UsbDetachableWhitelistProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.UsbDetachableWhitelistProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  id_.MergeFrom(from.id_);
}

void UsbDetachableWhitelistProto::CopyFrom(const UsbDetachableWhitelistProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.UsbDetachableWhitelistProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsbDetachableWhitelistProto::IsInitialized() const {
  return true;
}

void UsbDetachableWhitelistProto::InternalSwap(UsbDetachableWhitelistProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  id_.InternalSwap(&other->id_);
}

std::string UsbDetachableWhitelistProto::GetTypeName() const {
  return "enterprise_management.UsbDetachableWhitelistProto";
}


// ===================================================================

void AllowBluetoothProto::InitAsDefaultInstance() {
}
class AllowBluetoothProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AllowBluetoothProto>()._has_bits_);
  static void set_has_allow_bluetooth(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AllowBluetoothProto::AllowBluetoothProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.AllowBluetoothProto)
}
AllowBluetoothProto::AllowBluetoothProto(const AllowBluetoothProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  allow_bluetooth_ = from.allow_bluetooth_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.AllowBluetoothProto)
}

void AllowBluetoothProto::SharedCtor() {
  allow_bluetooth_ = true;
}

AllowBluetoothProto::~AllowBluetoothProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.AllowBluetoothProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AllowBluetoothProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AllowBluetoothProto::ArenaDtor(void* object) {
  AllowBluetoothProto* _this = reinterpret_cast< AllowBluetoothProto* >(object);
  (void)_this;
}
void AllowBluetoothProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AllowBluetoothProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllowBluetoothProto& AllowBluetoothProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AllowBluetoothProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void AllowBluetoothProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.AllowBluetoothProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allow_bluetooth_ = true;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AllowBluetoothProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool allow_bluetooth = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_allow_bluetooth(&has_bits);
          allow_bluetooth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllowBluetoothProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.AllowBluetoothProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool allow_bluetooth = 1 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_allow_bluetooth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.AllowBluetoothProto)
  return target;
}

size_t AllowBluetoothProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.AllowBluetoothProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool allow_bluetooth = 1 [default = true];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllowBluetoothProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AllowBluetoothProto*>(
      &from));
}

void AllowBluetoothProto::MergeFrom(const AllowBluetoothProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.AllowBluetoothProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_allow_bluetooth()) {
    _internal_set_allow_bluetooth(from._internal_allow_bluetooth());
  }
}

void AllowBluetoothProto::CopyFrom(const AllowBluetoothProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.AllowBluetoothProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllowBluetoothProto::IsInitialized() const {
  return true;
}

void AllowBluetoothProto::InternalSwap(AllowBluetoothProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(allow_bluetooth_, other->allow_bluetooth_);
}

std::string AllowBluetoothProto::GetTypeName() const {
  return "enterprise_management.AllowBluetoothProto";
}


// ===================================================================

void DeviceWiFiAllowedProto::InitAsDefaultInstance() {
}
class DeviceWiFiAllowedProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceWiFiAllowedProto>()._has_bits_);
  static void set_has_device_wifi_allowed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeviceWiFiAllowedProto::DeviceWiFiAllowedProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.DeviceWiFiAllowedProto)
}
DeviceWiFiAllowedProto::DeviceWiFiAllowedProto(const DeviceWiFiAllowedProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  device_wifi_allowed_ = from.device_wifi_allowed_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceWiFiAllowedProto)
}

void DeviceWiFiAllowedProto::SharedCtor() {
  device_wifi_allowed_ = true;
}

DeviceWiFiAllowedProto::~DeviceWiFiAllowedProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceWiFiAllowedProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeviceWiFiAllowedProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeviceWiFiAllowedProto::ArenaDtor(void* object) {
  DeviceWiFiAllowedProto* _this = reinterpret_cast< DeviceWiFiAllowedProto* >(object);
  (void)_this;
}
void DeviceWiFiAllowedProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceWiFiAllowedProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceWiFiAllowedProto& DeviceWiFiAllowedProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceWiFiAllowedProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void DeviceWiFiAllowedProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceWiFiAllowedProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_wifi_allowed_ = true;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceWiFiAllowedProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool device_wifi_allowed = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_device_wifi_allowed(&has_bits);
          device_wifi_allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceWiFiAllowedProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.DeviceWiFiAllowedProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool device_wifi_allowed = 1 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_device_wifi_allowed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.DeviceWiFiAllowedProto)
  return target;
}

size_t DeviceWiFiAllowedProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceWiFiAllowedProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool device_wifi_allowed = 1 [default = true];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceWiFiAllowedProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceWiFiAllowedProto*>(
      &from));
}

void DeviceWiFiAllowedProto::MergeFrom(const DeviceWiFiAllowedProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceWiFiAllowedProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device_wifi_allowed()) {
    _internal_set_device_wifi_allowed(from._internal_device_wifi_allowed());
  }
}

void DeviceWiFiAllowedProto::CopyFrom(const DeviceWiFiAllowedProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceWiFiAllowedProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceWiFiAllowedProto::IsInitialized() const {
  return true;
}

void DeviceWiFiAllowedProto::InternalSwap(DeviceWiFiAllowedProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(device_wifi_allowed_, other->device_wifi_allowed_);
}

std::string DeviceWiFiAllowedProto::GetTypeName() const {
  return "enterprise_management.DeviceWiFiAllowedProto";
}


// ===================================================================

void DeviceQuirksDownloadEnabledProto::InitAsDefaultInstance() {
}
class DeviceQuirksDownloadEnabledProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceQuirksDownloadEnabledProto>()._has_bits_);
  static void set_has_quirks_download_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeviceQuirksDownloadEnabledProto::DeviceQuirksDownloadEnabledProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.DeviceQuirksDownloadEnabledProto)
}
DeviceQuirksDownloadEnabledProto::DeviceQuirksDownloadEnabledProto(const DeviceQuirksDownloadEnabledProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  quirks_download_enabled_ = from.quirks_download_enabled_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceQuirksDownloadEnabledProto)
}

void DeviceQuirksDownloadEnabledProto::SharedCtor() {
  quirks_download_enabled_ = false;
}

DeviceQuirksDownloadEnabledProto::~DeviceQuirksDownloadEnabledProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceQuirksDownloadEnabledProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeviceQuirksDownloadEnabledProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeviceQuirksDownloadEnabledProto::ArenaDtor(void* object) {
  DeviceQuirksDownloadEnabledProto* _this = reinterpret_cast< DeviceQuirksDownloadEnabledProto* >(object);
  (void)_this;
}
void DeviceQuirksDownloadEnabledProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceQuirksDownloadEnabledProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceQuirksDownloadEnabledProto& DeviceQuirksDownloadEnabledProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceQuirksDownloadEnabledProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void DeviceQuirksDownloadEnabledProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceQuirksDownloadEnabledProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  quirks_download_enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceQuirksDownloadEnabledProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool quirks_download_enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_quirks_download_enabled(&has_bits);
          quirks_download_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceQuirksDownloadEnabledProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.DeviceQuirksDownloadEnabledProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool quirks_download_enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_quirks_download_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.DeviceQuirksDownloadEnabledProto)
  return target;
}

size_t DeviceQuirksDownloadEnabledProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceQuirksDownloadEnabledProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool quirks_download_enabled = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceQuirksDownloadEnabledProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceQuirksDownloadEnabledProto*>(
      &from));
}

void DeviceQuirksDownloadEnabledProto::MergeFrom(const DeviceQuirksDownloadEnabledProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceQuirksDownloadEnabledProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_quirks_download_enabled()) {
    _internal_set_quirks_download_enabled(from._internal_quirks_download_enabled());
  }
}

void DeviceQuirksDownloadEnabledProto::CopyFrom(const DeviceQuirksDownloadEnabledProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceQuirksDownloadEnabledProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceQuirksDownloadEnabledProto::IsInitialized() const {
  return true;
}

void DeviceQuirksDownloadEnabledProto::InternalSwap(DeviceQuirksDownloadEnabledProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(quirks_download_enabled_, other->quirks_download_enabled_);
}

std::string DeviceQuirksDownloadEnabledProto::GetTypeName() const {
  return "enterprise_management.DeviceQuirksDownloadEnabledProto";
}


// ===================================================================

void LoginVideoCaptureAllowedUrlsProto::InitAsDefaultInstance() {
}
class LoginVideoCaptureAllowedUrlsProto::_Internal {
 public:
};

LoginVideoCaptureAllowedUrlsProto::LoginVideoCaptureAllowedUrlsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  urls_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.LoginVideoCaptureAllowedUrlsProto)
}
LoginVideoCaptureAllowedUrlsProto::LoginVideoCaptureAllowedUrlsProto(const LoginVideoCaptureAllowedUrlsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      urls_(from.urls_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.LoginVideoCaptureAllowedUrlsProto)
}

void LoginVideoCaptureAllowedUrlsProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginVideoCaptureAllowedUrlsProto_chrome_5fdevice_5fpolicy_2eproto.base);
}

LoginVideoCaptureAllowedUrlsProto::~LoginVideoCaptureAllowedUrlsProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.LoginVideoCaptureAllowedUrlsProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void LoginVideoCaptureAllowedUrlsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LoginVideoCaptureAllowedUrlsProto::ArenaDtor(void* object) {
  LoginVideoCaptureAllowedUrlsProto* _this = reinterpret_cast< LoginVideoCaptureAllowedUrlsProto* >(object);
  (void)_this;
}
void LoginVideoCaptureAllowedUrlsProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginVideoCaptureAllowedUrlsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginVideoCaptureAllowedUrlsProto& LoginVideoCaptureAllowedUrlsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginVideoCaptureAllowedUrlsProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void LoginVideoCaptureAllowedUrlsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.LoginVideoCaptureAllowedUrlsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  urls_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LoginVideoCaptureAllowedUrlsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string urls = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_urls();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginVideoCaptureAllowedUrlsProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.LoginVideoCaptureAllowedUrlsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string urls = 1;
  for (int i = 0, n = this->_internal_urls_size(); i < n; i++) {
    const auto& s = this->_internal_urls(i);
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.LoginVideoCaptureAllowedUrlsProto)
  return target;
}

size_t LoginVideoCaptureAllowedUrlsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.LoginVideoCaptureAllowedUrlsProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string urls = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(urls_.size());
  for (int i = 0, n = urls_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      urls_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginVideoCaptureAllowedUrlsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LoginVideoCaptureAllowedUrlsProto*>(
      &from));
}

void LoginVideoCaptureAllowedUrlsProto::MergeFrom(const LoginVideoCaptureAllowedUrlsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.LoginVideoCaptureAllowedUrlsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  urls_.MergeFrom(from.urls_);
}

void LoginVideoCaptureAllowedUrlsProto::CopyFrom(const LoginVideoCaptureAllowedUrlsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.LoginVideoCaptureAllowedUrlsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginVideoCaptureAllowedUrlsProto::IsInitialized() const {
  return true;
}

void LoginVideoCaptureAllowedUrlsProto::InternalSwap(LoginVideoCaptureAllowedUrlsProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  urls_.InternalSwap(&other->urls_);
}

std::string LoginVideoCaptureAllowedUrlsProto::GetTypeName() const {
  return "enterprise_management.LoginVideoCaptureAllowedUrlsProto";
}


// ===================================================================

void DeviceWiFiFastTransitionEnabledProto::InitAsDefaultInstance() {
}
class DeviceWiFiFastTransitionEnabledProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceWiFiFastTransitionEnabledProto>()._has_bits_);
  static void set_has_device_wifi_fast_transition_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeviceWiFiFastTransitionEnabledProto::DeviceWiFiFastTransitionEnabledProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.DeviceWiFiFastTransitionEnabledProto)
}
DeviceWiFiFastTransitionEnabledProto::DeviceWiFiFastTransitionEnabledProto(const DeviceWiFiFastTransitionEnabledProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  device_wifi_fast_transition_enabled_ = from.device_wifi_fast_transition_enabled_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceWiFiFastTransitionEnabledProto)
}

void DeviceWiFiFastTransitionEnabledProto::SharedCtor() {
  device_wifi_fast_transition_enabled_ = false;
}

DeviceWiFiFastTransitionEnabledProto::~DeviceWiFiFastTransitionEnabledProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceWiFiFastTransitionEnabledProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeviceWiFiFastTransitionEnabledProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeviceWiFiFastTransitionEnabledProto::ArenaDtor(void* object) {
  DeviceWiFiFastTransitionEnabledProto* _this = reinterpret_cast< DeviceWiFiFastTransitionEnabledProto* >(object);
  (void)_this;
}
void DeviceWiFiFastTransitionEnabledProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceWiFiFastTransitionEnabledProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceWiFiFastTransitionEnabledProto& DeviceWiFiFastTransitionEnabledProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceWiFiFastTransitionEnabledProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void DeviceWiFiFastTransitionEnabledProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceWiFiFastTransitionEnabledProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_wifi_fast_transition_enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceWiFiFastTransitionEnabledProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool device_wifi_fast_transition_enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_device_wifi_fast_transition_enabled(&has_bits);
          device_wifi_fast_transition_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceWiFiFastTransitionEnabledProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.DeviceWiFiFastTransitionEnabledProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool device_wifi_fast_transition_enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_device_wifi_fast_transition_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.DeviceWiFiFastTransitionEnabledProto)
  return target;
}

size_t DeviceWiFiFastTransitionEnabledProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceWiFiFastTransitionEnabledProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool device_wifi_fast_transition_enabled = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceWiFiFastTransitionEnabledProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceWiFiFastTransitionEnabledProto*>(
      &from));
}

void DeviceWiFiFastTransitionEnabledProto::MergeFrom(const DeviceWiFiFastTransitionEnabledProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceWiFiFastTransitionEnabledProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device_wifi_fast_transition_enabled()) {
    _internal_set_device_wifi_fast_transition_enabled(from._internal_device_wifi_fast_transition_enabled());
  }
}

void DeviceWiFiFastTransitionEnabledProto::CopyFrom(const DeviceWiFiFastTransitionEnabledProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceWiFiFastTransitionEnabledProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceWiFiFastTransitionEnabledProto::IsInitialized() const {
  return true;
}

void DeviceWiFiFastTransitionEnabledProto::InternalSwap(DeviceWiFiFastTransitionEnabledProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(device_wifi_fast_transition_enabled_, other->device_wifi_fast_transition_enabled_);
}

std::string DeviceWiFiFastTransitionEnabledProto::GetTypeName() const {
  return "enterprise_management.DeviceWiFiFastTransitionEnabledProto";
}


// ===================================================================

void NetworkThrottlingEnabledProto::InitAsDefaultInstance() {
}
class NetworkThrottlingEnabledProto::_Internal {
 public:
  using HasBits = decltype(std::declval<NetworkThrottlingEnabledProto>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_upload_rate_kbits(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_download_rate_kbits(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

NetworkThrottlingEnabledProto::NetworkThrottlingEnabledProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.NetworkThrottlingEnabledProto)
}
NetworkThrottlingEnabledProto::NetworkThrottlingEnabledProto(const NetworkThrottlingEnabledProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&download_rate_kbits_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(download_rate_kbits_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.NetworkThrottlingEnabledProto)
}

void NetworkThrottlingEnabledProto::SharedCtor() {
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&download_rate_kbits_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(download_rate_kbits_));
}

NetworkThrottlingEnabledProto::~NetworkThrottlingEnabledProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.NetworkThrottlingEnabledProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void NetworkThrottlingEnabledProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NetworkThrottlingEnabledProto::ArenaDtor(void* object) {
  NetworkThrottlingEnabledProto* _this = reinterpret_cast< NetworkThrottlingEnabledProto* >(object);
  (void)_this;
}
void NetworkThrottlingEnabledProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetworkThrottlingEnabledProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkThrottlingEnabledProto& NetworkThrottlingEnabledProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkThrottlingEnabledProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void NetworkThrottlingEnabledProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.NetworkThrottlingEnabledProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&download_rate_kbits_) -
        reinterpret_cast<char*>(&enabled_)) + sizeof(download_rate_kbits_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* NetworkThrottlingEnabledProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enabled = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 upload_rate_kbits = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_upload_rate_kbits(&has_bits);
          upload_rate_kbits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 download_rate_kbits = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_download_rate_kbits(&has_bits);
          download_rate_kbits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetworkThrottlingEnabledProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.NetworkThrottlingEnabledProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // optional int32 upload_rate_kbits = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_upload_rate_kbits(), target);
  }

  // optional int32 download_rate_kbits = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_download_rate_kbits(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.NetworkThrottlingEnabledProto)
  return target;
}

size_t NetworkThrottlingEnabledProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.NetworkThrottlingEnabledProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool enabled = 1 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional int32 upload_rate_kbits = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_upload_rate_kbits());
    }

    // optional int32 download_rate_kbits = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_download_rate_kbits());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkThrottlingEnabledProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const NetworkThrottlingEnabledProto*>(
      &from));
}

void NetworkThrottlingEnabledProto::MergeFrom(const NetworkThrottlingEnabledProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.NetworkThrottlingEnabledProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000002u) {
      upload_rate_kbits_ = from.upload_rate_kbits_;
    }
    if (cached_has_bits & 0x00000004u) {
      download_rate_kbits_ = from.download_rate_kbits_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetworkThrottlingEnabledProto::CopyFrom(const NetworkThrottlingEnabledProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.NetworkThrottlingEnabledProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkThrottlingEnabledProto::IsInitialized() const {
  return true;
}

void NetworkThrottlingEnabledProto::InternalSwap(NetworkThrottlingEnabledProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetworkThrottlingEnabledProto, download_rate_kbits_)
      + sizeof(NetworkThrottlingEnabledProto::download_rate_kbits_)
      - PROTOBUF_FIELD_OFFSET(NetworkThrottlingEnabledProto, enabled_)>(
          reinterpret_cast<char*>(&enabled_),
          reinterpret_cast<char*>(&other->enabled_));
}

std::string NetworkThrottlingEnabledProto::GetTypeName() const {
  return "enterprise_management.NetworkThrottlingEnabledProto";
}


// ===================================================================

void DeviceLoginScreenExtensionsProto::InitAsDefaultInstance() {
}
class DeviceLoginScreenExtensionsProto::_Internal {
 public:
};

DeviceLoginScreenExtensionsProto::DeviceLoginScreenExtensionsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  device_login_screen_extensions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.DeviceLoginScreenExtensionsProto)
}
DeviceLoginScreenExtensionsProto::DeviceLoginScreenExtensionsProto(const DeviceLoginScreenExtensionsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      device_login_screen_extensions_(from.device_login_screen_extensions_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceLoginScreenExtensionsProto)
}

void DeviceLoginScreenExtensionsProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceLoginScreenExtensionsProto_chrome_5fdevice_5fpolicy_2eproto.base);
}

DeviceLoginScreenExtensionsProto::~DeviceLoginScreenExtensionsProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceLoginScreenExtensionsProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeviceLoginScreenExtensionsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeviceLoginScreenExtensionsProto::ArenaDtor(void* object) {
  DeviceLoginScreenExtensionsProto* _this = reinterpret_cast< DeviceLoginScreenExtensionsProto* >(object);
  (void)_this;
}
void DeviceLoginScreenExtensionsProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceLoginScreenExtensionsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceLoginScreenExtensionsProto& DeviceLoginScreenExtensionsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceLoginScreenExtensionsProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void DeviceLoginScreenExtensionsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceLoginScreenExtensionsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_login_screen_extensions_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceLoginScreenExtensionsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string device_login_screen_extensions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_device_login_screen_extensions();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceLoginScreenExtensionsProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.DeviceLoginScreenExtensionsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string device_login_screen_extensions = 1;
  for (int i = 0, n = this->_internal_device_login_screen_extensions_size(); i < n; i++) {
    const auto& s = this->_internal_device_login_screen_extensions(i);
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.DeviceLoginScreenExtensionsProto)
  return target;
}

size_t DeviceLoginScreenExtensionsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceLoginScreenExtensionsProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string device_login_screen_extensions = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(device_login_screen_extensions_.size());
  for (int i = 0, n = device_login_screen_extensions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      device_login_screen_extensions_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceLoginScreenExtensionsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceLoginScreenExtensionsProto*>(
      &from));
}

void DeviceLoginScreenExtensionsProto::MergeFrom(const DeviceLoginScreenExtensionsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceLoginScreenExtensionsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  device_login_screen_extensions_.MergeFrom(from.device_login_screen_extensions_);
}

void DeviceLoginScreenExtensionsProto::CopyFrom(const DeviceLoginScreenExtensionsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceLoginScreenExtensionsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceLoginScreenExtensionsProto::IsInitialized() const {
  return true;
}

void DeviceLoginScreenExtensionsProto::InternalSwap(DeviceLoginScreenExtensionsProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  device_login_screen_extensions_.InternalSwap(&other->device_login_screen_extensions_);
}

std::string DeviceLoginScreenExtensionsProto::GetTypeName() const {
  return "enterprise_management.DeviceLoginScreenExtensionsProto";
}


// ===================================================================

void LoginScreenLocalesProto::InitAsDefaultInstance() {
}
class LoginScreenLocalesProto::_Internal {
 public:
};

LoginScreenLocalesProto::LoginScreenLocalesProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  login_screen_locales_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.LoginScreenLocalesProto)
}
LoginScreenLocalesProto::LoginScreenLocalesProto(const LoginScreenLocalesProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      login_screen_locales_(from.login_screen_locales_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.LoginScreenLocalesProto)
}

void LoginScreenLocalesProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginScreenLocalesProto_chrome_5fdevice_5fpolicy_2eproto.base);
}

LoginScreenLocalesProto::~LoginScreenLocalesProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.LoginScreenLocalesProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void LoginScreenLocalesProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LoginScreenLocalesProto::ArenaDtor(void* object) {
  LoginScreenLocalesProto* _this = reinterpret_cast< LoginScreenLocalesProto* >(object);
  (void)_this;
}
void LoginScreenLocalesProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginScreenLocalesProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginScreenLocalesProto& LoginScreenLocalesProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginScreenLocalesProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void LoginScreenLocalesProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.LoginScreenLocalesProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  login_screen_locales_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LoginScreenLocalesProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string login_screen_locales = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_login_screen_locales();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginScreenLocalesProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.LoginScreenLocalesProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string login_screen_locales = 1;
  for (int i = 0, n = this->_internal_login_screen_locales_size(); i < n; i++) {
    const auto& s = this->_internal_login_screen_locales(i);
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.LoginScreenLocalesProto)
  return target;
}

size_t LoginScreenLocalesProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.LoginScreenLocalesProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string login_screen_locales = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(login_screen_locales_.size());
  for (int i = 0, n = login_screen_locales_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      login_screen_locales_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginScreenLocalesProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LoginScreenLocalesProto*>(
      &from));
}

void LoginScreenLocalesProto::MergeFrom(const LoginScreenLocalesProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.LoginScreenLocalesProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  login_screen_locales_.MergeFrom(from.login_screen_locales_);
}

void LoginScreenLocalesProto::CopyFrom(const LoginScreenLocalesProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.LoginScreenLocalesProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginScreenLocalesProto::IsInitialized() const {
  return true;
}

void LoginScreenLocalesProto::InternalSwap(LoginScreenLocalesProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  login_screen_locales_.InternalSwap(&other->login_screen_locales_);
}

std::string LoginScreenLocalesProto::GetTypeName() const {
  return "enterprise_management.LoginScreenLocalesProto";
}


// ===================================================================

void LoginScreenInputMethodsProto::InitAsDefaultInstance() {
}
class LoginScreenInputMethodsProto::_Internal {
 public:
};

LoginScreenInputMethodsProto::LoginScreenInputMethodsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  login_screen_input_methods_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.LoginScreenInputMethodsProto)
}
LoginScreenInputMethodsProto::LoginScreenInputMethodsProto(const LoginScreenInputMethodsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      login_screen_input_methods_(from.login_screen_input_methods_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.LoginScreenInputMethodsProto)
}

void LoginScreenInputMethodsProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginScreenInputMethodsProto_chrome_5fdevice_5fpolicy_2eproto.base);
}

LoginScreenInputMethodsProto::~LoginScreenInputMethodsProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.LoginScreenInputMethodsProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void LoginScreenInputMethodsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LoginScreenInputMethodsProto::ArenaDtor(void* object) {
  LoginScreenInputMethodsProto* _this = reinterpret_cast< LoginScreenInputMethodsProto* >(object);
  (void)_this;
}
void LoginScreenInputMethodsProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginScreenInputMethodsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginScreenInputMethodsProto& LoginScreenInputMethodsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginScreenInputMethodsProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void LoginScreenInputMethodsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.LoginScreenInputMethodsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  login_screen_input_methods_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LoginScreenInputMethodsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string login_screen_input_methods = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_login_screen_input_methods();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginScreenInputMethodsProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.LoginScreenInputMethodsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string login_screen_input_methods = 1;
  for (int i = 0, n = this->_internal_login_screen_input_methods_size(); i < n; i++) {
    const auto& s = this->_internal_login_screen_input_methods(i);
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.LoginScreenInputMethodsProto)
  return target;
}

size_t LoginScreenInputMethodsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.LoginScreenInputMethodsProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string login_screen_input_methods = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(login_screen_input_methods_.size());
  for (int i = 0, n = login_screen_input_methods_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      login_screen_input_methods_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginScreenInputMethodsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LoginScreenInputMethodsProto*>(
      &from));
}

void LoginScreenInputMethodsProto::MergeFrom(const LoginScreenInputMethodsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.LoginScreenInputMethodsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  login_screen_input_methods_.MergeFrom(from.login_screen_input_methods_);
}

void LoginScreenInputMethodsProto::CopyFrom(const LoginScreenInputMethodsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.LoginScreenInputMethodsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginScreenInputMethodsProto::IsInitialized() const {
  return true;
}

void LoginScreenInputMethodsProto::InternalSwap(LoginScreenInputMethodsProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  login_screen_input_methods_.InternalSwap(&other->login_screen_input_methods_);
}

std::string LoginScreenInputMethodsProto::GetTypeName() const {
  return "enterprise_management.LoginScreenInputMethodsProto";
}


// ===================================================================

void DeviceWallpaperImageProto::InitAsDefaultInstance() {
}
class DeviceWallpaperImageProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceWallpaperImageProto>()._has_bits_);
  static void set_has_device_wallpaper_image(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeviceWallpaperImageProto::DeviceWallpaperImageProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.DeviceWallpaperImageProto)
}
DeviceWallpaperImageProto::DeviceWallpaperImageProto(const DeviceWallpaperImageProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  device_wallpaper_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_device_wallpaper_image()) {
    device_wallpaper_image_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_wallpaper_image(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceWallpaperImageProto)
}

void DeviceWallpaperImageProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceWallpaperImageProto_chrome_5fdevice_5fpolicy_2eproto.base);
  device_wallpaper_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeviceWallpaperImageProto::~DeviceWallpaperImageProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceWallpaperImageProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeviceWallpaperImageProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_wallpaper_image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceWallpaperImageProto::ArenaDtor(void* object) {
  DeviceWallpaperImageProto* _this = reinterpret_cast< DeviceWallpaperImageProto* >(object);
  (void)_this;
}
void DeviceWallpaperImageProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceWallpaperImageProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceWallpaperImageProto& DeviceWallpaperImageProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceWallpaperImageProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void DeviceWallpaperImageProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceWallpaperImageProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    device_wallpaper_image_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceWallpaperImageProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string device_wallpaper_image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_wallpaper_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceWallpaperImageProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.DeviceWallpaperImageProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string device_wallpaper_image = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_wallpaper_image(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.DeviceWallpaperImageProto)
  return target;
}

size_t DeviceWallpaperImageProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceWallpaperImageProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string device_wallpaper_image = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_wallpaper_image());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceWallpaperImageProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceWallpaperImageProto*>(
      &from));
}

void DeviceWallpaperImageProto::MergeFrom(const DeviceWallpaperImageProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceWallpaperImageProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device_wallpaper_image()) {
    _internal_set_device_wallpaper_image(from._internal_device_wallpaper_image());
  }
}

void DeviceWallpaperImageProto::CopyFrom(const DeviceWallpaperImageProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceWallpaperImageProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceWallpaperImageProto::IsInitialized() const {
  return true;
}

void DeviceWallpaperImageProto::InternalSwap(DeviceWallpaperImageProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  device_wallpaper_image_.Swap(&other->device_wallpaper_image_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string DeviceWallpaperImageProto::GetTypeName() const {
  return "enterprise_management.DeviceWallpaperImageProto";
}


// ===================================================================

void DeviceEcryptfsMigrationStrategyProto::InitAsDefaultInstance() {
}
class DeviceEcryptfsMigrationStrategyProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceEcryptfsMigrationStrategyProto>()._has_bits_);
  static void set_has_migration_strategy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeviceEcryptfsMigrationStrategyProto::DeviceEcryptfsMigrationStrategyProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.DeviceEcryptfsMigrationStrategyProto)
}
DeviceEcryptfsMigrationStrategyProto::DeviceEcryptfsMigrationStrategyProto(const DeviceEcryptfsMigrationStrategyProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  migration_strategy_ = from.migration_strategy_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceEcryptfsMigrationStrategyProto)
}

void DeviceEcryptfsMigrationStrategyProto::SharedCtor() {
  migration_strategy_ = 0;
}

DeviceEcryptfsMigrationStrategyProto::~DeviceEcryptfsMigrationStrategyProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceEcryptfsMigrationStrategyProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeviceEcryptfsMigrationStrategyProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeviceEcryptfsMigrationStrategyProto::ArenaDtor(void* object) {
  DeviceEcryptfsMigrationStrategyProto* _this = reinterpret_cast< DeviceEcryptfsMigrationStrategyProto* >(object);
  (void)_this;
}
void DeviceEcryptfsMigrationStrategyProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceEcryptfsMigrationStrategyProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceEcryptfsMigrationStrategyProto& DeviceEcryptfsMigrationStrategyProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceEcryptfsMigrationStrategyProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void DeviceEcryptfsMigrationStrategyProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceEcryptfsMigrationStrategyProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  migration_strategy_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceEcryptfsMigrationStrategyProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.DeviceEcryptfsMigrationStrategyProto.MigrationStrategy migration_strategy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::DeviceEcryptfsMigrationStrategyProto_MigrationStrategy_IsValid(val))) {
            _internal_set_migration_strategy(static_cast<::enterprise_management::DeviceEcryptfsMigrationStrategyProto_MigrationStrategy>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceEcryptfsMigrationStrategyProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.DeviceEcryptfsMigrationStrategyProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.DeviceEcryptfsMigrationStrategyProto.MigrationStrategy migration_strategy = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_migration_strategy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.DeviceEcryptfsMigrationStrategyProto)
  return target;
}

size_t DeviceEcryptfsMigrationStrategyProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceEcryptfsMigrationStrategyProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .enterprise_management.DeviceEcryptfsMigrationStrategyProto.MigrationStrategy migration_strategy = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_migration_strategy());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceEcryptfsMigrationStrategyProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceEcryptfsMigrationStrategyProto*>(
      &from));
}

void DeviceEcryptfsMigrationStrategyProto::MergeFrom(const DeviceEcryptfsMigrationStrategyProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceEcryptfsMigrationStrategyProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_migration_strategy()) {
    _internal_set_migration_strategy(from._internal_migration_strategy());
  }
}

void DeviceEcryptfsMigrationStrategyProto::CopyFrom(const DeviceEcryptfsMigrationStrategyProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceEcryptfsMigrationStrategyProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceEcryptfsMigrationStrategyProto::IsInitialized() const {
  return true;
}

void DeviceEcryptfsMigrationStrategyProto::InternalSwap(DeviceEcryptfsMigrationStrategyProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(migration_strategy_, other->migration_strategy_);
}

std::string DeviceEcryptfsMigrationStrategyProto::GetTypeName() const {
  return "enterprise_management.DeviceEcryptfsMigrationStrategyProto";
}


// ===================================================================

void DeviceSecondFactorAuthenticationProto::InitAsDefaultInstance() {
}
class DeviceSecondFactorAuthenticationProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceSecondFactorAuthenticationProto>()._has_bits_);
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeviceSecondFactorAuthenticationProto::DeviceSecondFactorAuthenticationProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.DeviceSecondFactorAuthenticationProto)
}
DeviceSecondFactorAuthenticationProto::DeviceSecondFactorAuthenticationProto(const DeviceSecondFactorAuthenticationProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  mode_ = from.mode_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceSecondFactorAuthenticationProto)
}

void DeviceSecondFactorAuthenticationProto::SharedCtor() {
  mode_ = 0;
}

DeviceSecondFactorAuthenticationProto::~DeviceSecondFactorAuthenticationProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceSecondFactorAuthenticationProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeviceSecondFactorAuthenticationProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeviceSecondFactorAuthenticationProto::ArenaDtor(void* object) {
  DeviceSecondFactorAuthenticationProto* _this = reinterpret_cast< DeviceSecondFactorAuthenticationProto* >(object);
  (void)_this;
}
void DeviceSecondFactorAuthenticationProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceSecondFactorAuthenticationProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceSecondFactorAuthenticationProto& DeviceSecondFactorAuthenticationProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceSecondFactorAuthenticationProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void DeviceSecondFactorAuthenticationProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceSecondFactorAuthenticationProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mode_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceSecondFactorAuthenticationProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.DeviceSecondFactorAuthenticationProto.U2fMode mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::DeviceSecondFactorAuthenticationProto_U2fMode_IsValid(val))) {
            _internal_set_mode(static_cast<::enterprise_management::DeviceSecondFactorAuthenticationProto_U2fMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceSecondFactorAuthenticationProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.DeviceSecondFactorAuthenticationProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.DeviceSecondFactorAuthenticationProto.U2fMode mode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.DeviceSecondFactorAuthenticationProto)
  return target;
}

size_t DeviceSecondFactorAuthenticationProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceSecondFactorAuthenticationProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .enterprise_management.DeviceSecondFactorAuthenticationProto.U2fMode mode = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceSecondFactorAuthenticationProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceSecondFactorAuthenticationProto*>(
      &from));
}

void DeviceSecondFactorAuthenticationProto::MergeFrom(const DeviceSecondFactorAuthenticationProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceSecondFactorAuthenticationProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mode()) {
    _internal_set_mode(from._internal_mode());
  }
}

void DeviceSecondFactorAuthenticationProto::CopyFrom(const DeviceSecondFactorAuthenticationProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceSecondFactorAuthenticationProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceSecondFactorAuthenticationProto::IsInitialized() const {
  return true;
}

void DeviceSecondFactorAuthenticationProto::InternalSwap(DeviceSecondFactorAuthenticationProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mode_, other->mode_);
}

std::string DeviceSecondFactorAuthenticationProto::GetTypeName() const {
  return "enterprise_management.DeviceSecondFactorAuthenticationProto";
}


// ===================================================================

void CastReceiverNameProto::InitAsDefaultInstance() {
}
class CastReceiverNameProto::_Internal {
 public:
  using HasBits = decltype(std::declval<CastReceiverNameProto>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CastReceiverNameProto::CastReceiverNameProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.CastReceiverNameProto)
}
CastReceiverNameProto::CastReceiverNameProto(const CastReceiverNameProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.CastReceiverNameProto)
}

void CastReceiverNameProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CastReceiverNameProto_chrome_5fdevice_5fpolicy_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CastReceiverNameProto::~CastReceiverNameProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.CastReceiverNameProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CastReceiverNameProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CastReceiverNameProto::ArenaDtor(void* object) {
  CastReceiverNameProto* _this = reinterpret_cast< CastReceiverNameProto* >(object);
  (void)_this;
}
void CastReceiverNameProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CastReceiverNameProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CastReceiverNameProto& CastReceiverNameProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CastReceiverNameProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void CastReceiverNameProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.CastReceiverNameProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CastReceiverNameProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CastReceiverNameProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.CastReceiverNameProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.CastReceiverNameProto)
  return target;
}

size_t CastReceiverNameProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.CastReceiverNameProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CastReceiverNameProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CastReceiverNameProto*>(
      &from));
}

void CastReceiverNameProto::MergeFrom(const CastReceiverNameProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.CastReceiverNameProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_name()) {
    _internal_set_name(from._internal_name());
  }
}

void CastReceiverNameProto::CopyFrom(const CastReceiverNameProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.CastReceiverNameProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastReceiverNameProto::IsInitialized() const {
  return true;
}

void CastReceiverNameProto::InternalSwap(CastReceiverNameProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string CastReceiverNameProto::GetTypeName() const {
  return "enterprise_management.CastReceiverNameProto";
}


// ===================================================================

void WeeklyTimeProto::InitAsDefaultInstance() {
}
class WeeklyTimeProto::_Internal {
 public:
  using HasBits = decltype(std::declval<WeeklyTimeProto>()._has_bits_);
  static void set_has_day_of_week(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

WeeklyTimeProto::WeeklyTimeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.WeeklyTimeProto)
}
WeeklyTimeProto::WeeklyTimeProto(const WeeklyTimeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&day_of_week_, &from.day_of_week_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&day_of_week_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.WeeklyTimeProto)
}

void WeeklyTimeProto::SharedCtor() {
  ::memset(&day_of_week_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&day_of_week_)) + sizeof(time_));
}

WeeklyTimeProto::~WeeklyTimeProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.WeeklyTimeProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void WeeklyTimeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WeeklyTimeProto::ArenaDtor(void* object) {
  WeeklyTimeProto* _this = reinterpret_cast< WeeklyTimeProto* >(object);
  (void)_this;
}
void WeeklyTimeProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WeeklyTimeProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WeeklyTimeProto& WeeklyTimeProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WeeklyTimeProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void WeeklyTimeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.WeeklyTimeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&day_of_week_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_) -
        reinterpret_cast<char*>(&day_of_week_)) + sizeof(time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* WeeklyTimeProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.WeeklyTimeProto.DayOfWeek day_of_week = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::WeeklyTimeProto_DayOfWeek_IsValid(val))) {
            _internal_set_day_of_week(static_cast<::enterprise_management::WeeklyTimeProto_DayOfWeek>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WeeklyTimeProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.WeeklyTimeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.WeeklyTimeProto.DayOfWeek day_of_week = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_day_of_week(), target);
  }

  // optional int32 time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.WeeklyTimeProto)
  return target;
}

size_t WeeklyTimeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.WeeklyTimeProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .enterprise_management.WeeklyTimeProto.DayOfWeek day_of_week = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_day_of_week());
    }

    // optional int32 time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WeeklyTimeProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const WeeklyTimeProto*>(
      &from));
}

void WeeklyTimeProto::MergeFrom(const WeeklyTimeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.WeeklyTimeProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      day_of_week_ = from.day_of_week_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WeeklyTimeProto::CopyFrom(const WeeklyTimeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.WeeklyTimeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeeklyTimeProto::IsInitialized() const {
  return true;
}

void WeeklyTimeProto::InternalSwap(WeeklyTimeProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WeeklyTimeProto, time_)
      + sizeof(WeeklyTimeProto::time_)
      - PROTOBUF_FIELD_OFFSET(WeeklyTimeProto, day_of_week_)>(
          reinterpret_cast<char*>(&day_of_week_),
          reinterpret_cast<char*>(&other->day_of_week_));
}

std::string WeeklyTimeProto::GetTypeName() const {
  return "enterprise_management.WeeklyTimeProto";
}


// ===================================================================

void WeeklyTimeIntervalProto::InitAsDefaultInstance() {
  ::enterprise_management::_WeeklyTimeIntervalProto_default_instance_._instance.get_mutable()->start_ = const_cast< ::enterprise_management::WeeklyTimeProto*>(
      ::enterprise_management::WeeklyTimeProto::internal_default_instance());
  ::enterprise_management::_WeeklyTimeIntervalProto_default_instance_._instance.get_mutable()->end_ = const_cast< ::enterprise_management::WeeklyTimeProto*>(
      ::enterprise_management::WeeklyTimeProto::internal_default_instance());
}
class WeeklyTimeIntervalProto::_Internal {
 public:
  using HasBits = decltype(std::declval<WeeklyTimeIntervalProto>()._has_bits_);
  static const ::enterprise_management::WeeklyTimeProto& start(const WeeklyTimeIntervalProto* msg);
  static void set_has_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::enterprise_management::WeeklyTimeProto& end(const WeeklyTimeIntervalProto* msg);
  static void set_has_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::enterprise_management::WeeklyTimeProto&
WeeklyTimeIntervalProto::_Internal::start(const WeeklyTimeIntervalProto* msg) {
  return *msg->start_;
}
const ::enterprise_management::WeeklyTimeProto&
WeeklyTimeIntervalProto::_Internal::end(const WeeklyTimeIntervalProto* msg) {
  return *msg->end_;
}
WeeklyTimeIntervalProto::WeeklyTimeIntervalProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.WeeklyTimeIntervalProto)
}
WeeklyTimeIntervalProto::WeeklyTimeIntervalProto(const WeeklyTimeIntervalProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_start()) {
    start_ = new ::enterprise_management::WeeklyTimeProto(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from._internal_has_end()) {
    end_ = new ::enterprise_management::WeeklyTimeProto(*from.end_);
  } else {
    end_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.WeeklyTimeIntervalProto)
}

void WeeklyTimeIntervalProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WeeklyTimeIntervalProto_chrome_5fdevice_5fpolicy_2eproto.base);
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
}

WeeklyTimeIntervalProto::~WeeklyTimeIntervalProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.WeeklyTimeIntervalProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void WeeklyTimeIntervalProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete end_;
}

void WeeklyTimeIntervalProto::ArenaDtor(void* object) {
  WeeklyTimeIntervalProto* _this = reinterpret_cast< WeeklyTimeIntervalProto* >(object);
  (void)_this;
}
void WeeklyTimeIntervalProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WeeklyTimeIntervalProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WeeklyTimeIntervalProto& WeeklyTimeIntervalProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WeeklyTimeIntervalProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void WeeklyTimeIntervalProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.WeeklyTimeIntervalProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(start_ != nullptr);
      start_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(end_ != nullptr);
      end_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* WeeklyTimeIntervalProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.WeeklyTimeProto start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.WeeklyTimeProto end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WeeklyTimeIntervalProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.WeeklyTimeIntervalProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.WeeklyTimeProto start = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::start(this), target, stream);
  }

  // optional .enterprise_management.WeeklyTimeProto end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::end(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.WeeklyTimeIntervalProto)
  return target;
}

size_t WeeklyTimeIntervalProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.WeeklyTimeIntervalProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .enterprise_management.WeeklyTimeProto start = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *start_);
    }

    // optional .enterprise_management.WeeklyTimeProto end = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *end_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WeeklyTimeIntervalProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const WeeklyTimeIntervalProto*>(
      &from));
}

void WeeklyTimeIntervalProto::MergeFrom(const WeeklyTimeIntervalProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.WeeklyTimeIntervalProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_start()->::enterprise_management::WeeklyTimeProto::MergeFrom(from._internal_start());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_end()->::enterprise_management::WeeklyTimeProto::MergeFrom(from._internal_end());
    }
  }
}

void WeeklyTimeIntervalProto::CopyFrom(const WeeklyTimeIntervalProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.WeeklyTimeIntervalProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeeklyTimeIntervalProto::IsInitialized() const {
  return true;
}

void WeeklyTimeIntervalProto::InternalSwap(WeeklyTimeIntervalProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WeeklyTimeIntervalProto, end_)
      + sizeof(WeeklyTimeIntervalProto::end_)
      - PROTOBUF_FIELD_OFFSET(WeeklyTimeIntervalProto, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

std::string WeeklyTimeIntervalProto::GetTypeName() const {
  return "enterprise_management.WeeklyTimeIntervalProto";
}


// ===================================================================

void DeviceOffHoursProto::InitAsDefaultInstance() {
}
class DeviceOffHoursProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceOffHoursProto>()._has_bits_);
  static void set_has_timezone(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeviceOffHoursProto::DeviceOffHoursProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  intervals_(arena),
  ignored_policy_proto_tags_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.DeviceOffHoursProto)
}
DeviceOffHoursProto::DeviceOffHoursProto(const DeviceOffHoursProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      intervals_(from.intervals_),
      ignored_policy_proto_tags_(from.ignored_policy_proto_tags_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  timezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_timezone()) {
    timezone_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_timezone(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceOffHoursProto)
}

void DeviceOffHoursProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceOffHoursProto_chrome_5fdevice_5fpolicy_2eproto.base);
  timezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeviceOffHoursProto::~DeviceOffHoursProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceOffHoursProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeviceOffHoursProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  timezone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceOffHoursProto::ArenaDtor(void* object) {
  DeviceOffHoursProto* _this = reinterpret_cast< DeviceOffHoursProto* >(object);
  (void)_this;
}
void DeviceOffHoursProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceOffHoursProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceOffHoursProto& DeviceOffHoursProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceOffHoursProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void DeviceOffHoursProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceOffHoursProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  intervals_.Clear();
  ignored_policy_proto_tags_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    timezone_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceOffHoursProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .enterprise_management.WeeklyTimeIntervalProto intervals = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_intervals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string timezone = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_timezone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 ignored_policy_proto_tags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ignored_policy_proto_tags(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_ignored_policy_proto_tags(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceOffHoursProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.DeviceOffHoursProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .enterprise_management.WeeklyTimeIntervalProto intervals = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_intervals_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_intervals(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional string timezone = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_timezone(), target);
  }

  // repeated int32 ignored_policy_proto_tags = 3;
  for (int i = 0, n = this->_internal_ignored_policy_proto_tags_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ignored_policy_proto_tags(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.DeviceOffHoursProto)
  return target;
}

size_t DeviceOffHoursProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceOffHoursProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .enterprise_management.WeeklyTimeIntervalProto intervals = 1;
  total_size += 1UL * this->_internal_intervals_size();
  for (const auto& msg : this->intervals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 ignored_policy_proto_tags = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->ignored_policy_proto_tags_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ignored_policy_proto_tags_size());
    total_size += data_size;
  }

  // optional string timezone = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timezone());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceOffHoursProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceOffHoursProto*>(
      &from));
}

void DeviceOffHoursProto::MergeFrom(const DeviceOffHoursProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceOffHoursProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  intervals_.MergeFrom(from.intervals_);
  ignored_policy_proto_tags_.MergeFrom(from.ignored_policy_proto_tags_);
  if (from._internal_has_timezone()) {
    _internal_set_timezone(from._internal_timezone());
  }
}

void DeviceOffHoursProto::CopyFrom(const DeviceOffHoursProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceOffHoursProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceOffHoursProto::IsInitialized() const {
  return true;
}

void DeviceOffHoursProto::InternalSwap(DeviceOffHoursProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  intervals_.InternalSwap(&other->intervals_);
  ignored_policy_proto_tags_.InternalSwap(&other->ignored_policy_proto_tags_);
  timezone_.Swap(&other->timezone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string DeviceOffHoursProto::GetTypeName() const {
  return "enterprise_management.DeviceOffHoursProto";
}


// ===================================================================

void DeviceNativePrintersProto::InitAsDefaultInstance() {
}
class DeviceNativePrintersProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceNativePrintersProto>()._has_bits_);
  static void set_has_external_policy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeviceNativePrintersProto::DeviceNativePrintersProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.DeviceNativePrintersProto)
}
DeviceNativePrintersProto::DeviceNativePrintersProto(const DeviceNativePrintersProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  external_policy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_external_policy()) {
    external_policy_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_external_policy(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceNativePrintersProto)
}

void DeviceNativePrintersProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceNativePrintersProto_chrome_5fdevice_5fpolicy_2eproto.base);
  external_policy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeviceNativePrintersProto::~DeviceNativePrintersProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceNativePrintersProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeviceNativePrintersProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  external_policy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceNativePrintersProto::ArenaDtor(void* object) {
  DeviceNativePrintersProto* _this = reinterpret_cast< DeviceNativePrintersProto* >(object);
  (void)_this;
}
void DeviceNativePrintersProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceNativePrintersProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceNativePrintersProto& DeviceNativePrintersProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceNativePrintersProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void DeviceNativePrintersProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceNativePrintersProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    external_policy_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceNativePrintersProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string external_policy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_external_policy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceNativePrintersProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.DeviceNativePrintersProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string external_policy = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_external_policy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.DeviceNativePrintersProto)
  return target;
}

size_t DeviceNativePrintersProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceNativePrintersProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string external_policy = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_external_policy());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceNativePrintersProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceNativePrintersProto*>(
      &from));
}

void DeviceNativePrintersProto::MergeFrom(const DeviceNativePrintersProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceNativePrintersProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_external_policy()) {
    _internal_set_external_policy(from._internal_external_policy());
  }
}

void DeviceNativePrintersProto::CopyFrom(const DeviceNativePrintersProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceNativePrintersProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceNativePrintersProto::IsInitialized() const {
  return true;
}

void DeviceNativePrintersProto::InternalSwap(DeviceNativePrintersProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  external_policy_.Swap(&other->external_policy_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string DeviceNativePrintersProto::GetTypeName() const {
  return "enterprise_management.DeviceNativePrintersProto";
}


// ===================================================================

void DeviceNativePrintersAccessModeProto::InitAsDefaultInstance() {
}
class DeviceNativePrintersAccessModeProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceNativePrintersAccessModeProto>()._has_bits_);
  static void set_has_access_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeviceNativePrintersAccessModeProto::DeviceNativePrintersAccessModeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.DeviceNativePrintersAccessModeProto)
}
DeviceNativePrintersAccessModeProto::DeviceNativePrintersAccessModeProto(const DeviceNativePrintersAccessModeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  access_mode_ = from.access_mode_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceNativePrintersAccessModeProto)
}

void DeviceNativePrintersAccessModeProto::SharedCtor() {
  access_mode_ = 0;
}

DeviceNativePrintersAccessModeProto::~DeviceNativePrintersAccessModeProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceNativePrintersAccessModeProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeviceNativePrintersAccessModeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeviceNativePrintersAccessModeProto::ArenaDtor(void* object) {
  DeviceNativePrintersAccessModeProto* _this = reinterpret_cast< DeviceNativePrintersAccessModeProto* >(object);
  (void)_this;
}
void DeviceNativePrintersAccessModeProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceNativePrintersAccessModeProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceNativePrintersAccessModeProto& DeviceNativePrintersAccessModeProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceNativePrintersAccessModeProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void DeviceNativePrintersAccessModeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceNativePrintersAccessModeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  access_mode_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceNativePrintersAccessModeProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.DeviceNativePrintersAccessModeProto.AccessMode access_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::DeviceNativePrintersAccessModeProto_AccessMode_IsValid(val))) {
            _internal_set_access_mode(static_cast<::enterprise_management::DeviceNativePrintersAccessModeProto_AccessMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceNativePrintersAccessModeProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.DeviceNativePrintersAccessModeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.DeviceNativePrintersAccessModeProto.AccessMode access_mode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_access_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.DeviceNativePrintersAccessModeProto)
  return target;
}

size_t DeviceNativePrintersAccessModeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceNativePrintersAccessModeProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .enterprise_management.DeviceNativePrintersAccessModeProto.AccessMode access_mode = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_access_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceNativePrintersAccessModeProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceNativePrintersAccessModeProto*>(
      &from));
}

void DeviceNativePrintersAccessModeProto::MergeFrom(const DeviceNativePrintersAccessModeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceNativePrintersAccessModeProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_access_mode()) {
    _internal_set_access_mode(from._internal_access_mode());
  }
}

void DeviceNativePrintersAccessModeProto::CopyFrom(const DeviceNativePrintersAccessModeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceNativePrintersAccessModeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceNativePrintersAccessModeProto::IsInitialized() const {
  return true;
}

void DeviceNativePrintersAccessModeProto::InternalSwap(DeviceNativePrintersAccessModeProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(access_mode_, other->access_mode_);
}

std::string DeviceNativePrintersAccessModeProto::GetTypeName() const {
  return "enterprise_management.DeviceNativePrintersAccessModeProto";
}


// ===================================================================

void DeviceNativePrintersBlacklistProto::InitAsDefaultInstance() {
}
class DeviceNativePrintersBlacklistProto::_Internal {
 public:
};

DeviceNativePrintersBlacklistProto::DeviceNativePrintersBlacklistProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  blacklist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.DeviceNativePrintersBlacklistProto)
}
DeviceNativePrintersBlacklistProto::DeviceNativePrintersBlacklistProto(const DeviceNativePrintersBlacklistProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      blacklist_(from.blacklist_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceNativePrintersBlacklistProto)
}

void DeviceNativePrintersBlacklistProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceNativePrintersBlacklistProto_chrome_5fdevice_5fpolicy_2eproto.base);
}

DeviceNativePrintersBlacklistProto::~DeviceNativePrintersBlacklistProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceNativePrintersBlacklistProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeviceNativePrintersBlacklistProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeviceNativePrintersBlacklistProto::ArenaDtor(void* object) {
  DeviceNativePrintersBlacklistProto* _this = reinterpret_cast< DeviceNativePrintersBlacklistProto* >(object);
  (void)_this;
}
void DeviceNativePrintersBlacklistProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceNativePrintersBlacklistProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceNativePrintersBlacklistProto& DeviceNativePrintersBlacklistProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceNativePrintersBlacklistProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void DeviceNativePrintersBlacklistProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceNativePrintersBlacklistProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blacklist_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceNativePrintersBlacklistProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string blacklist = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_blacklist();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceNativePrintersBlacklistProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.DeviceNativePrintersBlacklistProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string blacklist = 1;
  for (int i = 0, n = this->_internal_blacklist_size(); i < n; i++) {
    const auto& s = this->_internal_blacklist(i);
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.DeviceNativePrintersBlacklistProto)
  return target;
}

size_t DeviceNativePrintersBlacklistProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceNativePrintersBlacklistProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string blacklist = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(blacklist_.size());
  for (int i = 0, n = blacklist_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      blacklist_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceNativePrintersBlacklistProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceNativePrintersBlacklistProto*>(
      &from));
}

void DeviceNativePrintersBlacklistProto::MergeFrom(const DeviceNativePrintersBlacklistProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceNativePrintersBlacklistProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blacklist_.MergeFrom(from.blacklist_);
}

void DeviceNativePrintersBlacklistProto::CopyFrom(const DeviceNativePrintersBlacklistProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceNativePrintersBlacklistProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceNativePrintersBlacklistProto::IsInitialized() const {
  return true;
}

void DeviceNativePrintersBlacklistProto::InternalSwap(DeviceNativePrintersBlacklistProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  blacklist_.InternalSwap(&other->blacklist_);
}

std::string DeviceNativePrintersBlacklistProto::GetTypeName() const {
  return "enterprise_management.DeviceNativePrintersBlacklistProto";
}


// ===================================================================

void DeviceNativePrintersWhitelistProto::InitAsDefaultInstance() {
}
class DeviceNativePrintersWhitelistProto::_Internal {
 public:
};

DeviceNativePrintersWhitelistProto::DeviceNativePrintersWhitelistProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  whitelist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.DeviceNativePrintersWhitelistProto)
}
DeviceNativePrintersWhitelistProto::DeviceNativePrintersWhitelistProto(const DeviceNativePrintersWhitelistProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      whitelist_(from.whitelist_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceNativePrintersWhitelistProto)
}

void DeviceNativePrintersWhitelistProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceNativePrintersWhitelistProto_chrome_5fdevice_5fpolicy_2eproto.base);
}

DeviceNativePrintersWhitelistProto::~DeviceNativePrintersWhitelistProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceNativePrintersWhitelistProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeviceNativePrintersWhitelistProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeviceNativePrintersWhitelistProto::ArenaDtor(void* object) {
  DeviceNativePrintersWhitelistProto* _this = reinterpret_cast< DeviceNativePrintersWhitelistProto* >(object);
  (void)_this;
}
void DeviceNativePrintersWhitelistProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceNativePrintersWhitelistProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceNativePrintersWhitelistProto& DeviceNativePrintersWhitelistProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceNativePrintersWhitelistProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void DeviceNativePrintersWhitelistProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceNativePrintersWhitelistProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  whitelist_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceNativePrintersWhitelistProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string whitelist = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_whitelist();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceNativePrintersWhitelistProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.DeviceNativePrintersWhitelistProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string whitelist = 1;
  for (int i = 0, n = this->_internal_whitelist_size(); i < n; i++) {
    const auto& s = this->_internal_whitelist(i);
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.DeviceNativePrintersWhitelistProto)
  return target;
}

size_t DeviceNativePrintersWhitelistProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceNativePrintersWhitelistProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string whitelist = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(whitelist_.size());
  for (int i = 0, n = whitelist_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      whitelist_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceNativePrintersWhitelistProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceNativePrintersWhitelistProto*>(
      &from));
}

void DeviceNativePrintersWhitelistProto::MergeFrom(const DeviceNativePrintersWhitelistProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceNativePrintersWhitelistProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  whitelist_.MergeFrom(from.whitelist_);
}

void DeviceNativePrintersWhitelistProto::CopyFrom(const DeviceNativePrintersWhitelistProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceNativePrintersWhitelistProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceNativePrintersWhitelistProto::IsInitialized() const {
  return true;
}

void DeviceNativePrintersWhitelistProto::InternalSwap(DeviceNativePrintersWhitelistProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  whitelist_.InternalSwap(&other->whitelist_);
}

std::string DeviceNativePrintersWhitelistProto::GetTypeName() const {
  return "enterprise_management.DeviceNativePrintersWhitelistProto";
}


// ===================================================================

void TPMFirmwareUpdateSettingsProto::InitAsDefaultInstance() {
}
class TPMFirmwareUpdateSettingsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<TPMFirmwareUpdateSettingsProto>()._has_bits_);
  static void set_has_allow_user_initiated_powerwash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_allow_user_initiated_preserve_device_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_auto_update_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TPMFirmwareUpdateSettingsProto::TPMFirmwareUpdateSettingsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.TPMFirmwareUpdateSettingsProto)
}
TPMFirmwareUpdateSettingsProto::TPMFirmwareUpdateSettingsProto(const TPMFirmwareUpdateSettingsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&allow_user_initiated_powerwash_, &from.allow_user_initiated_powerwash_,
    static_cast<size_t>(reinterpret_cast<char*>(&auto_update_mode_) -
    reinterpret_cast<char*>(&allow_user_initiated_powerwash_)) + sizeof(auto_update_mode_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.TPMFirmwareUpdateSettingsProto)
}

void TPMFirmwareUpdateSettingsProto::SharedCtor() {
  ::memset(&allow_user_initiated_powerwash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_user_initiated_preserve_device_state_) -
      reinterpret_cast<char*>(&allow_user_initiated_powerwash_)) + sizeof(allow_user_initiated_preserve_device_state_));
  auto_update_mode_ = 1;
}

TPMFirmwareUpdateSettingsProto::~TPMFirmwareUpdateSettingsProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.TPMFirmwareUpdateSettingsProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void TPMFirmwareUpdateSettingsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TPMFirmwareUpdateSettingsProto::ArenaDtor(void* object) {
  TPMFirmwareUpdateSettingsProto* _this = reinterpret_cast< TPMFirmwareUpdateSettingsProto* >(object);
  (void)_this;
}
void TPMFirmwareUpdateSettingsProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TPMFirmwareUpdateSettingsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TPMFirmwareUpdateSettingsProto& TPMFirmwareUpdateSettingsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TPMFirmwareUpdateSettingsProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void TPMFirmwareUpdateSettingsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.TPMFirmwareUpdateSettingsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&allow_user_initiated_powerwash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_user_initiated_preserve_device_state_) -
      reinterpret_cast<char*>(&allow_user_initiated_powerwash_)) + sizeof(allow_user_initiated_preserve_device_state_));
  auto_update_mode_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TPMFirmwareUpdateSettingsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool allow_user_initiated_powerwash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_allow_user_initiated_powerwash(&has_bits);
          allow_user_initiated_powerwash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool allow_user_initiated_preserve_device_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_allow_user_initiated_preserve_device_state(&has_bits);
          allow_user_initiated_preserve_device_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.TPMFirmwareUpdateSettingsProto.AutoUpdateMode auto_update_mode = 3 [default = NEVER];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::TPMFirmwareUpdateSettingsProto_AutoUpdateMode_IsValid(val))) {
            _internal_set_auto_update_mode(static_cast<::enterprise_management::TPMFirmwareUpdateSettingsProto_AutoUpdateMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TPMFirmwareUpdateSettingsProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.TPMFirmwareUpdateSettingsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool allow_user_initiated_powerwash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_allow_user_initiated_powerwash(), target);
  }

  // optional bool allow_user_initiated_preserve_device_state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_allow_user_initiated_preserve_device_state(), target);
  }

  // optional .enterprise_management.TPMFirmwareUpdateSettingsProto.AutoUpdateMode auto_update_mode = 3 [default = NEVER];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_auto_update_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.TPMFirmwareUpdateSettingsProto)
  return target;
}

size_t TPMFirmwareUpdateSettingsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.TPMFirmwareUpdateSettingsProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool allow_user_initiated_powerwash = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool allow_user_initiated_preserve_device_state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional .enterprise_management.TPMFirmwareUpdateSettingsProto.AutoUpdateMode auto_update_mode = 3 [default = NEVER];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_auto_update_mode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TPMFirmwareUpdateSettingsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TPMFirmwareUpdateSettingsProto*>(
      &from));
}

void TPMFirmwareUpdateSettingsProto::MergeFrom(const TPMFirmwareUpdateSettingsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.TPMFirmwareUpdateSettingsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      allow_user_initiated_powerwash_ = from.allow_user_initiated_powerwash_;
    }
    if (cached_has_bits & 0x00000002u) {
      allow_user_initiated_preserve_device_state_ = from.allow_user_initiated_preserve_device_state_;
    }
    if (cached_has_bits & 0x00000004u) {
      auto_update_mode_ = from.auto_update_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TPMFirmwareUpdateSettingsProto::CopyFrom(const TPMFirmwareUpdateSettingsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.TPMFirmwareUpdateSettingsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPMFirmwareUpdateSettingsProto::IsInitialized() const {
  return true;
}

void TPMFirmwareUpdateSettingsProto::InternalSwap(TPMFirmwareUpdateSettingsProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TPMFirmwareUpdateSettingsProto, allow_user_initiated_preserve_device_state_)
      + sizeof(TPMFirmwareUpdateSettingsProto::allow_user_initiated_preserve_device_state_)
      - PROTOBUF_FIELD_OFFSET(TPMFirmwareUpdateSettingsProto, allow_user_initiated_powerwash_)>(
          reinterpret_cast<char*>(&allow_user_initiated_powerwash_),
          reinterpret_cast<char*>(&other->allow_user_initiated_powerwash_));
  swap(auto_update_mode_, other->auto_update_mode_);
}

std::string TPMFirmwareUpdateSettingsProto::GetTypeName() const {
  return "enterprise_management.TPMFirmwareUpdateSettingsProto";
}


// ===================================================================

void OBSOLETE_MinimumRequiredVersionProto::InitAsDefaultInstance() {
}
class OBSOLETE_MinimumRequiredVersionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<OBSOLETE_MinimumRequiredVersionProto>()._has_bits_);
  static void set_has_obsolete_chrome_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

OBSOLETE_MinimumRequiredVersionProto::OBSOLETE_MinimumRequiredVersionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.OBSOLETE_MinimumRequiredVersionProto)
}
OBSOLETE_MinimumRequiredVersionProto::OBSOLETE_MinimumRequiredVersionProto(const OBSOLETE_MinimumRequiredVersionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  obsolete_chrome_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_obsolete_chrome_version()) {
    obsolete_chrome_version_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_obsolete_chrome_version(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.OBSOLETE_MinimumRequiredVersionProto)
}

void OBSOLETE_MinimumRequiredVersionProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OBSOLETE_MinimumRequiredVersionProto_chrome_5fdevice_5fpolicy_2eproto.base);
  obsolete_chrome_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OBSOLETE_MinimumRequiredVersionProto::~OBSOLETE_MinimumRequiredVersionProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.OBSOLETE_MinimumRequiredVersionProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void OBSOLETE_MinimumRequiredVersionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  obsolete_chrome_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OBSOLETE_MinimumRequiredVersionProto::ArenaDtor(void* object) {
  OBSOLETE_MinimumRequiredVersionProto* _this = reinterpret_cast< OBSOLETE_MinimumRequiredVersionProto* >(object);
  (void)_this;
}
void OBSOLETE_MinimumRequiredVersionProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OBSOLETE_MinimumRequiredVersionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OBSOLETE_MinimumRequiredVersionProto& OBSOLETE_MinimumRequiredVersionProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OBSOLETE_MinimumRequiredVersionProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void OBSOLETE_MinimumRequiredVersionProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.OBSOLETE_MinimumRequiredVersionProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    obsolete_chrome_version_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* OBSOLETE_MinimumRequiredVersionProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string OBSOLETE_chrome_version = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_obsolete_chrome_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OBSOLETE_MinimumRequiredVersionProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.OBSOLETE_MinimumRequiredVersionProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string OBSOLETE_chrome_version = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_obsolete_chrome_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.OBSOLETE_MinimumRequiredVersionProto)
  return target;
}

size_t OBSOLETE_MinimumRequiredVersionProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.OBSOLETE_MinimumRequiredVersionProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string OBSOLETE_chrome_version = 1 [deprecated = true];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_obsolete_chrome_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OBSOLETE_MinimumRequiredVersionProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const OBSOLETE_MinimumRequiredVersionProto*>(
      &from));
}

void OBSOLETE_MinimumRequiredVersionProto::MergeFrom(const OBSOLETE_MinimumRequiredVersionProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.OBSOLETE_MinimumRequiredVersionProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_obsolete_chrome_version()) {
    _internal_set_obsolete_chrome_version(from._internal_obsolete_chrome_version());
  }
}

void OBSOLETE_MinimumRequiredVersionProto::CopyFrom(const OBSOLETE_MinimumRequiredVersionProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.OBSOLETE_MinimumRequiredVersionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OBSOLETE_MinimumRequiredVersionProto::IsInitialized() const {
  return true;
}

void OBSOLETE_MinimumRequiredVersionProto::InternalSwap(OBSOLETE_MinimumRequiredVersionProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  obsolete_chrome_version_.Swap(&other->obsolete_chrome_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string OBSOLETE_MinimumRequiredVersionProto::GetTypeName() const {
  return "enterprise_management.OBSOLETE_MinimumRequiredVersionProto";
}


// ===================================================================

void DeviceLoginScreenAutoSelectCertificateForUrls::InitAsDefaultInstance() {
}
class DeviceLoginScreenAutoSelectCertificateForUrls::_Internal {
 public:
};

DeviceLoginScreenAutoSelectCertificateForUrls::DeviceLoginScreenAutoSelectCertificateForUrls(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  login_screen_auto_select_certificate_rules_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.DeviceLoginScreenAutoSelectCertificateForUrls)
}
DeviceLoginScreenAutoSelectCertificateForUrls::DeviceLoginScreenAutoSelectCertificateForUrls(const DeviceLoginScreenAutoSelectCertificateForUrls& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      login_screen_auto_select_certificate_rules_(from.login_screen_auto_select_certificate_rules_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceLoginScreenAutoSelectCertificateForUrls)
}

void DeviceLoginScreenAutoSelectCertificateForUrls::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceLoginScreenAutoSelectCertificateForUrls_chrome_5fdevice_5fpolicy_2eproto.base);
}

DeviceLoginScreenAutoSelectCertificateForUrls::~DeviceLoginScreenAutoSelectCertificateForUrls() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceLoginScreenAutoSelectCertificateForUrls)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeviceLoginScreenAutoSelectCertificateForUrls::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeviceLoginScreenAutoSelectCertificateForUrls::ArenaDtor(void* object) {
  DeviceLoginScreenAutoSelectCertificateForUrls* _this = reinterpret_cast< DeviceLoginScreenAutoSelectCertificateForUrls* >(object);
  (void)_this;
}
void DeviceLoginScreenAutoSelectCertificateForUrls::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceLoginScreenAutoSelectCertificateForUrls::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceLoginScreenAutoSelectCertificateForUrls& DeviceLoginScreenAutoSelectCertificateForUrls::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceLoginScreenAutoSelectCertificateForUrls_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void DeviceLoginScreenAutoSelectCertificateForUrls::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceLoginScreenAutoSelectCertificateForUrls)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  login_screen_auto_select_certificate_rules_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceLoginScreenAutoSelectCertificateForUrls::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string login_screen_auto_select_certificate_rules = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_login_screen_auto_select_certificate_rules();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceLoginScreenAutoSelectCertificateForUrls::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.DeviceLoginScreenAutoSelectCertificateForUrls)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string login_screen_auto_select_certificate_rules = 1;
  for (int i = 0, n = this->_internal_login_screen_auto_select_certificate_rules_size(); i < n; i++) {
    const auto& s = this->_internal_login_screen_auto_select_certificate_rules(i);
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.DeviceLoginScreenAutoSelectCertificateForUrls)
  return target;
}

size_t DeviceLoginScreenAutoSelectCertificateForUrls::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceLoginScreenAutoSelectCertificateForUrls)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string login_screen_auto_select_certificate_rules = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(login_screen_auto_select_certificate_rules_.size());
  for (int i = 0, n = login_screen_auto_select_certificate_rules_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      login_screen_auto_select_certificate_rules_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceLoginScreenAutoSelectCertificateForUrls::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceLoginScreenAutoSelectCertificateForUrls*>(
      &from));
}

void DeviceLoginScreenAutoSelectCertificateForUrls::MergeFrom(const DeviceLoginScreenAutoSelectCertificateForUrls& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceLoginScreenAutoSelectCertificateForUrls)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  login_screen_auto_select_certificate_rules_.MergeFrom(from.login_screen_auto_select_certificate_rules_);
}

void DeviceLoginScreenAutoSelectCertificateForUrls::CopyFrom(const DeviceLoginScreenAutoSelectCertificateForUrls& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceLoginScreenAutoSelectCertificateForUrls)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceLoginScreenAutoSelectCertificateForUrls::IsInitialized() const {
  return true;
}

void DeviceLoginScreenAutoSelectCertificateForUrls::InternalSwap(DeviceLoginScreenAutoSelectCertificateForUrls* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  login_screen_auto_select_certificate_rules_.InternalSwap(&other->login_screen_auto_select_certificate_rules_);
}

std::string DeviceLoginScreenAutoSelectCertificateForUrls::GetTypeName() const {
  return "enterprise_management.DeviceLoginScreenAutoSelectCertificateForUrls";
}


// ===================================================================

void UnaffiliatedArcAllowedProto::InitAsDefaultInstance() {
}
class UnaffiliatedArcAllowedProto::_Internal {
 public:
  using HasBits = decltype(std::declval<UnaffiliatedArcAllowedProto>()._has_bits_);
  static void set_has_unaffiliated_arc_allowed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UnaffiliatedArcAllowedProto::UnaffiliatedArcAllowedProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.UnaffiliatedArcAllowedProto)
}
UnaffiliatedArcAllowedProto::UnaffiliatedArcAllowedProto(const UnaffiliatedArcAllowedProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  unaffiliated_arc_allowed_ = from.unaffiliated_arc_allowed_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.UnaffiliatedArcAllowedProto)
}

void UnaffiliatedArcAllowedProto::SharedCtor() {
  unaffiliated_arc_allowed_ = false;
}

UnaffiliatedArcAllowedProto::~UnaffiliatedArcAllowedProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.UnaffiliatedArcAllowedProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void UnaffiliatedArcAllowedProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnaffiliatedArcAllowedProto::ArenaDtor(void* object) {
  UnaffiliatedArcAllowedProto* _this = reinterpret_cast< UnaffiliatedArcAllowedProto* >(object);
  (void)_this;
}
void UnaffiliatedArcAllowedProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnaffiliatedArcAllowedProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnaffiliatedArcAllowedProto& UnaffiliatedArcAllowedProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnaffiliatedArcAllowedProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void UnaffiliatedArcAllowedProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.UnaffiliatedArcAllowedProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unaffiliated_arc_allowed_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UnaffiliatedArcAllowedProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool unaffiliated_arc_allowed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_unaffiliated_arc_allowed(&has_bits);
          unaffiliated_arc_allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnaffiliatedArcAllowedProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.UnaffiliatedArcAllowedProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool unaffiliated_arc_allowed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_unaffiliated_arc_allowed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.UnaffiliatedArcAllowedProto)
  return target;
}

size_t UnaffiliatedArcAllowedProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.UnaffiliatedArcAllowedProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool unaffiliated_arc_allowed = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnaffiliatedArcAllowedProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UnaffiliatedArcAllowedProto*>(
      &from));
}

void UnaffiliatedArcAllowedProto::MergeFrom(const UnaffiliatedArcAllowedProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.UnaffiliatedArcAllowedProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_unaffiliated_arc_allowed()) {
    _internal_set_unaffiliated_arc_allowed(from._internal_unaffiliated_arc_allowed());
  }
}

void UnaffiliatedArcAllowedProto::CopyFrom(const UnaffiliatedArcAllowedProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.UnaffiliatedArcAllowedProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnaffiliatedArcAllowedProto::IsInitialized() const {
  return true;
}

void UnaffiliatedArcAllowedProto::InternalSwap(UnaffiliatedArcAllowedProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(unaffiliated_arc_allowed_, other->unaffiliated_arc_allowed_);
}

std::string UnaffiliatedArcAllowedProto::GetTypeName() const {
  return "enterprise_management.UnaffiliatedArcAllowedProto";
}


// ===================================================================

void DeviceKerberosEncryptionTypesProto::InitAsDefaultInstance() {
}
class DeviceKerberosEncryptionTypesProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceKerberosEncryptionTypesProto>()._has_bits_);
  static void set_has_types(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeviceKerberosEncryptionTypesProto::DeviceKerberosEncryptionTypesProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.DeviceKerberosEncryptionTypesProto)
}
DeviceKerberosEncryptionTypesProto::DeviceKerberosEncryptionTypesProto(const DeviceKerberosEncryptionTypesProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  types_ = from.types_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceKerberosEncryptionTypesProto)
}

void DeviceKerberosEncryptionTypesProto::SharedCtor() {
  types_ = 1;
}

DeviceKerberosEncryptionTypesProto::~DeviceKerberosEncryptionTypesProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceKerberosEncryptionTypesProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeviceKerberosEncryptionTypesProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeviceKerberosEncryptionTypesProto::ArenaDtor(void* object) {
  DeviceKerberosEncryptionTypesProto* _this = reinterpret_cast< DeviceKerberosEncryptionTypesProto* >(object);
  (void)_this;
}
void DeviceKerberosEncryptionTypesProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceKerberosEncryptionTypesProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceKerberosEncryptionTypesProto& DeviceKerberosEncryptionTypesProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceKerberosEncryptionTypesProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void DeviceKerberosEncryptionTypesProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceKerberosEncryptionTypesProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  types_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceKerberosEncryptionTypesProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.DeviceKerberosEncryptionTypesProto.Types types = 1 [default = ENC_TYPES_STRONG];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::DeviceKerberosEncryptionTypesProto_Types_IsValid(val))) {
            _internal_set_types(static_cast<::enterprise_management::DeviceKerberosEncryptionTypesProto_Types>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceKerberosEncryptionTypesProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.DeviceKerberosEncryptionTypesProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.DeviceKerberosEncryptionTypesProto.Types types = 1 [default = ENC_TYPES_STRONG];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_types(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.DeviceKerberosEncryptionTypesProto)
  return target;
}

size_t DeviceKerberosEncryptionTypesProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceKerberosEncryptionTypesProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .enterprise_management.DeviceKerberosEncryptionTypesProto.Types types = 1 [default = ENC_TYPES_STRONG];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_types());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceKerberosEncryptionTypesProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceKerberosEncryptionTypesProto*>(
      &from));
}

void DeviceKerberosEncryptionTypesProto::MergeFrom(const DeviceKerberosEncryptionTypesProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceKerberosEncryptionTypesProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_types()) {
    _internal_set_types(from._internal_types());
  }
}

void DeviceKerberosEncryptionTypesProto::CopyFrom(const DeviceKerberosEncryptionTypesProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceKerberosEncryptionTypesProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceKerberosEncryptionTypesProto::IsInitialized() const {
  return true;
}

void DeviceKerberosEncryptionTypesProto::InternalSwap(DeviceKerberosEncryptionTypesProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(types_, other->types_);
}

std::string DeviceKerberosEncryptionTypesProto::GetTypeName() const {
  return "enterprise_management.DeviceKerberosEncryptionTypesProto";
}


// ===================================================================

void DeviceUserPolicyLoopbackProcessingModeProto::InitAsDefaultInstance() {
}
class DeviceUserPolicyLoopbackProcessingModeProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceUserPolicyLoopbackProcessingModeProto>()._has_bits_);
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeviceUserPolicyLoopbackProcessingModeProto::DeviceUserPolicyLoopbackProcessingModeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.DeviceUserPolicyLoopbackProcessingModeProto)
}
DeviceUserPolicyLoopbackProcessingModeProto::DeviceUserPolicyLoopbackProcessingModeProto(const DeviceUserPolicyLoopbackProcessingModeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  mode_ = from.mode_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceUserPolicyLoopbackProcessingModeProto)
}

void DeviceUserPolicyLoopbackProcessingModeProto::SharedCtor() {
  mode_ = 0;
}

DeviceUserPolicyLoopbackProcessingModeProto::~DeviceUserPolicyLoopbackProcessingModeProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceUserPolicyLoopbackProcessingModeProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeviceUserPolicyLoopbackProcessingModeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeviceUserPolicyLoopbackProcessingModeProto::ArenaDtor(void* object) {
  DeviceUserPolicyLoopbackProcessingModeProto* _this = reinterpret_cast< DeviceUserPolicyLoopbackProcessingModeProto* >(object);
  (void)_this;
}
void DeviceUserPolicyLoopbackProcessingModeProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceUserPolicyLoopbackProcessingModeProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceUserPolicyLoopbackProcessingModeProto& DeviceUserPolicyLoopbackProcessingModeProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceUserPolicyLoopbackProcessingModeProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void DeviceUserPolicyLoopbackProcessingModeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceUserPolicyLoopbackProcessingModeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mode_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceUserPolicyLoopbackProcessingModeProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.DeviceUserPolicyLoopbackProcessingModeProto.Mode mode = 1 [default = USER_POLICY_MODE_DEFAULT];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto_Mode_IsValid(val))) {
            _internal_set_mode(static_cast<::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto_Mode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceUserPolicyLoopbackProcessingModeProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.DeviceUserPolicyLoopbackProcessingModeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.DeviceUserPolicyLoopbackProcessingModeProto.Mode mode = 1 [default = USER_POLICY_MODE_DEFAULT];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.DeviceUserPolicyLoopbackProcessingModeProto)
  return target;
}

size_t DeviceUserPolicyLoopbackProcessingModeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceUserPolicyLoopbackProcessingModeProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .enterprise_management.DeviceUserPolicyLoopbackProcessingModeProto.Mode mode = 1 [default = USER_POLICY_MODE_DEFAULT];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceUserPolicyLoopbackProcessingModeProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceUserPolicyLoopbackProcessingModeProto*>(
      &from));
}

void DeviceUserPolicyLoopbackProcessingModeProto::MergeFrom(const DeviceUserPolicyLoopbackProcessingModeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceUserPolicyLoopbackProcessingModeProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mode()) {
    _internal_set_mode(from._internal_mode());
  }
}

void DeviceUserPolicyLoopbackProcessingModeProto::CopyFrom(const DeviceUserPolicyLoopbackProcessingModeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceUserPolicyLoopbackProcessingModeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceUserPolicyLoopbackProcessingModeProto::IsInitialized() const {
  return true;
}

void DeviceUserPolicyLoopbackProcessingModeProto::InternalSwap(DeviceUserPolicyLoopbackProcessingModeProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mode_, other->mode_);
}

std::string DeviceUserPolicyLoopbackProcessingModeProto::GetTypeName() const {
  return "enterprise_management.DeviceUserPolicyLoopbackProcessingModeProto";
}


// ===================================================================

void DeviceLoginScreenIsolateOriginsProto::InitAsDefaultInstance() {
}
class DeviceLoginScreenIsolateOriginsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceLoginScreenIsolateOriginsProto>()._has_bits_);
  static void set_has_isolate_origins(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeviceLoginScreenIsolateOriginsProto::DeviceLoginScreenIsolateOriginsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.DeviceLoginScreenIsolateOriginsProto)
}
DeviceLoginScreenIsolateOriginsProto::DeviceLoginScreenIsolateOriginsProto(const DeviceLoginScreenIsolateOriginsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  isolate_origins_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_isolate_origins()) {
    isolate_origins_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_isolate_origins(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceLoginScreenIsolateOriginsProto)
}

void DeviceLoginScreenIsolateOriginsProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceLoginScreenIsolateOriginsProto_chrome_5fdevice_5fpolicy_2eproto.base);
  isolate_origins_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeviceLoginScreenIsolateOriginsProto::~DeviceLoginScreenIsolateOriginsProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceLoginScreenIsolateOriginsProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeviceLoginScreenIsolateOriginsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  isolate_origins_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceLoginScreenIsolateOriginsProto::ArenaDtor(void* object) {
  DeviceLoginScreenIsolateOriginsProto* _this = reinterpret_cast< DeviceLoginScreenIsolateOriginsProto* >(object);
  (void)_this;
}
void DeviceLoginScreenIsolateOriginsProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceLoginScreenIsolateOriginsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceLoginScreenIsolateOriginsProto& DeviceLoginScreenIsolateOriginsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceLoginScreenIsolateOriginsProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void DeviceLoginScreenIsolateOriginsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceLoginScreenIsolateOriginsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    isolate_origins_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceLoginScreenIsolateOriginsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string isolate_origins = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_isolate_origins();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceLoginScreenIsolateOriginsProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.DeviceLoginScreenIsolateOriginsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string isolate_origins = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_isolate_origins(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.DeviceLoginScreenIsolateOriginsProto)
  return target;
}

size_t DeviceLoginScreenIsolateOriginsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceLoginScreenIsolateOriginsProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string isolate_origins = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_isolate_origins());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceLoginScreenIsolateOriginsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceLoginScreenIsolateOriginsProto*>(
      &from));
}

void DeviceLoginScreenIsolateOriginsProto::MergeFrom(const DeviceLoginScreenIsolateOriginsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceLoginScreenIsolateOriginsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_isolate_origins()) {
    _internal_set_isolate_origins(from._internal_isolate_origins());
  }
}

void DeviceLoginScreenIsolateOriginsProto::CopyFrom(const DeviceLoginScreenIsolateOriginsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceLoginScreenIsolateOriginsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceLoginScreenIsolateOriginsProto::IsInitialized() const {
  return true;
}

void DeviceLoginScreenIsolateOriginsProto::InternalSwap(DeviceLoginScreenIsolateOriginsProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  isolate_origins_.Swap(&other->isolate_origins_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string DeviceLoginScreenIsolateOriginsProto::GetTypeName() const {
  return "enterprise_management.DeviceLoginScreenIsolateOriginsProto";
}


// ===================================================================

void DeviceLoginScreenSitePerProcessProto::InitAsDefaultInstance() {
}
class DeviceLoginScreenSitePerProcessProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceLoginScreenSitePerProcessProto>()._has_bits_);
  static void set_has_site_per_process(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeviceLoginScreenSitePerProcessProto::DeviceLoginScreenSitePerProcessProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.DeviceLoginScreenSitePerProcessProto)
}
DeviceLoginScreenSitePerProcessProto::DeviceLoginScreenSitePerProcessProto(const DeviceLoginScreenSitePerProcessProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  site_per_process_ = from.site_per_process_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceLoginScreenSitePerProcessProto)
}

void DeviceLoginScreenSitePerProcessProto::SharedCtor() {
  site_per_process_ = false;
}

DeviceLoginScreenSitePerProcessProto::~DeviceLoginScreenSitePerProcessProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceLoginScreenSitePerProcessProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeviceLoginScreenSitePerProcessProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeviceLoginScreenSitePerProcessProto::ArenaDtor(void* object) {
  DeviceLoginScreenSitePerProcessProto* _this = reinterpret_cast< DeviceLoginScreenSitePerProcessProto* >(object);
  (void)_this;
}
void DeviceLoginScreenSitePerProcessProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceLoginScreenSitePerProcessProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceLoginScreenSitePerProcessProto& DeviceLoginScreenSitePerProcessProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceLoginScreenSitePerProcessProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void DeviceLoginScreenSitePerProcessProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceLoginScreenSitePerProcessProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  site_per_process_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceLoginScreenSitePerProcessProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool site_per_process = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_site_per_process(&has_bits);
          site_per_process_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceLoginScreenSitePerProcessProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.DeviceLoginScreenSitePerProcessProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool site_per_process = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_site_per_process(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.DeviceLoginScreenSitePerProcessProto)
  return target;
}

size_t DeviceLoginScreenSitePerProcessProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceLoginScreenSitePerProcessProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool site_per_process = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceLoginScreenSitePerProcessProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceLoginScreenSitePerProcessProto*>(
      &from));
}

void DeviceLoginScreenSitePerProcessProto::MergeFrom(const DeviceLoginScreenSitePerProcessProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceLoginScreenSitePerProcessProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_site_per_process()) {
    _internal_set_site_per_process(from._internal_site_per_process());
  }
}

void DeviceLoginScreenSitePerProcessProto::CopyFrom(const DeviceLoginScreenSitePerProcessProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceLoginScreenSitePerProcessProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceLoginScreenSitePerProcessProto::IsInitialized() const {
  return true;
}

void DeviceLoginScreenSitePerProcessProto::InternalSwap(DeviceLoginScreenSitePerProcessProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(site_per_process_, other->site_per_process_);
}

std::string DeviceLoginScreenSitePerProcessProto::GetTypeName() const {
  return "enterprise_management.DeviceLoginScreenSitePerProcessProto";
}


// ===================================================================

void VirtualMachinesAllowedProto::InitAsDefaultInstance() {
}
class VirtualMachinesAllowedProto::_Internal {
 public:
  using HasBits = decltype(std::declval<VirtualMachinesAllowedProto>()._has_bits_);
  static void set_has_virtual_machines_allowed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

VirtualMachinesAllowedProto::VirtualMachinesAllowedProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.VirtualMachinesAllowedProto)
}
VirtualMachinesAllowedProto::VirtualMachinesAllowedProto(const VirtualMachinesAllowedProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  virtual_machines_allowed_ = from.virtual_machines_allowed_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.VirtualMachinesAllowedProto)
}

void VirtualMachinesAllowedProto::SharedCtor() {
  virtual_machines_allowed_ = false;
}

VirtualMachinesAllowedProto::~VirtualMachinesAllowedProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.VirtualMachinesAllowedProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void VirtualMachinesAllowedProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VirtualMachinesAllowedProto::ArenaDtor(void* object) {
  VirtualMachinesAllowedProto* _this = reinterpret_cast< VirtualMachinesAllowedProto* >(object);
  (void)_this;
}
void VirtualMachinesAllowedProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtualMachinesAllowedProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VirtualMachinesAllowedProto& VirtualMachinesAllowedProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VirtualMachinesAllowedProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void VirtualMachinesAllowedProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.VirtualMachinesAllowedProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  virtual_machines_allowed_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* VirtualMachinesAllowedProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool virtual_machines_allowed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_virtual_machines_allowed(&has_bits);
          virtual_machines_allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VirtualMachinesAllowedProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.VirtualMachinesAllowedProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool virtual_machines_allowed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_virtual_machines_allowed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.VirtualMachinesAllowedProto)
  return target;
}

size_t VirtualMachinesAllowedProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.VirtualMachinesAllowedProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool virtual_machines_allowed = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VirtualMachinesAllowedProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const VirtualMachinesAllowedProto*>(
      &from));
}

void VirtualMachinesAllowedProto::MergeFrom(const VirtualMachinesAllowedProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.VirtualMachinesAllowedProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_virtual_machines_allowed()) {
    _internal_set_virtual_machines_allowed(from._internal_virtual_machines_allowed());
  }
}

void VirtualMachinesAllowedProto::CopyFrom(const VirtualMachinesAllowedProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.VirtualMachinesAllowedProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualMachinesAllowedProto::IsInitialized() const {
  return true;
}

void VirtualMachinesAllowedProto::InternalSwap(VirtualMachinesAllowedProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(virtual_machines_allowed_, other->virtual_machines_allowed_);
}

std::string VirtualMachinesAllowedProto::GetTypeName() const {
  return "enterprise_management.VirtualMachinesAllowedProto";
}


// ===================================================================

void DeviceMachinePasswordChangeRateProto::InitAsDefaultInstance() {
}
class DeviceMachinePasswordChangeRateProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceMachinePasswordChangeRateProto>()._has_bits_);
  static void set_has_rate_days(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeviceMachinePasswordChangeRateProto::DeviceMachinePasswordChangeRateProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.DeviceMachinePasswordChangeRateProto)
}
DeviceMachinePasswordChangeRateProto::DeviceMachinePasswordChangeRateProto(const DeviceMachinePasswordChangeRateProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  rate_days_ = from.rate_days_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceMachinePasswordChangeRateProto)
}

void DeviceMachinePasswordChangeRateProto::SharedCtor() {
  rate_days_ = 0;
}

DeviceMachinePasswordChangeRateProto::~DeviceMachinePasswordChangeRateProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceMachinePasswordChangeRateProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeviceMachinePasswordChangeRateProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeviceMachinePasswordChangeRateProto::ArenaDtor(void* object) {
  DeviceMachinePasswordChangeRateProto* _this = reinterpret_cast< DeviceMachinePasswordChangeRateProto* >(object);
  (void)_this;
}
void DeviceMachinePasswordChangeRateProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceMachinePasswordChangeRateProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceMachinePasswordChangeRateProto& DeviceMachinePasswordChangeRateProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceMachinePasswordChangeRateProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void DeviceMachinePasswordChangeRateProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceMachinePasswordChangeRateProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_days_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceMachinePasswordChangeRateProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 rate_days = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_rate_days(&has_bits);
          rate_days_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceMachinePasswordChangeRateProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.DeviceMachinePasswordChangeRateProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 rate_days = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_rate_days(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.DeviceMachinePasswordChangeRateProto)
  return target;
}

size_t DeviceMachinePasswordChangeRateProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceMachinePasswordChangeRateProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 rate_days = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rate_days());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceMachinePasswordChangeRateProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceMachinePasswordChangeRateProto*>(
      &from));
}

void DeviceMachinePasswordChangeRateProto::MergeFrom(const DeviceMachinePasswordChangeRateProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceMachinePasswordChangeRateProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_rate_days()) {
    _internal_set_rate_days(from._internal_rate_days());
  }
}

void DeviceMachinePasswordChangeRateProto::CopyFrom(const DeviceMachinePasswordChangeRateProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceMachinePasswordChangeRateProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceMachinePasswordChangeRateProto::IsInitialized() const {
  return true;
}

void DeviceMachinePasswordChangeRateProto::InternalSwap(DeviceMachinePasswordChangeRateProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(rate_days_, other->rate_days_);
}

std::string DeviceMachinePasswordChangeRateProto::GetTypeName() const {
  return "enterprise_management.DeviceMachinePasswordChangeRateProto";
}


// ===================================================================

void DeviceGpoCacheLifetimeProto::InitAsDefaultInstance() {
}
class DeviceGpoCacheLifetimeProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceGpoCacheLifetimeProto>()._has_bits_);
  static void set_has_lifetime_hours(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeviceGpoCacheLifetimeProto::DeviceGpoCacheLifetimeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.DeviceGpoCacheLifetimeProto)
}
DeviceGpoCacheLifetimeProto::DeviceGpoCacheLifetimeProto(const DeviceGpoCacheLifetimeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  lifetime_hours_ = from.lifetime_hours_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceGpoCacheLifetimeProto)
}

void DeviceGpoCacheLifetimeProto::SharedCtor() {
  lifetime_hours_ = 0;
}

DeviceGpoCacheLifetimeProto::~DeviceGpoCacheLifetimeProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceGpoCacheLifetimeProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeviceGpoCacheLifetimeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeviceGpoCacheLifetimeProto::ArenaDtor(void* object) {
  DeviceGpoCacheLifetimeProto* _this = reinterpret_cast< DeviceGpoCacheLifetimeProto* >(object);
  (void)_this;
}
void DeviceGpoCacheLifetimeProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceGpoCacheLifetimeProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceGpoCacheLifetimeProto& DeviceGpoCacheLifetimeProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceGpoCacheLifetimeProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void DeviceGpoCacheLifetimeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceGpoCacheLifetimeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lifetime_hours_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceGpoCacheLifetimeProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 lifetime_hours = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_lifetime_hours(&has_bits);
          lifetime_hours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceGpoCacheLifetimeProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.DeviceGpoCacheLifetimeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 lifetime_hours = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_lifetime_hours(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.DeviceGpoCacheLifetimeProto)
  return target;
}

size_t DeviceGpoCacheLifetimeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceGpoCacheLifetimeProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 lifetime_hours = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lifetime_hours());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceGpoCacheLifetimeProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceGpoCacheLifetimeProto*>(
      &from));
}

void DeviceGpoCacheLifetimeProto::MergeFrom(const DeviceGpoCacheLifetimeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceGpoCacheLifetimeProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_lifetime_hours()) {
    _internal_set_lifetime_hours(from._internal_lifetime_hours());
  }
}

void DeviceGpoCacheLifetimeProto::CopyFrom(const DeviceGpoCacheLifetimeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceGpoCacheLifetimeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceGpoCacheLifetimeProto::IsInitialized() const {
  return true;
}

void DeviceGpoCacheLifetimeProto::InternalSwap(DeviceGpoCacheLifetimeProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lifetime_hours_, other->lifetime_hours_);
}

std::string DeviceGpoCacheLifetimeProto::GetTypeName() const {
  return "enterprise_management.DeviceGpoCacheLifetimeProto";
}


// ===================================================================

void DeviceAuthDataCacheLifetimeProto::InitAsDefaultInstance() {
}
class DeviceAuthDataCacheLifetimeProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceAuthDataCacheLifetimeProto>()._has_bits_);
  static void set_has_lifetime_hours(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeviceAuthDataCacheLifetimeProto::DeviceAuthDataCacheLifetimeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.DeviceAuthDataCacheLifetimeProto)
}
DeviceAuthDataCacheLifetimeProto::DeviceAuthDataCacheLifetimeProto(const DeviceAuthDataCacheLifetimeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  lifetime_hours_ = from.lifetime_hours_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceAuthDataCacheLifetimeProto)
}

void DeviceAuthDataCacheLifetimeProto::SharedCtor() {
  lifetime_hours_ = 0;
}

DeviceAuthDataCacheLifetimeProto::~DeviceAuthDataCacheLifetimeProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceAuthDataCacheLifetimeProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeviceAuthDataCacheLifetimeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeviceAuthDataCacheLifetimeProto::ArenaDtor(void* object) {
  DeviceAuthDataCacheLifetimeProto* _this = reinterpret_cast< DeviceAuthDataCacheLifetimeProto* >(object);
  (void)_this;
}
void DeviceAuthDataCacheLifetimeProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceAuthDataCacheLifetimeProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceAuthDataCacheLifetimeProto& DeviceAuthDataCacheLifetimeProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceAuthDataCacheLifetimeProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void DeviceAuthDataCacheLifetimeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceAuthDataCacheLifetimeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lifetime_hours_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceAuthDataCacheLifetimeProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 lifetime_hours = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_lifetime_hours(&has_bits);
          lifetime_hours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceAuthDataCacheLifetimeProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.DeviceAuthDataCacheLifetimeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 lifetime_hours = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_lifetime_hours(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.DeviceAuthDataCacheLifetimeProto)
  return target;
}

size_t DeviceAuthDataCacheLifetimeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceAuthDataCacheLifetimeProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 lifetime_hours = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lifetime_hours());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceAuthDataCacheLifetimeProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceAuthDataCacheLifetimeProto*>(
      &from));
}

void DeviceAuthDataCacheLifetimeProto::MergeFrom(const DeviceAuthDataCacheLifetimeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceAuthDataCacheLifetimeProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_lifetime_hours()) {
    _internal_set_lifetime_hours(from._internal_lifetime_hours());
  }
}

void DeviceAuthDataCacheLifetimeProto::CopyFrom(const DeviceAuthDataCacheLifetimeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceAuthDataCacheLifetimeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceAuthDataCacheLifetimeProto::IsInitialized() const {
  return true;
}

void DeviceAuthDataCacheLifetimeProto::InternalSwap(DeviceAuthDataCacheLifetimeProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lifetime_hours_, other->lifetime_hours_);
}

std::string DeviceAuthDataCacheLifetimeProto::GetTypeName() const {
  return "enterprise_management.DeviceAuthDataCacheLifetimeProto";
}


// ===================================================================

void SamlLoginAuthenticationTypeProto::InitAsDefaultInstance() {
}
class SamlLoginAuthenticationTypeProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SamlLoginAuthenticationTypeProto>()._has_bits_);
  static void set_has_saml_login_authentication_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SamlLoginAuthenticationTypeProto::SamlLoginAuthenticationTypeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.SamlLoginAuthenticationTypeProto)
}
SamlLoginAuthenticationTypeProto::SamlLoginAuthenticationTypeProto(const SamlLoginAuthenticationTypeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  saml_login_authentication_type_ = from.saml_login_authentication_type_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.SamlLoginAuthenticationTypeProto)
}

void SamlLoginAuthenticationTypeProto::SharedCtor() {
  saml_login_authentication_type_ = 0;
}

SamlLoginAuthenticationTypeProto::~SamlLoginAuthenticationTypeProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.SamlLoginAuthenticationTypeProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SamlLoginAuthenticationTypeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SamlLoginAuthenticationTypeProto::ArenaDtor(void* object) {
  SamlLoginAuthenticationTypeProto* _this = reinterpret_cast< SamlLoginAuthenticationTypeProto* >(object);
  (void)_this;
}
void SamlLoginAuthenticationTypeProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SamlLoginAuthenticationTypeProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SamlLoginAuthenticationTypeProto& SamlLoginAuthenticationTypeProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SamlLoginAuthenticationTypeProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void SamlLoginAuthenticationTypeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.SamlLoginAuthenticationTypeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  saml_login_authentication_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SamlLoginAuthenticationTypeProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.SamlLoginAuthenticationTypeProto.Type saml_login_authentication_type = 1 [default = TYPE_DEFAULT];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::SamlLoginAuthenticationTypeProto_Type_IsValid(val))) {
            _internal_set_saml_login_authentication_type(static_cast<::enterprise_management::SamlLoginAuthenticationTypeProto_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SamlLoginAuthenticationTypeProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.SamlLoginAuthenticationTypeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.SamlLoginAuthenticationTypeProto.Type saml_login_authentication_type = 1 [default = TYPE_DEFAULT];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_saml_login_authentication_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.SamlLoginAuthenticationTypeProto)
  return target;
}

size_t SamlLoginAuthenticationTypeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.SamlLoginAuthenticationTypeProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .enterprise_management.SamlLoginAuthenticationTypeProto.Type saml_login_authentication_type = 1 [default = TYPE_DEFAULT];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_saml_login_authentication_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SamlLoginAuthenticationTypeProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SamlLoginAuthenticationTypeProto*>(
      &from));
}

void SamlLoginAuthenticationTypeProto::MergeFrom(const SamlLoginAuthenticationTypeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.SamlLoginAuthenticationTypeProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_saml_login_authentication_type()) {
    _internal_set_saml_login_authentication_type(from._internal_saml_login_authentication_type());
  }
}

void SamlLoginAuthenticationTypeProto::CopyFrom(const SamlLoginAuthenticationTypeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.SamlLoginAuthenticationTypeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SamlLoginAuthenticationTypeProto::IsInitialized() const {
  return true;
}

void SamlLoginAuthenticationTypeProto::InternalSwap(SamlLoginAuthenticationTypeProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(saml_login_authentication_type_, other->saml_login_authentication_type_);
}

std::string SamlLoginAuthenticationTypeProto::GetTypeName() const {
  return "enterprise_management.SamlLoginAuthenticationTypeProto";
}


// ===================================================================

void DeviceUnaffiliatedCrostiniAllowedProto::InitAsDefaultInstance() {
}
class DeviceUnaffiliatedCrostiniAllowedProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceUnaffiliatedCrostiniAllowedProto>()._has_bits_);
  static void set_has_device_unaffiliated_crostini_allowed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeviceUnaffiliatedCrostiniAllowedProto::DeviceUnaffiliatedCrostiniAllowedProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.DeviceUnaffiliatedCrostiniAllowedProto)
}
DeviceUnaffiliatedCrostiniAllowedProto::DeviceUnaffiliatedCrostiniAllowedProto(const DeviceUnaffiliatedCrostiniAllowedProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  device_unaffiliated_crostini_allowed_ = from.device_unaffiliated_crostini_allowed_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceUnaffiliatedCrostiniAllowedProto)
}

void DeviceUnaffiliatedCrostiniAllowedProto::SharedCtor() {
  device_unaffiliated_crostini_allowed_ = false;
}

DeviceUnaffiliatedCrostiniAllowedProto::~DeviceUnaffiliatedCrostiniAllowedProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceUnaffiliatedCrostiniAllowedProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeviceUnaffiliatedCrostiniAllowedProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeviceUnaffiliatedCrostiniAllowedProto::ArenaDtor(void* object) {
  DeviceUnaffiliatedCrostiniAllowedProto* _this = reinterpret_cast< DeviceUnaffiliatedCrostiniAllowedProto* >(object);
  (void)_this;
}
void DeviceUnaffiliatedCrostiniAllowedProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceUnaffiliatedCrostiniAllowedProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceUnaffiliatedCrostiniAllowedProto& DeviceUnaffiliatedCrostiniAllowedProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceUnaffiliatedCrostiniAllowedProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void DeviceUnaffiliatedCrostiniAllowedProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceUnaffiliatedCrostiniAllowedProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_unaffiliated_crostini_allowed_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceUnaffiliatedCrostiniAllowedProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool device_unaffiliated_crostini_allowed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_device_unaffiliated_crostini_allowed(&has_bits);
          device_unaffiliated_crostini_allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceUnaffiliatedCrostiniAllowedProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.DeviceUnaffiliatedCrostiniAllowedProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool device_unaffiliated_crostini_allowed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_device_unaffiliated_crostini_allowed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.DeviceUnaffiliatedCrostiniAllowedProto)
  return target;
}

size_t DeviceUnaffiliatedCrostiniAllowedProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceUnaffiliatedCrostiniAllowedProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool device_unaffiliated_crostini_allowed = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceUnaffiliatedCrostiniAllowedProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceUnaffiliatedCrostiniAllowedProto*>(
      &from));
}

void DeviceUnaffiliatedCrostiniAllowedProto::MergeFrom(const DeviceUnaffiliatedCrostiniAllowedProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceUnaffiliatedCrostiniAllowedProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device_unaffiliated_crostini_allowed()) {
    _internal_set_device_unaffiliated_crostini_allowed(from._internal_device_unaffiliated_crostini_allowed());
  }
}

void DeviceUnaffiliatedCrostiniAllowedProto::CopyFrom(const DeviceUnaffiliatedCrostiniAllowedProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceUnaffiliatedCrostiniAllowedProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceUnaffiliatedCrostiniAllowedProto::IsInitialized() const {
  return true;
}

void DeviceUnaffiliatedCrostiniAllowedProto::InternalSwap(DeviceUnaffiliatedCrostiniAllowedProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(device_unaffiliated_crostini_allowed_, other->device_unaffiliated_crostini_allowed_);
}

std::string DeviceUnaffiliatedCrostiniAllowedProto::GetTypeName() const {
  return "enterprise_management.DeviceUnaffiliatedCrostiniAllowedProto";
}


// ===================================================================

void PluginVmAllowedProto::InitAsDefaultInstance() {
}
class PluginVmAllowedProto::_Internal {
 public:
  using HasBits = decltype(std::declval<PluginVmAllowedProto>()._has_bits_);
  static void set_has_plugin_vm_allowed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PluginVmAllowedProto::PluginVmAllowedProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.PluginVmAllowedProto)
}
PluginVmAllowedProto::PluginVmAllowedProto(const PluginVmAllowedProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  plugin_vm_allowed_ = from.plugin_vm_allowed_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.PluginVmAllowedProto)
}

void PluginVmAllowedProto::SharedCtor() {
  plugin_vm_allowed_ = false;
}

PluginVmAllowedProto::~PluginVmAllowedProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.PluginVmAllowedProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void PluginVmAllowedProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PluginVmAllowedProto::ArenaDtor(void* object) {
  PluginVmAllowedProto* _this = reinterpret_cast< PluginVmAllowedProto* >(object);
  (void)_this;
}
void PluginVmAllowedProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PluginVmAllowedProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PluginVmAllowedProto& PluginVmAllowedProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PluginVmAllowedProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void PluginVmAllowedProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.PluginVmAllowedProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  plugin_vm_allowed_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PluginVmAllowedProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool plugin_vm_allowed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_plugin_vm_allowed(&has_bits);
          plugin_vm_allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PluginVmAllowedProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.PluginVmAllowedProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool plugin_vm_allowed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_plugin_vm_allowed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.PluginVmAllowedProto)
  return target;
}

size_t PluginVmAllowedProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.PluginVmAllowedProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool plugin_vm_allowed = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PluginVmAllowedProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PluginVmAllowedProto*>(
      &from));
}

void PluginVmAllowedProto::MergeFrom(const PluginVmAllowedProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.PluginVmAllowedProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_plugin_vm_allowed()) {
    _internal_set_plugin_vm_allowed(from._internal_plugin_vm_allowed());
  }
}

void PluginVmAllowedProto::CopyFrom(const PluginVmAllowedProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.PluginVmAllowedProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PluginVmAllowedProto::IsInitialized() const {
  return true;
}

void PluginVmAllowedProto::InternalSwap(PluginVmAllowedProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(plugin_vm_allowed_, other->plugin_vm_allowed_);
}

std::string PluginVmAllowedProto::GetTypeName() const {
  return "enterprise_management.PluginVmAllowedProto";
}


// ===================================================================

void PluginVmLicenseKeyProto::InitAsDefaultInstance() {
}
class PluginVmLicenseKeyProto::_Internal {
 public:
  using HasBits = decltype(std::declval<PluginVmLicenseKeyProto>()._has_bits_);
  static void set_has_plugin_vm_license_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PluginVmLicenseKeyProto::PluginVmLicenseKeyProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.PluginVmLicenseKeyProto)
}
PluginVmLicenseKeyProto::PluginVmLicenseKeyProto(const PluginVmLicenseKeyProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  plugin_vm_license_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_plugin_vm_license_key()) {
    plugin_vm_license_key_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_plugin_vm_license_key(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.PluginVmLicenseKeyProto)
}

void PluginVmLicenseKeyProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PluginVmLicenseKeyProto_chrome_5fdevice_5fpolicy_2eproto.base);
  plugin_vm_license_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PluginVmLicenseKeyProto::~PluginVmLicenseKeyProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.PluginVmLicenseKeyProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void PluginVmLicenseKeyProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  plugin_vm_license_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PluginVmLicenseKeyProto::ArenaDtor(void* object) {
  PluginVmLicenseKeyProto* _this = reinterpret_cast< PluginVmLicenseKeyProto* >(object);
  (void)_this;
}
void PluginVmLicenseKeyProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PluginVmLicenseKeyProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PluginVmLicenseKeyProto& PluginVmLicenseKeyProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PluginVmLicenseKeyProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void PluginVmLicenseKeyProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.PluginVmLicenseKeyProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    plugin_vm_license_key_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PluginVmLicenseKeyProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string plugin_vm_license_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_plugin_vm_license_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PluginVmLicenseKeyProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.PluginVmLicenseKeyProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string plugin_vm_license_key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_plugin_vm_license_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.PluginVmLicenseKeyProto)
  return target;
}

size_t PluginVmLicenseKeyProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.PluginVmLicenseKeyProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string plugin_vm_license_key = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_plugin_vm_license_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PluginVmLicenseKeyProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PluginVmLicenseKeyProto*>(
      &from));
}

void PluginVmLicenseKeyProto::MergeFrom(const PluginVmLicenseKeyProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.PluginVmLicenseKeyProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_plugin_vm_license_key()) {
    _internal_set_plugin_vm_license_key(from._internal_plugin_vm_license_key());
  }
}

void PluginVmLicenseKeyProto::CopyFrom(const PluginVmLicenseKeyProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.PluginVmLicenseKeyProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PluginVmLicenseKeyProto::IsInitialized() const {
  return true;
}

void PluginVmLicenseKeyProto::InternalSwap(PluginVmLicenseKeyProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  plugin_vm_license_key_.Swap(&other->plugin_vm_license_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string PluginVmLicenseKeyProto::GetTypeName() const {
  return "enterprise_management.PluginVmLicenseKeyProto";
}


// ===================================================================

void DeviceRebootOnUserSignoutProto::InitAsDefaultInstance() {
}
class DeviceRebootOnUserSignoutProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceRebootOnUserSignoutProto>()._has_bits_);
  static void set_has_reboot_on_signout_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeviceRebootOnUserSignoutProto::DeviceRebootOnUserSignoutProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.DeviceRebootOnUserSignoutProto)
}
DeviceRebootOnUserSignoutProto::DeviceRebootOnUserSignoutProto(const DeviceRebootOnUserSignoutProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  reboot_on_signout_mode_ = from.reboot_on_signout_mode_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceRebootOnUserSignoutProto)
}

void DeviceRebootOnUserSignoutProto::SharedCtor() {
  reboot_on_signout_mode_ = 1;
}

DeviceRebootOnUserSignoutProto::~DeviceRebootOnUserSignoutProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceRebootOnUserSignoutProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeviceRebootOnUserSignoutProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeviceRebootOnUserSignoutProto::ArenaDtor(void* object) {
  DeviceRebootOnUserSignoutProto* _this = reinterpret_cast< DeviceRebootOnUserSignoutProto* >(object);
  (void)_this;
}
void DeviceRebootOnUserSignoutProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceRebootOnUserSignoutProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceRebootOnUserSignoutProto& DeviceRebootOnUserSignoutProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceRebootOnUserSignoutProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void DeviceRebootOnUserSignoutProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceRebootOnUserSignoutProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reboot_on_signout_mode_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceRebootOnUserSignoutProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.DeviceRebootOnUserSignoutProto.RebootOnSignoutMode reboot_on_signout_mode = 1 [default = NEVER];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_IsValid(val))) {
            _internal_set_reboot_on_signout_mode(static_cast<::enterprise_management::DeviceRebootOnUserSignoutProto_RebootOnSignoutMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceRebootOnUserSignoutProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.DeviceRebootOnUserSignoutProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.DeviceRebootOnUserSignoutProto.RebootOnSignoutMode reboot_on_signout_mode = 1 [default = NEVER];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reboot_on_signout_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.DeviceRebootOnUserSignoutProto)
  return target;
}

size_t DeviceRebootOnUserSignoutProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceRebootOnUserSignoutProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .enterprise_management.DeviceRebootOnUserSignoutProto.RebootOnSignoutMode reboot_on_signout_mode = 1 [default = NEVER];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reboot_on_signout_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceRebootOnUserSignoutProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceRebootOnUserSignoutProto*>(
      &from));
}

void DeviceRebootOnUserSignoutProto::MergeFrom(const DeviceRebootOnUserSignoutProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceRebootOnUserSignoutProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reboot_on_signout_mode()) {
    _internal_set_reboot_on_signout_mode(from._internal_reboot_on_signout_mode());
  }
}

void DeviceRebootOnUserSignoutProto::CopyFrom(const DeviceRebootOnUserSignoutProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceRebootOnUserSignoutProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceRebootOnUserSignoutProto::IsInitialized() const {
  return true;
}

void DeviceRebootOnUserSignoutProto::InternalSwap(DeviceRebootOnUserSignoutProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(reboot_on_signout_mode_, other->reboot_on_signout_mode_);
}

std::string DeviceRebootOnUserSignoutProto::GetTypeName() const {
  return "enterprise_management.DeviceRebootOnUserSignoutProto";
}


// ===================================================================

void DeviceWilcoDtcAllowedProto::InitAsDefaultInstance() {
}
class DeviceWilcoDtcAllowedProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceWilcoDtcAllowedProto>()._has_bits_);
  static void set_has_device_wilco_dtc_allowed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeviceWilcoDtcAllowedProto::DeviceWilcoDtcAllowedProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.DeviceWilcoDtcAllowedProto)
}
DeviceWilcoDtcAllowedProto::DeviceWilcoDtcAllowedProto(const DeviceWilcoDtcAllowedProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  device_wilco_dtc_allowed_ = from.device_wilco_dtc_allowed_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceWilcoDtcAllowedProto)
}

void DeviceWilcoDtcAllowedProto::SharedCtor() {
  device_wilco_dtc_allowed_ = false;
}

DeviceWilcoDtcAllowedProto::~DeviceWilcoDtcAllowedProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceWilcoDtcAllowedProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeviceWilcoDtcAllowedProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeviceWilcoDtcAllowedProto::ArenaDtor(void* object) {
  DeviceWilcoDtcAllowedProto* _this = reinterpret_cast< DeviceWilcoDtcAllowedProto* >(object);
  (void)_this;
}
void DeviceWilcoDtcAllowedProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceWilcoDtcAllowedProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceWilcoDtcAllowedProto& DeviceWilcoDtcAllowedProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceWilcoDtcAllowedProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void DeviceWilcoDtcAllowedProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceWilcoDtcAllowedProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_wilco_dtc_allowed_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceWilcoDtcAllowedProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool device_wilco_dtc_allowed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_device_wilco_dtc_allowed(&has_bits);
          device_wilco_dtc_allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceWilcoDtcAllowedProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.DeviceWilcoDtcAllowedProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool device_wilco_dtc_allowed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_device_wilco_dtc_allowed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.DeviceWilcoDtcAllowedProto)
  return target;
}

size_t DeviceWilcoDtcAllowedProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceWilcoDtcAllowedProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool device_wilco_dtc_allowed = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceWilcoDtcAllowedProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceWilcoDtcAllowedProto*>(
      &from));
}

void DeviceWilcoDtcAllowedProto::MergeFrom(const DeviceWilcoDtcAllowedProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceWilcoDtcAllowedProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device_wilco_dtc_allowed()) {
    _internal_set_device_wilco_dtc_allowed(from._internal_device_wilco_dtc_allowed());
  }
}

void DeviceWilcoDtcAllowedProto::CopyFrom(const DeviceWilcoDtcAllowedProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceWilcoDtcAllowedProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceWilcoDtcAllowedProto::IsInitialized() const {
  return true;
}

void DeviceWilcoDtcAllowedProto::InternalSwap(DeviceWilcoDtcAllowedProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(device_wilco_dtc_allowed_, other->device_wilco_dtc_allowed_);
}

std::string DeviceWilcoDtcAllowedProto::GetTypeName() const {
  return "enterprise_management.DeviceWilcoDtcAllowedProto";
}


// ===================================================================

void DeviceWilcoDtcConfigurationProto::InitAsDefaultInstance() {
}
class DeviceWilcoDtcConfigurationProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceWilcoDtcConfigurationProto>()._has_bits_);
  static void set_has_device_wilco_dtc_configuration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeviceWilcoDtcConfigurationProto::DeviceWilcoDtcConfigurationProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.DeviceWilcoDtcConfigurationProto)
}
DeviceWilcoDtcConfigurationProto::DeviceWilcoDtcConfigurationProto(const DeviceWilcoDtcConfigurationProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  device_wilco_dtc_configuration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_device_wilco_dtc_configuration()) {
    device_wilco_dtc_configuration_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_wilco_dtc_configuration(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceWilcoDtcConfigurationProto)
}

void DeviceWilcoDtcConfigurationProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceWilcoDtcConfigurationProto_chrome_5fdevice_5fpolicy_2eproto.base);
  device_wilco_dtc_configuration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeviceWilcoDtcConfigurationProto::~DeviceWilcoDtcConfigurationProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceWilcoDtcConfigurationProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeviceWilcoDtcConfigurationProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_wilco_dtc_configuration_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceWilcoDtcConfigurationProto::ArenaDtor(void* object) {
  DeviceWilcoDtcConfigurationProto* _this = reinterpret_cast< DeviceWilcoDtcConfigurationProto* >(object);
  (void)_this;
}
void DeviceWilcoDtcConfigurationProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceWilcoDtcConfigurationProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceWilcoDtcConfigurationProto& DeviceWilcoDtcConfigurationProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceWilcoDtcConfigurationProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void DeviceWilcoDtcConfigurationProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceWilcoDtcConfigurationProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    device_wilco_dtc_configuration_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceWilcoDtcConfigurationProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string device_wilco_dtc_configuration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_wilco_dtc_configuration();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceWilcoDtcConfigurationProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.DeviceWilcoDtcConfigurationProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string device_wilco_dtc_configuration = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_wilco_dtc_configuration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.DeviceWilcoDtcConfigurationProto)
  return target;
}

size_t DeviceWilcoDtcConfigurationProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceWilcoDtcConfigurationProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string device_wilco_dtc_configuration = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_wilco_dtc_configuration());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceWilcoDtcConfigurationProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceWilcoDtcConfigurationProto*>(
      &from));
}

void DeviceWilcoDtcConfigurationProto::MergeFrom(const DeviceWilcoDtcConfigurationProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceWilcoDtcConfigurationProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device_wilco_dtc_configuration()) {
    _internal_set_device_wilco_dtc_configuration(from._internal_device_wilco_dtc_configuration());
  }
}

void DeviceWilcoDtcConfigurationProto::CopyFrom(const DeviceWilcoDtcConfigurationProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceWilcoDtcConfigurationProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceWilcoDtcConfigurationProto::IsInitialized() const {
  return true;
}

void DeviceWilcoDtcConfigurationProto::InternalSwap(DeviceWilcoDtcConfigurationProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  device_wilco_dtc_configuration_.Swap(&other->device_wilco_dtc_configuration_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string DeviceWilcoDtcConfigurationProto::GetTypeName() const {
  return "enterprise_management.DeviceWilcoDtcConfigurationProto";
}


// ===================================================================

void DevicePowerPeakShiftProto::InitAsDefaultInstance() {
}
class DevicePowerPeakShiftProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DevicePowerPeakShiftProto>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_battery_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_day_configs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DevicePowerPeakShiftProto::DevicePowerPeakShiftProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.DevicePowerPeakShiftProto)
}
DevicePowerPeakShiftProto::DevicePowerPeakShiftProto(const DevicePowerPeakShiftProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  day_configs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_day_configs()) {
    day_configs_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_day_configs(),
      GetArena());
  }
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&battery_threshold_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(battery_threshold_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DevicePowerPeakShiftProto)
}

void DevicePowerPeakShiftProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DevicePowerPeakShiftProto_chrome_5fdevice_5fpolicy_2eproto.base);
  day_configs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&battery_threshold_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(battery_threshold_));
}

DevicePowerPeakShiftProto::~DevicePowerPeakShiftProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.DevicePowerPeakShiftProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DevicePowerPeakShiftProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  day_configs_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DevicePowerPeakShiftProto::ArenaDtor(void* object) {
  DevicePowerPeakShiftProto* _this = reinterpret_cast< DevicePowerPeakShiftProto* >(object);
  (void)_this;
}
void DevicePowerPeakShiftProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DevicePowerPeakShiftProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DevicePowerPeakShiftProto& DevicePowerPeakShiftProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DevicePowerPeakShiftProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void DevicePowerPeakShiftProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DevicePowerPeakShiftProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    day_configs_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&battery_threshold_) -
        reinterpret_cast<char*>(&enabled_)) + sizeof(battery_threshold_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DevicePowerPeakShiftProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 battery_threshold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_battery_threshold(&has_bits);
          battery_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string day_configs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_day_configs();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DevicePowerPeakShiftProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.DevicePowerPeakShiftProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // optional int32 battery_threshold = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_battery_threshold(), target);
  }

  // optional string day_configs = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_day_configs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.DevicePowerPeakShiftProto)
  return target;
}

size_t DevicePowerPeakShiftProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DevicePowerPeakShiftProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string day_configs = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_day_configs());
    }

    // optional bool enabled = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 battery_threshold = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_battery_threshold());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DevicePowerPeakShiftProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DevicePowerPeakShiftProto*>(
      &from));
}

void DevicePowerPeakShiftProto::MergeFrom(const DevicePowerPeakShiftProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DevicePowerPeakShiftProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_day_configs(from._internal_day_configs());
    }
    if (cached_has_bits & 0x00000002u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000004u) {
      battery_threshold_ = from.battery_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DevicePowerPeakShiftProto::CopyFrom(const DevicePowerPeakShiftProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DevicePowerPeakShiftProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DevicePowerPeakShiftProto::IsInitialized() const {
  return true;
}

void DevicePowerPeakShiftProto::InternalSwap(DevicePowerPeakShiftProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  day_configs_.Swap(&other->day_configs_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DevicePowerPeakShiftProto, battery_threshold_)
      + sizeof(DevicePowerPeakShiftProto::battery_threshold_)
      - PROTOBUF_FIELD_OFFSET(DevicePowerPeakShiftProto, enabled_)>(
          reinterpret_cast<char*>(&enabled_),
          reinterpret_cast<char*>(&other->enabled_));
}

std::string DevicePowerPeakShiftProto::GetTypeName() const {
  return "enterprise_management.DevicePowerPeakShiftProto";
}


// ===================================================================

void DeviceBootOnAcProto::InitAsDefaultInstance() {
}
class DeviceBootOnAcProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceBootOnAcProto>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeviceBootOnAcProto::DeviceBootOnAcProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.DeviceBootOnAcProto)
}
DeviceBootOnAcProto::DeviceBootOnAcProto(const DeviceBootOnAcProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceBootOnAcProto)
}

void DeviceBootOnAcProto::SharedCtor() {
  enabled_ = false;
}

DeviceBootOnAcProto::~DeviceBootOnAcProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceBootOnAcProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeviceBootOnAcProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeviceBootOnAcProto::ArenaDtor(void* object) {
  DeviceBootOnAcProto* _this = reinterpret_cast< DeviceBootOnAcProto* >(object);
  (void)_this;
}
void DeviceBootOnAcProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceBootOnAcProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceBootOnAcProto& DeviceBootOnAcProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceBootOnAcProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void DeviceBootOnAcProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceBootOnAcProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceBootOnAcProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceBootOnAcProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.DeviceBootOnAcProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.DeviceBootOnAcProto)
  return target;
}

size_t DeviceBootOnAcProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceBootOnAcProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool enabled = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceBootOnAcProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceBootOnAcProto*>(
      &from));
}

void DeviceBootOnAcProto::MergeFrom(const DeviceBootOnAcProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceBootOnAcProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enabled()) {
    _internal_set_enabled(from._internal_enabled());
  }
}

void DeviceBootOnAcProto::CopyFrom(const DeviceBootOnAcProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceBootOnAcProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceBootOnAcProto::IsInitialized() const {
  return true;
}

void DeviceBootOnAcProto::InternalSwap(DeviceBootOnAcProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
}

std::string DeviceBootOnAcProto::GetTypeName() const {
  return "enterprise_management.DeviceBootOnAcProto";
}


// ===================================================================

void DeviceDockMacAddressSourceProto::InitAsDefaultInstance() {
}
class DeviceDockMacAddressSourceProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceDockMacAddressSourceProto>()._has_bits_);
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeviceDockMacAddressSourceProto::DeviceDockMacAddressSourceProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.DeviceDockMacAddressSourceProto)
}
DeviceDockMacAddressSourceProto::DeviceDockMacAddressSourceProto(const DeviceDockMacAddressSourceProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  source_ = from.source_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceDockMacAddressSourceProto)
}

void DeviceDockMacAddressSourceProto::SharedCtor() {
  source_ = 0;
}

DeviceDockMacAddressSourceProto::~DeviceDockMacAddressSourceProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceDockMacAddressSourceProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeviceDockMacAddressSourceProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeviceDockMacAddressSourceProto::ArenaDtor(void* object) {
  DeviceDockMacAddressSourceProto* _this = reinterpret_cast< DeviceDockMacAddressSourceProto* >(object);
  (void)_this;
}
void DeviceDockMacAddressSourceProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceDockMacAddressSourceProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceDockMacAddressSourceProto& DeviceDockMacAddressSourceProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceDockMacAddressSourceProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void DeviceDockMacAddressSourceProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceDockMacAddressSourceProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceDockMacAddressSourceProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.DeviceDockMacAddressSourceProto.Source source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::DeviceDockMacAddressSourceProto_Source_IsValid(val))) {
            _internal_set_source(static_cast<::enterprise_management::DeviceDockMacAddressSourceProto_Source>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceDockMacAddressSourceProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.DeviceDockMacAddressSourceProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.DeviceDockMacAddressSourceProto.Source source = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_source(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.DeviceDockMacAddressSourceProto)
  return target;
}

size_t DeviceDockMacAddressSourceProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceDockMacAddressSourceProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .enterprise_management.DeviceDockMacAddressSourceProto.Source source = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_source());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceDockMacAddressSourceProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceDockMacAddressSourceProto*>(
      &from));
}

void DeviceDockMacAddressSourceProto::MergeFrom(const DeviceDockMacAddressSourceProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceDockMacAddressSourceProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_source()) {
    _internal_set_source(from._internal_source());
  }
}

void DeviceDockMacAddressSourceProto::CopyFrom(const DeviceDockMacAddressSourceProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceDockMacAddressSourceProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceDockMacAddressSourceProto::IsInitialized() const {
  return true;
}

void DeviceDockMacAddressSourceProto::InternalSwap(DeviceDockMacAddressSourceProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(source_, other->source_);
}

std::string DeviceDockMacAddressSourceProto::GetTypeName() const {
  return "enterprise_management.DeviceDockMacAddressSourceProto";
}


// ===================================================================

void DeviceAdvancedBatteryChargeModeProto::InitAsDefaultInstance() {
}
class DeviceAdvancedBatteryChargeModeProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceAdvancedBatteryChargeModeProto>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_day_configs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeviceAdvancedBatteryChargeModeProto::DeviceAdvancedBatteryChargeModeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.DeviceAdvancedBatteryChargeModeProto)
}
DeviceAdvancedBatteryChargeModeProto::DeviceAdvancedBatteryChargeModeProto(const DeviceAdvancedBatteryChargeModeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  day_configs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_day_configs()) {
    day_configs_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_day_configs(),
      GetArena());
  }
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceAdvancedBatteryChargeModeProto)
}

void DeviceAdvancedBatteryChargeModeProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceAdvancedBatteryChargeModeProto_chrome_5fdevice_5fpolicy_2eproto.base);
  day_configs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enabled_ = false;
}

DeviceAdvancedBatteryChargeModeProto::~DeviceAdvancedBatteryChargeModeProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceAdvancedBatteryChargeModeProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeviceAdvancedBatteryChargeModeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  day_configs_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceAdvancedBatteryChargeModeProto::ArenaDtor(void* object) {
  DeviceAdvancedBatteryChargeModeProto* _this = reinterpret_cast< DeviceAdvancedBatteryChargeModeProto* >(object);
  (void)_this;
}
void DeviceAdvancedBatteryChargeModeProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceAdvancedBatteryChargeModeProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceAdvancedBatteryChargeModeProto& DeviceAdvancedBatteryChargeModeProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceAdvancedBatteryChargeModeProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void DeviceAdvancedBatteryChargeModeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceAdvancedBatteryChargeModeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    day_configs_.ClearNonDefaultToEmpty();
  }
  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceAdvancedBatteryChargeModeProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string day_configs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_day_configs();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceAdvancedBatteryChargeModeProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.DeviceAdvancedBatteryChargeModeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // optional string day_configs = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_day_configs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.DeviceAdvancedBatteryChargeModeProto)
  return target;
}

size_t DeviceAdvancedBatteryChargeModeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceAdvancedBatteryChargeModeProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string day_configs = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_day_configs());
    }

    // optional bool enabled = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceAdvancedBatteryChargeModeProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceAdvancedBatteryChargeModeProto*>(
      &from));
}

void DeviceAdvancedBatteryChargeModeProto::MergeFrom(const DeviceAdvancedBatteryChargeModeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceAdvancedBatteryChargeModeProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_day_configs(from._internal_day_configs());
    }
    if (cached_has_bits & 0x00000002u) {
      enabled_ = from.enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceAdvancedBatteryChargeModeProto::CopyFrom(const DeviceAdvancedBatteryChargeModeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceAdvancedBatteryChargeModeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceAdvancedBatteryChargeModeProto::IsInitialized() const {
  return true;
}

void DeviceAdvancedBatteryChargeModeProto::InternalSwap(DeviceAdvancedBatteryChargeModeProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  day_configs_.Swap(&other->day_configs_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(enabled_, other->enabled_);
}

std::string DeviceAdvancedBatteryChargeModeProto::GetTypeName() const {
  return "enterprise_management.DeviceAdvancedBatteryChargeModeProto";
}


// ===================================================================

void DeviceBatteryChargeModeProto::InitAsDefaultInstance() {
}
class DeviceBatteryChargeModeProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceBatteryChargeModeProto>()._has_bits_);
  static void set_has_battery_charge_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_custom_charge_start(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_custom_charge_stop(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

DeviceBatteryChargeModeProto::DeviceBatteryChargeModeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.DeviceBatteryChargeModeProto)
}
DeviceBatteryChargeModeProto::DeviceBatteryChargeModeProto(const DeviceBatteryChargeModeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&battery_charge_mode_, &from.battery_charge_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&custom_charge_stop_) -
    reinterpret_cast<char*>(&battery_charge_mode_)) + sizeof(custom_charge_stop_));
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceBatteryChargeModeProto)
}

void DeviceBatteryChargeModeProto::SharedCtor() {
  ::memset(&battery_charge_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&custom_charge_stop_) -
      reinterpret_cast<char*>(&battery_charge_mode_)) + sizeof(custom_charge_stop_));
}

DeviceBatteryChargeModeProto::~DeviceBatteryChargeModeProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceBatteryChargeModeProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeviceBatteryChargeModeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeviceBatteryChargeModeProto::ArenaDtor(void* object) {
  DeviceBatteryChargeModeProto* _this = reinterpret_cast< DeviceBatteryChargeModeProto* >(object);
  (void)_this;
}
void DeviceBatteryChargeModeProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceBatteryChargeModeProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceBatteryChargeModeProto& DeviceBatteryChargeModeProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceBatteryChargeModeProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void DeviceBatteryChargeModeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceBatteryChargeModeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&battery_charge_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&custom_charge_stop_) -
        reinterpret_cast<char*>(&battery_charge_mode_)) + sizeof(custom_charge_stop_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceBatteryChargeModeProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.DeviceBatteryChargeModeProto.BatteryChargeMode battery_charge_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::DeviceBatteryChargeModeProto_BatteryChargeMode_IsValid(val))) {
            _internal_set_battery_charge_mode(static_cast<::enterprise_management::DeviceBatteryChargeModeProto_BatteryChargeMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 custom_charge_start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_custom_charge_start(&has_bits);
          custom_charge_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 custom_charge_stop = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_custom_charge_stop(&has_bits);
          custom_charge_stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceBatteryChargeModeProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.DeviceBatteryChargeModeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.DeviceBatteryChargeModeProto.BatteryChargeMode battery_charge_mode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_battery_charge_mode(), target);
  }

  // optional int32 custom_charge_start = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_custom_charge_start(), target);
  }

  // optional int32 custom_charge_stop = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_custom_charge_stop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.DeviceBatteryChargeModeProto)
  return target;
}

size_t DeviceBatteryChargeModeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceBatteryChargeModeProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .enterprise_management.DeviceBatteryChargeModeProto.BatteryChargeMode battery_charge_mode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_battery_charge_mode());
    }

    // optional int32 custom_charge_start = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_custom_charge_start());
    }

    // optional int32 custom_charge_stop = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_custom_charge_stop());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceBatteryChargeModeProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceBatteryChargeModeProto*>(
      &from));
}

void DeviceBatteryChargeModeProto::MergeFrom(const DeviceBatteryChargeModeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceBatteryChargeModeProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      battery_charge_mode_ = from.battery_charge_mode_;
    }
    if (cached_has_bits & 0x00000002u) {
      custom_charge_start_ = from.custom_charge_start_;
    }
    if (cached_has_bits & 0x00000004u) {
      custom_charge_stop_ = from.custom_charge_stop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceBatteryChargeModeProto::CopyFrom(const DeviceBatteryChargeModeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceBatteryChargeModeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceBatteryChargeModeProto::IsInitialized() const {
  return true;
}

void DeviceBatteryChargeModeProto::InternalSwap(DeviceBatteryChargeModeProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceBatteryChargeModeProto, custom_charge_stop_)
      + sizeof(DeviceBatteryChargeModeProto::custom_charge_stop_)
      - PROTOBUF_FIELD_OFFSET(DeviceBatteryChargeModeProto, battery_charge_mode_)>(
          reinterpret_cast<char*>(&battery_charge_mode_),
          reinterpret_cast<char*>(&other->battery_charge_mode_));
}

std::string DeviceBatteryChargeModeProto::GetTypeName() const {
  return "enterprise_management.DeviceBatteryChargeModeProto";
}


// ===================================================================

void DeviceUsbPowerShareProto::InitAsDefaultInstance() {
}
class DeviceUsbPowerShareProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceUsbPowerShareProto>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeviceUsbPowerShareProto::DeviceUsbPowerShareProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.DeviceUsbPowerShareProto)
}
DeviceUsbPowerShareProto::DeviceUsbPowerShareProto(const DeviceUsbPowerShareProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceUsbPowerShareProto)
}

void DeviceUsbPowerShareProto::SharedCtor() {
  enabled_ = false;
}

DeviceUsbPowerShareProto::~DeviceUsbPowerShareProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceUsbPowerShareProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeviceUsbPowerShareProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeviceUsbPowerShareProto::ArenaDtor(void* object) {
  DeviceUsbPowerShareProto* _this = reinterpret_cast< DeviceUsbPowerShareProto* >(object);
  (void)_this;
}
void DeviceUsbPowerShareProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceUsbPowerShareProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceUsbPowerShareProto& DeviceUsbPowerShareProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceUsbPowerShareProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void DeviceUsbPowerShareProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceUsbPowerShareProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceUsbPowerShareProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceUsbPowerShareProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.DeviceUsbPowerShareProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.DeviceUsbPowerShareProto)
  return target;
}

size_t DeviceUsbPowerShareProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceUsbPowerShareProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool enabled = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceUsbPowerShareProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceUsbPowerShareProto*>(
      &from));
}

void DeviceUsbPowerShareProto::MergeFrom(const DeviceUsbPowerShareProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceUsbPowerShareProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enabled()) {
    _internal_set_enabled(from._internal_enabled());
  }
}

void DeviceUsbPowerShareProto::CopyFrom(const DeviceUsbPowerShareProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceUsbPowerShareProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceUsbPowerShareProto::IsInitialized() const {
  return true;
}

void DeviceUsbPowerShareProto::InternalSwap(DeviceUsbPowerShareProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
}

std::string DeviceUsbPowerShareProto::GetTypeName() const {
  return "enterprise_management.DeviceUsbPowerShareProto";
}


// ===================================================================

void DeviceScheduledUpdateCheckProto::InitAsDefaultInstance() {
}
class DeviceScheduledUpdateCheckProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceScheduledUpdateCheckProto>()._has_bits_);
  static void set_has_device_scheduled_update_check_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeviceScheduledUpdateCheckProto::DeviceScheduledUpdateCheckProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.DeviceScheduledUpdateCheckProto)
}
DeviceScheduledUpdateCheckProto::DeviceScheduledUpdateCheckProto(const DeviceScheduledUpdateCheckProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  device_scheduled_update_check_settings_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_device_scheduled_update_check_settings()) {
    device_scheduled_update_check_settings_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_scheduled_update_check_settings(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceScheduledUpdateCheckProto)
}

void DeviceScheduledUpdateCheckProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceScheduledUpdateCheckProto_chrome_5fdevice_5fpolicy_2eproto.base);
  device_scheduled_update_check_settings_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeviceScheduledUpdateCheckProto::~DeviceScheduledUpdateCheckProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceScheduledUpdateCheckProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeviceScheduledUpdateCheckProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_scheduled_update_check_settings_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceScheduledUpdateCheckProto::ArenaDtor(void* object) {
  DeviceScheduledUpdateCheckProto* _this = reinterpret_cast< DeviceScheduledUpdateCheckProto* >(object);
  (void)_this;
}
void DeviceScheduledUpdateCheckProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceScheduledUpdateCheckProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceScheduledUpdateCheckProto& DeviceScheduledUpdateCheckProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceScheduledUpdateCheckProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void DeviceScheduledUpdateCheckProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceScheduledUpdateCheckProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    device_scheduled_update_check_settings_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceScheduledUpdateCheckProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string device_scheduled_update_check_settings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_scheduled_update_check_settings();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceScheduledUpdateCheckProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.DeviceScheduledUpdateCheckProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string device_scheduled_update_check_settings = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_scheduled_update_check_settings(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.DeviceScheduledUpdateCheckProto)
  return target;
}

size_t DeviceScheduledUpdateCheckProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceScheduledUpdateCheckProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string device_scheduled_update_check_settings = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_scheduled_update_check_settings());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceScheduledUpdateCheckProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceScheduledUpdateCheckProto*>(
      &from));
}

void DeviceScheduledUpdateCheckProto::MergeFrom(const DeviceScheduledUpdateCheckProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceScheduledUpdateCheckProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device_scheduled_update_check_settings()) {
    _internal_set_device_scheduled_update_check_settings(from._internal_device_scheduled_update_check_settings());
  }
}

void DeviceScheduledUpdateCheckProto::CopyFrom(const DeviceScheduledUpdateCheckProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceScheduledUpdateCheckProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceScheduledUpdateCheckProto::IsInitialized() const {
  return true;
}

void DeviceScheduledUpdateCheckProto::InternalSwap(DeviceScheduledUpdateCheckProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  device_scheduled_update_check_settings_.Swap(&other->device_scheduled_update_check_settings_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string DeviceScheduledUpdateCheckProto::GetTypeName() const {
  return "enterprise_management.DeviceScheduledUpdateCheckProto";
}


// ===================================================================

void DevicePowerwashAllowedProto::InitAsDefaultInstance() {
}
class DevicePowerwashAllowedProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DevicePowerwashAllowedProto>()._has_bits_);
  static void set_has_device_powerwash_allowed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DevicePowerwashAllowedProto::DevicePowerwashAllowedProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.DevicePowerwashAllowedProto)
}
DevicePowerwashAllowedProto::DevicePowerwashAllowedProto(const DevicePowerwashAllowedProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  device_powerwash_allowed_ = from.device_powerwash_allowed_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DevicePowerwashAllowedProto)
}

void DevicePowerwashAllowedProto::SharedCtor() {
  device_powerwash_allowed_ = false;
}

DevicePowerwashAllowedProto::~DevicePowerwashAllowedProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.DevicePowerwashAllowedProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DevicePowerwashAllowedProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DevicePowerwashAllowedProto::ArenaDtor(void* object) {
  DevicePowerwashAllowedProto* _this = reinterpret_cast< DevicePowerwashAllowedProto* >(object);
  (void)_this;
}
void DevicePowerwashAllowedProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DevicePowerwashAllowedProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DevicePowerwashAllowedProto& DevicePowerwashAllowedProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DevicePowerwashAllowedProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void DevicePowerwashAllowedProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DevicePowerwashAllowedProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_powerwash_allowed_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DevicePowerwashAllowedProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool device_powerwash_allowed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_device_powerwash_allowed(&has_bits);
          device_powerwash_allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DevicePowerwashAllowedProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.DevicePowerwashAllowedProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool device_powerwash_allowed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_device_powerwash_allowed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.DevicePowerwashAllowedProto)
  return target;
}

size_t DevicePowerwashAllowedProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DevicePowerwashAllowedProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool device_powerwash_allowed = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DevicePowerwashAllowedProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DevicePowerwashAllowedProto*>(
      &from));
}

void DevicePowerwashAllowedProto::MergeFrom(const DevicePowerwashAllowedProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DevicePowerwashAllowedProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device_powerwash_allowed()) {
    _internal_set_device_powerwash_allowed(from._internal_device_powerwash_allowed());
  }
}

void DevicePowerwashAllowedProto::CopyFrom(const DevicePowerwashAllowedProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DevicePowerwashAllowedProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DevicePowerwashAllowedProto::IsInitialized() const {
  return true;
}

void DevicePowerwashAllowedProto::InternalSwap(DevicePowerwashAllowedProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(device_powerwash_allowed_, other->device_powerwash_allowed_);
}

std::string DevicePowerwashAllowedProto::GetTypeName() const {
  return "enterprise_management.DevicePowerwashAllowedProto";
}


// ===================================================================

void DeviceLoginScreenWebUsbAllowDevicesForUrlsProto::InitAsDefaultInstance() {
}
class DeviceLoginScreenWebUsbAllowDevicesForUrlsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceLoginScreenWebUsbAllowDevicesForUrlsProto>()._has_bits_);
  static void set_has_device_login_screen_webusb_allow_devices_for_urls(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeviceLoginScreenWebUsbAllowDevicesForUrlsProto::DeviceLoginScreenWebUsbAllowDevicesForUrlsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.DeviceLoginScreenWebUsbAllowDevicesForUrlsProto)
}
DeviceLoginScreenWebUsbAllowDevicesForUrlsProto::DeviceLoginScreenWebUsbAllowDevicesForUrlsProto(const DeviceLoginScreenWebUsbAllowDevicesForUrlsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  device_login_screen_webusb_allow_devices_for_urls_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_device_login_screen_webusb_allow_devices_for_urls()) {
    device_login_screen_webusb_allow_devices_for_urls_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_login_screen_webusb_allow_devices_for_urls(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceLoginScreenWebUsbAllowDevicesForUrlsProto)
}

void DeviceLoginScreenWebUsbAllowDevicesForUrlsProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceLoginScreenWebUsbAllowDevicesForUrlsProto_chrome_5fdevice_5fpolicy_2eproto.base);
  device_login_screen_webusb_allow_devices_for_urls_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeviceLoginScreenWebUsbAllowDevicesForUrlsProto::~DeviceLoginScreenWebUsbAllowDevicesForUrlsProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.DeviceLoginScreenWebUsbAllowDevicesForUrlsProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeviceLoginScreenWebUsbAllowDevicesForUrlsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_login_screen_webusb_allow_devices_for_urls_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceLoginScreenWebUsbAllowDevicesForUrlsProto::ArenaDtor(void* object) {
  DeviceLoginScreenWebUsbAllowDevicesForUrlsProto* _this = reinterpret_cast< DeviceLoginScreenWebUsbAllowDevicesForUrlsProto* >(object);
  (void)_this;
}
void DeviceLoginScreenWebUsbAllowDevicesForUrlsProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceLoginScreenWebUsbAllowDevicesForUrlsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceLoginScreenWebUsbAllowDevicesForUrlsProto& DeviceLoginScreenWebUsbAllowDevicesForUrlsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceLoginScreenWebUsbAllowDevicesForUrlsProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void DeviceLoginScreenWebUsbAllowDevicesForUrlsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceLoginScreenWebUsbAllowDevicesForUrlsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    device_login_screen_webusb_allow_devices_for_urls_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceLoginScreenWebUsbAllowDevicesForUrlsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string device_login_screen_webusb_allow_devices_for_urls = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_login_screen_webusb_allow_devices_for_urls();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceLoginScreenWebUsbAllowDevicesForUrlsProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.DeviceLoginScreenWebUsbAllowDevicesForUrlsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string device_login_screen_webusb_allow_devices_for_urls = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_login_screen_webusb_allow_devices_for_urls(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.DeviceLoginScreenWebUsbAllowDevicesForUrlsProto)
  return target;
}

size_t DeviceLoginScreenWebUsbAllowDevicesForUrlsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceLoginScreenWebUsbAllowDevicesForUrlsProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string device_login_screen_webusb_allow_devices_for_urls = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_login_screen_webusb_allow_devices_for_urls());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceLoginScreenWebUsbAllowDevicesForUrlsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceLoginScreenWebUsbAllowDevicesForUrlsProto*>(
      &from));
}

void DeviceLoginScreenWebUsbAllowDevicesForUrlsProto::MergeFrom(const DeviceLoginScreenWebUsbAllowDevicesForUrlsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceLoginScreenWebUsbAllowDevicesForUrlsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device_login_screen_webusb_allow_devices_for_urls()) {
    _internal_set_device_login_screen_webusb_allow_devices_for_urls(from._internal_device_login_screen_webusb_allow_devices_for_urls());
  }
}

void DeviceLoginScreenWebUsbAllowDevicesForUrlsProto::CopyFrom(const DeviceLoginScreenWebUsbAllowDevicesForUrlsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceLoginScreenWebUsbAllowDevicesForUrlsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceLoginScreenWebUsbAllowDevicesForUrlsProto::IsInitialized() const {
  return true;
}

void DeviceLoginScreenWebUsbAllowDevicesForUrlsProto::InternalSwap(DeviceLoginScreenWebUsbAllowDevicesForUrlsProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  device_login_screen_webusb_allow_devices_for_urls_.Swap(&other->device_login_screen_webusb_allow_devices_for_urls_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string DeviceLoginScreenWebUsbAllowDevicesForUrlsProto::GetTypeName() const {
  return "enterprise_management.DeviceLoginScreenWebUsbAllowDevicesForUrlsProto";
}


// ===================================================================

void SystemProxySettingsProto::InitAsDefaultInstance() {
}
class SystemProxySettingsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemProxySettingsProto>()._has_bits_);
  static void set_has_system_proxy_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SystemProxySettingsProto::SystemProxySettingsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.SystemProxySettingsProto)
}
SystemProxySettingsProto::SystemProxySettingsProto(const SystemProxySettingsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  system_proxy_settings_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_system_proxy_settings()) {
    system_proxy_settings_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_system_proxy_settings(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.SystemProxySettingsProto)
}

void SystemProxySettingsProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SystemProxySettingsProto_chrome_5fdevice_5fpolicy_2eproto.base);
  system_proxy_settings_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SystemProxySettingsProto::~SystemProxySettingsProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.SystemProxySettingsProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SystemProxySettingsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  system_proxy_settings_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SystemProxySettingsProto::ArenaDtor(void* object) {
  SystemProxySettingsProto* _this = reinterpret_cast< SystemProxySettingsProto* >(object);
  (void)_this;
}
void SystemProxySettingsProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SystemProxySettingsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProxySettingsProto& SystemProxySettingsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemProxySettingsProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void SystemProxySettingsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.SystemProxySettingsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    system_proxy_settings_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SystemProxySettingsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string system_proxy_settings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_system_proxy_settings();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SystemProxySettingsProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.SystemProxySettingsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string system_proxy_settings = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_system_proxy_settings(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.SystemProxySettingsProto)
  return target;
}

size_t SystemProxySettingsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.SystemProxySettingsProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string system_proxy_settings = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_system_proxy_settings());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProxySettingsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SystemProxySettingsProto*>(
      &from));
}

void SystemProxySettingsProto::MergeFrom(const SystemProxySettingsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.SystemProxySettingsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_system_proxy_settings()) {
    _internal_set_system_proxy_settings(from._internal_system_proxy_settings());
  }
}

void SystemProxySettingsProto::CopyFrom(const SystemProxySettingsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.SystemProxySettingsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProxySettingsProto::IsInitialized() const {
  return true;
}

void SystemProxySettingsProto::InternalSwap(SystemProxySettingsProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  system_proxy_settings_.Swap(&other->system_proxy_settings_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string SystemProxySettingsProto::GetTypeName() const {
  return "enterprise_management.SystemProxySettingsProto";
}


// ===================================================================

void RequiredClientCertificateForDeviceProto::InitAsDefaultInstance() {
}
class RequiredClientCertificateForDeviceProto::_Internal {
 public:
  using HasBits = decltype(std::declval<RequiredClientCertificateForDeviceProto>()._has_bits_);
  static void set_has_required_client_certificate_for_device(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RequiredClientCertificateForDeviceProto::RequiredClientCertificateForDeviceProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.RequiredClientCertificateForDeviceProto)
}
RequiredClientCertificateForDeviceProto::RequiredClientCertificateForDeviceProto(const RequiredClientCertificateForDeviceProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  required_client_certificate_for_device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_required_client_certificate_for_device()) {
    required_client_certificate_for_device_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_required_client_certificate_for_device(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.RequiredClientCertificateForDeviceProto)
}

void RequiredClientCertificateForDeviceProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequiredClientCertificateForDeviceProto_chrome_5fdevice_5fpolicy_2eproto.base);
  required_client_certificate_for_device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RequiredClientCertificateForDeviceProto::~RequiredClientCertificateForDeviceProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.RequiredClientCertificateForDeviceProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void RequiredClientCertificateForDeviceProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  required_client_certificate_for_device_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequiredClientCertificateForDeviceProto::ArenaDtor(void* object) {
  RequiredClientCertificateForDeviceProto* _this = reinterpret_cast< RequiredClientCertificateForDeviceProto* >(object);
  (void)_this;
}
void RequiredClientCertificateForDeviceProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequiredClientCertificateForDeviceProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequiredClientCertificateForDeviceProto& RequiredClientCertificateForDeviceProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequiredClientCertificateForDeviceProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void RequiredClientCertificateForDeviceProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.RequiredClientCertificateForDeviceProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    required_client_certificate_for_device_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RequiredClientCertificateForDeviceProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string required_client_certificate_for_device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_required_client_certificate_for_device();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequiredClientCertificateForDeviceProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.RequiredClientCertificateForDeviceProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string required_client_certificate_for_device = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_required_client_certificate_for_device(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.RequiredClientCertificateForDeviceProto)
  return target;
}

size_t RequiredClientCertificateForDeviceProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.RequiredClientCertificateForDeviceProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string required_client_certificate_for_device = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_required_client_certificate_for_device());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequiredClientCertificateForDeviceProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RequiredClientCertificateForDeviceProto*>(
      &from));
}

void RequiredClientCertificateForDeviceProto::MergeFrom(const RequiredClientCertificateForDeviceProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.RequiredClientCertificateForDeviceProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_required_client_certificate_for_device()) {
    _internal_set_required_client_certificate_for_device(from._internal_required_client_certificate_for_device());
  }
}

void RequiredClientCertificateForDeviceProto::CopyFrom(const RequiredClientCertificateForDeviceProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.RequiredClientCertificateForDeviceProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequiredClientCertificateForDeviceProto::IsInitialized() const {
  return true;
}

void RequiredClientCertificateForDeviceProto::InternalSwap(RequiredClientCertificateForDeviceProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  required_client_certificate_for_device_.Swap(&other->required_client_certificate_for_device_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string RequiredClientCertificateForDeviceProto::GetTypeName() const {
  return "enterprise_management.RequiredClientCertificateForDeviceProto";
}


// ===================================================================

void ChromeDeviceSettingsProto::InitAsDefaultInstance() {
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->device_policy_refresh_rate_ = const_cast< ::enterprise_management::DevicePolicyRefreshRateProto*>(
      ::enterprise_management::DevicePolicyRefreshRateProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->user_whitelist_ = const_cast< ::enterprise_management::UserWhitelistProto*>(
      ::enterprise_management::UserWhitelistProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->guest_mode_enabled_ = const_cast< ::enterprise_management::GuestModeEnabledProto*>(
      ::enterprise_management::GuestModeEnabledProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->device_proxy_settings_ = const_cast< ::enterprise_management::OBSOLETE_DeviceProxySettingsProto*>(
      ::enterprise_management::OBSOLETE_DeviceProxySettingsProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->camera_enabled_ = const_cast< ::enterprise_management::CameraEnabledProto*>(
      ::enterprise_management::CameraEnabledProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->show_user_names_ = const_cast< ::enterprise_management::ShowUserNamesOnSigninProto*>(
      ::enterprise_management::ShowUserNamesOnSigninProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->data_roaming_enabled_ = const_cast< ::enterprise_management::DataRoamingEnabledProto*>(
      ::enterprise_management::DataRoamingEnabledProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->allow_new_users_ = const_cast< ::enterprise_management::AllowNewUsersProto*>(
      ::enterprise_management::AllowNewUsersProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->metrics_enabled_ = const_cast< ::enterprise_management::MetricsEnabledProto*>(
      ::enterprise_management::MetricsEnabledProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->release_channel_ = const_cast< ::enterprise_management::ReleaseChannelProto*>(
      ::enterprise_management::ReleaseChannelProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->open_network_configuration_ = const_cast< ::enterprise_management::DeviceOpenNetworkConfigurationProto*>(
      ::enterprise_management::DeviceOpenNetworkConfigurationProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->device_reporting_ = const_cast< ::enterprise_management::DeviceReportingProto*>(
      ::enterprise_management::DeviceReportingProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->ephemeral_users_enabled_ = const_cast< ::enterprise_management::EphemeralUsersEnabledProto*>(
      ::enterprise_management::EphemeralUsersEnabledProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->app_pack_ = const_cast< ::enterprise_management::OBSOLETE_AppPackProto*>(
      ::enterprise_management::OBSOLETE_AppPackProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->forced_logout_timeouts_ = const_cast< ::enterprise_management::OBSOLETE_ForcedLogoutTimeoutsProto*>(
      ::enterprise_management::OBSOLETE_ForcedLogoutTimeoutsProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->login_screen_saver_ = const_cast< ::enterprise_management::OBSOLETE_ScreenSaverProto*>(
      ::enterprise_management::OBSOLETE_ScreenSaverProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->auto_update_settings_ = const_cast< ::enterprise_management::AutoUpdateSettingsProto*>(
      ::enterprise_management::AutoUpdateSettingsProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->start_up_urls_ = const_cast< ::enterprise_management::OBSOLETE_StartUpUrlsProto*>(
      ::enterprise_management::OBSOLETE_StartUpUrlsProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->pinned_apps_ = const_cast< ::enterprise_management::OBSOLETE_PinnedAppsProto*>(
      ::enterprise_management::OBSOLETE_PinnedAppsProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->system_timezone_ = const_cast< ::enterprise_management::SystemTimezoneProto*>(
      ::enterprise_management::SystemTimezoneProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->device_local_accounts_ = const_cast< ::enterprise_management::DeviceLocalAccountsProto*>(
      ::enterprise_management::DeviceLocalAccountsProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->allow_redeem_offers_ = const_cast< ::enterprise_management::AllowRedeemChromeOsRegistrationOffersProto*>(
      ::enterprise_management::AllowRedeemChromeOsRegistrationOffersProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->start_up_flags_ = const_cast< ::enterprise_management::StartUpFlagsProto*>(
      ::enterprise_management::StartUpFlagsProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->uptime_limit_ = const_cast< ::enterprise_management::UptimeLimitProto*>(
      ::enterprise_management::UptimeLimitProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->variations_parameter_ = const_cast< ::enterprise_management::VariationsParameterProto*>(
      ::enterprise_management::VariationsParameterProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->attestation_settings_ = const_cast< ::enterprise_management::AttestationSettingsProto*>(
      ::enterprise_management::AttestationSettingsProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->accessibility_settings_ = const_cast< ::enterprise_management::AccessibilitySettingsProto*>(
      ::enterprise_management::AccessibilitySettingsProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->supervised_users_settings_ = const_cast< ::enterprise_management::OBSOLETE_SupervisedUsersSettingsProto*>(
      ::enterprise_management::OBSOLETE_SupervisedUsersSettingsProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->login_screen_power_management_ = const_cast< ::enterprise_management::LoginScreenPowerManagementProto*>(
      ::enterprise_management::LoginScreenPowerManagementProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->use_24hour_clock_ = const_cast< ::enterprise_management::SystemUse24HourClockProto*>(
      ::enterprise_management::SystemUse24HourClockProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->auto_clean_up_settings_ = const_cast< ::enterprise_management::AutoCleanupSettigsProto*>(
      ::enterprise_management::AutoCleanupSettigsProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->system_settings_ = const_cast< ::enterprise_management::SystemSettingsProto*>(
      ::enterprise_management::SystemSettingsProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->saml_settings_ = const_cast< ::enterprise_management::SAMLSettingsProto*>(
      ::enterprise_management::SAMLSettingsProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->reboot_on_shutdown_ = const_cast< ::enterprise_management::RebootOnShutdownProto*>(
      ::enterprise_management::RebootOnShutdownProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->device_heartbeat_settings_ = const_cast< ::enterprise_management::DeviceHeartbeatSettingsProto*>(
      ::enterprise_management::DeviceHeartbeatSettingsProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->extension_cache_size_ = const_cast< ::enterprise_management::ExtensionCacheSizeProto*>(
      ::enterprise_management::ExtensionCacheSizeProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->login_screen_domain_auto_complete_ = const_cast< ::enterprise_management::LoginScreenDomainAutoCompleteProto*>(
      ::enterprise_management::LoginScreenDomainAutoCompleteProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->device_log_upload_settings_ = const_cast< ::enterprise_management::DeviceLogUploadSettingsProto*>(
      ::enterprise_management::DeviceLogUploadSettingsProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->display_rotation_default_ = const_cast< ::enterprise_management::DisplayRotationDefaultProto*>(
      ::enterprise_management::DisplayRotationDefaultProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->allow_kiosk_app_control_chrome_version_ = const_cast< ::enterprise_management::AllowKioskAppControlChromeVersionProto*>(
      ::enterprise_management::AllowKioskAppControlChromeVersionProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->login_authentication_behavior_ = const_cast< ::enterprise_management::LoginAuthenticationBehaviorProto*>(
      ::enterprise_management::LoginAuthenticationBehaviorProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->usb_detachable_whitelist_ = const_cast< ::enterprise_management::UsbDetachableWhitelistProto*>(
      ::enterprise_management::UsbDetachableWhitelistProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->allow_bluetooth_ = const_cast< ::enterprise_management::AllowBluetoothProto*>(
      ::enterprise_management::AllowBluetoothProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->quirks_download_enabled_ = const_cast< ::enterprise_management::DeviceQuirksDownloadEnabledProto*>(
      ::enterprise_management::DeviceQuirksDownloadEnabledProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->login_video_capture_allowed_urls_ = const_cast< ::enterprise_management::LoginVideoCaptureAllowedUrlsProto*>(
      ::enterprise_management::LoginVideoCaptureAllowedUrlsProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->device_login_screen_extensions_ = const_cast< ::enterprise_management::DeviceLoginScreenExtensionsProto*>(
      ::enterprise_management::DeviceLoginScreenExtensionsProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->network_throttling_ = const_cast< ::enterprise_management::NetworkThrottlingEnabledProto*>(
      ::enterprise_management::NetworkThrottlingEnabledProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->device_wallpaper_image_ = const_cast< ::enterprise_management::DeviceWallpaperImageProto*>(
      ::enterprise_management::DeviceWallpaperImageProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->login_screen_locales_ = const_cast< ::enterprise_management::LoginScreenLocalesProto*>(
      ::enterprise_management::LoginScreenLocalesProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->login_screen_input_methods_ = const_cast< ::enterprise_management::LoginScreenInputMethodsProto*>(
      ::enterprise_management::LoginScreenInputMethodsProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->device_ecryptfs_migration_strategy_ = const_cast< ::enterprise_management::DeviceEcryptfsMigrationStrategyProto*>(
      ::enterprise_management::DeviceEcryptfsMigrationStrategyProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->device_second_factor_authentication_ = const_cast< ::enterprise_management::DeviceSecondFactorAuthenticationProto*>(
      ::enterprise_management::DeviceSecondFactorAuthenticationProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->cast_receiver_name_ = const_cast< ::enterprise_management::CastReceiverNameProto*>(
      ::enterprise_management::CastReceiverNameProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->device_off_hours_ = const_cast< ::enterprise_management::DeviceOffHoursProto*>(
      ::enterprise_management::DeviceOffHoursProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->native_device_printers_ = const_cast< ::enterprise_management::DeviceNativePrintersProto*>(
      ::enterprise_management::DeviceNativePrintersProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->native_device_printers_access_mode_ = const_cast< ::enterprise_management::DeviceNativePrintersAccessModeProto*>(
      ::enterprise_management::DeviceNativePrintersAccessModeProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->native_device_printers_blacklist_ = const_cast< ::enterprise_management::DeviceNativePrintersBlacklistProto*>(
      ::enterprise_management::DeviceNativePrintersBlacklistProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->native_device_printers_whitelist_ = const_cast< ::enterprise_management::DeviceNativePrintersWhitelistProto*>(
      ::enterprise_management::DeviceNativePrintersWhitelistProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->tpm_firmware_update_settings_ = const_cast< ::enterprise_management::TPMFirmwareUpdateSettingsProto*>(
      ::enterprise_management::TPMFirmwareUpdateSettingsProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->minimum_required_version_ = const_cast< ::enterprise_management::OBSOLETE_MinimumRequiredVersionProto*>(
      ::enterprise_management::OBSOLETE_MinimumRequiredVersionProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->device_login_screen_auto_select_certificate_for_urls_ = const_cast< ::enterprise_management::DeviceLoginScreenAutoSelectCertificateForUrls*>(
      ::enterprise_management::DeviceLoginScreenAutoSelectCertificateForUrls::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->unaffiliated_arc_allowed_ = const_cast< ::enterprise_management::UnaffiliatedArcAllowedProto*>(
      ::enterprise_management::UnaffiliatedArcAllowedProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->network_hostname_ = const_cast< ::enterprise_management::NetworkHostnameProto*>(
      ::enterprise_management::NetworkHostnameProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->device_kerberos_encryption_types_ = const_cast< ::enterprise_management::DeviceKerberosEncryptionTypesProto*>(
      ::enterprise_management::DeviceKerberosEncryptionTypesProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->device_user_policy_loopback_processing_mode_ = const_cast< ::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto*>(
      ::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->device_login_screen_isolate_origins_ = const_cast< ::enterprise_management::DeviceLoginScreenIsolateOriginsProto*>(
      ::enterprise_management::DeviceLoginScreenIsolateOriginsProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->device_login_screen_site_per_process_ = const_cast< ::enterprise_management::DeviceLoginScreenSitePerProcessProto*>(
      ::enterprise_management::DeviceLoginScreenSitePerProcessProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->virtual_machines_allowed_ = const_cast< ::enterprise_management::VirtualMachinesAllowedProto*>(
      ::enterprise_management::VirtualMachinesAllowedProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->device_machine_password_change_rate_ = const_cast< ::enterprise_management::DeviceMachinePasswordChangeRateProto*>(
      ::enterprise_management::DeviceMachinePasswordChangeRateProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->saml_login_authentication_type_ = const_cast< ::enterprise_management::SamlLoginAuthenticationTypeProto*>(
      ::enterprise_management::SamlLoginAuthenticationTypeProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->device_unaffiliated_crostini_allowed_ = const_cast< ::enterprise_management::DeviceUnaffiliatedCrostiniAllowedProto*>(
      ::enterprise_management::DeviceUnaffiliatedCrostiniAllowedProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->device_wifi_fast_transition_enabled_ = const_cast< ::enterprise_management::DeviceWiFiFastTransitionEnabledProto*>(
      ::enterprise_management::DeviceWiFiFastTransitionEnabledProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->device_display_resolution_ = const_cast< ::enterprise_management::DeviceDisplayResolutionProto*>(
      ::enterprise_management::DeviceDisplayResolutionProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->plugin_vm_allowed_ = const_cast< ::enterprise_management::PluginVmAllowedProto*>(
      ::enterprise_management::PluginVmAllowedProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->device_gpo_cache_lifetime_ = const_cast< ::enterprise_management::DeviceGpoCacheLifetimeProto*>(
      ::enterprise_management::DeviceGpoCacheLifetimeProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->device_auth_data_cache_lifetime_ = const_cast< ::enterprise_management::DeviceAuthDataCacheLifetimeProto*>(
      ::enterprise_management::DeviceAuthDataCacheLifetimeProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->plugin_vm_license_key_ = const_cast< ::enterprise_management::PluginVmLicenseKeyProto*>(
      ::enterprise_management::PluginVmLicenseKeyProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->device_reboot_on_user_signout_ = const_cast< ::enterprise_management::DeviceRebootOnUserSignoutProto*>(
      ::enterprise_management::DeviceRebootOnUserSignoutProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->device_wilco_dtc_allowed_ = const_cast< ::enterprise_management::DeviceWilcoDtcAllowedProto*>(
      ::enterprise_management::DeviceWilcoDtcAllowedProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->device_wilco_dtc_configuration_ = const_cast< ::enterprise_management::DeviceWilcoDtcConfigurationProto*>(
      ::enterprise_management::DeviceWilcoDtcConfigurationProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->device_wifi_allowed_ = const_cast< ::enterprise_management::DeviceWiFiAllowedProto*>(
      ::enterprise_management::DeviceWiFiAllowedProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->device_power_peak_shift_ = const_cast< ::enterprise_management::DevicePowerPeakShiftProto*>(
      ::enterprise_management::DevicePowerPeakShiftProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->device_boot_on_ac_ = const_cast< ::enterprise_management::DeviceBootOnAcProto*>(
      ::enterprise_management::DeviceBootOnAcProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->device_dock_mac_address_source_ = const_cast< ::enterprise_management::DeviceDockMacAddressSourceProto*>(
      ::enterprise_management::DeviceDockMacAddressSourceProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->device_advanced_battery_charge_mode_ = const_cast< ::enterprise_management::DeviceAdvancedBatteryChargeModeProto*>(
      ::enterprise_management::DeviceAdvancedBatteryChargeModeProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->device_battery_charge_mode_ = const_cast< ::enterprise_management::DeviceBatteryChargeModeProto*>(
      ::enterprise_management::DeviceBatteryChargeModeProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->device_usb_power_share_ = const_cast< ::enterprise_management::DeviceUsbPowerShareProto*>(
      ::enterprise_management::DeviceUsbPowerShareProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->device_scheduled_update_check_ = const_cast< ::enterprise_management::DeviceScheduledUpdateCheckProto*>(
      ::enterprise_management::DeviceScheduledUpdateCheckProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->device_powerwash_allowed_ = const_cast< ::enterprise_management::DevicePowerwashAllowedProto*>(
      ::enterprise_management::DevicePowerwashAllowedProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->device_login_screen_webusb_allow_devices_for_urls_ = const_cast< ::enterprise_management::DeviceLoginScreenWebUsbAllowDevicesForUrlsProto*>(
      ::enterprise_management::DeviceLoginScreenWebUsbAllowDevicesForUrlsProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->device_login_screen_system_info_enforced_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->device_web_based_attestation_allowed_urls_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->device_show_numeric_keyboard_for_password_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->login_screen_primary_mouse_button_switch_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->minimum_chrome_version_enforced_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->system_proxy_settings_ = const_cast< ::enterprise_management::SystemProxySettingsProto*>(
      ::enterprise_management::SystemProxySettingsProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->device_chrome_variations_type_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->device_login_screen_privacy_screen_enabled_ = const_cast< ::enterprise_management::DeviceLoginScreenPrivacyScreenEnabledProto*>(
      ::enterprise_management::DeviceLoginScreenPrivacyScreenEnabledProto::internal_default_instance());
  ::enterprise_management::_ChromeDeviceSettingsProto_default_instance_._instance.get_mutable()->required_client_certificate_for_device_ = const_cast< ::enterprise_management::RequiredClientCertificateForDeviceProto*>(
      ::enterprise_management::RequiredClientCertificateForDeviceProto::internal_default_instance());
}
class ChromeDeviceSettingsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeDeviceSettingsProto>()._has_bits_);
  static const ::enterprise_management::DevicePolicyRefreshRateProto& device_policy_refresh_rate(const ChromeDeviceSettingsProto* msg);
  static void set_has_device_policy_refresh_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::enterprise_management::UserWhitelistProto& user_whitelist(const ChromeDeviceSettingsProto* msg);
  static void set_has_user_whitelist(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::enterprise_management::GuestModeEnabledProto& guest_mode_enabled(const ChromeDeviceSettingsProto* msg);
  static void set_has_guest_mode_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::enterprise_management::OBSOLETE_DeviceProxySettingsProto& device_proxy_settings(const ChromeDeviceSettingsProto* msg);
  static void set_has_device_proxy_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::enterprise_management::CameraEnabledProto& camera_enabled(const ChromeDeviceSettingsProto* msg);
  static void set_has_camera_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::enterprise_management::ShowUserNamesOnSigninProto& show_user_names(const ChromeDeviceSettingsProto* msg);
  static void set_has_show_user_names(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::enterprise_management::DataRoamingEnabledProto& data_roaming_enabled(const ChromeDeviceSettingsProto* msg);
  static void set_has_data_roaming_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::enterprise_management::AllowNewUsersProto& allow_new_users(const ChromeDeviceSettingsProto* msg);
  static void set_has_allow_new_users(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::enterprise_management::MetricsEnabledProto& metrics_enabled(const ChromeDeviceSettingsProto* msg);
  static void set_has_metrics_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::enterprise_management::ReleaseChannelProto& release_channel(const ChromeDeviceSettingsProto* msg);
  static void set_has_release_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::enterprise_management::DeviceOpenNetworkConfigurationProto& open_network_configuration(const ChromeDeviceSettingsProto* msg);
  static void set_has_open_network_configuration(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::enterprise_management::DeviceReportingProto& device_reporting(const ChromeDeviceSettingsProto* msg);
  static void set_has_device_reporting(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::enterprise_management::EphemeralUsersEnabledProto& ephemeral_users_enabled(const ChromeDeviceSettingsProto* msg);
  static void set_has_ephemeral_users_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::enterprise_management::OBSOLETE_AppPackProto& app_pack(const ChromeDeviceSettingsProto* msg);
  static void set_has_app_pack(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::enterprise_management::OBSOLETE_ForcedLogoutTimeoutsProto& forced_logout_timeouts(const ChromeDeviceSettingsProto* msg);
  static void set_has_forced_logout_timeouts(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::enterprise_management::OBSOLETE_ScreenSaverProto& login_screen_saver(const ChromeDeviceSettingsProto* msg);
  static void set_has_login_screen_saver(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::enterprise_management::AutoUpdateSettingsProto& auto_update_settings(const ChromeDeviceSettingsProto* msg);
  static void set_has_auto_update_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::enterprise_management::OBSOLETE_StartUpUrlsProto& start_up_urls(const ChromeDeviceSettingsProto* msg);
  static void set_has_start_up_urls(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::enterprise_management::OBSOLETE_PinnedAppsProto& pinned_apps(const ChromeDeviceSettingsProto* msg);
  static void set_has_pinned_apps(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::enterprise_management::SystemTimezoneProto& system_timezone(const ChromeDeviceSettingsProto* msg);
  static void set_has_system_timezone(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::enterprise_management::DeviceLocalAccountsProto& device_local_accounts(const ChromeDeviceSettingsProto* msg);
  static void set_has_device_local_accounts(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::enterprise_management::AllowRedeemChromeOsRegistrationOffersProto& allow_redeem_offers(const ChromeDeviceSettingsProto* msg);
  static void set_has_allow_redeem_offers(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::enterprise_management::StartUpFlagsProto& start_up_flags(const ChromeDeviceSettingsProto* msg);
  static void set_has_start_up_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::enterprise_management::UptimeLimitProto& uptime_limit(const ChromeDeviceSettingsProto* msg);
  static void set_has_uptime_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::enterprise_management::VariationsParameterProto& variations_parameter(const ChromeDeviceSettingsProto* msg);
  static void set_has_variations_parameter(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::enterprise_management::AttestationSettingsProto& attestation_settings(const ChromeDeviceSettingsProto* msg);
  static void set_has_attestation_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::enterprise_management::AccessibilitySettingsProto& accessibility_settings(const ChromeDeviceSettingsProto* msg);
  static void set_has_accessibility_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::enterprise_management::OBSOLETE_SupervisedUsersSettingsProto& supervised_users_settings(const ChromeDeviceSettingsProto* msg);
  static void set_has_supervised_users_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::enterprise_management::LoginScreenPowerManagementProto& login_screen_power_management(const ChromeDeviceSettingsProto* msg);
  static void set_has_login_screen_power_management(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::enterprise_management::SystemUse24HourClockProto& use_24hour_clock(const ChromeDeviceSettingsProto* msg);
  static void set_has_use_24hour_clock(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::enterprise_management::AutoCleanupSettigsProto& auto_clean_up_settings(const ChromeDeviceSettingsProto* msg);
  static void set_has_auto_clean_up_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::enterprise_management::SystemSettingsProto& system_settings(const ChromeDeviceSettingsProto* msg);
  static void set_has_system_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static const ::enterprise_management::SAMLSettingsProto& saml_settings(const ChromeDeviceSettingsProto* msg);
  static void set_has_saml_settings(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static const ::enterprise_management::RebootOnShutdownProto& reboot_on_shutdown(const ChromeDeviceSettingsProto* msg);
  static void set_has_reboot_on_shutdown(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static const ::enterprise_management::DeviceHeartbeatSettingsProto& device_heartbeat_settings(const ChromeDeviceSettingsProto* msg);
  static void set_has_device_heartbeat_settings(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static const ::enterprise_management::ExtensionCacheSizeProto& extension_cache_size(const ChromeDeviceSettingsProto* msg);
  static void set_has_extension_cache_size(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static const ::enterprise_management::LoginScreenDomainAutoCompleteProto& login_screen_domain_auto_complete(const ChromeDeviceSettingsProto* msg);
  static void set_has_login_screen_domain_auto_complete(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static const ::enterprise_management::DeviceLogUploadSettingsProto& device_log_upload_settings(const ChromeDeviceSettingsProto* msg);
  static void set_has_device_log_upload_settings(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static const ::enterprise_management::DisplayRotationDefaultProto& display_rotation_default(const ChromeDeviceSettingsProto* msg);
  static void set_has_display_rotation_default(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static const ::enterprise_management::AllowKioskAppControlChromeVersionProto& allow_kiosk_app_control_chrome_version(const ChromeDeviceSettingsProto* msg);
  static void set_has_allow_kiosk_app_control_chrome_version(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static const ::enterprise_management::LoginAuthenticationBehaviorProto& login_authentication_behavior(const ChromeDeviceSettingsProto* msg);
  static void set_has_login_authentication_behavior(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static const ::enterprise_management::UsbDetachableWhitelistProto& usb_detachable_whitelist(const ChromeDeviceSettingsProto* msg);
  static void set_has_usb_detachable_whitelist(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static const ::enterprise_management::AllowBluetoothProto& allow_bluetooth(const ChromeDeviceSettingsProto* msg);
  static void set_has_allow_bluetooth(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static const ::enterprise_management::DeviceQuirksDownloadEnabledProto& quirks_download_enabled(const ChromeDeviceSettingsProto* msg);
  static void set_has_quirks_download_enabled(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static const ::enterprise_management::LoginVideoCaptureAllowedUrlsProto& login_video_capture_allowed_urls(const ChromeDeviceSettingsProto* msg);
  static void set_has_login_video_capture_allowed_urls(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static const ::enterprise_management::DeviceLoginScreenExtensionsProto& device_login_screen_extensions(const ChromeDeviceSettingsProto* msg);
  static void set_has_device_login_screen_extensions(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static const ::enterprise_management::NetworkThrottlingEnabledProto& network_throttling(const ChromeDeviceSettingsProto* msg);
  static void set_has_network_throttling(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static const ::enterprise_management::DeviceWallpaperImageProto& device_wallpaper_image(const ChromeDeviceSettingsProto* msg);
  static void set_has_device_wallpaper_image(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static const ::enterprise_management::LoginScreenLocalesProto& login_screen_locales(const ChromeDeviceSettingsProto* msg);
  static void set_has_login_screen_locales(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static const ::enterprise_management::LoginScreenInputMethodsProto& login_screen_input_methods(const ChromeDeviceSettingsProto* msg);
  static void set_has_login_screen_input_methods(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static const ::enterprise_management::DeviceEcryptfsMigrationStrategyProto& device_ecryptfs_migration_strategy(const ChromeDeviceSettingsProto* msg);
  static void set_has_device_ecryptfs_migration_strategy(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static const ::enterprise_management::DeviceSecondFactorAuthenticationProto& device_second_factor_authentication(const ChromeDeviceSettingsProto* msg);
  static void set_has_device_second_factor_authentication(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static const ::enterprise_management::CastReceiverNameProto& cast_receiver_name(const ChromeDeviceSettingsProto* msg);
  static void set_has_cast_receiver_name(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static const ::enterprise_management::DeviceOffHoursProto& device_off_hours(const ChromeDeviceSettingsProto* msg);
  static void set_has_device_off_hours(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static const ::enterprise_management::DeviceNativePrintersProto& native_device_printers(const ChromeDeviceSettingsProto* msg);
  static void set_has_native_device_printers(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static const ::enterprise_management::DeviceNativePrintersAccessModeProto& native_device_printers_access_mode(const ChromeDeviceSettingsProto* msg);
  static void set_has_native_device_printers_access_mode(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static const ::enterprise_management::DeviceNativePrintersBlacklistProto& native_device_printers_blacklist(const ChromeDeviceSettingsProto* msg);
  static void set_has_native_device_printers_blacklist(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static const ::enterprise_management::DeviceNativePrintersWhitelistProto& native_device_printers_whitelist(const ChromeDeviceSettingsProto* msg);
  static void set_has_native_device_printers_whitelist(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static const ::enterprise_management::TPMFirmwareUpdateSettingsProto& tpm_firmware_update_settings(const ChromeDeviceSettingsProto* msg);
  static void set_has_tpm_firmware_update_settings(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static const ::enterprise_management::OBSOLETE_MinimumRequiredVersionProto& minimum_required_version(const ChromeDeviceSettingsProto* msg);
  static void set_has_minimum_required_version(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static const ::enterprise_management::DeviceLoginScreenAutoSelectCertificateForUrls& device_login_screen_auto_select_certificate_for_urls(const ChromeDeviceSettingsProto* msg);
  static void set_has_device_login_screen_auto_select_certificate_for_urls(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static const ::enterprise_management::UnaffiliatedArcAllowedProto& unaffiliated_arc_allowed(const ChromeDeviceSettingsProto* msg);
  static void set_has_unaffiliated_arc_allowed(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static const ::enterprise_management::NetworkHostnameProto& network_hostname(const ChromeDeviceSettingsProto* msg);
  static void set_has_network_hostname(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static const ::enterprise_management::DeviceKerberosEncryptionTypesProto& device_kerberos_encryption_types(const ChromeDeviceSettingsProto* msg);
  static void set_has_device_kerberos_encryption_types(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
  static const ::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto& device_user_policy_loopback_processing_mode(const ChromeDeviceSettingsProto* msg);
  static void set_has_device_user_policy_loopback_processing_mode(HasBits* has_bits) {
    (*has_bits)[2] |= 1u;
  }
  static const ::enterprise_management::DeviceLoginScreenIsolateOriginsProto& device_login_screen_isolate_origins(const ChromeDeviceSettingsProto* msg);
  static void set_has_device_login_screen_isolate_origins(HasBits* has_bits) {
    (*has_bits)[2] |= 2u;
  }
  static const ::enterprise_management::DeviceLoginScreenSitePerProcessProto& device_login_screen_site_per_process(const ChromeDeviceSettingsProto* msg);
  static void set_has_device_login_screen_site_per_process(HasBits* has_bits) {
    (*has_bits)[2] |= 4u;
  }
  static const ::enterprise_management::VirtualMachinesAllowedProto& virtual_machines_allowed(const ChromeDeviceSettingsProto* msg);
  static void set_has_virtual_machines_allowed(HasBits* has_bits) {
    (*has_bits)[2] |= 8u;
  }
  static const ::enterprise_management::DeviceMachinePasswordChangeRateProto& device_machine_password_change_rate(const ChromeDeviceSettingsProto* msg);
  static void set_has_device_machine_password_change_rate(HasBits* has_bits) {
    (*has_bits)[2] |= 16u;
  }
  static const ::enterprise_management::SamlLoginAuthenticationTypeProto& saml_login_authentication_type(const ChromeDeviceSettingsProto* msg);
  static void set_has_saml_login_authentication_type(HasBits* has_bits) {
    (*has_bits)[2] |= 32u;
  }
  static const ::enterprise_management::DeviceUnaffiliatedCrostiniAllowedProto& device_unaffiliated_crostini_allowed(const ChromeDeviceSettingsProto* msg);
  static void set_has_device_unaffiliated_crostini_allowed(HasBits* has_bits) {
    (*has_bits)[2] |= 64u;
  }
  static const ::enterprise_management::DeviceWiFiFastTransitionEnabledProto& device_wifi_fast_transition_enabled(const ChromeDeviceSettingsProto* msg);
  static void set_has_device_wifi_fast_transition_enabled(HasBits* has_bits) {
    (*has_bits)[2] |= 128u;
  }
  static const ::enterprise_management::DeviceDisplayResolutionProto& device_display_resolution(const ChromeDeviceSettingsProto* msg);
  static void set_has_device_display_resolution(HasBits* has_bits) {
    (*has_bits)[2] |= 256u;
  }
  static const ::enterprise_management::PluginVmAllowedProto& plugin_vm_allowed(const ChromeDeviceSettingsProto* msg);
  static void set_has_plugin_vm_allowed(HasBits* has_bits) {
    (*has_bits)[2] |= 512u;
  }
  static const ::enterprise_management::DeviceGpoCacheLifetimeProto& device_gpo_cache_lifetime(const ChromeDeviceSettingsProto* msg);
  static void set_has_device_gpo_cache_lifetime(HasBits* has_bits) {
    (*has_bits)[2] |= 1024u;
  }
  static const ::enterprise_management::DeviceAuthDataCacheLifetimeProto& device_auth_data_cache_lifetime(const ChromeDeviceSettingsProto* msg);
  static void set_has_device_auth_data_cache_lifetime(HasBits* has_bits) {
    (*has_bits)[2] |= 2048u;
  }
  static const ::enterprise_management::PluginVmLicenseKeyProto& plugin_vm_license_key(const ChromeDeviceSettingsProto* msg);
  static void set_has_plugin_vm_license_key(HasBits* has_bits) {
    (*has_bits)[2] |= 4096u;
  }
  static const ::enterprise_management::DeviceRebootOnUserSignoutProto& device_reboot_on_user_signout(const ChromeDeviceSettingsProto* msg);
  static void set_has_device_reboot_on_user_signout(HasBits* has_bits) {
    (*has_bits)[2] |= 8192u;
  }
  static const ::enterprise_management::DeviceWilcoDtcAllowedProto& device_wilco_dtc_allowed(const ChromeDeviceSettingsProto* msg);
  static void set_has_device_wilco_dtc_allowed(HasBits* has_bits) {
    (*has_bits)[2] |= 16384u;
  }
  static const ::enterprise_management::DeviceWilcoDtcConfigurationProto& device_wilco_dtc_configuration(const ChromeDeviceSettingsProto* msg);
  static void set_has_device_wilco_dtc_configuration(HasBits* has_bits) {
    (*has_bits)[2] |= 32768u;
  }
  static const ::enterprise_management::DeviceWiFiAllowedProto& device_wifi_allowed(const ChromeDeviceSettingsProto* msg);
  static void set_has_device_wifi_allowed(HasBits* has_bits) {
    (*has_bits)[2] |= 65536u;
  }
  static const ::enterprise_management::DevicePowerPeakShiftProto& device_power_peak_shift(const ChromeDeviceSettingsProto* msg);
  static void set_has_device_power_peak_shift(HasBits* has_bits) {
    (*has_bits)[2] |= 131072u;
  }
  static const ::enterprise_management::DeviceBootOnAcProto& device_boot_on_ac(const ChromeDeviceSettingsProto* msg);
  static void set_has_device_boot_on_ac(HasBits* has_bits) {
    (*has_bits)[2] |= 262144u;
  }
  static const ::enterprise_management::DeviceDockMacAddressSourceProto& device_dock_mac_address_source(const ChromeDeviceSettingsProto* msg);
  static void set_has_device_dock_mac_address_source(HasBits* has_bits) {
    (*has_bits)[2] |= 524288u;
  }
  static const ::enterprise_management::DeviceAdvancedBatteryChargeModeProto& device_advanced_battery_charge_mode(const ChromeDeviceSettingsProto* msg);
  static void set_has_device_advanced_battery_charge_mode(HasBits* has_bits) {
    (*has_bits)[2] |= 1048576u;
  }
  static const ::enterprise_management::DeviceBatteryChargeModeProto& device_battery_charge_mode(const ChromeDeviceSettingsProto* msg);
  static void set_has_device_battery_charge_mode(HasBits* has_bits) {
    (*has_bits)[2] |= 2097152u;
  }
  static const ::enterprise_management::DeviceUsbPowerShareProto& device_usb_power_share(const ChromeDeviceSettingsProto* msg);
  static void set_has_device_usb_power_share(HasBits* has_bits) {
    (*has_bits)[2] |= 4194304u;
  }
  static const ::enterprise_management::DeviceScheduledUpdateCheckProto& device_scheduled_update_check(const ChromeDeviceSettingsProto* msg);
  static void set_has_device_scheduled_update_check(HasBits* has_bits) {
    (*has_bits)[2] |= 8388608u;
  }
  static const ::enterprise_management::DevicePowerwashAllowedProto& device_powerwash_allowed(const ChromeDeviceSettingsProto* msg);
  static void set_has_device_powerwash_allowed(HasBits* has_bits) {
    (*has_bits)[2] |= 16777216u;
  }
  static const ::enterprise_management::DeviceLoginScreenWebUsbAllowDevicesForUrlsProto& device_login_screen_webusb_allow_devices_for_urls(const ChromeDeviceSettingsProto* msg);
  static void set_has_device_login_screen_webusb_allow_devices_for_urls(HasBits* has_bits) {
    (*has_bits)[2] |= 33554432u;
  }
  static const ::enterprise_management::BooleanPolicyProto& device_login_screen_system_info_enforced(const ChromeDeviceSettingsProto* msg);
  static void set_has_device_login_screen_system_info_enforced(HasBits* has_bits) {
    (*has_bits)[2] |= 67108864u;
  }
  static const ::enterprise_management::StringListPolicyProto& device_web_based_attestation_allowed_urls(const ChromeDeviceSettingsProto* msg);
  static void set_has_device_web_based_attestation_allowed_urls(HasBits* has_bits) {
    (*has_bits)[2] |= 134217728u;
  }
  static const ::enterprise_management::BooleanPolicyProto& device_show_numeric_keyboard_for_password(const ChromeDeviceSettingsProto* msg);
  static void set_has_device_show_numeric_keyboard_for_password(HasBits* has_bits) {
    (*has_bits)[2] |= 268435456u;
  }
  static const ::enterprise_management::BooleanPolicyProto& login_screen_primary_mouse_button_switch(const ChromeDeviceSettingsProto* msg);
  static void set_has_login_screen_primary_mouse_button_switch(HasBits* has_bits) {
    (*has_bits)[2] |= 536870912u;
  }
  static const ::enterprise_management::StringPolicyProto& minimum_chrome_version_enforced(const ChromeDeviceSettingsProto* msg);
  static void set_has_minimum_chrome_version_enforced(HasBits* has_bits) {
    (*has_bits)[2] |= 1073741824u;
  }
  static const ::enterprise_management::SystemProxySettingsProto& system_proxy_settings(const ChromeDeviceSettingsProto* msg);
  static void set_has_system_proxy_settings(HasBits* has_bits) {
    (*has_bits)[2] |= 2147483648u;
  }
  static const ::enterprise_management::IntegerPolicyProto& device_chrome_variations_type(const ChromeDeviceSettingsProto* msg);
  static void set_has_device_chrome_variations_type(HasBits* has_bits) {
    (*has_bits)[3] |= 1u;
  }
  static const ::enterprise_management::DeviceLoginScreenPrivacyScreenEnabledProto& device_login_screen_privacy_screen_enabled(const ChromeDeviceSettingsProto* msg);
  static void set_has_device_login_screen_privacy_screen_enabled(HasBits* has_bits) {
    (*has_bits)[3] |= 2u;
  }
  static const ::enterprise_management::RequiredClientCertificateForDeviceProto& required_client_certificate_for_device(const ChromeDeviceSettingsProto* msg);
  static void set_has_required_client_certificate_for_device(HasBits* has_bits) {
    (*has_bits)[3] |= 4u;
  }
};

const ::enterprise_management::DevicePolicyRefreshRateProto&
ChromeDeviceSettingsProto::_Internal::device_policy_refresh_rate(const ChromeDeviceSettingsProto* msg) {
  return *msg->device_policy_refresh_rate_;
}
const ::enterprise_management::UserWhitelistProto&
ChromeDeviceSettingsProto::_Internal::user_whitelist(const ChromeDeviceSettingsProto* msg) {
  return *msg->user_whitelist_;
}
const ::enterprise_management::GuestModeEnabledProto&
ChromeDeviceSettingsProto::_Internal::guest_mode_enabled(const ChromeDeviceSettingsProto* msg) {
  return *msg->guest_mode_enabled_;
}
const ::enterprise_management::OBSOLETE_DeviceProxySettingsProto&
ChromeDeviceSettingsProto::_Internal::device_proxy_settings(const ChromeDeviceSettingsProto* msg) {
  return *msg->device_proxy_settings_;
}
const ::enterprise_management::CameraEnabledProto&
ChromeDeviceSettingsProto::_Internal::camera_enabled(const ChromeDeviceSettingsProto* msg) {
  return *msg->camera_enabled_;
}
const ::enterprise_management::ShowUserNamesOnSigninProto&
ChromeDeviceSettingsProto::_Internal::show_user_names(const ChromeDeviceSettingsProto* msg) {
  return *msg->show_user_names_;
}
const ::enterprise_management::DataRoamingEnabledProto&
ChromeDeviceSettingsProto::_Internal::data_roaming_enabled(const ChromeDeviceSettingsProto* msg) {
  return *msg->data_roaming_enabled_;
}
const ::enterprise_management::AllowNewUsersProto&
ChromeDeviceSettingsProto::_Internal::allow_new_users(const ChromeDeviceSettingsProto* msg) {
  return *msg->allow_new_users_;
}
const ::enterprise_management::MetricsEnabledProto&
ChromeDeviceSettingsProto::_Internal::metrics_enabled(const ChromeDeviceSettingsProto* msg) {
  return *msg->metrics_enabled_;
}
const ::enterprise_management::ReleaseChannelProto&
ChromeDeviceSettingsProto::_Internal::release_channel(const ChromeDeviceSettingsProto* msg) {
  return *msg->release_channel_;
}
const ::enterprise_management::DeviceOpenNetworkConfigurationProto&
ChromeDeviceSettingsProto::_Internal::open_network_configuration(const ChromeDeviceSettingsProto* msg) {
  return *msg->open_network_configuration_;
}
const ::enterprise_management::DeviceReportingProto&
ChromeDeviceSettingsProto::_Internal::device_reporting(const ChromeDeviceSettingsProto* msg) {
  return *msg->device_reporting_;
}
const ::enterprise_management::EphemeralUsersEnabledProto&
ChromeDeviceSettingsProto::_Internal::ephemeral_users_enabled(const ChromeDeviceSettingsProto* msg) {
  return *msg->ephemeral_users_enabled_;
}
const ::enterprise_management::OBSOLETE_AppPackProto&
ChromeDeviceSettingsProto::_Internal::app_pack(const ChromeDeviceSettingsProto* msg) {
  return *msg->app_pack_;
}
const ::enterprise_management::OBSOLETE_ForcedLogoutTimeoutsProto&
ChromeDeviceSettingsProto::_Internal::forced_logout_timeouts(const ChromeDeviceSettingsProto* msg) {
  return *msg->forced_logout_timeouts_;
}
const ::enterprise_management::OBSOLETE_ScreenSaverProto&
ChromeDeviceSettingsProto::_Internal::login_screen_saver(const ChromeDeviceSettingsProto* msg) {
  return *msg->login_screen_saver_;
}
const ::enterprise_management::AutoUpdateSettingsProto&
ChromeDeviceSettingsProto::_Internal::auto_update_settings(const ChromeDeviceSettingsProto* msg) {
  return *msg->auto_update_settings_;
}
const ::enterprise_management::OBSOLETE_StartUpUrlsProto&
ChromeDeviceSettingsProto::_Internal::start_up_urls(const ChromeDeviceSettingsProto* msg) {
  return *msg->start_up_urls_;
}
const ::enterprise_management::OBSOLETE_PinnedAppsProto&
ChromeDeviceSettingsProto::_Internal::pinned_apps(const ChromeDeviceSettingsProto* msg) {
  return *msg->pinned_apps_;
}
const ::enterprise_management::SystemTimezoneProto&
ChromeDeviceSettingsProto::_Internal::system_timezone(const ChromeDeviceSettingsProto* msg) {
  return *msg->system_timezone_;
}
const ::enterprise_management::DeviceLocalAccountsProto&
ChromeDeviceSettingsProto::_Internal::device_local_accounts(const ChromeDeviceSettingsProto* msg) {
  return *msg->device_local_accounts_;
}
const ::enterprise_management::AllowRedeemChromeOsRegistrationOffersProto&
ChromeDeviceSettingsProto::_Internal::allow_redeem_offers(const ChromeDeviceSettingsProto* msg) {
  return *msg->allow_redeem_offers_;
}
const ::enterprise_management::StartUpFlagsProto&
ChromeDeviceSettingsProto::_Internal::start_up_flags(const ChromeDeviceSettingsProto* msg) {
  return *msg->start_up_flags_;
}
const ::enterprise_management::UptimeLimitProto&
ChromeDeviceSettingsProto::_Internal::uptime_limit(const ChromeDeviceSettingsProto* msg) {
  return *msg->uptime_limit_;
}
const ::enterprise_management::VariationsParameterProto&
ChromeDeviceSettingsProto::_Internal::variations_parameter(const ChromeDeviceSettingsProto* msg) {
  return *msg->variations_parameter_;
}
const ::enterprise_management::AttestationSettingsProto&
ChromeDeviceSettingsProto::_Internal::attestation_settings(const ChromeDeviceSettingsProto* msg) {
  return *msg->attestation_settings_;
}
const ::enterprise_management::AccessibilitySettingsProto&
ChromeDeviceSettingsProto::_Internal::accessibility_settings(const ChromeDeviceSettingsProto* msg) {
  return *msg->accessibility_settings_;
}
const ::enterprise_management::OBSOLETE_SupervisedUsersSettingsProto&
ChromeDeviceSettingsProto::_Internal::supervised_users_settings(const ChromeDeviceSettingsProto* msg) {
  return *msg->supervised_users_settings_;
}
const ::enterprise_management::LoginScreenPowerManagementProto&
ChromeDeviceSettingsProto::_Internal::login_screen_power_management(const ChromeDeviceSettingsProto* msg) {
  return *msg->login_screen_power_management_;
}
const ::enterprise_management::SystemUse24HourClockProto&
ChromeDeviceSettingsProto::_Internal::use_24hour_clock(const ChromeDeviceSettingsProto* msg) {
  return *msg->use_24hour_clock_;
}
const ::enterprise_management::AutoCleanupSettigsProto&
ChromeDeviceSettingsProto::_Internal::auto_clean_up_settings(const ChromeDeviceSettingsProto* msg) {
  return *msg->auto_clean_up_settings_;
}
const ::enterprise_management::SystemSettingsProto&
ChromeDeviceSettingsProto::_Internal::system_settings(const ChromeDeviceSettingsProto* msg) {
  return *msg->system_settings_;
}
const ::enterprise_management::SAMLSettingsProto&
ChromeDeviceSettingsProto::_Internal::saml_settings(const ChromeDeviceSettingsProto* msg) {
  return *msg->saml_settings_;
}
const ::enterprise_management::RebootOnShutdownProto&
ChromeDeviceSettingsProto::_Internal::reboot_on_shutdown(const ChromeDeviceSettingsProto* msg) {
  return *msg->reboot_on_shutdown_;
}
const ::enterprise_management::DeviceHeartbeatSettingsProto&
ChromeDeviceSettingsProto::_Internal::device_heartbeat_settings(const ChromeDeviceSettingsProto* msg) {
  return *msg->device_heartbeat_settings_;
}
const ::enterprise_management::ExtensionCacheSizeProto&
ChromeDeviceSettingsProto::_Internal::extension_cache_size(const ChromeDeviceSettingsProto* msg) {
  return *msg->extension_cache_size_;
}
const ::enterprise_management::LoginScreenDomainAutoCompleteProto&
ChromeDeviceSettingsProto::_Internal::login_screen_domain_auto_complete(const ChromeDeviceSettingsProto* msg) {
  return *msg->login_screen_domain_auto_complete_;
}
const ::enterprise_management::DeviceLogUploadSettingsProto&
ChromeDeviceSettingsProto::_Internal::device_log_upload_settings(const ChromeDeviceSettingsProto* msg) {
  return *msg->device_log_upload_settings_;
}
const ::enterprise_management::DisplayRotationDefaultProto&
ChromeDeviceSettingsProto::_Internal::display_rotation_default(const ChromeDeviceSettingsProto* msg) {
  return *msg->display_rotation_default_;
}
const ::enterprise_management::AllowKioskAppControlChromeVersionProto&
ChromeDeviceSettingsProto::_Internal::allow_kiosk_app_control_chrome_version(const ChromeDeviceSettingsProto* msg) {
  return *msg->allow_kiosk_app_control_chrome_version_;
}
const ::enterprise_management::LoginAuthenticationBehaviorProto&
ChromeDeviceSettingsProto::_Internal::login_authentication_behavior(const ChromeDeviceSettingsProto* msg) {
  return *msg->login_authentication_behavior_;
}
const ::enterprise_management::UsbDetachableWhitelistProto&
ChromeDeviceSettingsProto::_Internal::usb_detachable_whitelist(const ChromeDeviceSettingsProto* msg) {
  return *msg->usb_detachable_whitelist_;
}
const ::enterprise_management::AllowBluetoothProto&
ChromeDeviceSettingsProto::_Internal::allow_bluetooth(const ChromeDeviceSettingsProto* msg) {
  return *msg->allow_bluetooth_;
}
const ::enterprise_management::DeviceQuirksDownloadEnabledProto&
ChromeDeviceSettingsProto::_Internal::quirks_download_enabled(const ChromeDeviceSettingsProto* msg) {
  return *msg->quirks_download_enabled_;
}
const ::enterprise_management::LoginVideoCaptureAllowedUrlsProto&
ChromeDeviceSettingsProto::_Internal::login_video_capture_allowed_urls(const ChromeDeviceSettingsProto* msg) {
  return *msg->login_video_capture_allowed_urls_;
}
const ::enterprise_management::DeviceLoginScreenExtensionsProto&
ChromeDeviceSettingsProto::_Internal::device_login_screen_extensions(const ChromeDeviceSettingsProto* msg) {
  return *msg->device_login_screen_extensions_;
}
const ::enterprise_management::NetworkThrottlingEnabledProto&
ChromeDeviceSettingsProto::_Internal::network_throttling(const ChromeDeviceSettingsProto* msg) {
  return *msg->network_throttling_;
}
const ::enterprise_management::DeviceWallpaperImageProto&
ChromeDeviceSettingsProto::_Internal::device_wallpaper_image(const ChromeDeviceSettingsProto* msg) {
  return *msg->device_wallpaper_image_;
}
const ::enterprise_management::LoginScreenLocalesProto&
ChromeDeviceSettingsProto::_Internal::login_screen_locales(const ChromeDeviceSettingsProto* msg) {
  return *msg->login_screen_locales_;
}
const ::enterprise_management::LoginScreenInputMethodsProto&
ChromeDeviceSettingsProto::_Internal::login_screen_input_methods(const ChromeDeviceSettingsProto* msg) {
  return *msg->login_screen_input_methods_;
}
const ::enterprise_management::DeviceEcryptfsMigrationStrategyProto&
ChromeDeviceSettingsProto::_Internal::device_ecryptfs_migration_strategy(const ChromeDeviceSettingsProto* msg) {
  return *msg->device_ecryptfs_migration_strategy_;
}
const ::enterprise_management::DeviceSecondFactorAuthenticationProto&
ChromeDeviceSettingsProto::_Internal::device_second_factor_authentication(const ChromeDeviceSettingsProto* msg) {
  return *msg->device_second_factor_authentication_;
}
const ::enterprise_management::CastReceiverNameProto&
ChromeDeviceSettingsProto::_Internal::cast_receiver_name(const ChromeDeviceSettingsProto* msg) {
  return *msg->cast_receiver_name_;
}
const ::enterprise_management::DeviceOffHoursProto&
ChromeDeviceSettingsProto::_Internal::device_off_hours(const ChromeDeviceSettingsProto* msg) {
  return *msg->device_off_hours_;
}
const ::enterprise_management::DeviceNativePrintersProto&
ChromeDeviceSettingsProto::_Internal::native_device_printers(const ChromeDeviceSettingsProto* msg) {
  return *msg->native_device_printers_;
}
const ::enterprise_management::DeviceNativePrintersAccessModeProto&
ChromeDeviceSettingsProto::_Internal::native_device_printers_access_mode(const ChromeDeviceSettingsProto* msg) {
  return *msg->native_device_printers_access_mode_;
}
const ::enterprise_management::DeviceNativePrintersBlacklistProto&
ChromeDeviceSettingsProto::_Internal::native_device_printers_blacklist(const ChromeDeviceSettingsProto* msg) {
  return *msg->native_device_printers_blacklist_;
}
const ::enterprise_management::DeviceNativePrintersWhitelistProto&
ChromeDeviceSettingsProto::_Internal::native_device_printers_whitelist(const ChromeDeviceSettingsProto* msg) {
  return *msg->native_device_printers_whitelist_;
}
const ::enterprise_management::TPMFirmwareUpdateSettingsProto&
ChromeDeviceSettingsProto::_Internal::tpm_firmware_update_settings(const ChromeDeviceSettingsProto* msg) {
  return *msg->tpm_firmware_update_settings_;
}
const ::enterprise_management::OBSOLETE_MinimumRequiredVersionProto&
ChromeDeviceSettingsProto::_Internal::minimum_required_version(const ChromeDeviceSettingsProto* msg) {
  return *msg->minimum_required_version_;
}
const ::enterprise_management::DeviceLoginScreenAutoSelectCertificateForUrls&
ChromeDeviceSettingsProto::_Internal::device_login_screen_auto_select_certificate_for_urls(const ChromeDeviceSettingsProto* msg) {
  return *msg->device_login_screen_auto_select_certificate_for_urls_;
}
const ::enterprise_management::UnaffiliatedArcAllowedProto&
ChromeDeviceSettingsProto::_Internal::unaffiliated_arc_allowed(const ChromeDeviceSettingsProto* msg) {
  return *msg->unaffiliated_arc_allowed_;
}
const ::enterprise_management::NetworkHostnameProto&
ChromeDeviceSettingsProto::_Internal::network_hostname(const ChromeDeviceSettingsProto* msg) {
  return *msg->network_hostname_;
}
const ::enterprise_management::DeviceKerberosEncryptionTypesProto&
ChromeDeviceSettingsProto::_Internal::device_kerberos_encryption_types(const ChromeDeviceSettingsProto* msg) {
  return *msg->device_kerberos_encryption_types_;
}
const ::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto&
ChromeDeviceSettingsProto::_Internal::device_user_policy_loopback_processing_mode(const ChromeDeviceSettingsProto* msg) {
  return *msg->device_user_policy_loopback_processing_mode_;
}
const ::enterprise_management::DeviceLoginScreenIsolateOriginsProto&
ChromeDeviceSettingsProto::_Internal::device_login_screen_isolate_origins(const ChromeDeviceSettingsProto* msg) {
  return *msg->device_login_screen_isolate_origins_;
}
const ::enterprise_management::DeviceLoginScreenSitePerProcessProto&
ChromeDeviceSettingsProto::_Internal::device_login_screen_site_per_process(const ChromeDeviceSettingsProto* msg) {
  return *msg->device_login_screen_site_per_process_;
}
const ::enterprise_management::VirtualMachinesAllowedProto&
ChromeDeviceSettingsProto::_Internal::virtual_machines_allowed(const ChromeDeviceSettingsProto* msg) {
  return *msg->virtual_machines_allowed_;
}
const ::enterprise_management::DeviceMachinePasswordChangeRateProto&
ChromeDeviceSettingsProto::_Internal::device_machine_password_change_rate(const ChromeDeviceSettingsProto* msg) {
  return *msg->device_machine_password_change_rate_;
}
const ::enterprise_management::SamlLoginAuthenticationTypeProto&
ChromeDeviceSettingsProto::_Internal::saml_login_authentication_type(const ChromeDeviceSettingsProto* msg) {
  return *msg->saml_login_authentication_type_;
}
const ::enterprise_management::DeviceUnaffiliatedCrostiniAllowedProto&
ChromeDeviceSettingsProto::_Internal::device_unaffiliated_crostini_allowed(const ChromeDeviceSettingsProto* msg) {
  return *msg->device_unaffiliated_crostini_allowed_;
}
const ::enterprise_management::DeviceWiFiFastTransitionEnabledProto&
ChromeDeviceSettingsProto::_Internal::device_wifi_fast_transition_enabled(const ChromeDeviceSettingsProto* msg) {
  return *msg->device_wifi_fast_transition_enabled_;
}
const ::enterprise_management::DeviceDisplayResolutionProto&
ChromeDeviceSettingsProto::_Internal::device_display_resolution(const ChromeDeviceSettingsProto* msg) {
  return *msg->device_display_resolution_;
}
const ::enterprise_management::PluginVmAllowedProto&
ChromeDeviceSettingsProto::_Internal::plugin_vm_allowed(const ChromeDeviceSettingsProto* msg) {
  return *msg->plugin_vm_allowed_;
}
const ::enterprise_management::DeviceGpoCacheLifetimeProto&
ChromeDeviceSettingsProto::_Internal::device_gpo_cache_lifetime(const ChromeDeviceSettingsProto* msg) {
  return *msg->device_gpo_cache_lifetime_;
}
const ::enterprise_management::DeviceAuthDataCacheLifetimeProto&
ChromeDeviceSettingsProto::_Internal::device_auth_data_cache_lifetime(const ChromeDeviceSettingsProto* msg) {
  return *msg->device_auth_data_cache_lifetime_;
}
const ::enterprise_management::PluginVmLicenseKeyProto&
ChromeDeviceSettingsProto::_Internal::plugin_vm_license_key(const ChromeDeviceSettingsProto* msg) {
  return *msg->plugin_vm_license_key_;
}
const ::enterprise_management::DeviceRebootOnUserSignoutProto&
ChromeDeviceSettingsProto::_Internal::device_reboot_on_user_signout(const ChromeDeviceSettingsProto* msg) {
  return *msg->device_reboot_on_user_signout_;
}
const ::enterprise_management::DeviceWilcoDtcAllowedProto&
ChromeDeviceSettingsProto::_Internal::device_wilco_dtc_allowed(const ChromeDeviceSettingsProto* msg) {
  return *msg->device_wilco_dtc_allowed_;
}
const ::enterprise_management::DeviceWilcoDtcConfigurationProto&
ChromeDeviceSettingsProto::_Internal::device_wilco_dtc_configuration(const ChromeDeviceSettingsProto* msg) {
  return *msg->device_wilco_dtc_configuration_;
}
const ::enterprise_management::DeviceWiFiAllowedProto&
ChromeDeviceSettingsProto::_Internal::device_wifi_allowed(const ChromeDeviceSettingsProto* msg) {
  return *msg->device_wifi_allowed_;
}
const ::enterprise_management::DevicePowerPeakShiftProto&
ChromeDeviceSettingsProto::_Internal::device_power_peak_shift(const ChromeDeviceSettingsProto* msg) {
  return *msg->device_power_peak_shift_;
}
const ::enterprise_management::DeviceBootOnAcProto&
ChromeDeviceSettingsProto::_Internal::device_boot_on_ac(const ChromeDeviceSettingsProto* msg) {
  return *msg->device_boot_on_ac_;
}
const ::enterprise_management::DeviceDockMacAddressSourceProto&
ChromeDeviceSettingsProto::_Internal::device_dock_mac_address_source(const ChromeDeviceSettingsProto* msg) {
  return *msg->device_dock_mac_address_source_;
}
const ::enterprise_management::DeviceAdvancedBatteryChargeModeProto&
ChromeDeviceSettingsProto::_Internal::device_advanced_battery_charge_mode(const ChromeDeviceSettingsProto* msg) {
  return *msg->device_advanced_battery_charge_mode_;
}
const ::enterprise_management::DeviceBatteryChargeModeProto&
ChromeDeviceSettingsProto::_Internal::device_battery_charge_mode(const ChromeDeviceSettingsProto* msg) {
  return *msg->device_battery_charge_mode_;
}
const ::enterprise_management::DeviceUsbPowerShareProto&
ChromeDeviceSettingsProto::_Internal::device_usb_power_share(const ChromeDeviceSettingsProto* msg) {
  return *msg->device_usb_power_share_;
}
const ::enterprise_management::DeviceScheduledUpdateCheckProto&
ChromeDeviceSettingsProto::_Internal::device_scheduled_update_check(const ChromeDeviceSettingsProto* msg) {
  return *msg->device_scheduled_update_check_;
}
const ::enterprise_management::DevicePowerwashAllowedProto&
ChromeDeviceSettingsProto::_Internal::device_powerwash_allowed(const ChromeDeviceSettingsProto* msg) {
  return *msg->device_powerwash_allowed_;
}
const ::enterprise_management::DeviceLoginScreenWebUsbAllowDevicesForUrlsProto&
ChromeDeviceSettingsProto::_Internal::device_login_screen_webusb_allow_devices_for_urls(const ChromeDeviceSettingsProto* msg) {
  return *msg->device_login_screen_webusb_allow_devices_for_urls_;
}
const ::enterprise_management::BooleanPolicyProto&
ChromeDeviceSettingsProto::_Internal::device_login_screen_system_info_enforced(const ChromeDeviceSettingsProto* msg) {
  return *msg->device_login_screen_system_info_enforced_;
}
const ::enterprise_management::StringListPolicyProto&
ChromeDeviceSettingsProto::_Internal::device_web_based_attestation_allowed_urls(const ChromeDeviceSettingsProto* msg) {
  return *msg->device_web_based_attestation_allowed_urls_;
}
const ::enterprise_management::BooleanPolicyProto&
ChromeDeviceSettingsProto::_Internal::device_show_numeric_keyboard_for_password(const ChromeDeviceSettingsProto* msg) {
  return *msg->device_show_numeric_keyboard_for_password_;
}
const ::enterprise_management::BooleanPolicyProto&
ChromeDeviceSettingsProto::_Internal::login_screen_primary_mouse_button_switch(const ChromeDeviceSettingsProto* msg) {
  return *msg->login_screen_primary_mouse_button_switch_;
}
const ::enterprise_management::StringPolicyProto&
ChromeDeviceSettingsProto::_Internal::minimum_chrome_version_enforced(const ChromeDeviceSettingsProto* msg) {
  return *msg->minimum_chrome_version_enforced_;
}
const ::enterprise_management::SystemProxySettingsProto&
ChromeDeviceSettingsProto::_Internal::system_proxy_settings(const ChromeDeviceSettingsProto* msg) {
  return *msg->system_proxy_settings_;
}
const ::enterprise_management::IntegerPolicyProto&
ChromeDeviceSettingsProto::_Internal::device_chrome_variations_type(const ChromeDeviceSettingsProto* msg) {
  return *msg->device_chrome_variations_type_;
}
const ::enterprise_management::DeviceLoginScreenPrivacyScreenEnabledProto&
ChromeDeviceSettingsProto::_Internal::device_login_screen_privacy_screen_enabled(const ChromeDeviceSettingsProto* msg) {
  return *msg->device_login_screen_privacy_screen_enabled_;
}
const ::enterprise_management::RequiredClientCertificateForDeviceProto&
ChromeDeviceSettingsProto::_Internal::required_client_certificate_for_device(const ChromeDeviceSettingsProto* msg) {
  return *msg->required_client_certificate_for_device_;
}
void ChromeDeviceSettingsProto::clear_device_login_screen_system_info_enforced() {
  if (device_login_screen_system_info_enforced_ != nullptr) device_login_screen_system_info_enforced_->Clear();
  _has_bits_[2] &= ~0x04000000u;
}
void ChromeDeviceSettingsProto::clear_device_web_based_attestation_allowed_urls() {
  if (device_web_based_attestation_allowed_urls_ != nullptr) device_web_based_attestation_allowed_urls_->Clear();
  _has_bits_[2] &= ~0x08000000u;
}
void ChromeDeviceSettingsProto::clear_device_show_numeric_keyboard_for_password() {
  if (device_show_numeric_keyboard_for_password_ != nullptr) device_show_numeric_keyboard_for_password_->Clear();
  _has_bits_[2] &= ~0x10000000u;
}
void ChromeDeviceSettingsProto::clear_login_screen_primary_mouse_button_switch() {
  if (login_screen_primary_mouse_button_switch_ != nullptr) login_screen_primary_mouse_button_switch_->Clear();
  _has_bits_[2] &= ~0x20000000u;
}
void ChromeDeviceSettingsProto::clear_minimum_chrome_version_enforced() {
  if (minimum_chrome_version_enforced_ != nullptr) minimum_chrome_version_enforced_->Clear();
  _has_bits_[2] &= ~0x40000000u;
}
void ChromeDeviceSettingsProto::clear_device_chrome_variations_type() {
  if (device_chrome_variations_type_ != nullptr) device_chrome_variations_type_->Clear();
  _has_bits_[3] &= ~0x00000001u;
}
ChromeDeviceSettingsProto::ChromeDeviceSettingsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.ChromeDeviceSettingsProto)
}
ChromeDeviceSettingsProto::ChromeDeviceSettingsProto(const ChromeDeviceSettingsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_device_policy_refresh_rate()) {
    device_policy_refresh_rate_ = new ::enterprise_management::DevicePolicyRefreshRateProto(*from.device_policy_refresh_rate_);
  } else {
    device_policy_refresh_rate_ = nullptr;
  }
  if (from._internal_has_user_whitelist()) {
    user_whitelist_ = new ::enterprise_management::UserWhitelistProto(*from.user_whitelist_);
  } else {
    user_whitelist_ = nullptr;
  }
  if (from._internal_has_guest_mode_enabled()) {
    guest_mode_enabled_ = new ::enterprise_management::GuestModeEnabledProto(*from.guest_mode_enabled_);
  } else {
    guest_mode_enabled_ = nullptr;
  }
  if (from._internal_has_device_proxy_settings()) {
    device_proxy_settings_ = new ::enterprise_management::OBSOLETE_DeviceProxySettingsProto(*from.device_proxy_settings_);
  } else {
    device_proxy_settings_ = nullptr;
  }
  if (from._internal_has_camera_enabled()) {
    camera_enabled_ = new ::enterprise_management::CameraEnabledProto(*from.camera_enabled_);
  } else {
    camera_enabled_ = nullptr;
  }
  if (from._internal_has_show_user_names()) {
    show_user_names_ = new ::enterprise_management::ShowUserNamesOnSigninProto(*from.show_user_names_);
  } else {
    show_user_names_ = nullptr;
  }
  if (from._internal_has_data_roaming_enabled()) {
    data_roaming_enabled_ = new ::enterprise_management::DataRoamingEnabledProto(*from.data_roaming_enabled_);
  } else {
    data_roaming_enabled_ = nullptr;
  }
  if (from._internal_has_allow_new_users()) {
    allow_new_users_ = new ::enterprise_management::AllowNewUsersProto(*from.allow_new_users_);
  } else {
    allow_new_users_ = nullptr;
  }
  if (from._internal_has_metrics_enabled()) {
    metrics_enabled_ = new ::enterprise_management::MetricsEnabledProto(*from.metrics_enabled_);
  } else {
    metrics_enabled_ = nullptr;
  }
  if (from._internal_has_release_channel()) {
    release_channel_ = new ::enterprise_management::ReleaseChannelProto(*from.release_channel_);
  } else {
    release_channel_ = nullptr;
  }
  if (from._internal_has_open_network_configuration()) {
    open_network_configuration_ = new ::enterprise_management::DeviceOpenNetworkConfigurationProto(*from.open_network_configuration_);
  } else {
    open_network_configuration_ = nullptr;
  }
  if (from._internal_has_device_reporting()) {
    device_reporting_ = new ::enterprise_management::DeviceReportingProto(*from.device_reporting_);
  } else {
    device_reporting_ = nullptr;
  }
  if (from._internal_has_ephemeral_users_enabled()) {
    ephemeral_users_enabled_ = new ::enterprise_management::EphemeralUsersEnabledProto(*from.ephemeral_users_enabled_);
  } else {
    ephemeral_users_enabled_ = nullptr;
  }
  if (from._internal_has_app_pack()) {
    app_pack_ = new ::enterprise_management::OBSOLETE_AppPackProto(*from.app_pack_);
  } else {
    app_pack_ = nullptr;
  }
  if (from._internal_has_forced_logout_timeouts()) {
    forced_logout_timeouts_ = new ::enterprise_management::OBSOLETE_ForcedLogoutTimeoutsProto(*from.forced_logout_timeouts_);
  } else {
    forced_logout_timeouts_ = nullptr;
  }
  if (from._internal_has_login_screen_saver()) {
    login_screen_saver_ = new ::enterprise_management::OBSOLETE_ScreenSaverProto(*from.login_screen_saver_);
  } else {
    login_screen_saver_ = nullptr;
  }
  if (from._internal_has_auto_update_settings()) {
    auto_update_settings_ = new ::enterprise_management::AutoUpdateSettingsProto(*from.auto_update_settings_);
  } else {
    auto_update_settings_ = nullptr;
  }
  if (from._internal_has_start_up_urls()) {
    start_up_urls_ = new ::enterprise_management::OBSOLETE_StartUpUrlsProto(*from.start_up_urls_);
  } else {
    start_up_urls_ = nullptr;
  }
  if (from._internal_has_pinned_apps()) {
    pinned_apps_ = new ::enterprise_management::OBSOLETE_PinnedAppsProto(*from.pinned_apps_);
  } else {
    pinned_apps_ = nullptr;
  }
  if (from._internal_has_system_timezone()) {
    system_timezone_ = new ::enterprise_management::SystemTimezoneProto(*from.system_timezone_);
  } else {
    system_timezone_ = nullptr;
  }
  if (from._internal_has_device_local_accounts()) {
    device_local_accounts_ = new ::enterprise_management::DeviceLocalAccountsProto(*from.device_local_accounts_);
  } else {
    device_local_accounts_ = nullptr;
  }
  if (from._internal_has_allow_redeem_offers()) {
    allow_redeem_offers_ = new ::enterprise_management::AllowRedeemChromeOsRegistrationOffersProto(*from.allow_redeem_offers_);
  } else {
    allow_redeem_offers_ = nullptr;
  }
  if (from._internal_has_start_up_flags()) {
    start_up_flags_ = new ::enterprise_management::StartUpFlagsProto(*from.start_up_flags_);
  } else {
    start_up_flags_ = nullptr;
  }
  if (from._internal_has_uptime_limit()) {
    uptime_limit_ = new ::enterprise_management::UptimeLimitProto(*from.uptime_limit_);
  } else {
    uptime_limit_ = nullptr;
  }
  if (from._internal_has_variations_parameter()) {
    variations_parameter_ = new ::enterprise_management::VariationsParameterProto(*from.variations_parameter_);
  } else {
    variations_parameter_ = nullptr;
  }
  if (from._internal_has_attestation_settings()) {
    attestation_settings_ = new ::enterprise_management::AttestationSettingsProto(*from.attestation_settings_);
  } else {
    attestation_settings_ = nullptr;
  }
  if (from._internal_has_accessibility_settings()) {
    accessibility_settings_ = new ::enterprise_management::AccessibilitySettingsProto(*from.accessibility_settings_);
  } else {
    accessibility_settings_ = nullptr;
  }
  if (from._internal_has_supervised_users_settings()) {
    supervised_users_settings_ = new ::enterprise_management::OBSOLETE_SupervisedUsersSettingsProto(*from.supervised_users_settings_);
  } else {
    supervised_users_settings_ = nullptr;
  }
  if (from._internal_has_login_screen_power_management()) {
    login_screen_power_management_ = new ::enterprise_management::LoginScreenPowerManagementProto(*from.login_screen_power_management_);
  } else {
    login_screen_power_management_ = nullptr;
  }
  if (from._internal_has_use_24hour_clock()) {
    use_24hour_clock_ = new ::enterprise_management::SystemUse24HourClockProto(*from.use_24hour_clock_);
  } else {
    use_24hour_clock_ = nullptr;
  }
  if (from._internal_has_auto_clean_up_settings()) {
    auto_clean_up_settings_ = new ::enterprise_management::AutoCleanupSettigsProto(*from.auto_clean_up_settings_);
  } else {
    auto_clean_up_settings_ = nullptr;
  }
  if (from._internal_has_system_settings()) {
    system_settings_ = new ::enterprise_management::SystemSettingsProto(*from.system_settings_);
  } else {
    system_settings_ = nullptr;
  }
  if (from._internal_has_saml_settings()) {
    saml_settings_ = new ::enterprise_management::SAMLSettingsProto(*from.saml_settings_);
  } else {
    saml_settings_ = nullptr;
  }
  if (from._internal_has_reboot_on_shutdown()) {
    reboot_on_shutdown_ = new ::enterprise_management::RebootOnShutdownProto(*from.reboot_on_shutdown_);
  } else {
    reboot_on_shutdown_ = nullptr;
  }
  if (from._internal_has_device_heartbeat_settings()) {
    device_heartbeat_settings_ = new ::enterprise_management::DeviceHeartbeatSettingsProto(*from.device_heartbeat_settings_);
  } else {
    device_heartbeat_settings_ = nullptr;
  }
  if (from._internal_has_extension_cache_size()) {
    extension_cache_size_ = new ::enterprise_management::ExtensionCacheSizeProto(*from.extension_cache_size_);
  } else {
    extension_cache_size_ = nullptr;
  }
  if (from._internal_has_login_screen_domain_auto_complete()) {
    login_screen_domain_auto_complete_ = new ::enterprise_management::LoginScreenDomainAutoCompleteProto(*from.login_screen_domain_auto_complete_);
  } else {
    login_screen_domain_auto_complete_ = nullptr;
  }
  if (from._internal_has_device_log_upload_settings()) {
    device_log_upload_settings_ = new ::enterprise_management::DeviceLogUploadSettingsProto(*from.device_log_upload_settings_);
  } else {
    device_log_upload_settings_ = nullptr;
  }
  if (from._internal_has_display_rotation_default()) {
    display_rotation_default_ = new ::enterprise_management::DisplayRotationDefaultProto(*from.display_rotation_default_);
  } else {
    display_rotation_default_ = nullptr;
  }
  if (from._internal_has_allow_kiosk_app_control_chrome_version()) {
    allow_kiosk_app_control_chrome_version_ = new ::enterprise_management::AllowKioskAppControlChromeVersionProto(*from.allow_kiosk_app_control_chrome_version_);
  } else {
    allow_kiosk_app_control_chrome_version_ = nullptr;
  }
  if (from._internal_has_login_authentication_behavior()) {
    login_authentication_behavior_ = new ::enterprise_management::LoginAuthenticationBehaviorProto(*from.login_authentication_behavior_);
  } else {
    login_authentication_behavior_ = nullptr;
  }
  if (from._internal_has_usb_detachable_whitelist()) {
    usb_detachable_whitelist_ = new ::enterprise_management::UsbDetachableWhitelistProto(*from.usb_detachable_whitelist_);
  } else {
    usb_detachable_whitelist_ = nullptr;
  }
  if (from._internal_has_allow_bluetooth()) {
    allow_bluetooth_ = new ::enterprise_management::AllowBluetoothProto(*from.allow_bluetooth_);
  } else {
    allow_bluetooth_ = nullptr;
  }
  if (from._internal_has_quirks_download_enabled()) {
    quirks_download_enabled_ = new ::enterprise_management::DeviceQuirksDownloadEnabledProto(*from.quirks_download_enabled_);
  } else {
    quirks_download_enabled_ = nullptr;
  }
  if (from._internal_has_login_video_capture_allowed_urls()) {
    login_video_capture_allowed_urls_ = new ::enterprise_management::LoginVideoCaptureAllowedUrlsProto(*from.login_video_capture_allowed_urls_);
  } else {
    login_video_capture_allowed_urls_ = nullptr;
  }
  if (from._internal_has_device_login_screen_extensions()) {
    device_login_screen_extensions_ = new ::enterprise_management::DeviceLoginScreenExtensionsProto(*from.device_login_screen_extensions_);
  } else {
    device_login_screen_extensions_ = nullptr;
  }
  if (from._internal_has_network_throttling()) {
    network_throttling_ = new ::enterprise_management::NetworkThrottlingEnabledProto(*from.network_throttling_);
  } else {
    network_throttling_ = nullptr;
  }
  if (from._internal_has_device_wallpaper_image()) {
    device_wallpaper_image_ = new ::enterprise_management::DeviceWallpaperImageProto(*from.device_wallpaper_image_);
  } else {
    device_wallpaper_image_ = nullptr;
  }
  if (from._internal_has_login_screen_locales()) {
    login_screen_locales_ = new ::enterprise_management::LoginScreenLocalesProto(*from.login_screen_locales_);
  } else {
    login_screen_locales_ = nullptr;
  }
  if (from._internal_has_login_screen_input_methods()) {
    login_screen_input_methods_ = new ::enterprise_management::LoginScreenInputMethodsProto(*from.login_screen_input_methods_);
  } else {
    login_screen_input_methods_ = nullptr;
  }
  if (from._internal_has_device_ecryptfs_migration_strategy()) {
    device_ecryptfs_migration_strategy_ = new ::enterprise_management::DeviceEcryptfsMigrationStrategyProto(*from.device_ecryptfs_migration_strategy_);
  } else {
    device_ecryptfs_migration_strategy_ = nullptr;
  }
  if (from._internal_has_device_second_factor_authentication()) {
    device_second_factor_authentication_ = new ::enterprise_management::DeviceSecondFactorAuthenticationProto(*from.device_second_factor_authentication_);
  } else {
    device_second_factor_authentication_ = nullptr;
  }
  if (from._internal_has_cast_receiver_name()) {
    cast_receiver_name_ = new ::enterprise_management::CastReceiverNameProto(*from.cast_receiver_name_);
  } else {
    cast_receiver_name_ = nullptr;
  }
  if (from._internal_has_device_off_hours()) {
    device_off_hours_ = new ::enterprise_management::DeviceOffHoursProto(*from.device_off_hours_);
  } else {
    device_off_hours_ = nullptr;
  }
  if (from._internal_has_native_device_printers()) {
    native_device_printers_ = new ::enterprise_management::DeviceNativePrintersProto(*from.native_device_printers_);
  } else {
    native_device_printers_ = nullptr;
  }
  if (from._internal_has_native_device_printers_access_mode()) {
    native_device_printers_access_mode_ = new ::enterprise_management::DeviceNativePrintersAccessModeProto(*from.native_device_printers_access_mode_);
  } else {
    native_device_printers_access_mode_ = nullptr;
  }
  if (from._internal_has_native_device_printers_blacklist()) {
    native_device_printers_blacklist_ = new ::enterprise_management::DeviceNativePrintersBlacklistProto(*from.native_device_printers_blacklist_);
  } else {
    native_device_printers_blacklist_ = nullptr;
  }
  if (from._internal_has_native_device_printers_whitelist()) {
    native_device_printers_whitelist_ = new ::enterprise_management::DeviceNativePrintersWhitelistProto(*from.native_device_printers_whitelist_);
  } else {
    native_device_printers_whitelist_ = nullptr;
  }
  if (from._internal_has_tpm_firmware_update_settings()) {
    tpm_firmware_update_settings_ = new ::enterprise_management::TPMFirmwareUpdateSettingsProto(*from.tpm_firmware_update_settings_);
  } else {
    tpm_firmware_update_settings_ = nullptr;
  }
  if (from._internal_has_minimum_required_version()) {
    minimum_required_version_ = new ::enterprise_management::OBSOLETE_MinimumRequiredVersionProto(*from.minimum_required_version_);
  } else {
    minimum_required_version_ = nullptr;
  }
  if (from._internal_has_device_login_screen_auto_select_certificate_for_urls()) {
    device_login_screen_auto_select_certificate_for_urls_ = new ::enterprise_management::DeviceLoginScreenAutoSelectCertificateForUrls(*from.device_login_screen_auto_select_certificate_for_urls_);
  } else {
    device_login_screen_auto_select_certificate_for_urls_ = nullptr;
  }
  if (from._internal_has_unaffiliated_arc_allowed()) {
    unaffiliated_arc_allowed_ = new ::enterprise_management::UnaffiliatedArcAllowedProto(*from.unaffiliated_arc_allowed_);
  } else {
    unaffiliated_arc_allowed_ = nullptr;
  }
  if (from._internal_has_network_hostname()) {
    network_hostname_ = new ::enterprise_management::NetworkHostnameProto(*from.network_hostname_);
  } else {
    network_hostname_ = nullptr;
  }
  if (from._internal_has_device_kerberos_encryption_types()) {
    device_kerberos_encryption_types_ = new ::enterprise_management::DeviceKerberosEncryptionTypesProto(*from.device_kerberos_encryption_types_);
  } else {
    device_kerberos_encryption_types_ = nullptr;
  }
  if (from._internal_has_device_user_policy_loopback_processing_mode()) {
    device_user_policy_loopback_processing_mode_ = new ::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto(*from.device_user_policy_loopback_processing_mode_);
  } else {
    device_user_policy_loopback_processing_mode_ = nullptr;
  }
  if (from._internal_has_device_login_screen_isolate_origins()) {
    device_login_screen_isolate_origins_ = new ::enterprise_management::DeviceLoginScreenIsolateOriginsProto(*from.device_login_screen_isolate_origins_);
  } else {
    device_login_screen_isolate_origins_ = nullptr;
  }
  if (from._internal_has_device_login_screen_site_per_process()) {
    device_login_screen_site_per_process_ = new ::enterprise_management::DeviceLoginScreenSitePerProcessProto(*from.device_login_screen_site_per_process_);
  } else {
    device_login_screen_site_per_process_ = nullptr;
  }
  if (from._internal_has_virtual_machines_allowed()) {
    virtual_machines_allowed_ = new ::enterprise_management::VirtualMachinesAllowedProto(*from.virtual_machines_allowed_);
  } else {
    virtual_machines_allowed_ = nullptr;
  }
  if (from._internal_has_device_machine_password_change_rate()) {
    device_machine_password_change_rate_ = new ::enterprise_management::DeviceMachinePasswordChangeRateProto(*from.device_machine_password_change_rate_);
  } else {
    device_machine_password_change_rate_ = nullptr;
  }
  if (from._internal_has_saml_login_authentication_type()) {
    saml_login_authentication_type_ = new ::enterprise_management::SamlLoginAuthenticationTypeProto(*from.saml_login_authentication_type_);
  } else {
    saml_login_authentication_type_ = nullptr;
  }
  if (from._internal_has_device_unaffiliated_crostini_allowed()) {
    device_unaffiliated_crostini_allowed_ = new ::enterprise_management::DeviceUnaffiliatedCrostiniAllowedProto(*from.device_unaffiliated_crostini_allowed_);
  } else {
    device_unaffiliated_crostini_allowed_ = nullptr;
  }
  if (from._internal_has_device_wifi_fast_transition_enabled()) {
    device_wifi_fast_transition_enabled_ = new ::enterprise_management::DeviceWiFiFastTransitionEnabledProto(*from.device_wifi_fast_transition_enabled_);
  } else {
    device_wifi_fast_transition_enabled_ = nullptr;
  }
  if (from._internal_has_device_display_resolution()) {
    device_display_resolution_ = new ::enterprise_management::DeviceDisplayResolutionProto(*from.device_display_resolution_);
  } else {
    device_display_resolution_ = nullptr;
  }
  if (from._internal_has_plugin_vm_allowed()) {
    plugin_vm_allowed_ = new ::enterprise_management::PluginVmAllowedProto(*from.plugin_vm_allowed_);
  } else {
    plugin_vm_allowed_ = nullptr;
  }
  if (from._internal_has_device_gpo_cache_lifetime()) {
    device_gpo_cache_lifetime_ = new ::enterprise_management::DeviceGpoCacheLifetimeProto(*from.device_gpo_cache_lifetime_);
  } else {
    device_gpo_cache_lifetime_ = nullptr;
  }
  if (from._internal_has_device_auth_data_cache_lifetime()) {
    device_auth_data_cache_lifetime_ = new ::enterprise_management::DeviceAuthDataCacheLifetimeProto(*from.device_auth_data_cache_lifetime_);
  } else {
    device_auth_data_cache_lifetime_ = nullptr;
  }
  if (from._internal_has_plugin_vm_license_key()) {
    plugin_vm_license_key_ = new ::enterprise_management::PluginVmLicenseKeyProto(*from.plugin_vm_license_key_);
  } else {
    plugin_vm_license_key_ = nullptr;
  }
  if (from._internal_has_device_reboot_on_user_signout()) {
    device_reboot_on_user_signout_ = new ::enterprise_management::DeviceRebootOnUserSignoutProto(*from.device_reboot_on_user_signout_);
  } else {
    device_reboot_on_user_signout_ = nullptr;
  }
  if (from._internal_has_device_wilco_dtc_allowed()) {
    device_wilco_dtc_allowed_ = new ::enterprise_management::DeviceWilcoDtcAllowedProto(*from.device_wilco_dtc_allowed_);
  } else {
    device_wilco_dtc_allowed_ = nullptr;
  }
  if (from._internal_has_device_wilco_dtc_configuration()) {
    device_wilco_dtc_configuration_ = new ::enterprise_management::DeviceWilcoDtcConfigurationProto(*from.device_wilco_dtc_configuration_);
  } else {
    device_wilco_dtc_configuration_ = nullptr;
  }
  if (from._internal_has_device_wifi_allowed()) {
    device_wifi_allowed_ = new ::enterprise_management::DeviceWiFiAllowedProto(*from.device_wifi_allowed_);
  } else {
    device_wifi_allowed_ = nullptr;
  }
  if (from._internal_has_device_power_peak_shift()) {
    device_power_peak_shift_ = new ::enterprise_management::DevicePowerPeakShiftProto(*from.device_power_peak_shift_);
  } else {
    device_power_peak_shift_ = nullptr;
  }
  if (from._internal_has_device_boot_on_ac()) {
    device_boot_on_ac_ = new ::enterprise_management::DeviceBootOnAcProto(*from.device_boot_on_ac_);
  } else {
    device_boot_on_ac_ = nullptr;
  }
  if (from._internal_has_device_dock_mac_address_source()) {
    device_dock_mac_address_source_ = new ::enterprise_management::DeviceDockMacAddressSourceProto(*from.device_dock_mac_address_source_);
  } else {
    device_dock_mac_address_source_ = nullptr;
  }
  if (from._internal_has_device_advanced_battery_charge_mode()) {
    device_advanced_battery_charge_mode_ = new ::enterprise_management::DeviceAdvancedBatteryChargeModeProto(*from.device_advanced_battery_charge_mode_);
  } else {
    device_advanced_battery_charge_mode_ = nullptr;
  }
  if (from._internal_has_device_battery_charge_mode()) {
    device_battery_charge_mode_ = new ::enterprise_management::DeviceBatteryChargeModeProto(*from.device_battery_charge_mode_);
  } else {
    device_battery_charge_mode_ = nullptr;
  }
  if (from._internal_has_device_usb_power_share()) {
    device_usb_power_share_ = new ::enterprise_management::DeviceUsbPowerShareProto(*from.device_usb_power_share_);
  } else {
    device_usb_power_share_ = nullptr;
  }
  if (from._internal_has_device_scheduled_update_check()) {
    device_scheduled_update_check_ = new ::enterprise_management::DeviceScheduledUpdateCheckProto(*from.device_scheduled_update_check_);
  } else {
    device_scheduled_update_check_ = nullptr;
  }
  if (from._internal_has_device_powerwash_allowed()) {
    device_powerwash_allowed_ = new ::enterprise_management::DevicePowerwashAllowedProto(*from.device_powerwash_allowed_);
  } else {
    device_powerwash_allowed_ = nullptr;
  }
  if (from._internal_has_device_login_screen_webusb_allow_devices_for_urls()) {
    device_login_screen_webusb_allow_devices_for_urls_ = new ::enterprise_management::DeviceLoginScreenWebUsbAllowDevicesForUrlsProto(*from.device_login_screen_webusb_allow_devices_for_urls_);
  } else {
    device_login_screen_webusb_allow_devices_for_urls_ = nullptr;
  }
  if (from._internal_has_device_login_screen_system_info_enforced()) {
    device_login_screen_system_info_enforced_ = new ::enterprise_management::BooleanPolicyProto(*from.device_login_screen_system_info_enforced_);
  } else {
    device_login_screen_system_info_enforced_ = nullptr;
  }
  if (from._internal_has_device_web_based_attestation_allowed_urls()) {
    device_web_based_attestation_allowed_urls_ = new ::enterprise_management::StringListPolicyProto(*from.device_web_based_attestation_allowed_urls_);
  } else {
    device_web_based_attestation_allowed_urls_ = nullptr;
  }
  if (from._internal_has_device_show_numeric_keyboard_for_password()) {
    device_show_numeric_keyboard_for_password_ = new ::enterprise_management::BooleanPolicyProto(*from.device_show_numeric_keyboard_for_password_);
  } else {
    device_show_numeric_keyboard_for_password_ = nullptr;
  }
  if (from._internal_has_login_screen_primary_mouse_button_switch()) {
    login_screen_primary_mouse_button_switch_ = new ::enterprise_management::BooleanPolicyProto(*from.login_screen_primary_mouse_button_switch_);
  } else {
    login_screen_primary_mouse_button_switch_ = nullptr;
  }
  if (from._internal_has_minimum_chrome_version_enforced()) {
    minimum_chrome_version_enforced_ = new ::enterprise_management::StringPolicyProto(*from.minimum_chrome_version_enforced_);
  } else {
    minimum_chrome_version_enforced_ = nullptr;
  }
  if (from._internal_has_system_proxy_settings()) {
    system_proxy_settings_ = new ::enterprise_management::SystemProxySettingsProto(*from.system_proxy_settings_);
  } else {
    system_proxy_settings_ = nullptr;
  }
  if (from._internal_has_device_chrome_variations_type()) {
    device_chrome_variations_type_ = new ::enterprise_management::IntegerPolicyProto(*from.device_chrome_variations_type_);
  } else {
    device_chrome_variations_type_ = nullptr;
  }
  if (from._internal_has_device_login_screen_privacy_screen_enabled()) {
    device_login_screen_privacy_screen_enabled_ = new ::enterprise_management::DeviceLoginScreenPrivacyScreenEnabledProto(*from.device_login_screen_privacy_screen_enabled_);
  } else {
    device_login_screen_privacy_screen_enabled_ = nullptr;
  }
  if (from._internal_has_required_client_certificate_for_device()) {
    required_client_certificate_for_device_ = new ::enterprise_management::RequiredClientCertificateForDeviceProto(*from.required_client_certificate_for_device_);
  } else {
    required_client_certificate_for_device_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.ChromeDeviceSettingsProto)
}

void ChromeDeviceSettingsProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChromeDeviceSettingsProto_chrome_5fdevice_5fpolicy_2eproto.base);
  ::memset(&device_policy_refresh_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&required_client_certificate_for_device_) -
      reinterpret_cast<char*>(&device_policy_refresh_rate_)) + sizeof(required_client_certificate_for_device_));
}

ChromeDeviceSettingsProto::~ChromeDeviceSettingsProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.ChromeDeviceSettingsProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ChromeDeviceSettingsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete device_policy_refresh_rate_;
  if (this != internal_default_instance()) delete user_whitelist_;
  if (this != internal_default_instance()) delete guest_mode_enabled_;
  if (this != internal_default_instance()) delete device_proxy_settings_;
  if (this != internal_default_instance()) delete camera_enabled_;
  if (this != internal_default_instance()) delete show_user_names_;
  if (this != internal_default_instance()) delete data_roaming_enabled_;
  if (this != internal_default_instance()) delete allow_new_users_;
  if (this != internal_default_instance()) delete metrics_enabled_;
  if (this != internal_default_instance()) delete release_channel_;
  if (this != internal_default_instance()) delete open_network_configuration_;
  if (this != internal_default_instance()) delete device_reporting_;
  if (this != internal_default_instance()) delete ephemeral_users_enabled_;
  if (this != internal_default_instance()) delete app_pack_;
  if (this != internal_default_instance()) delete forced_logout_timeouts_;
  if (this != internal_default_instance()) delete login_screen_saver_;
  if (this != internal_default_instance()) delete auto_update_settings_;
  if (this != internal_default_instance()) delete start_up_urls_;
  if (this != internal_default_instance()) delete pinned_apps_;
  if (this != internal_default_instance()) delete system_timezone_;
  if (this != internal_default_instance()) delete device_local_accounts_;
  if (this != internal_default_instance()) delete allow_redeem_offers_;
  if (this != internal_default_instance()) delete start_up_flags_;
  if (this != internal_default_instance()) delete uptime_limit_;
  if (this != internal_default_instance()) delete variations_parameter_;
  if (this != internal_default_instance()) delete attestation_settings_;
  if (this != internal_default_instance()) delete accessibility_settings_;
  if (this != internal_default_instance()) delete supervised_users_settings_;
  if (this != internal_default_instance()) delete login_screen_power_management_;
  if (this != internal_default_instance()) delete use_24hour_clock_;
  if (this != internal_default_instance()) delete auto_clean_up_settings_;
  if (this != internal_default_instance()) delete system_settings_;
  if (this != internal_default_instance()) delete saml_settings_;
  if (this != internal_default_instance()) delete reboot_on_shutdown_;
  if (this != internal_default_instance()) delete device_heartbeat_settings_;
  if (this != internal_default_instance()) delete extension_cache_size_;
  if (this != internal_default_instance()) delete login_screen_domain_auto_complete_;
  if (this != internal_default_instance()) delete device_log_upload_settings_;
  if (this != internal_default_instance()) delete display_rotation_default_;
  if (this != internal_default_instance()) delete allow_kiosk_app_control_chrome_version_;
  if (this != internal_default_instance()) delete login_authentication_behavior_;
  if (this != internal_default_instance()) delete usb_detachable_whitelist_;
  if (this != internal_default_instance()) delete allow_bluetooth_;
  if (this != internal_default_instance()) delete quirks_download_enabled_;
  if (this != internal_default_instance()) delete login_video_capture_allowed_urls_;
  if (this != internal_default_instance()) delete device_login_screen_extensions_;
  if (this != internal_default_instance()) delete network_throttling_;
  if (this != internal_default_instance()) delete device_wallpaper_image_;
  if (this != internal_default_instance()) delete login_screen_locales_;
  if (this != internal_default_instance()) delete login_screen_input_methods_;
  if (this != internal_default_instance()) delete device_ecryptfs_migration_strategy_;
  if (this != internal_default_instance()) delete device_second_factor_authentication_;
  if (this != internal_default_instance()) delete cast_receiver_name_;
  if (this != internal_default_instance()) delete device_off_hours_;
  if (this != internal_default_instance()) delete native_device_printers_;
  if (this != internal_default_instance()) delete native_device_printers_access_mode_;
  if (this != internal_default_instance()) delete native_device_printers_blacklist_;
  if (this != internal_default_instance()) delete native_device_printers_whitelist_;
  if (this != internal_default_instance()) delete tpm_firmware_update_settings_;
  if (this != internal_default_instance()) delete minimum_required_version_;
  if (this != internal_default_instance()) delete device_login_screen_auto_select_certificate_for_urls_;
  if (this != internal_default_instance()) delete unaffiliated_arc_allowed_;
  if (this != internal_default_instance()) delete network_hostname_;
  if (this != internal_default_instance()) delete device_kerberos_encryption_types_;
  if (this != internal_default_instance()) delete device_user_policy_loopback_processing_mode_;
  if (this != internal_default_instance()) delete device_login_screen_isolate_origins_;
  if (this != internal_default_instance()) delete device_login_screen_site_per_process_;
  if (this != internal_default_instance()) delete virtual_machines_allowed_;
  if (this != internal_default_instance()) delete device_machine_password_change_rate_;
  if (this != internal_default_instance()) delete saml_login_authentication_type_;
  if (this != internal_default_instance()) delete device_unaffiliated_crostini_allowed_;
  if (this != internal_default_instance()) delete device_wifi_fast_transition_enabled_;
  if (this != internal_default_instance()) delete device_display_resolution_;
  if (this != internal_default_instance()) delete plugin_vm_allowed_;
  if (this != internal_default_instance()) delete device_gpo_cache_lifetime_;
  if (this != internal_default_instance()) delete device_auth_data_cache_lifetime_;
  if (this != internal_default_instance()) delete plugin_vm_license_key_;
  if (this != internal_default_instance()) delete device_reboot_on_user_signout_;
  if (this != internal_default_instance()) delete device_wilco_dtc_allowed_;
  if (this != internal_default_instance()) delete device_wilco_dtc_configuration_;
  if (this != internal_default_instance()) delete device_wifi_allowed_;
  if (this != internal_default_instance()) delete device_power_peak_shift_;
  if (this != internal_default_instance()) delete device_boot_on_ac_;
  if (this != internal_default_instance()) delete device_dock_mac_address_source_;
  if (this != internal_default_instance()) delete device_advanced_battery_charge_mode_;
  if (this != internal_default_instance()) delete device_battery_charge_mode_;
  if (this != internal_default_instance()) delete device_usb_power_share_;
  if (this != internal_default_instance()) delete device_scheduled_update_check_;
  if (this != internal_default_instance()) delete device_powerwash_allowed_;
  if (this != internal_default_instance()) delete device_login_screen_webusb_allow_devices_for_urls_;
  if (this != internal_default_instance()) delete device_login_screen_system_info_enforced_;
  if (this != internal_default_instance()) delete device_web_based_attestation_allowed_urls_;
  if (this != internal_default_instance()) delete device_show_numeric_keyboard_for_password_;
  if (this != internal_default_instance()) delete login_screen_primary_mouse_button_switch_;
  if (this != internal_default_instance()) delete minimum_chrome_version_enforced_;
  if (this != internal_default_instance()) delete system_proxy_settings_;
  if (this != internal_default_instance()) delete device_chrome_variations_type_;
  if (this != internal_default_instance()) delete device_login_screen_privacy_screen_enabled_;
  if (this != internal_default_instance()) delete required_client_certificate_for_device_;
}

void ChromeDeviceSettingsProto::ArenaDtor(void* object) {
  ChromeDeviceSettingsProto* _this = reinterpret_cast< ChromeDeviceSettingsProto* >(object);
  (void)_this;
}
void ChromeDeviceSettingsProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChromeDeviceSettingsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChromeDeviceSettingsProto& ChromeDeviceSettingsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChromeDeviceSettingsProto_chrome_5fdevice_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void ChromeDeviceSettingsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.ChromeDeviceSettingsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(device_policy_refresh_rate_ != nullptr);
      device_policy_refresh_rate_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(user_whitelist_ != nullptr);
      user_whitelist_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(guest_mode_enabled_ != nullptr);
      guest_mode_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(device_proxy_settings_ != nullptr);
      device_proxy_settings_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(camera_enabled_ != nullptr);
      camera_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(show_user_names_ != nullptr);
      show_user_names_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(data_roaming_enabled_ != nullptr);
      data_roaming_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(allow_new_users_ != nullptr);
      allow_new_users_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(metrics_enabled_ != nullptr);
      metrics_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(release_channel_ != nullptr);
      release_channel_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(open_network_configuration_ != nullptr);
      open_network_configuration_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(device_reporting_ != nullptr);
      device_reporting_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(ephemeral_users_enabled_ != nullptr);
      ephemeral_users_enabled_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(app_pack_ != nullptr);
      app_pack_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(forced_logout_timeouts_ != nullptr);
      forced_logout_timeouts_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(login_screen_saver_ != nullptr);
      login_screen_saver_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(auto_update_settings_ != nullptr);
      auto_update_settings_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(start_up_urls_ != nullptr);
      start_up_urls_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(pinned_apps_ != nullptr);
      pinned_apps_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(system_timezone_ != nullptr);
      system_timezone_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(device_local_accounts_ != nullptr);
      device_local_accounts_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(allow_redeem_offers_ != nullptr);
      allow_redeem_offers_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(start_up_flags_ != nullptr);
      start_up_flags_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(uptime_limit_ != nullptr);
      uptime_limit_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(variations_parameter_ != nullptr);
      variations_parameter_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(attestation_settings_ != nullptr);
      attestation_settings_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(accessibility_settings_ != nullptr);
      accessibility_settings_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(supervised_users_settings_ != nullptr);
      supervised_users_settings_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(login_screen_power_management_ != nullptr);
      login_screen_power_management_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(use_24hour_clock_ != nullptr);
      use_24hour_clock_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(auto_clean_up_settings_ != nullptr);
      auto_clean_up_settings_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(system_settings_ != nullptr);
      system_settings_->Clear();
    }
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(saml_settings_ != nullptr);
      saml_settings_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(reboot_on_shutdown_ != nullptr);
      reboot_on_shutdown_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(device_heartbeat_settings_ != nullptr);
      device_heartbeat_settings_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(extension_cache_size_ != nullptr);
      extension_cache_size_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(login_screen_domain_auto_complete_ != nullptr);
      login_screen_domain_auto_complete_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(device_log_upload_settings_ != nullptr);
      device_log_upload_settings_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(display_rotation_default_ != nullptr);
      display_rotation_default_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(allow_kiosk_app_control_chrome_version_ != nullptr);
      allow_kiosk_app_control_chrome_version_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(login_authentication_behavior_ != nullptr);
      login_authentication_behavior_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(usb_detachable_whitelist_ != nullptr);
      usb_detachable_whitelist_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(allow_bluetooth_ != nullptr);
      allow_bluetooth_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(quirks_download_enabled_ != nullptr);
      quirks_download_enabled_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(login_video_capture_allowed_urls_ != nullptr);
      login_video_capture_allowed_urls_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(device_login_screen_extensions_ != nullptr);
      device_login_screen_extensions_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(network_throttling_ != nullptr);
      network_throttling_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(device_wallpaper_image_ != nullptr);
      device_wallpaper_image_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(login_screen_locales_ != nullptr);
      login_screen_locales_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(login_screen_input_methods_ != nullptr);
      login_screen_input_methods_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(device_ecryptfs_migration_strategy_ != nullptr);
      device_ecryptfs_migration_strategy_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(device_second_factor_authentication_ != nullptr);
      device_second_factor_authentication_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(cast_receiver_name_ != nullptr);
      cast_receiver_name_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(device_off_hours_ != nullptr);
      device_off_hours_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(native_device_printers_ != nullptr);
      native_device_printers_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(native_device_printers_access_mode_ != nullptr);
      native_device_printers_access_mode_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(native_device_printers_blacklist_ != nullptr);
      native_device_printers_blacklist_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(native_device_printers_whitelist_ != nullptr);
      native_device_printers_whitelist_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(tpm_firmware_update_settings_ != nullptr);
      tpm_firmware_update_settings_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(minimum_required_version_ != nullptr);
      minimum_required_version_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(device_login_screen_auto_select_certificate_for_urls_ != nullptr);
      device_login_screen_auto_select_certificate_for_urls_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(unaffiliated_arc_allowed_ != nullptr);
      unaffiliated_arc_allowed_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(network_hostname_ != nullptr);
      network_hostname_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(device_kerberos_encryption_types_ != nullptr);
      device_kerberos_encryption_types_->Clear();
    }
  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(device_user_policy_loopback_processing_mode_ != nullptr);
      device_user_policy_loopback_processing_mode_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(device_login_screen_isolate_origins_ != nullptr);
      device_login_screen_isolate_origins_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(device_login_screen_site_per_process_ != nullptr);
      device_login_screen_site_per_process_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(virtual_machines_allowed_ != nullptr);
      virtual_machines_allowed_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(device_machine_password_change_rate_ != nullptr);
      device_machine_password_change_rate_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(saml_login_authentication_type_ != nullptr);
      saml_login_authentication_type_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(device_unaffiliated_crostini_allowed_ != nullptr);
      device_unaffiliated_crostini_allowed_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(device_wifi_fast_transition_enabled_ != nullptr);
      device_wifi_fast_transition_enabled_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(device_display_resolution_ != nullptr);
      device_display_resolution_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(plugin_vm_allowed_ != nullptr);
      plugin_vm_allowed_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(device_gpo_cache_lifetime_ != nullptr);
      device_gpo_cache_lifetime_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(device_auth_data_cache_lifetime_ != nullptr);
      device_auth_data_cache_lifetime_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(plugin_vm_license_key_ != nullptr);
      plugin_vm_license_key_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(device_reboot_on_user_signout_ != nullptr);
      device_reboot_on_user_signout_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(device_wilco_dtc_allowed_ != nullptr);
      device_wilco_dtc_allowed_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(device_wilco_dtc_configuration_ != nullptr);
      device_wilco_dtc_configuration_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(device_wifi_allowed_ != nullptr);
      device_wifi_allowed_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(device_power_peak_shift_ != nullptr);
      device_power_peak_shift_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(device_boot_on_ac_ != nullptr);
      device_boot_on_ac_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(device_dock_mac_address_source_ != nullptr);
      device_dock_mac_address_source_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(device_advanced_battery_charge_mode_ != nullptr);
      device_advanced_battery_charge_mode_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(device_battery_charge_mode_ != nullptr);
      device_battery_charge_mode_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(device_usb_power_share_ != nullptr);
      device_usb_power_share_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(device_scheduled_update_check_ != nullptr);
      device_scheduled_update_check_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(device_powerwash_allowed_ != nullptr);
      device_powerwash_allowed_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(device_login_screen_webusb_allow_devices_for_urls_ != nullptr);
      device_login_screen_webusb_allow_devices_for_urls_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(device_login_screen_system_info_enforced_ != nullptr);
      device_login_screen_system_info_enforced_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(device_web_based_attestation_allowed_urls_ != nullptr);
      device_web_based_attestation_allowed_urls_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(device_show_numeric_keyboard_for_password_ != nullptr);
      device_show_numeric_keyboard_for_password_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(login_screen_primary_mouse_button_switch_ != nullptr);
      login_screen_primary_mouse_button_switch_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(minimum_chrome_version_enforced_ != nullptr);
      minimum_chrome_version_enforced_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(system_proxy_settings_ != nullptr);
      system_proxy_settings_->Clear();
    }
  }
  cached_has_bits = _has_bits_[3];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(device_chrome_variations_type_ != nullptr);
      device_chrome_variations_type_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(device_login_screen_privacy_screen_enabled_ != nullptr);
      device_login_screen_privacy_screen_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(required_client_certificate_for_device_ != nullptr);
      required_client_certificate_for_device_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChromeDeviceSettingsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.DevicePolicyRefreshRateProto device_policy_refresh_rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_policy_refresh_rate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.UserWhitelistProto user_whitelist = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_whitelist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.GuestModeEnabledProto guest_mode_enabled = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_guest_mode_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.OBSOLETE_DeviceProxySettingsProto device_proxy_settings = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_proxy_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.CameraEnabledProto camera_enabled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_camera_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.ShowUserNamesOnSigninProto show_user_names = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_show_user_names(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DataRoamingEnabledProto data_roaming_enabled = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_roaming_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.AllowNewUsersProto allow_new_users = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_allow_new_users(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.MetricsEnabledProto metrics_enabled = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_metrics_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.ReleaseChannelProto release_channel = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_release_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceOpenNetworkConfigurationProto open_network_configuration = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_open_network_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceReportingProto device_reporting = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_reporting(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.EphemeralUsersEnabledProto ephemeral_users_enabled = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_ephemeral_users_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.OBSOLETE_AppPackProto app_pack = 14 [deprecated = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_app_pack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.OBSOLETE_ForcedLogoutTimeoutsProto forced_logout_timeouts = 15 [deprecated = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_forced_logout_timeouts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.OBSOLETE_ScreenSaverProto login_screen_saver = 16 [deprecated = true];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_screen_saver(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.AutoUpdateSettingsProto auto_update_settings = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_auto_update_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.OBSOLETE_StartUpUrlsProto start_up_urls = 18 [deprecated = true];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_up_urls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.OBSOLETE_PinnedAppsProto pinned_apps = 19 [deprecated = true];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_pinned_apps(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.SystemTimezoneProto system_timezone = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_system_timezone(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceLocalAccountsProto device_local_accounts = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_local_accounts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.AllowRedeemChromeOsRegistrationOffersProto allow_redeem_offers = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_allow_redeem_offers(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StartUpFlagsProto start_up_flags = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_up_flags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.UptimeLimitProto uptime_limit = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_uptime_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.VariationsParameterProto variations_parameter = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_variations_parameter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.AttestationSettingsProto attestation_settings = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_attestation_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.AccessibilitySettingsProto accessibility_settings = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_accessibility_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.OBSOLETE_SupervisedUsersSettingsProto supervised_users_settings = 28 [deprecated = true];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_supervised_users_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.LoginScreenPowerManagementProto login_screen_power_management = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_screen_power_management(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.SystemUse24HourClockProto use_24hour_clock = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_use_24hour_clock(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.AutoCleanupSettigsProto auto_clean_up_settings = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_auto_clean_up_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.SystemSettingsProto system_settings = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_system_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.SAMLSettingsProto saml_settings = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_saml_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.RebootOnShutdownProto reboot_on_shutdown = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reboot_on_shutdown(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceHeartbeatSettingsProto device_heartbeat_settings = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_heartbeat_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.ExtensionCacheSizeProto extension_cache_size = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_extension_cache_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.LoginScreenDomainAutoCompleteProto login_screen_domain_auto_complete = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_screen_domain_auto_complete(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceLogUploadSettingsProto device_log_upload_settings = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_log_upload_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DisplayRotationDefaultProto display_rotation_default = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_display_rotation_default(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.AllowKioskAppControlChromeVersionProto allow_kiosk_app_control_chrome_version = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_allow_kiosk_app_control_chrome_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.LoginAuthenticationBehaviorProto login_authentication_behavior = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_authentication_behavior(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.UsbDetachableWhitelistProto usb_detachable_whitelist = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_usb_detachable_whitelist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.AllowBluetoothProto allow_bluetooth = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_allow_bluetooth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceQuirksDownloadEnabledProto quirks_download_enabled = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_quirks_download_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.LoginVideoCaptureAllowedUrlsProto login_video_capture_allowed_urls = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_video_capture_allowed_urls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceLoginScreenExtensionsProto device_login_screen_extensions = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_login_screen_extensions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.NetworkThrottlingEnabledProto network_throttling = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_network_throttling(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceWallpaperImageProto device_wallpaper_image = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_wallpaper_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.LoginScreenLocalesProto login_screen_locales = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_screen_locales(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.LoginScreenInputMethodsProto login_screen_input_methods = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_screen_input_methods(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceEcryptfsMigrationStrategyProto device_ecryptfs_migration_strategy = 51 [deprecated = true];
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_ecryptfs_migration_strategy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceSecondFactorAuthenticationProto device_second_factor_authentication = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_second_factor_authentication(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.CastReceiverNameProto cast_receiver_name = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_cast_receiver_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceOffHoursProto device_off_hours = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_off_hours(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceNativePrintersProto native_device_printers = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_native_device_printers(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceNativePrintersAccessModeProto native_device_printers_access_mode = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_native_device_printers_access_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceNativePrintersBlacklistProto native_device_printers_blacklist = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_native_device_printers_blacklist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceNativePrintersWhitelistProto native_device_printers_whitelist = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_native_device_printers_whitelist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.TPMFirmwareUpdateSettingsProto tpm_firmware_update_settings = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_tpm_firmware_update_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.OBSOLETE_MinimumRequiredVersionProto minimum_required_version = 60 [deprecated = true];
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_minimum_required_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceLoginScreenAutoSelectCertificateForUrls device_login_screen_auto_select_certificate_for_urls = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_login_screen_auto_select_certificate_for_urls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.UnaffiliatedArcAllowedProto unaffiliated_arc_allowed = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_unaffiliated_arc_allowed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.NetworkHostnameProto network_hostname = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_network_hostname(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceKerberosEncryptionTypesProto device_kerberos_encryption_types = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_kerberos_encryption_types(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceUserPolicyLoopbackProcessingModeProto device_user_policy_loopback_processing_mode = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_user_policy_loopback_processing_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceLoginScreenIsolateOriginsProto device_login_screen_isolate_origins = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_login_screen_isolate_origins(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceLoginScreenSitePerProcessProto device_login_screen_site_per_process = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_login_screen_site_per_process(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.VirtualMachinesAllowedProto virtual_machines_allowed = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_virtual_machines_allowed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceMachinePasswordChangeRateProto device_machine_password_change_rate = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_machine_password_change_rate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.SamlLoginAuthenticationTypeProto saml_login_authentication_type = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_saml_login_authentication_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceUnaffiliatedCrostiniAllowedProto device_unaffiliated_crostini_allowed = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_unaffiliated_crostini_allowed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceWiFiFastTransitionEnabledProto device_wifi_fast_transition_enabled = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_wifi_fast_transition_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceDisplayResolutionProto device_display_resolution = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_display_resolution(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.PluginVmAllowedProto plugin_vm_allowed = 75;
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_plugin_vm_allowed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceGpoCacheLifetimeProto device_gpo_cache_lifetime = 76;
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_gpo_cache_lifetime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceAuthDataCacheLifetimeProto device_auth_data_cache_lifetime = 77;
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_auth_data_cache_lifetime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.PluginVmLicenseKeyProto plugin_vm_license_key = 78;
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_plugin_vm_license_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceRebootOnUserSignoutProto device_reboot_on_user_signout = 79;
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_reboot_on_user_signout(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceWilcoDtcAllowedProto device_wilco_dtc_allowed = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_wilco_dtc_allowed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceWilcoDtcConfigurationProto device_wilco_dtc_configuration = 81;
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_wilco_dtc_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceWiFiAllowedProto device_wifi_allowed = 82;
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_wifi_allowed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DevicePowerPeakShiftProto device_power_peak_shift = 83;
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_power_peak_shift(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceBootOnAcProto device_boot_on_ac = 84;
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_boot_on_ac(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceDockMacAddressSourceProto device_dock_mac_address_source = 85;
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_dock_mac_address_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceAdvancedBatteryChargeModeProto device_advanced_battery_charge_mode = 86;
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_advanced_battery_charge_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceBatteryChargeModeProto device_battery_charge_mode = 87;
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_battery_charge_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceUsbPowerShareProto device_usb_power_share = 88;
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_usb_power_share(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceScheduledUpdateCheckProto device_scheduled_update_check = 89;
      case 89:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_scheduled_update_check(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DevicePowerwashAllowedProto device_powerwash_allowed = 91;
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_powerwash_allowed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceLoginScreenWebUsbAllowDevicesForUrlsProto device_login_screen_webusb_allow_devices_for_urls = 92;
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_login_screen_webusb_allow_devices_for_urls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto device_login_screen_system_info_enforced = 93;
      case 93:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_login_screen_system_info_enforced(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto device_web_based_attestation_allowed_urls = 94;
      case 94:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_web_based_attestation_allowed_urls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto device_show_numeric_keyboard_for_password = 95;
      case 95:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_show_numeric_keyboard_for_password(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto login_screen_primary_mouse_button_switch = 96;
      case 96:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_screen_primary_mouse_button_switch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto minimum_chrome_version_enforced = 97;
      case 97:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_minimum_chrome_version_enforced(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.SystemProxySettingsProto system_proxy_settings = 98;
      case 98:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_system_proxy_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto device_chrome_variations_type = 99;
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_chrome_variations_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.DeviceLoginScreenPrivacyScreenEnabledProto device_login_screen_privacy_screen_enabled = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_login_screen_privacy_screen_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.RequiredClientCertificateForDeviceProto required_client_certificate_for_device = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_required_client_certificate_for_device(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChromeDeviceSettingsProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.ChromeDeviceSettingsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.DevicePolicyRefreshRateProto device_policy_refresh_rate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::device_policy_refresh_rate(this), target, stream);
  }

  // optional .enterprise_management.UserWhitelistProto user_whitelist = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::user_whitelist(this), target, stream);
  }

  // optional .enterprise_management.GuestModeEnabledProto guest_mode_enabled = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::guest_mode_enabled(this), target, stream);
  }

  // optional .enterprise_management.OBSOLETE_DeviceProxySettingsProto device_proxy_settings = 4 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::device_proxy_settings(this), target, stream);
  }

  // optional .enterprise_management.CameraEnabledProto camera_enabled = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::camera_enabled(this), target, stream);
  }

  // optional .enterprise_management.ShowUserNamesOnSigninProto show_user_names = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::show_user_names(this), target, stream);
  }

  // optional .enterprise_management.DataRoamingEnabledProto data_roaming_enabled = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::data_roaming_enabled(this), target, stream);
  }

  // optional .enterprise_management.AllowNewUsersProto allow_new_users = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::allow_new_users(this), target, stream);
  }

  // optional .enterprise_management.MetricsEnabledProto metrics_enabled = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::metrics_enabled(this), target, stream);
  }

  // optional .enterprise_management.ReleaseChannelProto release_channel = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::release_channel(this), target, stream);
  }

  // optional .enterprise_management.DeviceOpenNetworkConfigurationProto open_network_configuration = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::open_network_configuration(this), target, stream);
  }

  // optional .enterprise_management.DeviceReportingProto device_reporting = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::device_reporting(this), target, stream);
  }

  // optional .enterprise_management.EphemeralUsersEnabledProto ephemeral_users_enabled = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::ephemeral_users_enabled(this), target, stream);
  }

  // optional .enterprise_management.OBSOLETE_AppPackProto app_pack = 14 [deprecated = true];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::app_pack(this), target, stream);
  }

  // optional .enterprise_management.OBSOLETE_ForcedLogoutTimeoutsProto forced_logout_timeouts = 15 [deprecated = true];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::forced_logout_timeouts(this), target, stream);
  }

  // optional .enterprise_management.OBSOLETE_ScreenSaverProto login_screen_saver = 16 [deprecated = true];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::login_screen_saver(this), target, stream);
  }

  // optional .enterprise_management.AutoUpdateSettingsProto auto_update_settings = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::auto_update_settings(this), target, stream);
  }

  // optional .enterprise_management.OBSOLETE_StartUpUrlsProto start_up_urls = 18 [deprecated = true];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::start_up_urls(this), target, stream);
  }

  // optional .enterprise_management.OBSOLETE_PinnedAppsProto pinned_apps = 19 [deprecated = true];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::pinned_apps(this), target, stream);
  }

  // optional .enterprise_management.SystemTimezoneProto system_timezone = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::system_timezone(this), target, stream);
  }

  // optional .enterprise_management.DeviceLocalAccountsProto device_local_accounts = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::device_local_accounts(this), target, stream);
  }

  // optional .enterprise_management.AllowRedeemChromeOsRegistrationOffersProto allow_redeem_offers = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::allow_redeem_offers(this), target, stream);
  }

  // optional .enterprise_management.StartUpFlagsProto start_up_flags = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::start_up_flags(this), target, stream);
  }

  // optional .enterprise_management.UptimeLimitProto uptime_limit = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::uptime_limit(this), target, stream);
  }

  // optional .enterprise_management.VariationsParameterProto variations_parameter = 25;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::variations_parameter(this), target, stream);
  }

  // optional .enterprise_management.AttestationSettingsProto attestation_settings = 26;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::attestation_settings(this), target, stream);
  }

  // optional .enterprise_management.AccessibilitySettingsProto accessibility_settings = 27;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::accessibility_settings(this), target, stream);
  }

  // optional .enterprise_management.OBSOLETE_SupervisedUsersSettingsProto supervised_users_settings = 28 [deprecated = true];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::supervised_users_settings(this), target, stream);
  }

  // optional .enterprise_management.LoginScreenPowerManagementProto login_screen_power_management = 29;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::login_screen_power_management(this), target, stream);
  }

  // optional .enterprise_management.SystemUse24HourClockProto use_24hour_clock = 30;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::use_24hour_clock(this), target, stream);
  }

  // optional .enterprise_management.AutoCleanupSettigsProto auto_clean_up_settings = 31;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::auto_clean_up_settings(this), target, stream);
  }

  // optional .enterprise_management.SystemSettingsProto system_settings = 32;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::system_settings(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional .enterprise_management.SAMLSettingsProto saml_settings = 33;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        33, _Internal::saml_settings(this), target, stream);
  }

  // optional .enterprise_management.RebootOnShutdownProto reboot_on_shutdown = 34;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        34, _Internal::reboot_on_shutdown(this), target, stream);
  }

  // optional .enterprise_management.DeviceHeartbeatSettingsProto device_heartbeat_settings = 35;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        35, _Internal::device_heartbeat_settings(this), target, stream);
  }

  // optional .enterprise_management.ExtensionCacheSizeProto extension_cache_size = 36;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        36, _Internal::extension_cache_size(this), target, stream);
  }

  // optional .enterprise_management.LoginScreenDomainAutoCompleteProto login_screen_domain_auto_complete = 37;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        37, _Internal::login_screen_domain_auto_complete(this), target, stream);
  }

  // optional .enterprise_management.DeviceLogUploadSettingsProto device_log_upload_settings = 38;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        38, _Internal::device_log_upload_settings(this), target, stream);
  }

  // optional .enterprise_management.DisplayRotationDefaultProto display_rotation_default = 39;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        39, _Internal::display_rotation_default(this), target, stream);
  }

  // optional .enterprise_management.AllowKioskAppControlChromeVersionProto allow_kiosk_app_control_chrome_version = 40;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::allow_kiosk_app_control_chrome_version(this), target, stream);
  }

  // optional .enterprise_management.LoginAuthenticationBehaviorProto login_authentication_behavior = 41;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        41, _Internal::login_authentication_behavior(this), target, stream);
  }

  // optional .enterprise_management.UsbDetachableWhitelistProto usb_detachable_whitelist = 42;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        42, _Internal::usb_detachable_whitelist(this), target, stream);
  }

  // optional .enterprise_management.AllowBluetoothProto allow_bluetooth = 43;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        43, _Internal::allow_bluetooth(this), target, stream);
  }

  // optional .enterprise_management.DeviceQuirksDownloadEnabledProto quirks_download_enabled = 44;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        44, _Internal::quirks_download_enabled(this), target, stream);
  }

  // optional .enterprise_management.LoginVideoCaptureAllowedUrlsProto login_video_capture_allowed_urls = 45;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        45, _Internal::login_video_capture_allowed_urls(this), target, stream);
  }

  // optional .enterprise_management.DeviceLoginScreenExtensionsProto device_login_screen_extensions = 46;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        46, _Internal::device_login_screen_extensions(this), target, stream);
  }

  // optional .enterprise_management.NetworkThrottlingEnabledProto network_throttling = 47;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        47, _Internal::network_throttling(this), target, stream);
  }

  // optional .enterprise_management.DeviceWallpaperImageProto device_wallpaper_image = 48;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        48, _Internal::device_wallpaper_image(this), target, stream);
  }

  // optional .enterprise_management.LoginScreenLocalesProto login_screen_locales = 49;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        49, _Internal::login_screen_locales(this), target, stream);
  }

  // optional .enterprise_management.LoginScreenInputMethodsProto login_screen_input_methods = 50;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        50, _Internal::login_screen_input_methods(this), target, stream);
  }

  // optional .enterprise_management.DeviceEcryptfsMigrationStrategyProto device_ecryptfs_migration_strategy = 51 [deprecated = true];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        51, _Internal::device_ecryptfs_migration_strategy(this), target, stream);
  }

  // optional .enterprise_management.DeviceSecondFactorAuthenticationProto device_second_factor_authentication = 52;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        52, _Internal::device_second_factor_authentication(this), target, stream);
  }

  // optional .enterprise_management.CastReceiverNameProto cast_receiver_name = 53;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        53, _Internal::cast_receiver_name(this), target, stream);
  }

  // optional .enterprise_management.DeviceOffHoursProto device_off_hours = 54;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        54, _Internal::device_off_hours(this), target, stream);
  }

  // optional .enterprise_management.DeviceNativePrintersProto native_device_printers = 55;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        55, _Internal::native_device_printers(this), target, stream);
  }

  // optional .enterprise_management.DeviceNativePrintersAccessModeProto native_device_printers_access_mode = 56;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        56, _Internal::native_device_printers_access_mode(this), target, stream);
  }

  // optional .enterprise_management.DeviceNativePrintersBlacklistProto native_device_printers_blacklist = 57;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        57, _Internal::native_device_printers_blacklist(this), target, stream);
  }

  // optional .enterprise_management.DeviceNativePrintersWhitelistProto native_device_printers_whitelist = 58;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        58, _Internal::native_device_printers_whitelist(this), target, stream);
  }

  // optional .enterprise_management.TPMFirmwareUpdateSettingsProto tpm_firmware_update_settings = 59;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        59, _Internal::tpm_firmware_update_settings(this), target, stream);
  }

  // optional .enterprise_management.OBSOLETE_MinimumRequiredVersionProto minimum_required_version = 60 [deprecated = true];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        60, _Internal::minimum_required_version(this), target, stream);
  }

  // optional .enterprise_management.DeviceLoginScreenAutoSelectCertificateForUrls device_login_screen_auto_select_certificate_for_urls = 62;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        62, _Internal::device_login_screen_auto_select_certificate_for_urls(this), target, stream);
  }

  // optional .enterprise_management.UnaffiliatedArcAllowedProto unaffiliated_arc_allowed = 63;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        63, _Internal::unaffiliated_arc_allowed(this), target, stream);
  }

  // optional .enterprise_management.NetworkHostnameProto network_hostname = 64;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        64, _Internal::network_hostname(this), target, stream);
  }

  // optional .enterprise_management.DeviceKerberosEncryptionTypesProto device_kerberos_encryption_types = 65;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        65, _Internal::device_kerberos_encryption_types(this), target, stream);
  }

  cached_has_bits = _has_bits_[2];
  // optional .enterprise_management.DeviceUserPolicyLoopbackProcessingModeProto device_user_policy_loopback_processing_mode = 66;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        66, _Internal::device_user_policy_loopback_processing_mode(this), target, stream);
  }

  // optional .enterprise_management.DeviceLoginScreenIsolateOriginsProto device_login_screen_isolate_origins = 67;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        67, _Internal::device_login_screen_isolate_origins(this), target, stream);
  }

  // optional .enterprise_management.DeviceLoginScreenSitePerProcessProto device_login_screen_site_per_process = 68;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        68, _Internal::device_login_screen_site_per_process(this), target, stream);
  }

  // optional .enterprise_management.VirtualMachinesAllowedProto virtual_machines_allowed = 69;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        69, _Internal::virtual_machines_allowed(this), target, stream);
  }

  // optional .enterprise_management.DeviceMachinePasswordChangeRateProto device_machine_password_change_rate = 70;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        70, _Internal::device_machine_password_change_rate(this), target, stream);
  }

  // optional .enterprise_management.SamlLoginAuthenticationTypeProto saml_login_authentication_type = 71;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        71, _Internal::saml_login_authentication_type(this), target, stream);
  }

  // optional .enterprise_management.DeviceUnaffiliatedCrostiniAllowedProto device_unaffiliated_crostini_allowed = 72;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        72, _Internal::device_unaffiliated_crostini_allowed(this), target, stream);
  }

  // optional .enterprise_management.DeviceWiFiFastTransitionEnabledProto device_wifi_fast_transition_enabled = 73;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        73, _Internal::device_wifi_fast_transition_enabled(this), target, stream);
  }

  // optional .enterprise_management.DeviceDisplayResolutionProto device_display_resolution = 74;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        74, _Internal::device_display_resolution(this), target, stream);
  }

  // optional .enterprise_management.PluginVmAllowedProto plugin_vm_allowed = 75;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        75, _Internal::plugin_vm_allowed(this), target, stream);
  }

  // optional .enterprise_management.DeviceGpoCacheLifetimeProto device_gpo_cache_lifetime = 76;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        76, _Internal::device_gpo_cache_lifetime(this), target, stream);
  }

  // optional .enterprise_management.DeviceAuthDataCacheLifetimeProto device_auth_data_cache_lifetime = 77;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        77, _Internal::device_auth_data_cache_lifetime(this), target, stream);
  }

  // optional .enterprise_management.PluginVmLicenseKeyProto plugin_vm_license_key = 78;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        78, _Internal::plugin_vm_license_key(this), target, stream);
  }

  // optional .enterprise_management.DeviceRebootOnUserSignoutProto device_reboot_on_user_signout = 79;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        79, _Internal::device_reboot_on_user_signout(this), target, stream);
  }

  // optional .enterprise_management.DeviceWilcoDtcAllowedProto device_wilco_dtc_allowed = 80;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        80, _Internal::device_wilco_dtc_allowed(this), target, stream);
  }

  // optional .enterprise_management.DeviceWilcoDtcConfigurationProto device_wilco_dtc_configuration = 81;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        81, _Internal::device_wilco_dtc_configuration(this), target, stream);
  }

  // optional .enterprise_management.DeviceWiFiAllowedProto device_wifi_allowed = 82;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        82, _Internal::device_wifi_allowed(this), target, stream);
  }

  // optional .enterprise_management.DevicePowerPeakShiftProto device_power_peak_shift = 83;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        83, _Internal::device_power_peak_shift(this), target, stream);
  }

  // optional .enterprise_management.DeviceBootOnAcProto device_boot_on_ac = 84;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        84, _Internal::device_boot_on_ac(this), target, stream);
  }

  // optional .enterprise_management.DeviceDockMacAddressSourceProto device_dock_mac_address_source = 85;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        85, _Internal::device_dock_mac_address_source(this), target, stream);
  }

  // optional .enterprise_management.DeviceAdvancedBatteryChargeModeProto device_advanced_battery_charge_mode = 86;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        86, _Internal::device_advanced_battery_charge_mode(this), target, stream);
  }

  // optional .enterprise_management.DeviceBatteryChargeModeProto device_battery_charge_mode = 87;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        87, _Internal::device_battery_charge_mode(this), target, stream);
  }

  // optional .enterprise_management.DeviceUsbPowerShareProto device_usb_power_share = 88;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        88, _Internal::device_usb_power_share(this), target, stream);
  }

  // optional .enterprise_management.DeviceScheduledUpdateCheckProto device_scheduled_update_check = 89;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        89, _Internal::device_scheduled_update_check(this), target, stream);
  }

  // optional .enterprise_management.DevicePowerwashAllowedProto device_powerwash_allowed = 91;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        91, _Internal::device_powerwash_allowed(this), target, stream);
  }

  // optional .enterprise_management.DeviceLoginScreenWebUsbAllowDevicesForUrlsProto device_login_screen_webusb_allow_devices_for_urls = 92;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        92, _Internal::device_login_screen_webusb_allow_devices_for_urls(this), target, stream);
  }

  // optional .enterprise_management.BooleanPolicyProto device_login_screen_system_info_enforced = 93;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        93, _Internal::device_login_screen_system_info_enforced(this), target, stream);
  }

  // optional .enterprise_management.StringListPolicyProto device_web_based_attestation_allowed_urls = 94;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        94, _Internal::device_web_based_attestation_allowed_urls(this), target, stream);
  }

  // optional .enterprise_management.BooleanPolicyProto device_show_numeric_keyboard_for_password = 95;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        95, _Internal::device_show_numeric_keyboard_for_password(this), target, stream);
  }

  // optional .enterprise_management.BooleanPolicyProto login_screen_primary_mouse_button_switch = 96;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        96, _Internal::login_screen_primary_mouse_button_switch(this), target, stream);
  }

  // optional .enterprise_management.StringPolicyProto minimum_chrome_version_enforced = 97;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        97, _Internal::minimum_chrome_version_enforced(this), target, stream);
  }

  // optional .enterprise_management.SystemProxySettingsProto system_proxy_settings = 98;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        98, _Internal::system_proxy_settings(this), target, stream);
  }

  cached_has_bits = _has_bits_[3];
  // optional .enterprise_management.IntegerPolicyProto device_chrome_variations_type = 99;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        99, _Internal::device_chrome_variations_type(this), target, stream);
  }

  // optional .enterprise_management.DeviceLoginScreenPrivacyScreenEnabledProto device_login_screen_privacy_screen_enabled = 100;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::device_login_screen_privacy_screen_enabled(this), target, stream);
  }

  // optional .enterprise_management.RequiredClientCertificateForDeviceProto required_client_certificate_for_device = 101;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        101, _Internal::required_client_certificate_for_device(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.ChromeDeviceSettingsProto)
  return target;
}

size_t ChromeDeviceSettingsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.ChromeDeviceSettingsProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .enterprise_management.DevicePolicyRefreshRateProto device_policy_refresh_rate = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_policy_refresh_rate_);
    }

    // optional .enterprise_management.UserWhitelistProto user_whitelist = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *user_whitelist_);
    }

    // optional .enterprise_management.GuestModeEnabledProto guest_mode_enabled = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *guest_mode_enabled_);
    }

    // optional .enterprise_management.OBSOLETE_DeviceProxySettingsProto device_proxy_settings = 4 [deprecated = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_proxy_settings_);
    }

    // optional .enterprise_management.CameraEnabledProto camera_enabled = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *camera_enabled_);
    }

    // optional .enterprise_management.ShowUserNamesOnSigninProto show_user_names = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *show_user_names_);
    }

    // optional .enterprise_management.DataRoamingEnabledProto data_roaming_enabled = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_roaming_enabled_);
    }

    // optional .enterprise_management.AllowNewUsersProto allow_new_users = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *allow_new_users_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .enterprise_management.MetricsEnabledProto metrics_enabled = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metrics_enabled_);
    }

    // optional .enterprise_management.ReleaseChannelProto release_channel = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *release_channel_);
    }

    // optional .enterprise_management.DeviceOpenNetworkConfigurationProto open_network_configuration = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *open_network_configuration_);
    }

    // optional .enterprise_management.DeviceReportingProto device_reporting = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_reporting_);
    }

    // optional .enterprise_management.EphemeralUsersEnabledProto ephemeral_users_enabled = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ephemeral_users_enabled_);
    }

    // optional .enterprise_management.OBSOLETE_AppPackProto app_pack = 14 [deprecated = true];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *app_pack_);
    }

    // optional .enterprise_management.OBSOLETE_ForcedLogoutTimeoutsProto forced_logout_timeouts = 15 [deprecated = true];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *forced_logout_timeouts_);
    }

    // optional .enterprise_management.OBSOLETE_ScreenSaverProto login_screen_saver = 16 [deprecated = true];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *login_screen_saver_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .enterprise_management.AutoUpdateSettingsProto auto_update_settings = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *auto_update_settings_);
    }

    // optional .enterprise_management.OBSOLETE_StartUpUrlsProto start_up_urls = 18 [deprecated = true];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *start_up_urls_);
    }

    // optional .enterprise_management.OBSOLETE_PinnedAppsProto pinned_apps = 19 [deprecated = true];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pinned_apps_);
    }

    // optional .enterprise_management.SystemTimezoneProto system_timezone = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *system_timezone_);
    }

    // optional .enterprise_management.DeviceLocalAccountsProto device_local_accounts = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_local_accounts_);
    }

    // optional .enterprise_management.AllowRedeemChromeOsRegistrationOffersProto allow_redeem_offers = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *allow_redeem_offers_);
    }

    // optional .enterprise_management.StartUpFlagsProto start_up_flags = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *start_up_flags_);
    }

    // optional .enterprise_management.UptimeLimitProto uptime_limit = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uptime_limit_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .enterprise_management.VariationsParameterProto variations_parameter = 25;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *variations_parameter_);
    }

    // optional .enterprise_management.AttestationSettingsProto attestation_settings = 26;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *attestation_settings_);
    }

    // optional .enterprise_management.AccessibilitySettingsProto accessibility_settings = 27;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *accessibility_settings_);
    }

    // optional .enterprise_management.OBSOLETE_SupervisedUsersSettingsProto supervised_users_settings = 28 [deprecated = true];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *supervised_users_settings_);
    }

    // optional .enterprise_management.LoginScreenPowerManagementProto login_screen_power_management = 29;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *login_screen_power_management_);
    }

    // optional .enterprise_management.SystemUse24HourClockProto use_24hour_clock = 30;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *use_24hour_clock_);
    }

    // optional .enterprise_management.AutoCleanupSettigsProto auto_clean_up_settings = 31;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *auto_clean_up_settings_);
    }

    // optional .enterprise_management.SystemSettingsProto system_settings = 32;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *system_settings_);
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional .enterprise_management.SAMLSettingsProto saml_settings = 33;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *saml_settings_);
    }

    // optional .enterprise_management.RebootOnShutdownProto reboot_on_shutdown = 34;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reboot_on_shutdown_);
    }

    // optional .enterprise_management.DeviceHeartbeatSettingsProto device_heartbeat_settings = 35;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_heartbeat_settings_);
    }

    // optional .enterprise_management.ExtensionCacheSizeProto extension_cache_size = 36;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *extension_cache_size_);
    }

    // optional .enterprise_management.LoginScreenDomainAutoCompleteProto login_screen_domain_auto_complete = 37;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *login_screen_domain_auto_complete_);
    }

    // optional .enterprise_management.DeviceLogUploadSettingsProto device_log_upload_settings = 38;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_log_upload_settings_);
    }

    // optional .enterprise_management.DisplayRotationDefaultProto display_rotation_default = 39;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *display_rotation_default_);
    }

    // optional .enterprise_management.AllowKioskAppControlChromeVersionProto allow_kiosk_app_control_chrome_version = 40;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *allow_kiosk_app_control_chrome_version_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .enterprise_management.LoginAuthenticationBehaviorProto login_authentication_behavior = 41;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *login_authentication_behavior_);
    }

    // optional .enterprise_management.UsbDetachableWhitelistProto usb_detachable_whitelist = 42;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *usb_detachable_whitelist_);
    }

    // optional .enterprise_management.AllowBluetoothProto allow_bluetooth = 43;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *allow_bluetooth_);
    }

    // optional .enterprise_management.DeviceQuirksDownloadEnabledProto quirks_download_enabled = 44;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *quirks_download_enabled_);
    }

    // optional .enterprise_management.LoginVideoCaptureAllowedUrlsProto login_video_capture_allowed_urls = 45;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *login_video_capture_allowed_urls_);
    }

    // optional .enterprise_management.DeviceLoginScreenExtensionsProto device_login_screen_extensions = 46;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_login_screen_extensions_);
    }

    // optional .enterprise_management.NetworkThrottlingEnabledProto network_throttling = 47;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *network_throttling_);
    }

    // optional .enterprise_management.DeviceWallpaperImageProto device_wallpaper_image = 48;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_wallpaper_image_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .enterprise_management.LoginScreenLocalesProto login_screen_locales = 49;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *login_screen_locales_);
    }

    // optional .enterprise_management.LoginScreenInputMethodsProto login_screen_input_methods = 50;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *login_screen_input_methods_);
    }

    // optional .enterprise_management.DeviceEcryptfsMigrationStrategyProto device_ecryptfs_migration_strategy = 51 [deprecated = true];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_ecryptfs_migration_strategy_);
    }

    // optional .enterprise_management.DeviceSecondFactorAuthenticationProto device_second_factor_authentication = 52;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_second_factor_authentication_);
    }

    // optional .enterprise_management.CastReceiverNameProto cast_receiver_name = 53;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cast_receiver_name_);
    }

    // optional .enterprise_management.DeviceOffHoursProto device_off_hours = 54;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_off_hours_);
    }

    // optional .enterprise_management.DeviceNativePrintersProto native_device_printers = 55;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *native_device_printers_);
    }

    // optional .enterprise_management.DeviceNativePrintersAccessModeProto native_device_printers_access_mode = 56;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *native_device_printers_access_mode_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .enterprise_management.DeviceNativePrintersBlacklistProto native_device_printers_blacklist = 57;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *native_device_printers_blacklist_);
    }

    // optional .enterprise_management.DeviceNativePrintersWhitelistProto native_device_printers_whitelist = 58;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *native_device_printers_whitelist_);
    }

    // optional .enterprise_management.TPMFirmwareUpdateSettingsProto tpm_firmware_update_settings = 59;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tpm_firmware_update_settings_);
    }

    // optional .enterprise_management.OBSOLETE_MinimumRequiredVersionProto minimum_required_version = 60 [deprecated = true];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *minimum_required_version_);
    }

    // optional .enterprise_management.DeviceLoginScreenAutoSelectCertificateForUrls device_login_screen_auto_select_certificate_for_urls = 62;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_login_screen_auto_select_certificate_for_urls_);
    }

    // optional .enterprise_management.UnaffiliatedArcAllowedProto unaffiliated_arc_allowed = 63;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *unaffiliated_arc_allowed_);
    }

    // optional .enterprise_management.NetworkHostnameProto network_hostname = 64;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *network_hostname_);
    }

    // optional .enterprise_management.DeviceKerberosEncryptionTypesProto device_kerberos_encryption_types = 65;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_kerberos_encryption_types_);
    }

  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    // optional .enterprise_management.DeviceUserPolicyLoopbackProcessingModeProto device_user_policy_loopback_processing_mode = 66;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_user_policy_loopback_processing_mode_);
    }

    // optional .enterprise_management.DeviceLoginScreenIsolateOriginsProto device_login_screen_isolate_origins = 67;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_login_screen_isolate_origins_);
    }

    // optional .enterprise_management.DeviceLoginScreenSitePerProcessProto device_login_screen_site_per_process = 68;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_login_screen_site_per_process_);
    }

    // optional .enterprise_management.VirtualMachinesAllowedProto virtual_machines_allowed = 69;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *virtual_machines_allowed_);
    }

    // optional .enterprise_management.DeviceMachinePasswordChangeRateProto device_machine_password_change_rate = 70;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_machine_password_change_rate_);
    }

    // optional .enterprise_management.SamlLoginAuthenticationTypeProto saml_login_authentication_type = 71;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *saml_login_authentication_type_);
    }

    // optional .enterprise_management.DeviceUnaffiliatedCrostiniAllowedProto device_unaffiliated_crostini_allowed = 72;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_unaffiliated_crostini_allowed_);
    }

    // optional .enterprise_management.DeviceWiFiFastTransitionEnabledProto device_wifi_fast_transition_enabled = 73;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_wifi_fast_transition_enabled_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .enterprise_management.DeviceDisplayResolutionProto device_display_resolution = 74;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_display_resolution_);
    }

    // optional .enterprise_management.PluginVmAllowedProto plugin_vm_allowed = 75;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *plugin_vm_allowed_);
    }

    // optional .enterprise_management.DeviceGpoCacheLifetimeProto device_gpo_cache_lifetime = 76;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_gpo_cache_lifetime_);
    }

    // optional .enterprise_management.DeviceAuthDataCacheLifetimeProto device_auth_data_cache_lifetime = 77;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_auth_data_cache_lifetime_);
    }

    // optional .enterprise_management.PluginVmLicenseKeyProto plugin_vm_license_key = 78;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *plugin_vm_license_key_);
    }

    // optional .enterprise_management.DeviceRebootOnUserSignoutProto device_reboot_on_user_signout = 79;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_reboot_on_user_signout_);
    }

    // optional .enterprise_management.DeviceWilcoDtcAllowedProto device_wilco_dtc_allowed = 80;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_wilco_dtc_allowed_);
    }

    // optional .enterprise_management.DeviceWilcoDtcConfigurationProto device_wilco_dtc_configuration = 81;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_wilco_dtc_configuration_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .enterprise_management.DeviceWiFiAllowedProto device_wifi_allowed = 82;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_wifi_allowed_);
    }

    // optional .enterprise_management.DevicePowerPeakShiftProto device_power_peak_shift = 83;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_power_peak_shift_);
    }

    // optional .enterprise_management.DeviceBootOnAcProto device_boot_on_ac = 84;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_boot_on_ac_);
    }

    // optional .enterprise_management.DeviceDockMacAddressSourceProto device_dock_mac_address_source = 85;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_dock_mac_address_source_);
    }

    // optional .enterprise_management.DeviceAdvancedBatteryChargeModeProto device_advanced_battery_charge_mode = 86;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_advanced_battery_charge_mode_);
    }

    // optional .enterprise_management.DeviceBatteryChargeModeProto device_battery_charge_mode = 87;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_battery_charge_mode_);
    }

    // optional .enterprise_management.DeviceUsbPowerShareProto device_usb_power_share = 88;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_usb_power_share_);
    }

    // optional .enterprise_management.DeviceScheduledUpdateCheckProto device_scheduled_update_check = 89;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_scheduled_update_check_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .enterprise_management.DevicePowerwashAllowedProto device_powerwash_allowed = 91;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_powerwash_allowed_);
    }

    // optional .enterprise_management.DeviceLoginScreenWebUsbAllowDevicesForUrlsProto device_login_screen_webusb_allow_devices_for_urls = 92;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_login_screen_webusb_allow_devices_for_urls_);
    }

    // optional .enterprise_management.BooleanPolicyProto device_login_screen_system_info_enforced = 93;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_login_screen_system_info_enforced_);
    }

    // optional .enterprise_management.StringListPolicyProto device_web_based_attestation_allowed_urls = 94;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_web_based_attestation_allowed_urls_);
    }

    // optional .enterprise_management.BooleanPolicyProto device_show_numeric_keyboard_for_password = 95;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_show_numeric_keyboard_for_password_);
    }

    // optional .enterprise_management.BooleanPolicyProto login_screen_primary_mouse_button_switch = 96;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *login_screen_primary_mouse_button_switch_);
    }

    // optional .enterprise_management.StringPolicyProto minimum_chrome_version_enforced = 97;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *minimum_chrome_version_enforced_);
    }

    // optional .enterprise_management.SystemProxySettingsProto system_proxy_settings = 98;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *system_proxy_settings_);
    }

  }
  cached_has_bits = _has_bits_[3];
  if (cached_has_bits & 0x00000007u) {
    // optional .enterprise_management.IntegerPolicyProto device_chrome_variations_type = 99;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_chrome_variations_type_);
    }

    // optional .enterprise_management.DeviceLoginScreenPrivacyScreenEnabledProto device_login_screen_privacy_screen_enabled = 100;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_login_screen_privacy_screen_enabled_);
    }

    // optional .enterprise_management.RequiredClientCertificateForDeviceProto required_client_certificate_for_device = 101;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *required_client_certificate_for_device_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeDeviceSettingsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ChromeDeviceSettingsProto*>(
      &from));
}

void ChromeDeviceSettingsProto::MergeFrom(const ChromeDeviceSettingsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.ChromeDeviceSettingsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_device_policy_refresh_rate()->::enterprise_management::DevicePolicyRefreshRateProto::MergeFrom(from._internal_device_policy_refresh_rate());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_user_whitelist()->::enterprise_management::UserWhitelistProto::MergeFrom(from._internal_user_whitelist());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_guest_mode_enabled()->::enterprise_management::GuestModeEnabledProto::MergeFrom(from._internal_guest_mode_enabled());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_device_proxy_settings()->::enterprise_management::OBSOLETE_DeviceProxySettingsProto::MergeFrom(from._internal_device_proxy_settings());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_camera_enabled()->::enterprise_management::CameraEnabledProto::MergeFrom(from._internal_camera_enabled());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_show_user_names()->::enterprise_management::ShowUserNamesOnSigninProto::MergeFrom(from._internal_show_user_names());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_data_roaming_enabled()->::enterprise_management::DataRoamingEnabledProto::MergeFrom(from._internal_data_roaming_enabled());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_allow_new_users()->::enterprise_management::AllowNewUsersProto::MergeFrom(from._internal_allow_new_users());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_metrics_enabled()->::enterprise_management::MetricsEnabledProto::MergeFrom(from._internal_metrics_enabled());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_release_channel()->::enterprise_management::ReleaseChannelProto::MergeFrom(from._internal_release_channel());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_open_network_configuration()->::enterprise_management::DeviceOpenNetworkConfigurationProto::MergeFrom(from._internal_open_network_configuration());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_device_reporting()->::enterprise_management::DeviceReportingProto::MergeFrom(from._internal_device_reporting());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_ephemeral_users_enabled()->::enterprise_management::EphemeralUsersEnabledProto::MergeFrom(from._internal_ephemeral_users_enabled());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_app_pack()->::enterprise_management::OBSOLETE_AppPackProto::MergeFrom(from._internal_app_pack());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_forced_logout_timeouts()->::enterprise_management::OBSOLETE_ForcedLogoutTimeoutsProto::MergeFrom(from._internal_forced_logout_timeouts());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_login_screen_saver()->::enterprise_management::OBSOLETE_ScreenSaverProto::MergeFrom(from._internal_login_screen_saver());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_auto_update_settings()->::enterprise_management::AutoUpdateSettingsProto::MergeFrom(from._internal_auto_update_settings());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_start_up_urls()->::enterprise_management::OBSOLETE_StartUpUrlsProto::MergeFrom(from._internal_start_up_urls());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_pinned_apps()->::enterprise_management::OBSOLETE_PinnedAppsProto::MergeFrom(from._internal_pinned_apps());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_system_timezone()->::enterprise_management::SystemTimezoneProto::MergeFrom(from._internal_system_timezone());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_device_local_accounts()->::enterprise_management::DeviceLocalAccountsProto::MergeFrom(from._internal_device_local_accounts());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_mutable_allow_redeem_offers()->::enterprise_management::AllowRedeemChromeOsRegistrationOffersProto::MergeFrom(from._internal_allow_redeem_offers());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_mutable_start_up_flags()->::enterprise_management::StartUpFlagsProto::MergeFrom(from._internal_start_up_flags());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_mutable_uptime_limit()->::enterprise_management::UptimeLimitProto::MergeFrom(from._internal_uptime_limit());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _internal_mutable_variations_parameter()->::enterprise_management::VariationsParameterProto::MergeFrom(from._internal_variations_parameter());
    }
    if (cached_has_bits & 0x02000000u) {
      _internal_mutable_attestation_settings()->::enterprise_management::AttestationSettingsProto::MergeFrom(from._internal_attestation_settings());
    }
    if (cached_has_bits & 0x04000000u) {
      _internal_mutable_accessibility_settings()->::enterprise_management::AccessibilitySettingsProto::MergeFrom(from._internal_accessibility_settings());
    }
    if (cached_has_bits & 0x08000000u) {
      _internal_mutable_supervised_users_settings()->::enterprise_management::OBSOLETE_SupervisedUsersSettingsProto::MergeFrom(from._internal_supervised_users_settings());
    }
    if (cached_has_bits & 0x10000000u) {
      _internal_mutable_login_screen_power_management()->::enterprise_management::LoginScreenPowerManagementProto::MergeFrom(from._internal_login_screen_power_management());
    }
    if (cached_has_bits & 0x20000000u) {
      _internal_mutable_use_24hour_clock()->::enterprise_management::SystemUse24HourClockProto::MergeFrom(from._internal_use_24hour_clock());
    }
    if (cached_has_bits & 0x40000000u) {
      _internal_mutable_auto_clean_up_settings()->::enterprise_management::AutoCleanupSettigsProto::MergeFrom(from._internal_auto_clean_up_settings());
    }
    if (cached_has_bits & 0x80000000u) {
      _internal_mutable_system_settings()->::enterprise_management::SystemSettingsProto::MergeFrom(from._internal_system_settings());
    }
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_saml_settings()->::enterprise_management::SAMLSettingsProto::MergeFrom(from._internal_saml_settings());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_reboot_on_shutdown()->::enterprise_management::RebootOnShutdownProto::MergeFrom(from._internal_reboot_on_shutdown());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_device_heartbeat_settings()->::enterprise_management::DeviceHeartbeatSettingsProto::MergeFrom(from._internal_device_heartbeat_settings());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_extension_cache_size()->::enterprise_management::ExtensionCacheSizeProto::MergeFrom(from._internal_extension_cache_size());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_login_screen_domain_auto_complete()->::enterprise_management::LoginScreenDomainAutoCompleteProto::MergeFrom(from._internal_login_screen_domain_auto_complete());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_device_log_upload_settings()->::enterprise_management::DeviceLogUploadSettingsProto::MergeFrom(from._internal_device_log_upload_settings());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_display_rotation_default()->::enterprise_management::DisplayRotationDefaultProto::MergeFrom(from._internal_display_rotation_default());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_allow_kiosk_app_control_chrome_version()->::enterprise_management::AllowKioskAppControlChromeVersionProto::MergeFrom(from._internal_allow_kiosk_app_control_chrome_version());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_login_authentication_behavior()->::enterprise_management::LoginAuthenticationBehaviorProto::MergeFrom(from._internal_login_authentication_behavior());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_usb_detachable_whitelist()->::enterprise_management::UsbDetachableWhitelistProto::MergeFrom(from._internal_usb_detachable_whitelist());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_allow_bluetooth()->::enterprise_management::AllowBluetoothProto::MergeFrom(from._internal_allow_bluetooth());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_quirks_download_enabled()->::enterprise_management::DeviceQuirksDownloadEnabledProto::MergeFrom(from._internal_quirks_download_enabled());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_login_video_capture_allowed_urls()->::enterprise_management::LoginVideoCaptureAllowedUrlsProto::MergeFrom(from._internal_login_video_capture_allowed_urls());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_device_login_screen_extensions()->::enterprise_management::DeviceLoginScreenExtensionsProto::MergeFrom(from._internal_device_login_screen_extensions());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_network_throttling()->::enterprise_management::NetworkThrottlingEnabledProto::MergeFrom(from._internal_network_throttling());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_device_wallpaper_image()->::enterprise_management::DeviceWallpaperImageProto::MergeFrom(from._internal_device_wallpaper_image());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_login_screen_locales()->::enterprise_management::LoginScreenLocalesProto::MergeFrom(from._internal_login_screen_locales());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_login_screen_input_methods()->::enterprise_management::LoginScreenInputMethodsProto::MergeFrom(from._internal_login_screen_input_methods());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_device_ecryptfs_migration_strategy()->::enterprise_management::DeviceEcryptfsMigrationStrategyProto::MergeFrom(from._internal_device_ecryptfs_migration_strategy());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_device_second_factor_authentication()->::enterprise_management::DeviceSecondFactorAuthenticationProto::MergeFrom(from._internal_device_second_factor_authentication());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_cast_receiver_name()->::enterprise_management::CastReceiverNameProto::MergeFrom(from._internal_cast_receiver_name());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_mutable_device_off_hours()->::enterprise_management::DeviceOffHoursProto::MergeFrom(from._internal_device_off_hours());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_mutable_native_device_printers()->::enterprise_management::DeviceNativePrintersProto::MergeFrom(from._internal_native_device_printers());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_mutable_native_device_printers_access_mode()->::enterprise_management::DeviceNativePrintersAccessModeProto::MergeFrom(from._internal_native_device_printers_access_mode());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _internal_mutable_native_device_printers_blacklist()->::enterprise_management::DeviceNativePrintersBlacklistProto::MergeFrom(from._internal_native_device_printers_blacklist());
    }
    if (cached_has_bits & 0x02000000u) {
      _internal_mutable_native_device_printers_whitelist()->::enterprise_management::DeviceNativePrintersWhitelistProto::MergeFrom(from._internal_native_device_printers_whitelist());
    }
    if (cached_has_bits & 0x04000000u) {
      _internal_mutable_tpm_firmware_update_settings()->::enterprise_management::TPMFirmwareUpdateSettingsProto::MergeFrom(from._internal_tpm_firmware_update_settings());
    }
    if (cached_has_bits & 0x08000000u) {
      _internal_mutable_minimum_required_version()->::enterprise_management::OBSOLETE_MinimumRequiredVersionProto::MergeFrom(from._internal_minimum_required_version());
    }
    if (cached_has_bits & 0x10000000u) {
      _internal_mutable_device_login_screen_auto_select_certificate_for_urls()->::enterprise_management::DeviceLoginScreenAutoSelectCertificateForUrls::MergeFrom(from._internal_device_login_screen_auto_select_certificate_for_urls());
    }
    if (cached_has_bits & 0x20000000u) {
      _internal_mutable_unaffiliated_arc_allowed()->::enterprise_management::UnaffiliatedArcAllowedProto::MergeFrom(from._internal_unaffiliated_arc_allowed());
    }
    if (cached_has_bits & 0x40000000u) {
      _internal_mutable_network_hostname()->::enterprise_management::NetworkHostnameProto::MergeFrom(from._internal_network_hostname());
    }
    if (cached_has_bits & 0x80000000u) {
      _internal_mutable_device_kerberos_encryption_types()->::enterprise_management::DeviceKerberosEncryptionTypesProto::MergeFrom(from._internal_device_kerberos_encryption_types());
    }
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_device_user_policy_loopback_processing_mode()->::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto::MergeFrom(from._internal_device_user_policy_loopback_processing_mode());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_device_login_screen_isolate_origins()->::enterprise_management::DeviceLoginScreenIsolateOriginsProto::MergeFrom(from._internal_device_login_screen_isolate_origins());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_device_login_screen_site_per_process()->::enterprise_management::DeviceLoginScreenSitePerProcessProto::MergeFrom(from._internal_device_login_screen_site_per_process());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_virtual_machines_allowed()->::enterprise_management::VirtualMachinesAllowedProto::MergeFrom(from._internal_virtual_machines_allowed());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_device_machine_password_change_rate()->::enterprise_management::DeviceMachinePasswordChangeRateProto::MergeFrom(from._internal_device_machine_password_change_rate());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_saml_login_authentication_type()->::enterprise_management::SamlLoginAuthenticationTypeProto::MergeFrom(from._internal_saml_login_authentication_type());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_device_unaffiliated_crostini_allowed()->::enterprise_management::DeviceUnaffiliatedCrostiniAllowedProto::MergeFrom(from._internal_device_unaffiliated_crostini_allowed());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_device_wifi_fast_transition_enabled()->::enterprise_management::DeviceWiFiFastTransitionEnabledProto::MergeFrom(from._internal_device_wifi_fast_transition_enabled());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_device_display_resolution()->::enterprise_management::DeviceDisplayResolutionProto::MergeFrom(from._internal_device_display_resolution());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_plugin_vm_allowed()->::enterprise_management::PluginVmAllowedProto::MergeFrom(from._internal_plugin_vm_allowed());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_device_gpo_cache_lifetime()->::enterprise_management::DeviceGpoCacheLifetimeProto::MergeFrom(from._internal_device_gpo_cache_lifetime());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_device_auth_data_cache_lifetime()->::enterprise_management::DeviceAuthDataCacheLifetimeProto::MergeFrom(from._internal_device_auth_data_cache_lifetime());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_plugin_vm_license_key()->::enterprise_management::PluginVmLicenseKeyProto::MergeFrom(from._internal_plugin_vm_license_key());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_device_reboot_on_user_signout()->::enterprise_management::DeviceRebootOnUserSignoutProto::MergeFrom(from._internal_device_reboot_on_user_signout());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_device_wilco_dtc_allowed()->::enterprise_management::DeviceWilcoDtcAllowedProto::MergeFrom(from._internal_device_wilco_dtc_allowed());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_device_wilco_dtc_configuration()->::enterprise_management::DeviceWilcoDtcConfigurationProto::MergeFrom(from._internal_device_wilco_dtc_configuration());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_device_wifi_allowed()->::enterprise_management::DeviceWiFiAllowedProto::MergeFrom(from._internal_device_wifi_allowed());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_device_power_peak_shift()->::enterprise_management::DevicePowerPeakShiftProto::MergeFrom(from._internal_device_power_peak_shift());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_device_boot_on_ac()->::enterprise_management::DeviceBootOnAcProto::MergeFrom(from._internal_device_boot_on_ac());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_device_dock_mac_address_source()->::enterprise_management::DeviceDockMacAddressSourceProto::MergeFrom(from._internal_device_dock_mac_address_source());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_device_advanced_battery_charge_mode()->::enterprise_management::DeviceAdvancedBatteryChargeModeProto::MergeFrom(from._internal_device_advanced_battery_charge_mode());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_mutable_device_battery_charge_mode()->::enterprise_management::DeviceBatteryChargeModeProto::MergeFrom(from._internal_device_battery_charge_mode());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_mutable_device_usb_power_share()->::enterprise_management::DeviceUsbPowerShareProto::MergeFrom(from._internal_device_usb_power_share());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_mutable_device_scheduled_update_check()->::enterprise_management::DeviceScheduledUpdateCheckProto::MergeFrom(from._internal_device_scheduled_update_check());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _internal_mutable_device_powerwash_allowed()->::enterprise_management::DevicePowerwashAllowedProto::MergeFrom(from._internal_device_powerwash_allowed());
    }
    if (cached_has_bits & 0x02000000u) {
      _internal_mutable_device_login_screen_webusb_allow_devices_for_urls()->::enterprise_management::DeviceLoginScreenWebUsbAllowDevicesForUrlsProto::MergeFrom(from._internal_device_login_screen_webusb_allow_devices_for_urls());
    }
    if (cached_has_bits & 0x04000000u) {
      _internal_mutable_device_login_screen_system_info_enforced()->::enterprise_management::BooleanPolicyProto::MergeFrom(from._internal_device_login_screen_system_info_enforced());
    }
    if (cached_has_bits & 0x08000000u) {
      _internal_mutable_device_web_based_attestation_allowed_urls()->::enterprise_management::StringListPolicyProto::MergeFrom(from._internal_device_web_based_attestation_allowed_urls());
    }
    if (cached_has_bits & 0x10000000u) {
      _internal_mutable_device_show_numeric_keyboard_for_password()->::enterprise_management::BooleanPolicyProto::MergeFrom(from._internal_device_show_numeric_keyboard_for_password());
    }
    if (cached_has_bits & 0x20000000u) {
      _internal_mutable_login_screen_primary_mouse_button_switch()->::enterprise_management::BooleanPolicyProto::MergeFrom(from._internal_login_screen_primary_mouse_button_switch());
    }
    if (cached_has_bits & 0x40000000u) {
      _internal_mutable_minimum_chrome_version_enforced()->::enterprise_management::StringPolicyProto::MergeFrom(from._internal_minimum_chrome_version_enforced());
    }
    if (cached_has_bits & 0x80000000u) {
      _internal_mutable_system_proxy_settings()->::enterprise_management::SystemProxySettingsProto::MergeFrom(from._internal_system_proxy_settings());
    }
  }
  cached_has_bits = from._has_bits_[3];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_device_chrome_variations_type()->::enterprise_management::IntegerPolicyProto::MergeFrom(from._internal_device_chrome_variations_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_device_login_screen_privacy_screen_enabled()->::enterprise_management::DeviceLoginScreenPrivacyScreenEnabledProto::MergeFrom(from._internal_device_login_screen_privacy_screen_enabled());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_required_client_certificate_for_device()->::enterprise_management::RequiredClientCertificateForDeviceProto::MergeFrom(from._internal_required_client_certificate_for_device());
    }
  }
}

void ChromeDeviceSettingsProto::CopyFrom(const ChromeDeviceSettingsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.ChromeDeviceSettingsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeDeviceSettingsProto::IsInitialized() const {
  return true;
}

void ChromeDeviceSettingsProto::InternalSwap(ChromeDeviceSettingsProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(_has_bits_[2], other->_has_bits_[2]);
  swap(_has_bits_[3], other->_has_bits_[3]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChromeDeviceSettingsProto, required_client_certificate_for_device_)
      + sizeof(ChromeDeviceSettingsProto::required_client_certificate_for_device_)
      - PROTOBUF_FIELD_OFFSET(ChromeDeviceSettingsProto, device_policy_refresh_rate_)>(
          reinterpret_cast<char*>(&device_policy_refresh_rate_),
          reinterpret_cast<char*>(&other->device_policy_refresh_rate_));
}

std::string ChromeDeviceSettingsProto::GetTypeName() const {
  return "enterprise_management.ChromeDeviceSettingsProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace enterprise_management
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::enterprise_management::DevicePolicyRefreshRateProto* Arena::CreateMaybeMessage< ::enterprise_management::DevicePolicyRefreshRateProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::DevicePolicyRefreshRateProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::UserWhitelistProto* Arena::CreateMaybeMessage< ::enterprise_management::UserWhitelistProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::UserWhitelistProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::AllowNewUsersProto* Arena::CreateMaybeMessage< ::enterprise_management::AllowNewUsersProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::AllowNewUsersProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::GuestModeEnabledProto* Arena::CreateMaybeMessage< ::enterprise_management::GuestModeEnabledProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::GuestModeEnabledProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::ShowUserNamesOnSigninProto* Arena::CreateMaybeMessage< ::enterprise_management::ShowUserNamesOnSigninProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::ShowUserNamesOnSigninProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DataRoamingEnabledProto* Arena::CreateMaybeMessage< ::enterprise_management::DataRoamingEnabledProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::DataRoamingEnabledProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::OBSOLETE_DeviceProxySettingsProto* Arena::CreateMaybeMessage< ::enterprise_management::OBSOLETE_DeviceProxySettingsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::OBSOLETE_DeviceProxySettingsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::CameraEnabledProto* Arena::CreateMaybeMessage< ::enterprise_management::CameraEnabledProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::CameraEnabledProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::MetricsEnabledProto* Arena::CreateMaybeMessage< ::enterprise_management::MetricsEnabledProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::MetricsEnabledProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::ReleaseChannelProto* Arena::CreateMaybeMessage< ::enterprise_management::ReleaseChannelProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::ReleaseChannelProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceOpenNetworkConfigurationProto* Arena::CreateMaybeMessage< ::enterprise_management::DeviceOpenNetworkConfigurationProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::DeviceOpenNetworkConfigurationProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::NetworkHostnameProto* Arena::CreateMaybeMessage< ::enterprise_management::NetworkHostnameProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::NetworkHostnameProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceReportingProto* Arena::CreateMaybeMessage< ::enterprise_management::DeviceReportingProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::DeviceReportingProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::EphemeralUsersEnabledProto* Arena::CreateMaybeMessage< ::enterprise_management::EphemeralUsersEnabledProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::EphemeralUsersEnabledProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::OBSOLETE_AppPackEntryProto* Arena::CreateMaybeMessage< ::enterprise_management::OBSOLETE_AppPackEntryProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::OBSOLETE_AppPackEntryProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::OBSOLETE_AppPackProto* Arena::CreateMaybeMessage< ::enterprise_management::OBSOLETE_AppPackProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::OBSOLETE_AppPackProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::OBSOLETE_PinnedAppsProto* Arena::CreateMaybeMessage< ::enterprise_management::OBSOLETE_PinnedAppsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::OBSOLETE_PinnedAppsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::OBSOLETE_ForcedLogoutTimeoutsProto* Arena::CreateMaybeMessage< ::enterprise_management::OBSOLETE_ForcedLogoutTimeoutsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::OBSOLETE_ForcedLogoutTimeoutsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::OBSOLETE_ScreenSaverProto* Arena::CreateMaybeMessage< ::enterprise_management::OBSOLETE_ScreenSaverProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::OBSOLETE_ScreenSaverProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::AutoUpdateSettingsProto* Arena::CreateMaybeMessage< ::enterprise_management::AutoUpdateSettingsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::AutoUpdateSettingsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::OBSOLETE_StartUpUrlsProto* Arena::CreateMaybeMessage< ::enterprise_management::OBSOLETE_StartUpUrlsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::OBSOLETE_StartUpUrlsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::SystemTimezoneProto* Arena::CreateMaybeMessage< ::enterprise_management::SystemTimezoneProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::SystemTimezoneProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::SystemUse24HourClockProto* Arena::CreateMaybeMessage< ::enterprise_management::SystemUse24HourClockProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::SystemUse24HourClockProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::KioskAppInfoProto* Arena::CreateMaybeMessage< ::enterprise_management::KioskAppInfoProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::KioskAppInfoProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::AndroidKioskAppInfoProto* Arena::CreateMaybeMessage< ::enterprise_management::AndroidKioskAppInfoProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::AndroidKioskAppInfoProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::WebKioskAppInfoProto* Arena::CreateMaybeMessage< ::enterprise_management::WebKioskAppInfoProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::WebKioskAppInfoProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceLocalAccountInfoProto* Arena::CreateMaybeMessage< ::enterprise_management::DeviceLocalAccountInfoProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::DeviceLocalAccountInfoProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceLocalAccountsProto* Arena::CreateMaybeMessage< ::enterprise_management::DeviceLocalAccountsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::DeviceLocalAccountsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::AllowRedeemChromeOsRegistrationOffersProto* Arena::CreateMaybeMessage< ::enterprise_management::AllowRedeemChromeOsRegistrationOffersProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::AllowRedeemChromeOsRegistrationOffersProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::StartUpFlagsProto* Arena::CreateMaybeMessage< ::enterprise_management::StartUpFlagsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::StartUpFlagsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::UptimeLimitProto* Arena::CreateMaybeMessage< ::enterprise_management::UptimeLimitProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::UptimeLimitProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::VariationsParameterProto* Arena::CreateMaybeMessage< ::enterprise_management::VariationsParameterProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::VariationsParameterProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::AttestationSettingsProto* Arena::CreateMaybeMessage< ::enterprise_management::AttestationSettingsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::AttestationSettingsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::AccessibilitySettingsProto* Arena::CreateMaybeMessage< ::enterprise_management::AccessibilitySettingsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::AccessibilitySettingsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::OBSOLETE_SupervisedUsersSettingsProto* Arena::CreateMaybeMessage< ::enterprise_management::OBSOLETE_SupervisedUsersSettingsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::OBSOLETE_SupervisedUsersSettingsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::LoginScreenPowerManagementProto* Arena::CreateMaybeMessage< ::enterprise_management::LoginScreenPowerManagementProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::LoginScreenPowerManagementProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::AutoCleanupSettigsProto* Arena::CreateMaybeMessage< ::enterprise_management::AutoCleanupSettigsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::AutoCleanupSettigsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::SystemSettingsProto* Arena::CreateMaybeMessage< ::enterprise_management::SystemSettingsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::SystemSettingsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::SAMLSettingsProto* Arena::CreateMaybeMessage< ::enterprise_management::SAMLSettingsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::SAMLSettingsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::RebootOnShutdownProto* Arena::CreateMaybeMessage< ::enterprise_management::RebootOnShutdownProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::RebootOnShutdownProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceHeartbeatSettingsProto* Arena::CreateMaybeMessage< ::enterprise_management::DeviceHeartbeatSettingsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::DeviceHeartbeatSettingsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::ExtensionCacheSizeProto* Arena::CreateMaybeMessage< ::enterprise_management::ExtensionCacheSizeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::ExtensionCacheSizeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::LoginScreenDomainAutoCompleteProto* Arena::CreateMaybeMessage< ::enterprise_management::LoginScreenDomainAutoCompleteProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::LoginScreenDomainAutoCompleteProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceLogUploadSettingsProto* Arena::CreateMaybeMessage< ::enterprise_management::DeviceLogUploadSettingsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::DeviceLogUploadSettingsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DisplayRotationDefaultProto* Arena::CreateMaybeMessage< ::enterprise_management::DisplayRotationDefaultProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::DisplayRotationDefaultProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceLoginScreenPrivacyScreenEnabledProto* Arena::CreateMaybeMessage< ::enterprise_management::DeviceLoginScreenPrivacyScreenEnabledProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::DeviceLoginScreenPrivacyScreenEnabledProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceDisplayResolutionProto* Arena::CreateMaybeMessage< ::enterprise_management::DeviceDisplayResolutionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::DeviceDisplayResolutionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::AllowKioskAppControlChromeVersionProto* Arena::CreateMaybeMessage< ::enterprise_management::AllowKioskAppControlChromeVersionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::AllowKioskAppControlChromeVersionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::LoginAuthenticationBehaviorProto* Arena::CreateMaybeMessage< ::enterprise_management::LoginAuthenticationBehaviorProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::LoginAuthenticationBehaviorProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::UsbDeviceIdProto* Arena::CreateMaybeMessage< ::enterprise_management::UsbDeviceIdProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::UsbDeviceIdProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::UsbDetachableWhitelistProto* Arena::CreateMaybeMessage< ::enterprise_management::UsbDetachableWhitelistProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::UsbDetachableWhitelistProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::AllowBluetoothProto* Arena::CreateMaybeMessage< ::enterprise_management::AllowBluetoothProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::AllowBluetoothProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceWiFiAllowedProto* Arena::CreateMaybeMessage< ::enterprise_management::DeviceWiFiAllowedProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::DeviceWiFiAllowedProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceQuirksDownloadEnabledProto* Arena::CreateMaybeMessage< ::enterprise_management::DeviceQuirksDownloadEnabledProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::DeviceQuirksDownloadEnabledProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::LoginVideoCaptureAllowedUrlsProto* Arena::CreateMaybeMessage< ::enterprise_management::LoginVideoCaptureAllowedUrlsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::LoginVideoCaptureAllowedUrlsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceWiFiFastTransitionEnabledProto* Arena::CreateMaybeMessage< ::enterprise_management::DeviceWiFiFastTransitionEnabledProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::DeviceWiFiFastTransitionEnabledProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::NetworkThrottlingEnabledProto* Arena::CreateMaybeMessage< ::enterprise_management::NetworkThrottlingEnabledProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::NetworkThrottlingEnabledProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceLoginScreenExtensionsProto* Arena::CreateMaybeMessage< ::enterprise_management::DeviceLoginScreenExtensionsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::DeviceLoginScreenExtensionsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::LoginScreenLocalesProto* Arena::CreateMaybeMessage< ::enterprise_management::LoginScreenLocalesProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::LoginScreenLocalesProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::LoginScreenInputMethodsProto* Arena::CreateMaybeMessage< ::enterprise_management::LoginScreenInputMethodsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::LoginScreenInputMethodsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceWallpaperImageProto* Arena::CreateMaybeMessage< ::enterprise_management::DeviceWallpaperImageProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::DeviceWallpaperImageProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceEcryptfsMigrationStrategyProto* Arena::CreateMaybeMessage< ::enterprise_management::DeviceEcryptfsMigrationStrategyProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::DeviceEcryptfsMigrationStrategyProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceSecondFactorAuthenticationProto* Arena::CreateMaybeMessage< ::enterprise_management::DeviceSecondFactorAuthenticationProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::DeviceSecondFactorAuthenticationProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::CastReceiverNameProto* Arena::CreateMaybeMessage< ::enterprise_management::CastReceiverNameProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::CastReceiverNameProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::WeeklyTimeProto* Arena::CreateMaybeMessage< ::enterprise_management::WeeklyTimeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::WeeklyTimeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::WeeklyTimeIntervalProto* Arena::CreateMaybeMessage< ::enterprise_management::WeeklyTimeIntervalProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::WeeklyTimeIntervalProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceOffHoursProto* Arena::CreateMaybeMessage< ::enterprise_management::DeviceOffHoursProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::DeviceOffHoursProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceNativePrintersProto* Arena::CreateMaybeMessage< ::enterprise_management::DeviceNativePrintersProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::DeviceNativePrintersProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceNativePrintersAccessModeProto* Arena::CreateMaybeMessage< ::enterprise_management::DeviceNativePrintersAccessModeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::DeviceNativePrintersAccessModeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceNativePrintersBlacklistProto* Arena::CreateMaybeMessage< ::enterprise_management::DeviceNativePrintersBlacklistProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::DeviceNativePrintersBlacklistProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceNativePrintersWhitelistProto* Arena::CreateMaybeMessage< ::enterprise_management::DeviceNativePrintersWhitelistProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::DeviceNativePrintersWhitelistProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::TPMFirmwareUpdateSettingsProto* Arena::CreateMaybeMessage< ::enterprise_management::TPMFirmwareUpdateSettingsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::TPMFirmwareUpdateSettingsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::OBSOLETE_MinimumRequiredVersionProto* Arena::CreateMaybeMessage< ::enterprise_management::OBSOLETE_MinimumRequiredVersionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::OBSOLETE_MinimumRequiredVersionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceLoginScreenAutoSelectCertificateForUrls* Arena::CreateMaybeMessage< ::enterprise_management::DeviceLoginScreenAutoSelectCertificateForUrls >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::DeviceLoginScreenAutoSelectCertificateForUrls >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::UnaffiliatedArcAllowedProto* Arena::CreateMaybeMessage< ::enterprise_management::UnaffiliatedArcAllowedProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::UnaffiliatedArcAllowedProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceKerberosEncryptionTypesProto* Arena::CreateMaybeMessage< ::enterprise_management::DeviceKerberosEncryptionTypesProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::DeviceKerberosEncryptionTypesProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto* Arena::CreateMaybeMessage< ::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceLoginScreenIsolateOriginsProto* Arena::CreateMaybeMessage< ::enterprise_management::DeviceLoginScreenIsolateOriginsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::DeviceLoginScreenIsolateOriginsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceLoginScreenSitePerProcessProto* Arena::CreateMaybeMessage< ::enterprise_management::DeviceLoginScreenSitePerProcessProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::DeviceLoginScreenSitePerProcessProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::VirtualMachinesAllowedProto* Arena::CreateMaybeMessage< ::enterprise_management::VirtualMachinesAllowedProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::VirtualMachinesAllowedProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceMachinePasswordChangeRateProto* Arena::CreateMaybeMessage< ::enterprise_management::DeviceMachinePasswordChangeRateProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::DeviceMachinePasswordChangeRateProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceGpoCacheLifetimeProto* Arena::CreateMaybeMessage< ::enterprise_management::DeviceGpoCacheLifetimeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::DeviceGpoCacheLifetimeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceAuthDataCacheLifetimeProto* Arena::CreateMaybeMessage< ::enterprise_management::DeviceAuthDataCacheLifetimeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::DeviceAuthDataCacheLifetimeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::SamlLoginAuthenticationTypeProto* Arena::CreateMaybeMessage< ::enterprise_management::SamlLoginAuthenticationTypeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::SamlLoginAuthenticationTypeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceUnaffiliatedCrostiniAllowedProto* Arena::CreateMaybeMessage< ::enterprise_management::DeviceUnaffiliatedCrostiniAllowedProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::DeviceUnaffiliatedCrostiniAllowedProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::PluginVmAllowedProto* Arena::CreateMaybeMessage< ::enterprise_management::PluginVmAllowedProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::PluginVmAllowedProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::PluginVmLicenseKeyProto* Arena::CreateMaybeMessage< ::enterprise_management::PluginVmLicenseKeyProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::PluginVmLicenseKeyProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceRebootOnUserSignoutProto* Arena::CreateMaybeMessage< ::enterprise_management::DeviceRebootOnUserSignoutProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::DeviceRebootOnUserSignoutProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceWilcoDtcAllowedProto* Arena::CreateMaybeMessage< ::enterprise_management::DeviceWilcoDtcAllowedProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::DeviceWilcoDtcAllowedProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceWilcoDtcConfigurationProto* Arena::CreateMaybeMessage< ::enterprise_management::DeviceWilcoDtcConfigurationProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::DeviceWilcoDtcConfigurationProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DevicePowerPeakShiftProto* Arena::CreateMaybeMessage< ::enterprise_management::DevicePowerPeakShiftProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::DevicePowerPeakShiftProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceBootOnAcProto* Arena::CreateMaybeMessage< ::enterprise_management::DeviceBootOnAcProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::DeviceBootOnAcProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceDockMacAddressSourceProto* Arena::CreateMaybeMessage< ::enterprise_management::DeviceDockMacAddressSourceProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::DeviceDockMacAddressSourceProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceAdvancedBatteryChargeModeProto* Arena::CreateMaybeMessage< ::enterprise_management::DeviceAdvancedBatteryChargeModeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::DeviceAdvancedBatteryChargeModeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceBatteryChargeModeProto* Arena::CreateMaybeMessage< ::enterprise_management::DeviceBatteryChargeModeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::DeviceBatteryChargeModeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceUsbPowerShareProto* Arena::CreateMaybeMessage< ::enterprise_management::DeviceUsbPowerShareProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::DeviceUsbPowerShareProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceScheduledUpdateCheckProto* Arena::CreateMaybeMessage< ::enterprise_management::DeviceScheduledUpdateCheckProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::DeviceScheduledUpdateCheckProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DevicePowerwashAllowedProto* Arena::CreateMaybeMessage< ::enterprise_management::DevicePowerwashAllowedProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::DevicePowerwashAllowedProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::DeviceLoginScreenWebUsbAllowDevicesForUrlsProto* Arena::CreateMaybeMessage< ::enterprise_management::DeviceLoginScreenWebUsbAllowDevicesForUrlsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::DeviceLoginScreenWebUsbAllowDevicesForUrlsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::SystemProxySettingsProto* Arena::CreateMaybeMessage< ::enterprise_management::SystemProxySettingsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::SystemProxySettingsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::RequiredClientCertificateForDeviceProto* Arena::CreateMaybeMessage< ::enterprise_management::RequiredClientCertificateForDeviceProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::RequiredClientCertificateForDeviceProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::ChromeDeviceSettingsProto* Arena::CreateMaybeMessage< ::enterprise_management::ChromeDeviceSettingsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::ChromeDeviceSettingsProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
