// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chrome_device_policy.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chrome_5fdevice_5fpolicy_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chrome_5fdevice_5fpolicy_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "policy_common_definitions.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chrome_5fdevice_5fpolicy_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chrome_5fdevice_5fpolicy_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[102]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace enterprise_management {
class AccessibilitySettingsProto;
class AccessibilitySettingsProtoDefaultTypeInternal;
extern AccessibilitySettingsProtoDefaultTypeInternal _AccessibilitySettingsProto_default_instance_;
class AllowBluetoothProto;
class AllowBluetoothProtoDefaultTypeInternal;
extern AllowBluetoothProtoDefaultTypeInternal _AllowBluetoothProto_default_instance_;
class AllowKioskAppControlChromeVersionProto;
class AllowKioskAppControlChromeVersionProtoDefaultTypeInternal;
extern AllowKioskAppControlChromeVersionProtoDefaultTypeInternal _AllowKioskAppControlChromeVersionProto_default_instance_;
class AllowNewUsersProto;
class AllowNewUsersProtoDefaultTypeInternal;
extern AllowNewUsersProtoDefaultTypeInternal _AllowNewUsersProto_default_instance_;
class AllowRedeemChromeOsRegistrationOffersProto;
class AllowRedeemChromeOsRegistrationOffersProtoDefaultTypeInternal;
extern AllowRedeemChromeOsRegistrationOffersProtoDefaultTypeInternal _AllowRedeemChromeOsRegistrationOffersProto_default_instance_;
class AndroidKioskAppInfoProto;
class AndroidKioskAppInfoProtoDefaultTypeInternal;
extern AndroidKioskAppInfoProtoDefaultTypeInternal _AndroidKioskAppInfoProto_default_instance_;
class AttestationSettingsProto;
class AttestationSettingsProtoDefaultTypeInternal;
extern AttestationSettingsProtoDefaultTypeInternal _AttestationSettingsProto_default_instance_;
class AutoCleanupSettigsProto;
class AutoCleanupSettigsProtoDefaultTypeInternal;
extern AutoCleanupSettigsProtoDefaultTypeInternal _AutoCleanupSettigsProto_default_instance_;
class AutoUpdateSettingsProto;
class AutoUpdateSettingsProtoDefaultTypeInternal;
extern AutoUpdateSettingsProtoDefaultTypeInternal _AutoUpdateSettingsProto_default_instance_;
class CameraEnabledProto;
class CameraEnabledProtoDefaultTypeInternal;
extern CameraEnabledProtoDefaultTypeInternal _CameraEnabledProto_default_instance_;
class CastReceiverNameProto;
class CastReceiverNameProtoDefaultTypeInternal;
extern CastReceiverNameProtoDefaultTypeInternal _CastReceiverNameProto_default_instance_;
class ChromeDeviceSettingsProto;
class ChromeDeviceSettingsProtoDefaultTypeInternal;
extern ChromeDeviceSettingsProtoDefaultTypeInternal _ChromeDeviceSettingsProto_default_instance_;
class DataRoamingEnabledProto;
class DataRoamingEnabledProtoDefaultTypeInternal;
extern DataRoamingEnabledProtoDefaultTypeInternal _DataRoamingEnabledProto_default_instance_;
class DeviceAdvancedBatteryChargeModeProto;
class DeviceAdvancedBatteryChargeModeProtoDefaultTypeInternal;
extern DeviceAdvancedBatteryChargeModeProtoDefaultTypeInternal _DeviceAdvancedBatteryChargeModeProto_default_instance_;
class DeviceAuthDataCacheLifetimeProto;
class DeviceAuthDataCacheLifetimeProtoDefaultTypeInternal;
extern DeviceAuthDataCacheLifetimeProtoDefaultTypeInternal _DeviceAuthDataCacheLifetimeProto_default_instance_;
class DeviceBatteryChargeModeProto;
class DeviceBatteryChargeModeProtoDefaultTypeInternal;
extern DeviceBatteryChargeModeProtoDefaultTypeInternal _DeviceBatteryChargeModeProto_default_instance_;
class DeviceBootOnAcProto;
class DeviceBootOnAcProtoDefaultTypeInternal;
extern DeviceBootOnAcProtoDefaultTypeInternal _DeviceBootOnAcProto_default_instance_;
class DeviceDisplayResolutionProto;
class DeviceDisplayResolutionProtoDefaultTypeInternal;
extern DeviceDisplayResolutionProtoDefaultTypeInternal _DeviceDisplayResolutionProto_default_instance_;
class DeviceDockMacAddressSourceProto;
class DeviceDockMacAddressSourceProtoDefaultTypeInternal;
extern DeviceDockMacAddressSourceProtoDefaultTypeInternal _DeviceDockMacAddressSourceProto_default_instance_;
class DeviceEcryptfsMigrationStrategyProto;
class DeviceEcryptfsMigrationStrategyProtoDefaultTypeInternal;
extern DeviceEcryptfsMigrationStrategyProtoDefaultTypeInternal _DeviceEcryptfsMigrationStrategyProto_default_instance_;
class DeviceGpoCacheLifetimeProto;
class DeviceGpoCacheLifetimeProtoDefaultTypeInternal;
extern DeviceGpoCacheLifetimeProtoDefaultTypeInternal _DeviceGpoCacheLifetimeProto_default_instance_;
class DeviceHeartbeatSettingsProto;
class DeviceHeartbeatSettingsProtoDefaultTypeInternal;
extern DeviceHeartbeatSettingsProtoDefaultTypeInternal _DeviceHeartbeatSettingsProto_default_instance_;
class DeviceKerberosEncryptionTypesProto;
class DeviceKerberosEncryptionTypesProtoDefaultTypeInternal;
extern DeviceKerberosEncryptionTypesProtoDefaultTypeInternal _DeviceKerberosEncryptionTypesProto_default_instance_;
class DeviceLocalAccountInfoProto;
class DeviceLocalAccountInfoProtoDefaultTypeInternal;
extern DeviceLocalAccountInfoProtoDefaultTypeInternal _DeviceLocalAccountInfoProto_default_instance_;
class DeviceLocalAccountsProto;
class DeviceLocalAccountsProtoDefaultTypeInternal;
extern DeviceLocalAccountsProtoDefaultTypeInternal _DeviceLocalAccountsProto_default_instance_;
class DeviceLogUploadSettingsProto;
class DeviceLogUploadSettingsProtoDefaultTypeInternal;
extern DeviceLogUploadSettingsProtoDefaultTypeInternal _DeviceLogUploadSettingsProto_default_instance_;
class DeviceLoginScreenAutoSelectCertificateForUrls;
class DeviceLoginScreenAutoSelectCertificateForUrlsDefaultTypeInternal;
extern DeviceLoginScreenAutoSelectCertificateForUrlsDefaultTypeInternal _DeviceLoginScreenAutoSelectCertificateForUrls_default_instance_;
class DeviceLoginScreenExtensionsProto;
class DeviceLoginScreenExtensionsProtoDefaultTypeInternal;
extern DeviceLoginScreenExtensionsProtoDefaultTypeInternal _DeviceLoginScreenExtensionsProto_default_instance_;
class DeviceLoginScreenIsolateOriginsProto;
class DeviceLoginScreenIsolateOriginsProtoDefaultTypeInternal;
extern DeviceLoginScreenIsolateOriginsProtoDefaultTypeInternal _DeviceLoginScreenIsolateOriginsProto_default_instance_;
class DeviceLoginScreenPrivacyScreenEnabledProto;
class DeviceLoginScreenPrivacyScreenEnabledProtoDefaultTypeInternal;
extern DeviceLoginScreenPrivacyScreenEnabledProtoDefaultTypeInternal _DeviceLoginScreenPrivacyScreenEnabledProto_default_instance_;
class DeviceLoginScreenSitePerProcessProto;
class DeviceLoginScreenSitePerProcessProtoDefaultTypeInternal;
extern DeviceLoginScreenSitePerProcessProtoDefaultTypeInternal _DeviceLoginScreenSitePerProcessProto_default_instance_;
class DeviceLoginScreenWebUsbAllowDevicesForUrlsProto;
class DeviceLoginScreenWebUsbAllowDevicesForUrlsProtoDefaultTypeInternal;
extern DeviceLoginScreenWebUsbAllowDevicesForUrlsProtoDefaultTypeInternal _DeviceLoginScreenWebUsbAllowDevicesForUrlsProto_default_instance_;
class DeviceMachinePasswordChangeRateProto;
class DeviceMachinePasswordChangeRateProtoDefaultTypeInternal;
extern DeviceMachinePasswordChangeRateProtoDefaultTypeInternal _DeviceMachinePasswordChangeRateProto_default_instance_;
class DeviceNativePrintersAccessModeProto;
class DeviceNativePrintersAccessModeProtoDefaultTypeInternal;
extern DeviceNativePrintersAccessModeProtoDefaultTypeInternal _DeviceNativePrintersAccessModeProto_default_instance_;
class DeviceNativePrintersBlacklistProto;
class DeviceNativePrintersBlacklistProtoDefaultTypeInternal;
extern DeviceNativePrintersBlacklistProtoDefaultTypeInternal _DeviceNativePrintersBlacklistProto_default_instance_;
class DeviceNativePrintersProto;
class DeviceNativePrintersProtoDefaultTypeInternal;
extern DeviceNativePrintersProtoDefaultTypeInternal _DeviceNativePrintersProto_default_instance_;
class DeviceNativePrintersWhitelistProto;
class DeviceNativePrintersWhitelistProtoDefaultTypeInternal;
extern DeviceNativePrintersWhitelistProtoDefaultTypeInternal _DeviceNativePrintersWhitelistProto_default_instance_;
class DeviceOffHoursProto;
class DeviceOffHoursProtoDefaultTypeInternal;
extern DeviceOffHoursProtoDefaultTypeInternal _DeviceOffHoursProto_default_instance_;
class DeviceOpenNetworkConfigurationProto;
class DeviceOpenNetworkConfigurationProtoDefaultTypeInternal;
extern DeviceOpenNetworkConfigurationProtoDefaultTypeInternal _DeviceOpenNetworkConfigurationProto_default_instance_;
class DevicePolicyRefreshRateProto;
class DevicePolicyRefreshRateProtoDefaultTypeInternal;
extern DevicePolicyRefreshRateProtoDefaultTypeInternal _DevicePolicyRefreshRateProto_default_instance_;
class DevicePowerPeakShiftProto;
class DevicePowerPeakShiftProtoDefaultTypeInternal;
extern DevicePowerPeakShiftProtoDefaultTypeInternal _DevicePowerPeakShiftProto_default_instance_;
class DevicePowerwashAllowedProto;
class DevicePowerwashAllowedProtoDefaultTypeInternal;
extern DevicePowerwashAllowedProtoDefaultTypeInternal _DevicePowerwashAllowedProto_default_instance_;
class DeviceQuirksDownloadEnabledProto;
class DeviceQuirksDownloadEnabledProtoDefaultTypeInternal;
extern DeviceQuirksDownloadEnabledProtoDefaultTypeInternal _DeviceQuirksDownloadEnabledProto_default_instance_;
class DeviceRebootOnUserSignoutProto;
class DeviceRebootOnUserSignoutProtoDefaultTypeInternal;
extern DeviceRebootOnUserSignoutProtoDefaultTypeInternal _DeviceRebootOnUserSignoutProto_default_instance_;
class DeviceReportingProto;
class DeviceReportingProtoDefaultTypeInternal;
extern DeviceReportingProtoDefaultTypeInternal _DeviceReportingProto_default_instance_;
class DeviceScheduledUpdateCheckProto;
class DeviceScheduledUpdateCheckProtoDefaultTypeInternal;
extern DeviceScheduledUpdateCheckProtoDefaultTypeInternal _DeviceScheduledUpdateCheckProto_default_instance_;
class DeviceSecondFactorAuthenticationProto;
class DeviceSecondFactorAuthenticationProtoDefaultTypeInternal;
extern DeviceSecondFactorAuthenticationProtoDefaultTypeInternal _DeviceSecondFactorAuthenticationProto_default_instance_;
class DeviceUnaffiliatedCrostiniAllowedProto;
class DeviceUnaffiliatedCrostiniAllowedProtoDefaultTypeInternal;
extern DeviceUnaffiliatedCrostiniAllowedProtoDefaultTypeInternal _DeviceUnaffiliatedCrostiniAllowedProto_default_instance_;
class DeviceUsbPowerShareProto;
class DeviceUsbPowerShareProtoDefaultTypeInternal;
extern DeviceUsbPowerShareProtoDefaultTypeInternal _DeviceUsbPowerShareProto_default_instance_;
class DeviceUserPolicyLoopbackProcessingModeProto;
class DeviceUserPolicyLoopbackProcessingModeProtoDefaultTypeInternal;
extern DeviceUserPolicyLoopbackProcessingModeProtoDefaultTypeInternal _DeviceUserPolicyLoopbackProcessingModeProto_default_instance_;
class DeviceWallpaperImageProto;
class DeviceWallpaperImageProtoDefaultTypeInternal;
extern DeviceWallpaperImageProtoDefaultTypeInternal _DeviceWallpaperImageProto_default_instance_;
class DeviceWiFiAllowedProto;
class DeviceWiFiAllowedProtoDefaultTypeInternal;
extern DeviceWiFiAllowedProtoDefaultTypeInternal _DeviceWiFiAllowedProto_default_instance_;
class DeviceWiFiFastTransitionEnabledProto;
class DeviceWiFiFastTransitionEnabledProtoDefaultTypeInternal;
extern DeviceWiFiFastTransitionEnabledProtoDefaultTypeInternal _DeviceWiFiFastTransitionEnabledProto_default_instance_;
class DeviceWilcoDtcAllowedProto;
class DeviceWilcoDtcAllowedProtoDefaultTypeInternal;
extern DeviceWilcoDtcAllowedProtoDefaultTypeInternal _DeviceWilcoDtcAllowedProto_default_instance_;
class DeviceWilcoDtcConfigurationProto;
class DeviceWilcoDtcConfigurationProtoDefaultTypeInternal;
extern DeviceWilcoDtcConfigurationProtoDefaultTypeInternal _DeviceWilcoDtcConfigurationProto_default_instance_;
class DisplayRotationDefaultProto;
class DisplayRotationDefaultProtoDefaultTypeInternal;
extern DisplayRotationDefaultProtoDefaultTypeInternal _DisplayRotationDefaultProto_default_instance_;
class EphemeralUsersEnabledProto;
class EphemeralUsersEnabledProtoDefaultTypeInternal;
extern EphemeralUsersEnabledProtoDefaultTypeInternal _EphemeralUsersEnabledProto_default_instance_;
class ExtensionCacheSizeProto;
class ExtensionCacheSizeProtoDefaultTypeInternal;
extern ExtensionCacheSizeProtoDefaultTypeInternal _ExtensionCacheSizeProto_default_instance_;
class GuestModeEnabledProto;
class GuestModeEnabledProtoDefaultTypeInternal;
extern GuestModeEnabledProtoDefaultTypeInternal _GuestModeEnabledProto_default_instance_;
class KioskAppInfoProto;
class KioskAppInfoProtoDefaultTypeInternal;
extern KioskAppInfoProtoDefaultTypeInternal _KioskAppInfoProto_default_instance_;
class LoginAuthenticationBehaviorProto;
class LoginAuthenticationBehaviorProtoDefaultTypeInternal;
extern LoginAuthenticationBehaviorProtoDefaultTypeInternal _LoginAuthenticationBehaviorProto_default_instance_;
class LoginScreenDomainAutoCompleteProto;
class LoginScreenDomainAutoCompleteProtoDefaultTypeInternal;
extern LoginScreenDomainAutoCompleteProtoDefaultTypeInternal _LoginScreenDomainAutoCompleteProto_default_instance_;
class LoginScreenInputMethodsProto;
class LoginScreenInputMethodsProtoDefaultTypeInternal;
extern LoginScreenInputMethodsProtoDefaultTypeInternal _LoginScreenInputMethodsProto_default_instance_;
class LoginScreenLocalesProto;
class LoginScreenLocalesProtoDefaultTypeInternal;
extern LoginScreenLocalesProtoDefaultTypeInternal _LoginScreenLocalesProto_default_instance_;
class LoginScreenPowerManagementProto;
class LoginScreenPowerManagementProtoDefaultTypeInternal;
extern LoginScreenPowerManagementProtoDefaultTypeInternal _LoginScreenPowerManagementProto_default_instance_;
class LoginVideoCaptureAllowedUrlsProto;
class LoginVideoCaptureAllowedUrlsProtoDefaultTypeInternal;
extern LoginVideoCaptureAllowedUrlsProtoDefaultTypeInternal _LoginVideoCaptureAllowedUrlsProto_default_instance_;
class MetricsEnabledProto;
class MetricsEnabledProtoDefaultTypeInternal;
extern MetricsEnabledProtoDefaultTypeInternal _MetricsEnabledProto_default_instance_;
class NetworkHostnameProto;
class NetworkHostnameProtoDefaultTypeInternal;
extern NetworkHostnameProtoDefaultTypeInternal _NetworkHostnameProto_default_instance_;
class NetworkThrottlingEnabledProto;
class NetworkThrottlingEnabledProtoDefaultTypeInternal;
extern NetworkThrottlingEnabledProtoDefaultTypeInternal _NetworkThrottlingEnabledProto_default_instance_;
class OBSOLETE_AppPackEntryProto;
class OBSOLETE_AppPackEntryProtoDefaultTypeInternal;
extern OBSOLETE_AppPackEntryProtoDefaultTypeInternal _OBSOLETE_AppPackEntryProto_default_instance_;
class OBSOLETE_AppPackProto;
class OBSOLETE_AppPackProtoDefaultTypeInternal;
extern OBSOLETE_AppPackProtoDefaultTypeInternal _OBSOLETE_AppPackProto_default_instance_;
class OBSOLETE_DeviceProxySettingsProto;
class OBSOLETE_DeviceProxySettingsProtoDefaultTypeInternal;
extern OBSOLETE_DeviceProxySettingsProtoDefaultTypeInternal _OBSOLETE_DeviceProxySettingsProto_default_instance_;
class OBSOLETE_ForcedLogoutTimeoutsProto;
class OBSOLETE_ForcedLogoutTimeoutsProtoDefaultTypeInternal;
extern OBSOLETE_ForcedLogoutTimeoutsProtoDefaultTypeInternal _OBSOLETE_ForcedLogoutTimeoutsProto_default_instance_;
class OBSOLETE_MinimumRequiredVersionProto;
class OBSOLETE_MinimumRequiredVersionProtoDefaultTypeInternal;
extern OBSOLETE_MinimumRequiredVersionProtoDefaultTypeInternal _OBSOLETE_MinimumRequiredVersionProto_default_instance_;
class OBSOLETE_PinnedAppsProto;
class OBSOLETE_PinnedAppsProtoDefaultTypeInternal;
extern OBSOLETE_PinnedAppsProtoDefaultTypeInternal _OBSOLETE_PinnedAppsProto_default_instance_;
class OBSOLETE_ScreenSaverProto;
class OBSOLETE_ScreenSaverProtoDefaultTypeInternal;
extern OBSOLETE_ScreenSaverProtoDefaultTypeInternal _OBSOLETE_ScreenSaverProto_default_instance_;
class OBSOLETE_StartUpUrlsProto;
class OBSOLETE_StartUpUrlsProtoDefaultTypeInternal;
extern OBSOLETE_StartUpUrlsProtoDefaultTypeInternal _OBSOLETE_StartUpUrlsProto_default_instance_;
class OBSOLETE_SupervisedUsersSettingsProto;
class OBSOLETE_SupervisedUsersSettingsProtoDefaultTypeInternal;
extern OBSOLETE_SupervisedUsersSettingsProtoDefaultTypeInternal _OBSOLETE_SupervisedUsersSettingsProto_default_instance_;
class PluginVmAllowedProto;
class PluginVmAllowedProtoDefaultTypeInternal;
extern PluginVmAllowedProtoDefaultTypeInternal _PluginVmAllowedProto_default_instance_;
class PluginVmLicenseKeyProto;
class PluginVmLicenseKeyProtoDefaultTypeInternal;
extern PluginVmLicenseKeyProtoDefaultTypeInternal _PluginVmLicenseKeyProto_default_instance_;
class RebootOnShutdownProto;
class RebootOnShutdownProtoDefaultTypeInternal;
extern RebootOnShutdownProtoDefaultTypeInternal _RebootOnShutdownProto_default_instance_;
class ReleaseChannelProto;
class ReleaseChannelProtoDefaultTypeInternal;
extern ReleaseChannelProtoDefaultTypeInternal _ReleaseChannelProto_default_instance_;
class RequiredClientCertificateForDeviceProto;
class RequiredClientCertificateForDeviceProtoDefaultTypeInternal;
extern RequiredClientCertificateForDeviceProtoDefaultTypeInternal _RequiredClientCertificateForDeviceProto_default_instance_;
class SAMLSettingsProto;
class SAMLSettingsProtoDefaultTypeInternal;
extern SAMLSettingsProtoDefaultTypeInternal _SAMLSettingsProto_default_instance_;
class SamlLoginAuthenticationTypeProto;
class SamlLoginAuthenticationTypeProtoDefaultTypeInternal;
extern SamlLoginAuthenticationTypeProtoDefaultTypeInternal _SamlLoginAuthenticationTypeProto_default_instance_;
class ShowUserNamesOnSigninProto;
class ShowUserNamesOnSigninProtoDefaultTypeInternal;
extern ShowUserNamesOnSigninProtoDefaultTypeInternal _ShowUserNamesOnSigninProto_default_instance_;
class StartUpFlagsProto;
class StartUpFlagsProtoDefaultTypeInternal;
extern StartUpFlagsProtoDefaultTypeInternal _StartUpFlagsProto_default_instance_;
class SystemProxySettingsProto;
class SystemProxySettingsProtoDefaultTypeInternal;
extern SystemProxySettingsProtoDefaultTypeInternal _SystemProxySettingsProto_default_instance_;
class SystemSettingsProto;
class SystemSettingsProtoDefaultTypeInternal;
extern SystemSettingsProtoDefaultTypeInternal _SystemSettingsProto_default_instance_;
class SystemTimezoneProto;
class SystemTimezoneProtoDefaultTypeInternal;
extern SystemTimezoneProtoDefaultTypeInternal _SystemTimezoneProto_default_instance_;
class SystemUse24HourClockProto;
class SystemUse24HourClockProtoDefaultTypeInternal;
extern SystemUse24HourClockProtoDefaultTypeInternal _SystemUse24HourClockProto_default_instance_;
class TPMFirmwareUpdateSettingsProto;
class TPMFirmwareUpdateSettingsProtoDefaultTypeInternal;
extern TPMFirmwareUpdateSettingsProtoDefaultTypeInternal _TPMFirmwareUpdateSettingsProto_default_instance_;
class UnaffiliatedArcAllowedProto;
class UnaffiliatedArcAllowedProtoDefaultTypeInternal;
extern UnaffiliatedArcAllowedProtoDefaultTypeInternal _UnaffiliatedArcAllowedProto_default_instance_;
class UptimeLimitProto;
class UptimeLimitProtoDefaultTypeInternal;
extern UptimeLimitProtoDefaultTypeInternal _UptimeLimitProto_default_instance_;
class UsbDetachableWhitelistProto;
class UsbDetachableWhitelistProtoDefaultTypeInternal;
extern UsbDetachableWhitelistProtoDefaultTypeInternal _UsbDetachableWhitelistProto_default_instance_;
class UsbDeviceIdProto;
class UsbDeviceIdProtoDefaultTypeInternal;
extern UsbDeviceIdProtoDefaultTypeInternal _UsbDeviceIdProto_default_instance_;
class UserWhitelistProto;
class UserWhitelistProtoDefaultTypeInternal;
extern UserWhitelistProtoDefaultTypeInternal _UserWhitelistProto_default_instance_;
class VariationsParameterProto;
class VariationsParameterProtoDefaultTypeInternal;
extern VariationsParameterProtoDefaultTypeInternal _VariationsParameterProto_default_instance_;
class VirtualMachinesAllowedProto;
class VirtualMachinesAllowedProtoDefaultTypeInternal;
extern VirtualMachinesAllowedProtoDefaultTypeInternal _VirtualMachinesAllowedProto_default_instance_;
class WebKioskAppInfoProto;
class WebKioskAppInfoProtoDefaultTypeInternal;
extern WebKioskAppInfoProtoDefaultTypeInternal _WebKioskAppInfoProto_default_instance_;
class WeeklyTimeIntervalProto;
class WeeklyTimeIntervalProtoDefaultTypeInternal;
extern WeeklyTimeIntervalProtoDefaultTypeInternal _WeeklyTimeIntervalProto_default_instance_;
class WeeklyTimeProto;
class WeeklyTimeProtoDefaultTypeInternal;
extern WeeklyTimeProtoDefaultTypeInternal _WeeklyTimeProto_default_instance_;
}  // namespace enterprise_management
PROTOBUF_NAMESPACE_OPEN
template<> ::enterprise_management::AccessibilitySettingsProto* Arena::CreateMaybeMessage<::enterprise_management::AccessibilitySettingsProto>(Arena*);
template<> ::enterprise_management::AllowBluetoothProto* Arena::CreateMaybeMessage<::enterprise_management::AllowBluetoothProto>(Arena*);
template<> ::enterprise_management::AllowKioskAppControlChromeVersionProto* Arena::CreateMaybeMessage<::enterprise_management::AllowKioskAppControlChromeVersionProto>(Arena*);
template<> ::enterprise_management::AllowNewUsersProto* Arena::CreateMaybeMessage<::enterprise_management::AllowNewUsersProto>(Arena*);
template<> ::enterprise_management::AllowRedeemChromeOsRegistrationOffersProto* Arena::CreateMaybeMessage<::enterprise_management::AllowRedeemChromeOsRegistrationOffersProto>(Arena*);
template<> ::enterprise_management::AndroidKioskAppInfoProto* Arena::CreateMaybeMessage<::enterprise_management::AndroidKioskAppInfoProto>(Arena*);
template<> ::enterprise_management::AttestationSettingsProto* Arena::CreateMaybeMessage<::enterprise_management::AttestationSettingsProto>(Arena*);
template<> ::enterprise_management::AutoCleanupSettigsProto* Arena::CreateMaybeMessage<::enterprise_management::AutoCleanupSettigsProto>(Arena*);
template<> ::enterprise_management::AutoUpdateSettingsProto* Arena::CreateMaybeMessage<::enterprise_management::AutoUpdateSettingsProto>(Arena*);
template<> ::enterprise_management::CameraEnabledProto* Arena::CreateMaybeMessage<::enterprise_management::CameraEnabledProto>(Arena*);
template<> ::enterprise_management::CastReceiverNameProto* Arena::CreateMaybeMessage<::enterprise_management::CastReceiverNameProto>(Arena*);
template<> ::enterprise_management::ChromeDeviceSettingsProto* Arena::CreateMaybeMessage<::enterprise_management::ChromeDeviceSettingsProto>(Arena*);
template<> ::enterprise_management::DataRoamingEnabledProto* Arena::CreateMaybeMessage<::enterprise_management::DataRoamingEnabledProto>(Arena*);
template<> ::enterprise_management::DeviceAdvancedBatteryChargeModeProto* Arena::CreateMaybeMessage<::enterprise_management::DeviceAdvancedBatteryChargeModeProto>(Arena*);
template<> ::enterprise_management::DeviceAuthDataCacheLifetimeProto* Arena::CreateMaybeMessage<::enterprise_management::DeviceAuthDataCacheLifetimeProto>(Arena*);
template<> ::enterprise_management::DeviceBatteryChargeModeProto* Arena::CreateMaybeMessage<::enterprise_management::DeviceBatteryChargeModeProto>(Arena*);
template<> ::enterprise_management::DeviceBootOnAcProto* Arena::CreateMaybeMessage<::enterprise_management::DeviceBootOnAcProto>(Arena*);
template<> ::enterprise_management::DeviceDisplayResolutionProto* Arena::CreateMaybeMessage<::enterprise_management::DeviceDisplayResolutionProto>(Arena*);
template<> ::enterprise_management::DeviceDockMacAddressSourceProto* Arena::CreateMaybeMessage<::enterprise_management::DeviceDockMacAddressSourceProto>(Arena*);
template<> ::enterprise_management::DeviceEcryptfsMigrationStrategyProto* Arena::CreateMaybeMessage<::enterprise_management::DeviceEcryptfsMigrationStrategyProto>(Arena*);
template<> ::enterprise_management::DeviceGpoCacheLifetimeProto* Arena::CreateMaybeMessage<::enterprise_management::DeviceGpoCacheLifetimeProto>(Arena*);
template<> ::enterprise_management::DeviceHeartbeatSettingsProto* Arena::CreateMaybeMessage<::enterprise_management::DeviceHeartbeatSettingsProto>(Arena*);
template<> ::enterprise_management::DeviceKerberosEncryptionTypesProto* Arena::CreateMaybeMessage<::enterprise_management::DeviceKerberosEncryptionTypesProto>(Arena*);
template<> ::enterprise_management::DeviceLocalAccountInfoProto* Arena::CreateMaybeMessage<::enterprise_management::DeviceLocalAccountInfoProto>(Arena*);
template<> ::enterprise_management::DeviceLocalAccountsProto* Arena::CreateMaybeMessage<::enterprise_management::DeviceLocalAccountsProto>(Arena*);
template<> ::enterprise_management::DeviceLogUploadSettingsProto* Arena::CreateMaybeMessage<::enterprise_management::DeviceLogUploadSettingsProto>(Arena*);
template<> ::enterprise_management::DeviceLoginScreenAutoSelectCertificateForUrls* Arena::CreateMaybeMessage<::enterprise_management::DeviceLoginScreenAutoSelectCertificateForUrls>(Arena*);
template<> ::enterprise_management::DeviceLoginScreenExtensionsProto* Arena::CreateMaybeMessage<::enterprise_management::DeviceLoginScreenExtensionsProto>(Arena*);
template<> ::enterprise_management::DeviceLoginScreenIsolateOriginsProto* Arena::CreateMaybeMessage<::enterprise_management::DeviceLoginScreenIsolateOriginsProto>(Arena*);
template<> ::enterprise_management::DeviceLoginScreenPrivacyScreenEnabledProto* Arena::CreateMaybeMessage<::enterprise_management::DeviceLoginScreenPrivacyScreenEnabledProto>(Arena*);
template<> ::enterprise_management::DeviceLoginScreenSitePerProcessProto* Arena::CreateMaybeMessage<::enterprise_management::DeviceLoginScreenSitePerProcessProto>(Arena*);
template<> ::enterprise_management::DeviceLoginScreenWebUsbAllowDevicesForUrlsProto* Arena::CreateMaybeMessage<::enterprise_management::DeviceLoginScreenWebUsbAllowDevicesForUrlsProto>(Arena*);
template<> ::enterprise_management::DeviceMachinePasswordChangeRateProto* Arena::CreateMaybeMessage<::enterprise_management::DeviceMachinePasswordChangeRateProto>(Arena*);
template<> ::enterprise_management::DeviceNativePrintersAccessModeProto* Arena::CreateMaybeMessage<::enterprise_management::DeviceNativePrintersAccessModeProto>(Arena*);
template<> ::enterprise_management::DeviceNativePrintersBlacklistProto* Arena::CreateMaybeMessage<::enterprise_management::DeviceNativePrintersBlacklistProto>(Arena*);
template<> ::enterprise_management::DeviceNativePrintersProto* Arena::CreateMaybeMessage<::enterprise_management::DeviceNativePrintersProto>(Arena*);
template<> ::enterprise_management::DeviceNativePrintersWhitelistProto* Arena::CreateMaybeMessage<::enterprise_management::DeviceNativePrintersWhitelistProto>(Arena*);
template<> ::enterprise_management::DeviceOffHoursProto* Arena::CreateMaybeMessage<::enterprise_management::DeviceOffHoursProto>(Arena*);
template<> ::enterprise_management::DeviceOpenNetworkConfigurationProto* Arena::CreateMaybeMessage<::enterprise_management::DeviceOpenNetworkConfigurationProto>(Arena*);
template<> ::enterprise_management::DevicePolicyRefreshRateProto* Arena::CreateMaybeMessage<::enterprise_management::DevicePolicyRefreshRateProto>(Arena*);
template<> ::enterprise_management::DevicePowerPeakShiftProto* Arena::CreateMaybeMessage<::enterprise_management::DevicePowerPeakShiftProto>(Arena*);
template<> ::enterprise_management::DevicePowerwashAllowedProto* Arena::CreateMaybeMessage<::enterprise_management::DevicePowerwashAllowedProto>(Arena*);
template<> ::enterprise_management::DeviceQuirksDownloadEnabledProto* Arena::CreateMaybeMessage<::enterprise_management::DeviceQuirksDownloadEnabledProto>(Arena*);
template<> ::enterprise_management::DeviceRebootOnUserSignoutProto* Arena::CreateMaybeMessage<::enterprise_management::DeviceRebootOnUserSignoutProto>(Arena*);
template<> ::enterprise_management::DeviceReportingProto* Arena::CreateMaybeMessage<::enterprise_management::DeviceReportingProto>(Arena*);
template<> ::enterprise_management::DeviceScheduledUpdateCheckProto* Arena::CreateMaybeMessage<::enterprise_management::DeviceScheduledUpdateCheckProto>(Arena*);
template<> ::enterprise_management::DeviceSecondFactorAuthenticationProto* Arena::CreateMaybeMessage<::enterprise_management::DeviceSecondFactorAuthenticationProto>(Arena*);
template<> ::enterprise_management::DeviceUnaffiliatedCrostiniAllowedProto* Arena::CreateMaybeMessage<::enterprise_management::DeviceUnaffiliatedCrostiniAllowedProto>(Arena*);
template<> ::enterprise_management::DeviceUsbPowerShareProto* Arena::CreateMaybeMessage<::enterprise_management::DeviceUsbPowerShareProto>(Arena*);
template<> ::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto* Arena::CreateMaybeMessage<::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto>(Arena*);
template<> ::enterprise_management::DeviceWallpaperImageProto* Arena::CreateMaybeMessage<::enterprise_management::DeviceWallpaperImageProto>(Arena*);
template<> ::enterprise_management::DeviceWiFiAllowedProto* Arena::CreateMaybeMessage<::enterprise_management::DeviceWiFiAllowedProto>(Arena*);
template<> ::enterprise_management::DeviceWiFiFastTransitionEnabledProto* Arena::CreateMaybeMessage<::enterprise_management::DeviceWiFiFastTransitionEnabledProto>(Arena*);
template<> ::enterprise_management::DeviceWilcoDtcAllowedProto* Arena::CreateMaybeMessage<::enterprise_management::DeviceWilcoDtcAllowedProto>(Arena*);
template<> ::enterprise_management::DeviceWilcoDtcConfigurationProto* Arena::CreateMaybeMessage<::enterprise_management::DeviceWilcoDtcConfigurationProto>(Arena*);
template<> ::enterprise_management::DisplayRotationDefaultProto* Arena::CreateMaybeMessage<::enterprise_management::DisplayRotationDefaultProto>(Arena*);
template<> ::enterprise_management::EphemeralUsersEnabledProto* Arena::CreateMaybeMessage<::enterprise_management::EphemeralUsersEnabledProto>(Arena*);
template<> ::enterprise_management::ExtensionCacheSizeProto* Arena::CreateMaybeMessage<::enterprise_management::ExtensionCacheSizeProto>(Arena*);
template<> ::enterprise_management::GuestModeEnabledProto* Arena::CreateMaybeMessage<::enterprise_management::GuestModeEnabledProto>(Arena*);
template<> ::enterprise_management::KioskAppInfoProto* Arena::CreateMaybeMessage<::enterprise_management::KioskAppInfoProto>(Arena*);
template<> ::enterprise_management::LoginAuthenticationBehaviorProto* Arena::CreateMaybeMessage<::enterprise_management::LoginAuthenticationBehaviorProto>(Arena*);
template<> ::enterprise_management::LoginScreenDomainAutoCompleteProto* Arena::CreateMaybeMessage<::enterprise_management::LoginScreenDomainAutoCompleteProto>(Arena*);
template<> ::enterprise_management::LoginScreenInputMethodsProto* Arena::CreateMaybeMessage<::enterprise_management::LoginScreenInputMethodsProto>(Arena*);
template<> ::enterprise_management::LoginScreenLocalesProto* Arena::CreateMaybeMessage<::enterprise_management::LoginScreenLocalesProto>(Arena*);
template<> ::enterprise_management::LoginScreenPowerManagementProto* Arena::CreateMaybeMessage<::enterprise_management::LoginScreenPowerManagementProto>(Arena*);
template<> ::enterprise_management::LoginVideoCaptureAllowedUrlsProto* Arena::CreateMaybeMessage<::enterprise_management::LoginVideoCaptureAllowedUrlsProto>(Arena*);
template<> ::enterprise_management::MetricsEnabledProto* Arena::CreateMaybeMessage<::enterprise_management::MetricsEnabledProto>(Arena*);
template<> ::enterprise_management::NetworkHostnameProto* Arena::CreateMaybeMessage<::enterprise_management::NetworkHostnameProto>(Arena*);
template<> ::enterprise_management::NetworkThrottlingEnabledProto* Arena::CreateMaybeMessage<::enterprise_management::NetworkThrottlingEnabledProto>(Arena*);
template<> ::enterprise_management::OBSOLETE_AppPackEntryProto* Arena::CreateMaybeMessage<::enterprise_management::OBSOLETE_AppPackEntryProto>(Arena*);
template<> ::enterprise_management::OBSOLETE_AppPackProto* Arena::CreateMaybeMessage<::enterprise_management::OBSOLETE_AppPackProto>(Arena*);
template<> ::enterprise_management::OBSOLETE_DeviceProxySettingsProto* Arena::CreateMaybeMessage<::enterprise_management::OBSOLETE_DeviceProxySettingsProto>(Arena*);
template<> ::enterprise_management::OBSOLETE_ForcedLogoutTimeoutsProto* Arena::CreateMaybeMessage<::enterprise_management::OBSOLETE_ForcedLogoutTimeoutsProto>(Arena*);
template<> ::enterprise_management::OBSOLETE_MinimumRequiredVersionProto* Arena::CreateMaybeMessage<::enterprise_management::OBSOLETE_MinimumRequiredVersionProto>(Arena*);
template<> ::enterprise_management::OBSOLETE_PinnedAppsProto* Arena::CreateMaybeMessage<::enterprise_management::OBSOLETE_PinnedAppsProto>(Arena*);
template<> ::enterprise_management::OBSOLETE_ScreenSaverProto* Arena::CreateMaybeMessage<::enterprise_management::OBSOLETE_ScreenSaverProto>(Arena*);
template<> ::enterprise_management::OBSOLETE_StartUpUrlsProto* Arena::CreateMaybeMessage<::enterprise_management::OBSOLETE_StartUpUrlsProto>(Arena*);
template<> ::enterprise_management::OBSOLETE_SupervisedUsersSettingsProto* Arena::CreateMaybeMessage<::enterprise_management::OBSOLETE_SupervisedUsersSettingsProto>(Arena*);
template<> ::enterprise_management::PluginVmAllowedProto* Arena::CreateMaybeMessage<::enterprise_management::PluginVmAllowedProto>(Arena*);
template<> ::enterprise_management::PluginVmLicenseKeyProto* Arena::CreateMaybeMessage<::enterprise_management::PluginVmLicenseKeyProto>(Arena*);
template<> ::enterprise_management::RebootOnShutdownProto* Arena::CreateMaybeMessage<::enterprise_management::RebootOnShutdownProto>(Arena*);
template<> ::enterprise_management::ReleaseChannelProto* Arena::CreateMaybeMessage<::enterprise_management::ReleaseChannelProto>(Arena*);
template<> ::enterprise_management::RequiredClientCertificateForDeviceProto* Arena::CreateMaybeMessage<::enterprise_management::RequiredClientCertificateForDeviceProto>(Arena*);
template<> ::enterprise_management::SAMLSettingsProto* Arena::CreateMaybeMessage<::enterprise_management::SAMLSettingsProto>(Arena*);
template<> ::enterprise_management::SamlLoginAuthenticationTypeProto* Arena::CreateMaybeMessage<::enterprise_management::SamlLoginAuthenticationTypeProto>(Arena*);
template<> ::enterprise_management::ShowUserNamesOnSigninProto* Arena::CreateMaybeMessage<::enterprise_management::ShowUserNamesOnSigninProto>(Arena*);
template<> ::enterprise_management::StartUpFlagsProto* Arena::CreateMaybeMessage<::enterprise_management::StartUpFlagsProto>(Arena*);
template<> ::enterprise_management::SystemProxySettingsProto* Arena::CreateMaybeMessage<::enterprise_management::SystemProxySettingsProto>(Arena*);
template<> ::enterprise_management::SystemSettingsProto* Arena::CreateMaybeMessage<::enterprise_management::SystemSettingsProto>(Arena*);
template<> ::enterprise_management::SystemTimezoneProto* Arena::CreateMaybeMessage<::enterprise_management::SystemTimezoneProto>(Arena*);
template<> ::enterprise_management::SystemUse24HourClockProto* Arena::CreateMaybeMessage<::enterprise_management::SystemUse24HourClockProto>(Arena*);
template<> ::enterprise_management::TPMFirmwareUpdateSettingsProto* Arena::CreateMaybeMessage<::enterprise_management::TPMFirmwareUpdateSettingsProto>(Arena*);
template<> ::enterprise_management::UnaffiliatedArcAllowedProto* Arena::CreateMaybeMessage<::enterprise_management::UnaffiliatedArcAllowedProto>(Arena*);
template<> ::enterprise_management::UptimeLimitProto* Arena::CreateMaybeMessage<::enterprise_management::UptimeLimitProto>(Arena*);
template<> ::enterprise_management::UsbDetachableWhitelistProto* Arena::CreateMaybeMessage<::enterprise_management::UsbDetachableWhitelistProto>(Arena*);
template<> ::enterprise_management::UsbDeviceIdProto* Arena::CreateMaybeMessage<::enterprise_management::UsbDeviceIdProto>(Arena*);
template<> ::enterprise_management::UserWhitelistProto* Arena::CreateMaybeMessage<::enterprise_management::UserWhitelistProto>(Arena*);
template<> ::enterprise_management::VariationsParameterProto* Arena::CreateMaybeMessage<::enterprise_management::VariationsParameterProto>(Arena*);
template<> ::enterprise_management::VirtualMachinesAllowedProto* Arena::CreateMaybeMessage<::enterprise_management::VirtualMachinesAllowedProto>(Arena*);
template<> ::enterprise_management::WebKioskAppInfoProto* Arena::CreateMaybeMessage<::enterprise_management::WebKioskAppInfoProto>(Arena*);
template<> ::enterprise_management::WeeklyTimeIntervalProto* Arena::CreateMaybeMessage<::enterprise_management::WeeklyTimeIntervalProto>(Arena*);
template<> ::enterprise_management::WeeklyTimeProto* Arena::CreateMaybeMessage<::enterprise_management::WeeklyTimeProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace enterprise_management {

enum AutoUpdateSettingsProto_ConnectionType : int {
  AutoUpdateSettingsProto_ConnectionType_CONNECTION_TYPE_ETHERNET = 0,
  AutoUpdateSettingsProto_ConnectionType_CONNECTION_TYPE_WIFI = 1,
  AutoUpdateSettingsProto_ConnectionType_CONNECTION_TYPE_BLUETOOTH = 3,
  AutoUpdateSettingsProto_ConnectionType_CONNECTION_TYPE_CELLULAR = 4
};
bool AutoUpdateSettingsProto_ConnectionType_IsValid(int value);
constexpr AutoUpdateSettingsProto_ConnectionType AutoUpdateSettingsProto_ConnectionType_ConnectionType_MIN = AutoUpdateSettingsProto_ConnectionType_CONNECTION_TYPE_ETHERNET;
constexpr AutoUpdateSettingsProto_ConnectionType AutoUpdateSettingsProto_ConnectionType_ConnectionType_MAX = AutoUpdateSettingsProto_ConnectionType_CONNECTION_TYPE_CELLULAR;
constexpr int AutoUpdateSettingsProto_ConnectionType_ConnectionType_ARRAYSIZE = AutoUpdateSettingsProto_ConnectionType_ConnectionType_MAX + 1;

const std::string& AutoUpdateSettingsProto_ConnectionType_Name(AutoUpdateSettingsProto_ConnectionType value);
template<typename T>
inline const std::string& AutoUpdateSettingsProto_ConnectionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AutoUpdateSettingsProto_ConnectionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AutoUpdateSettingsProto_ConnectionType_Name.");
  return AutoUpdateSettingsProto_ConnectionType_Name(static_cast<AutoUpdateSettingsProto_ConnectionType>(enum_t_value));
}
bool AutoUpdateSettingsProto_ConnectionType_Parse(
    const std::string& name, AutoUpdateSettingsProto_ConnectionType* value);
enum AutoUpdateSettingsProto_RollbackToTargetVersion : int {
  AutoUpdateSettingsProto_RollbackToTargetVersion_ROLLBACK_UNSPECIFIED = 0,
  AutoUpdateSettingsProto_RollbackToTargetVersion_ROLLBACK_DISABLED = 1,
  AutoUpdateSettingsProto_RollbackToTargetVersion_ROLLBACK_AND_POWERWASH = 2,
  AutoUpdateSettingsProto_RollbackToTargetVersion_ROLLBACK_AND_RESTORE_IF_POSSIBLE = 3
};
bool AutoUpdateSettingsProto_RollbackToTargetVersion_IsValid(int value);
constexpr AutoUpdateSettingsProto_RollbackToTargetVersion AutoUpdateSettingsProto_RollbackToTargetVersion_RollbackToTargetVersion_MIN = AutoUpdateSettingsProto_RollbackToTargetVersion_ROLLBACK_UNSPECIFIED;
constexpr AutoUpdateSettingsProto_RollbackToTargetVersion AutoUpdateSettingsProto_RollbackToTargetVersion_RollbackToTargetVersion_MAX = AutoUpdateSettingsProto_RollbackToTargetVersion_ROLLBACK_AND_RESTORE_IF_POSSIBLE;
constexpr int AutoUpdateSettingsProto_RollbackToTargetVersion_RollbackToTargetVersion_ARRAYSIZE = AutoUpdateSettingsProto_RollbackToTargetVersion_RollbackToTargetVersion_MAX + 1;

const std::string& AutoUpdateSettingsProto_RollbackToTargetVersion_Name(AutoUpdateSettingsProto_RollbackToTargetVersion value);
template<typename T>
inline const std::string& AutoUpdateSettingsProto_RollbackToTargetVersion_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AutoUpdateSettingsProto_RollbackToTargetVersion>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AutoUpdateSettingsProto_RollbackToTargetVersion_Name.");
  return AutoUpdateSettingsProto_RollbackToTargetVersion_Name(static_cast<AutoUpdateSettingsProto_RollbackToTargetVersion>(enum_t_value));
}
bool AutoUpdateSettingsProto_RollbackToTargetVersion_Parse(
    const std::string& name, AutoUpdateSettingsProto_RollbackToTargetVersion* value);
enum SystemTimezoneProto_AutomaticTimezoneDetectionType : int {
  SystemTimezoneProto_AutomaticTimezoneDetectionType_USERS_DECIDE = 0,
  SystemTimezoneProto_AutomaticTimezoneDetectionType_DISABLED = 1,
  SystemTimezoneProto_AutomaticTimezoneDetectionType_IP_ONLY = 2,
  SystemTimezoneProto_AutomaticTimezoneDetectionType_SEND_WIFI_ACCESS_POINTS = 3,
  SystemTimezoneProto_AutomaticTimezoneDetectionType_SEND_ALL_LOCATION_INFO = 4
};
bool SystemTimezoneProto_AutomaticTimezoneDetectionType_IsValid(int value);
constexpr SystemTimezoneProto_AutomaticTimezoneDetectionType SystemTimezoneProto_AutomaticTimezoneDetectionType_AutomaticTimezoneDetectionType_MIN = SystemTimezoneProto_AutomaticTimezoneDetectionType_USERS_DECIDE;
constexpr SystemTimezoneProto_AutomaticTimezoneDetectionType SystemTimezoneProto_AutomaticTimezoneDetectionType_AutomaticTimezoneDetectionType_MAX = SystemTimezoneProto_AutomaticTimezoneDetectionType_SEND_ALL_LOCATION_INFO;
constexpr int SystemTimezoneProto_AutomaticTimezoneDetectionType_AutomaticTimezoneDetectionType_ARRAYSIZE = SystemTimezoneProto_AutomaticTimezoneDetectionType_AutomaticTimezoneDetectionType_MAX + 1;

const std::string& SystemTimezoneProto_AutomaticTimezoneDetectionType_Name(SystemTimezoneProto_AutomaticTimezoneDetectionType value);
template<typename T>
inline const std::string& SystemTimezoneProto_AutomaticTimezoneDetectionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SystemTimezoneProto_AutomaticTimezoneDetectionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SystemTimezoneProto_AutomaticTimezoneDetectionType_Name.");
  return SystemTimezoneProto_AutomaticTimezoneDetectionType_Name(static_cast<SystemTimezoneProto_AutomaticTimezoneDetectionType>(enum_t_value));
}
bool SystemTimezoneProto_AutomaticTimezoneDetectionType_Parse(
    const std::string& name, SystemTimezoneProto_AutomaticTimezoneDetectionType* value);
enum DeviceLocalAccountInfoProto_AccountType : int {
  DeviceLocalAccountInfoProto_AccountType_ACCOUNT_TYPE_PUBLIC_SESSION = 0,
  DeviceLocalAccountInfoProto_AccountType_ACCOUNT_TYPE_KIOSK_APP = 1,
  DeviceLocalAccountInfoProto_AccountType_ACCOUNT_TYPE_KIOSK_ANDROID_APP = 2,
  DeviceLocalAccountInfoProto_AccountType_ACCOUNT_TYPE_SAML_PUBLIC_SESSION = 3,
  DeviceLocalAccountInfoProto_AccountType_ACCOUNT_TYPE_WEB_KIOSK_APP = 4
};
bool DeviceLocalAccountInfoProto_AccountType_IsValid(int value);
constexpr DeviceLocalAccountInfoProto_AccountType DeviceLocalAccountInfoProto_AccountType_AccountType_MIN = DeviceLocalAccountInfoProto_AccountType_ACCOUNT_TYPE_PUBLIC_SESSION;
constexpr DeviceLocalAccountInfoProto_AccountType DeviceLocalAccountInfoProto_AccountType_AccountType_MAX = DeviceLocalAccountInfoProto_AccountType_ACCOUNT_TYPE_WEB_KIOSK_APP;
constexpr int DeviceLocalAccountInfoProto_AccountType_AccountType_ARRAYSIZE = DeviceLocalAccountInfoProto_AccountType_AccountType_MAX + 1;

const std::string& DeviceLocalAccountInfoProto_AccountType_Name(DeviceLocalAccountInfoProto_AccountType value);
template<typename T>
inline const std::string& DeviceLocalAccountInfoProto_AccountType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DeviceLocalAccountInfoProto_AccountType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DeviceLocalAccountInfoProto_AccountType_Name.");
  return DeviceLocalAccountInfoProto_AccountType_Name(static_cast<DeviceLocalAccountInfoProto_AccountType>(enum_t_value));
}
bool DeviceLocalAccountInfoProto_AccountType_Parse(
    const std::string& name, DeviceLocalAccountInfoProto_AccountType* value);
enum AccessibilitySettingsProto_ScreenMagnifierType : int {
  AccessibilitySettingsProto_ScreenMagnifierType_SCREEN_MAGNIFIER_TYPE_NONE = 0,
  AccessibilitySettingsProto_ScreenMagnifierType_SCREEN_MAGNIFIER_TYPE_FULL = 1
};
bool AccessibilitySettingsProto_ScreenMagnifierType_IsValid(int value);
constexpr AccessibilitySettingsProto_ScreenMagnifierType AccessibilitySettingsProto_ScreenMagnifierType_ScreenMagnifierType_MIN = AccessibilitySettingsProto_ScreenMagnifierType_SCREEN_MAGNIFIER_TYPE_NONE;
constexpr AccessibilitySettingsProto_ScreenMagnifierType AccessibilitySettingsProto_ScreenMagnifierType_ScreenMagnifierType_MAX = AccessibilitySettingsProto_ScreenMagnifierType_SCREEN_MAGNIFIER_TYPE_FULL;
constexpr int AccessibilitySettingsProto_ScreenMagnifierType_ScreenMagnifierType_ARRAYSIZE = AccessibilitySettingsProto_ScreenMagnifierType_ScreenMagnifierType_MAX + 1;

const std::string& AccessibilitySettingsProto_ScreenMagnifierType_Name(AccessibilitySettingsProto_ScreenMagnifierType value);
template<typename T>
inline const std::string& AccessibilitySettingsProto_ScreenMagnifierType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AccessibilitySettingsProto_ScreenMagnifierType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AccessibilitySettingsProto_ScreenMagnifierType_Name.");
  return AccessibilitySettingsProto_ScreenMagnifierType_Name(static_cast<AccessibilitySettingsProto_ScreenMagnifierType>(enum_t_value));
}
bool AccessibilitySettingsProto_ScreenMagnifierType_Parse(
    const std::string& name, AccessibilitySettingsProto_ScreenMagnifierType* value);
enum DisplayRotationDefaultProto_Rotation : int {
  DisplayRotationDefaultProto_Rotation_ROTATE_0 = 0,
  DisplayRotationDefaultProto_Rotation_ROTATE_90 = 1,
  DisplayRotationDefaultProto_Rotation_ROTATE_180 = 2,
  DisplayRotationDefaultProto_Rotation_ROTATE_270 = 3
};
bool DisplayRotationDefaultProto_Rotation_IsValid(int value);
constexpr DisplayRotationDefaultProto_Rotation DisplayRotationDefaultProto_Rotation_Rotation_MIN = DisplayRotationDefaultProto_Rotation_ROTATE_0;
constexpr DisplayRotationDefaultProto_Rotation DisplayRotationDefaultProto_Rotation_Rotation_MAX = DisplayRotationDefaultProto_Rotation_ROTATE_270;
constexpr int DisplayRotationDefaultProto_Rotation_Rotation_ARRAYSIZE = DisplayRotationDefaultProto_Rotation_Rotation_MAX + 1;

const std::string& DisplayRotationDefaultProto_Rotation_Name(DisplayRotationDefaultProto_Rotation value);
template<typename T>
inline const std::string& DisplayRotationDefaultProto_Rotation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DisplayRotationDefaultProto_Rotation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DisplayRotationDefaultProto_Rotation_Name.");
  return DisplayRotationDefaultProto_Rotation_Name(static_cast<DisplayRotationDefaultProto_Rotation>(enum_t_value));
}
bool DisplayRotationDefaultProto_Rotation_Parse(
    const std::string& name, DisplayRotationDefaultProto_Rotation* value);
enum LoginAuthenticationBehaviorProto_LoginBehavior : int {
  LoginAuthenticationBehaviorProto_LoginBehavior_GAIA = 0,
  LoginAuthenticationBehaviorProto_LoginBehavior_SAML_INTERSTITIAL = 1
};
bool LoginAuthenticationBehaviorProto_LoginBehavior_IsValid(int value);
constexpr LoginAuthenticationBehaviorProto_LoginBehavior LoginAuthenticationBehaviorProto_LoginBehavior_LoginBehavior_MIN = LoginAuthenticationBehaviorProto_LoginBehavior_GAIA;
constexpr LoginAuthenticationBehaviorProto_LoginBehavior LoginAuthenticationBehaviorProto_LoginBehavior_LoginBehavior_MAX = LoginAuthenticationBehaviorProto_LoginBehavior_SAML_INTERSTITIAL;
constexpr int LoginAuthenticationBehaviorProto_LoginBehavior_LoginBehavior_ARRAYSIZE = LoginAuthenticationBehaviorProto_LoginBehavior_LoginBehavior_MAX + 1;

const std::string& LoginAuthenticationBehaviorProto_LoginBehavior_Name(LoginAuthenticationBehaviorProto_LoginBehavior value);
template<typename T>
inline const std::string& LoginAuthenticationBehaviorProto_LoginBehavior_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoginAuthenticationBehaviorProto_LoginBehavior>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoginAuthenticationBehaviorProto_LoginBehavior_Name.");
  return LoginAuthenticationBehaviorProto_LoginBehavior_Name(static_cast<LoginAuthenticationBehaviorProto_LoginBehavior>(enum_t_value));
}
bool LoginAuthenticationBehaviorProto_LoginBehavior_Parse(
    const std::string& name, LoginAuthenticationBehaviorProto_LoginBehavior* value);
enum DeviceEcryptfsMigrationStrategyProto_MigrationStrategy : int {
  DeviceEcryptfsMigrationStrategyProto_MigrationStrategy_UNSET = 0,
  DeviceEcryptfsMigrationStrategyProto_MigrationStrategy_DISALLOW_ARC = 1,
  DeviceEcryptfsMigrationStrategyProto_MigrationStrategy_ALLOW_MIGRATION = 2
};
bool DeviceEcryptfsMigrationStrategyProto_MigrationStrategy_IsValid(int value);
constexpr DeviceEcryptfsMigrationStrategyProto_MigrationStrategy DeviceEcryptfsMigrationStrategyProto_MigrationStrategy_MigrationStrategy_MIN = DeviceEcryptfsMigrationStrategyProto_MigrationStrategy_UNSET;
constexpr DeviceEcryptfsMigrationStrategyProto_MigrationStrategy DeviceEcryptfsMigrationStrategyProto_MigrationStrategy_MigrationStrategy_MAX = DeviceEcryptfsMigrationStrategyProto_MigrationStrategy_ALLOW_MIGRATION;
constexpr int DeviceEcryptfsMigrationStrategyProto_MigrationStrategy_MigrationStrategy_ARRAYSIZE = DeviceEcryptfsMigrationStrategyProto_MigrationStrategy_MigrationStrategy_MAX + 1;

const std::string& DeviceEcryptfsMigrationStrategyProto_MigrationStrategy_Name(DeviceEcryptfsMigrationStrategyProto_MigrationStrategy value);
template<typename T>
inline const std::string& DeviceEcryptfsMigrationStrategyProto_MigrationStrategy_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DeviceEcryptfsMigrationStrategyProto_MigrationStrategy>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DeviceEcryptfsMigrationStrategyProto_MigrationStrategy_Name.");
  return DeviceEcryptfsMigrationStrategyProto_MigrationStrategy_Name(static_cast<DeviceEcryptfsMigrationStrategyProto_MigrationStrategy>(enum_t_value));
}
bool DeviceEcryptfsMigrationStrategyProto_MigrationStrategy_Parse(
    const std::string& name, DeviceEcryptfsMigrationStrategyProto_MigrationStrategy* value);
enum DeviceSecondFactorAuthenticationProto_U2fMode : int {
  DeviceSecondFactorAuthenticationProto_U2fMode_UNSET = 0,
  DeviceSecondFactorAuthenticationProto_U2fMode_DISABLED = 1,
  DeviceSecondFactorAuthenticationProto_U2fMode_U2F = 2,
  DeviceSecondFactorAuthenticationProto_U2fMode_U2F_EXTENDED = 3
};
bool DeviceSecondFactorAuthenticationProto_U2fMode_IsValid(int value);
constexpr DeviceSecondFactorAuthenticationProto_U2fMode DeviceSecondFactorAuthenticationProto_U2fMode_U2fMode_MIN = DeviceSecondFactorAuthenticationProto_U2fMode_UNSET;
constexpr DeviceSecondFactorAuthenticationProto_U2fMode DeviceSecondFactorAuthenticationProto_U2fMode_U2fMode_MAX = DeviceSecondFactorAuthenticationProto_U2fMode_U2F_EXTENDED;
constexpr int DeviceSecondFactorAuthenticationProto_U2fMode_U2fMode_ARRAYSIZE = DeviceSecondFactorAuthenticationProto_U2fMode_U2fMode_MAX + 1;

const std::string& DeviceSecondFactorAuthenticationProto_U2fMode_Name(DeviceSecondFactorAuthenticationProto_U2fMode value);
template<typename T>
inline const std::string& DeviceSecondFactorAuthenticationProto_U2fMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DeviceSecondFactorAuthenticationProto_U2fMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DeviceSecondFactorAuthenticationProto_U2fMode_Name.");
  return DeviceSecondFactorAuthenticationProto_U2fMode_Name(static_cast<DeviceSecondFactorAuthenticationProto_U2fMode>(enum_t_value));
}
bool DeviceSecondFactorAuthenticationProto_U2fMode_Parse(
    const std::string& name, DeviceSecondFactorAuthenticationProto_U2fMode* value);
enum WeeklyTimeProto_DayOfWeek : int {
  WeeklyTimeProto_DayOfWeek_DAY_OF_WEEK_UNSPECIFIED = 0,
  WeeklyTimeProto_DayOfWeek_MONDAY = 1,
  WeeklyTimeProto_DayOfWeek_TUESDAY = 2,
  WeeklyTimeProto_DayOfWeek_WEDNESDAY = 3,
  WeeklyTimeProto_DayOfWeek_THURSDAY = 4,
  WeeklyTimeProto_DayOfWeek_FRIDAY = 5,
  WeeklyTimeProto_DayOfWeek_SATURDAY = 6,
  WeeklyTimeProto_DayOfWeek_SUNDAY = 7
};
bool WeeklyTimeProto_DayOfWeek_IsValid(int value);
constexpr WeeklyTimeProto_DayOfWeek WeeklyTimeProto_DayOfWeek_DayOfWeek_MIN = WeeklyTimeProto_DayOfWeek_DAY_OF_WEEK_UNSPECIFIED;
constexpr WeeklyTimeProto_DayOfWeek WeeklyTimeProto_DayOfWeek_DayOfWeek_MAX = WeeklyTimeProto_DayOfWeek_SUNDAY;
constexpr int WeeklyTimeProto_DayOfWeek_DayOfWeek_ARRAYSIZE = WeeklyTimeProto_DayOfWeek_DayOfWeek_MAX + 1;

const std::string& WeeklyTimeProto_DayOfWeek_Name(WeeklyTimeProto_DayOfWeek value);
template<typename T>
inline const std::string& WeeklyTimeProto_DayOfWeek_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WeeklyTimeProto_DayOfWeek>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WeeklyTimeProto_DayOfWeek_Name.");
  return WeeklyTimeProto_DayOfWeek_Name(static_cast<WeeklyTimeProto_DayOfWeek>(enum_t_value));
}
bool WeeklyTimeProto_DayOfWeek_Parse(
    const std::string& name, WeeklyTimeProto_DayOfWeek* value);
enum DeviceNativePrintersAccessModeProto_AccessMode : int {
  DeviceNativePrintersAccessModeProto_AccessMode_ACCESS_MODE_BLACKLIST = 0,
  DeviceNativePrintersAccessModeProto_AccessMode_ACCESS_MODE_WHITELIST = 1,
  DeviceNativePrintersAccessModeProto_AccessMode_ACCESS_MODE_ALL = 2
};
bool DeviceNativePrintersAccessModeProto_AccessMode_IsValid(int value);
constexpr DeviceNativePrintersAccessModeProto_AccessMode DeviceNativePrintersAccessModeProto_AccessMode_AccessMode_MIN = DeviceNativePrintersAccessModeProto_AccessMode_ACCESS_MODE_BLACKLIST;
constexpr DeviceNativePrintersAccessModeProto_AccessMode DeviceNativePrintersAccessModeProto_AccessMode_AccessMode_MAX = DeviceNativePrintersAccessModeProto_AccessMode_ACCESS_MODE_ALL;
constexpr int DeviceNativePrintersAccessModeProto_AccessMode_AccessMode_ARRAYSIZE = DeviceNativePrintersAccessModeProto_AccessMode_AccessMode_MAX + 1;

const std::string& DeviceNativePrintersAccessModeProto_AccessMode_Name(DeviceNativePrintersAccessModeProto_AccessMode value);
template<typename T>
inline const std::string& DeviceNativePrintersAccessModeProto_AccessMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DeviceNativePrintersAccessModeProto_AccessMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DeviceNativePrintersAccessModeProto_AccessMode_Name.");
  return DeviceNativePrintersAccessModeProto_AccessMode_Name(static_cast<DeviceNativePrintersAccessModeProto_AccessMode>(enum_t_value));
}
bool DeviceNativePrintersAccessModeProto_AccessMode_Parse(
    const std::string& name, DeviceNativePrintersAccessModeProto_AccessMode* value);
enum TPMFirmwareUpdateSettingsProto_AutoUpdateMode : int {
  TPMFirmwareUpdateSettingsProto_AutoUpdateMode_AUTO_UPDATE_MODE_UNSPECIFIED = 0,
  TPMFirmwareUpdateSettingsProto_AutoUpdateMode_NEVER = 1,
  TPMFirmwareUpdateSettingsProto_AutoUpdateMode_USER_ACKNOWLEDGMENT = 2,
  TPMFirmwareUpdateSettingsProto_AutoUpdateMode_WITHOUT_ACKNOWLEDGMENT = 3,
  TPMFirmwareUpdateSettingsProto_AutoUpdateMode_ENROLLMENT = 4
};
bool TPMFirmwareUpdateSettingsProto_AutoUpdateMode_IsValid(int value);
constexpr TPMFirmwareUpdateSettingsProto_AutoUpdateMode TPMFirmwareUpdateSettingsProto_AutoUpdateMode_AutoUpdateMode_MIN = TPMFirmwareUpdateSettingsProto_AutoUpdateMode_AUTO_UPDATE_MODE_UNSPECIFIED;
constexpr TPMFirmwareUpdateSettingsProto_AutoUpdateMode TPMFirmwareUpdateSettingsProto_AutoUpdateMode_AutoUpdateMode_MAX = TPMFirmwareUpdateSettingsProto_AutoUpdateMode_ENROLLMENT;
constexpr int TPMFirmwareUpdateSettingsProto_AutoUpdateMode_AutoUpdateMode_ARRAYSIZE = TPMFirmwareUpdateSettingsProto_AutoUpdateMode_AutoUpdateMode_MAX + 1;

const std::string& TPMFirmwareUpdateSettingsProto_AutoUpdateMode_Name(TPMFirmwareUpdateSettingsProto_AutoUpdateMode value);
template<typename T>
inline const std::string& TPMFirmwareUpdateSettingsProto_AutoUpdateMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TPMFirmwareUpdateSettingsProto_AutoUpdateMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TPMFirmwareUpdateSettingsProto_AutoUpdateMode_Name.");
  return TPMFirmwareUpdateSettingsProto_AutoUpdateMode_Name(static_cast<TPMFirmwareUpdateSettingsProto_AutoUpdateMode>(enum_t_value));
}
bool TPMFirmwareUpdateSettingsProto_AutoUpdateMode_Parse(
    const std::string& name, TPMFirmwareUpdateSettingsProto_AutoUpdateMode* value);
enum DeviceKerberosEncryptionTypesProto_Types : int {
  DeviceKerberosEncryptionTypesProto_Types_ENC_TYPES_ALL = 0,
  DeviceKerberosEncryptionTypesProto_Types_ENC_TYPES_STRONG = 1,
  DeviceKerberosEncryptionTypesProto_Types_ENC_TYPES_LEGACY = 2
};
bool DeviceKerberosEncryptionTypesProto_Types_IsValid(int value);
constexpr DeviceKerberosEncryptionTypesProto_Types DeviceKerberosEncryptionTypesProto_Types_Types_MIN = DeviceKerberosEncryptionTypesProto_Types_ENC_TYPES_ALL;
constexpr DeviceKerberosEncryptionTypesProto_Types DeviceKerberosEncryptionTypesProto_Types_Types_MAX = DeviceKerberosEncryptionTypesProto_Types_ENC_TYPES_LEGACY;
constexpr int DeviceKerberosEncryptionTypesProto_Types_Types_ARRAYSIZE = DeviceKerberosEncryptionTypesProto_Types_Types_MAX + 1;

const std::string& DeviceKerberosEncryptionTypesProto_Types_Name(DeviceKerberosEncryptionTypesProto_Types value);
template<typename T>
inline const std::string& DeviceKerberosEncryptionTypesProto_Types_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DeviceKerberosEncryptionTypesProto_Types>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DeviceKerberosEncryptionTypesProto_Types_Name.");
  return DeviceKerberosEncryptionTypesProto_Types_Name(static_cast<DeviceKerberosEncryptionTypesProto_Types>(enum_t_value));
}
bool DeviceKerberosEncryptionTypesProto_Types_Parse(
    const std::string& name, DeviceKerberosEncryptionTypesProto_Types* value);
enum DeviceUserPolicyLoopbackProcessingModeProto_Mode : int {
  DeviceUserPolicyLoopbackProcessingModeProto_Mode_USER_POLICY_MODE_DEFAULT = 0,
  DeviceUserPolicyLoopbackProcessingModeProto_Mode_USER_POLICY_MODE_MERGE = 1,
  DeviceUserPolicyLoopbackProcessingModeProto_Mode_USER_POLICY_MODE_REPLACE = 2
};
bool DeviceUserPolicyLoopbackProcessingModeProto_Mode_IsValid(int value);
constexpr DeviceUserPolicyLoopbackProcessingModeProto_Mode DeviceUserPolicyLoopbackProcessingModeProto_Mode_Mode_MIN = DeviceUserPolicyLoopbackProcessingModeProto_Mode_USER_POLICY_MODE_DEFAULT;
constexpr DeviceUserPolicyLoopbackProcessingModeProto_Mode DeviceUserPolicyLoopbackProcessingModeProto_Mode_Mode_MAX = DeviceUserPolicyLoopbackProcessingModeProto_Mode_USER_POLICY_MODE_REPLACE;
constexpr int DeviceUserPolicyLoopbackProcessingModeProto_Mode_Mode_ARRAYSIZE = DeviceUserPolicyLoopbackProcessingModeProto_Mode_Mode_MAX + 1;

const std::string& DeviceUserPolicyLoopbackProcessingModeProto_Mode_Name(DeviceUserPolicyLoopbackProcessingModeProto_Mode value);
template<typename T>
inline const std::string& DeviceUserPolicyLoopbackProcessingModeProto_Mode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DeviceUserPolicyLoopbackProcessingModeProto_Mode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DeviceUserPolicyLoopbackProcessingModeProto_Mode_Name.");
  return DeviceUserPolicyLoopbackProcessingModeProto_Mode_Name(static_cast<DeviceUserPolicyLoopbackProcessingModeProto_Mode>(enum_t_value));
}
bool DeviceUserPolicyLoopbackProcessingModeProto_Mode_Parse(
    const std::string& name, DeviceUserPolicyLoopbackProcessingModeProto_Mode* value);
enum SamlLoginAuthenticationTypeProto_Type : int {
  SamlLoginAuthenticationTypeProto_Type_TYPE_DEFAULT = 0,
  SamlLoginAuthenticationTypeProto_Type_TYPE_CLIENT_CERTIFICATE = 1
};
bool SamlLoginAuthenticationTypeProto_Type_IsValid(int value);
constexpr SamlLoginAuthenticationTypeProto_Type SamlLoginAuthenticationTypeProto_Type_Type_MIN = SamlLoginAuthenticationTypeProto_Type_TYPE_DEFAULT;
constexpr SamlLoginAuthenticationTypeProto_Type SamlLoginAuthenticationTypeProto_Type_Type_MAX = SamlLoginAuthenticationTypeProto_Type_TYPE_CLIENT_CERTIFICATE;
constexpr int SamlLoginAuthenticationTypeProto_Type_Type_ARRAYSIZE = SamlLoginAuthenticationTypeProto_Type_Type_MAX + 1;

const std::string& SamlLoginAuthenticationTypeProto_Type_Name(SamlLoginAuthenticationTypeProto_Type value);
template<typename T>
inline const std::string& SamlLoginAuthenticationTypeProto_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SamlLoginAuthenticationTypeProto_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SamlLoginAuthenticationTypeProto_Type_Name.");
  return SamlLoginAuthenticationTypeProto_Type_Name(static_cast<SamlLoginAuthenticationTypeProto_Type>(enum_t_value));
}
bool SamlLoginAuthenticationTypeProto_Type_Parse(
    const std::string& name, SamlLoginAuthenticationTypeProto_Type* value);
enum DeviceRebootOnUserSignoutProto_RebootOnSignoutMode : int {
  DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_REBOOT_ON_SIGNOUT_MODE_UNSPECIFIED = 0,
  DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_NEVER = 1,
  DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_ARC_SESSION = 2,
  DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_ALWAYS = 3,
  DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_VM_STARTED_OR_ARC_SESSION = 4
};
bool DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_IsValid(int value);
constexpr DeviceRebootOnUserSignoutProto_RebootOnSignoutMode DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_RebootOnSignoutMode_MIN = DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_REBOOT_ON_SIGNOUT_MODE_UNSPECIFIED;
constexpr DeviceRebootOnUserSignoutProto_RebootOnSignoutMode DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_RebootOnSignoutMode_MAX = DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_VM_STARTED_OR_ARC_SESSION;
constexpr int DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_RebootOnSignoutMode_ARRAYSIZE = DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_RebootOnSignoutMode_MAX + 1;

const std::string& DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_Name(DeviceRebootOnUserSignoutProto_RebootOnSignoutMode value);
template<typename T>
inline const std::string& DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DeviceRebootOnUserSignoutProto_RebootOnSignoutMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_Name.");
  return DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_Name(static_cast<DeviceRebootOnUserSignoutProto_RebootOnSignoutMode>(enum_t_value));
}
bool DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_Parse(
    const std::string& name, DeviceRebootOnUserSignoutProto_RebootOnSignoutMode* value);
enum DeviceDockMacAddressSourceProto_Source : int {
  DeviceDockMacAddressSourceProto_Source_SOURCE_UNSPECIFIED = 0,
  DeviceDockMacAddressSourceProto_Source_DEVICE_DOCK_MAC_ADDRESS = 1,
  DeviceDockMacAddressSourceProto_Source_DEVICE_NIC_MAC_ADDRESS = 2,
  DeviceDockMacAddressSourceProto_Source_DOCK_NIC_MAC_ADDRESS = 3
};
bool DeviceDockMacAddressSourceProto_Source_IsValid(int value);
constexpr DeviceDockMacAddressSourceProto_Source DeviceDockMacAddressSourceProto_Source_Source_MIN = DeviceDockMacAddressSourceProto_Source_SOURCE_UNSPECIFIED;
constexpr DeviceDockMacAddressSourceProto_Source DeviceDockMacAddressSourceProto_Source_Source_MAX = DeviceDockMacAddressSourceProto_Source_DOCK_NIC_MAC_ADDRESS;
constexpr int DeviceDockMacAddressSourceProto_Source_Source_ARRAYSIZE = DeviceDockMacAddressSourceProto_Source_Source_MAX + 1;

const std::string& DeviceDockMacAddressSourceProto_Source_Name(DeviceDockMacAddressSourceProto_Source value);
template<typename T>
inline const std::string& DeviceDockMacAddressSourceProto_Source_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DeviceDockMacAddressSourceProto_Source>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DeviceDockMacAddressSourceProto_Source_Name.");
  return DeviceDockMacAddressSourceProto_Source_Name(static_cast<DeviceDockMacAddressSourceProto_Source>(enum_t_value));
}
bool DeviceDockMacAddressSourceProto_Source_Parse(
    const std::string& name, DeviceDockMacAddressSourceProto_Source* value);
enum DeviceBatteryChargeModeProto_BatteryChargeMode : int {
  DeviceBatteryChargeModeProto_BatteryChargeMode_MODE_UNSPECIFIED = 0,
  DeviceBatteryChargeModeProto_BatteryChargeMode_STANDARD = 1,
  DeviceBatteryChargeModeProto_BatteryChargeMode_EXPRESS_CHARGE = 2,
  DeviceBatteryChargeModeProto_BatteryChargeMode_PRIMARILY_AC_USE = 3,
  DeviceBatteryChargeModeProto_BatteryChargeMode_ADAPTIVE = 4,
  DeviceBatteryChargeModeProto_BatteryChargeMode_CUSTOM = 5
};
bool DeviceBatteryChargeModeProto_BatteryChargeMode_IsValid(int value);
constexpr DeviceBatteryChargeModeProto_BatteryChargeMode DeviceBatteryChargeModeProto_BatteryChargeMode_BatteryChargeMode_MIN = DeviceBatteryChargeModeProto_BatteryChargeMode_MODE_UNSPECIFIED;
constexpr DeviceBatteryChargeModeProto_BatteryChargeMode DeviceBatteryChargeModeProto_BatteryChargeMode_BatteryChargeMode_MAX = DeviceBatteryChargeModeProto_BatteryChargeMode_CUSTOM;
constexpr int DeviceBatteryChargeModeProto_BatteryChargeMode_BatteryChargeMode_ARRAYSIZE = DeviceBatteryChargeModeProto_BatteryChargeMode_BatteryChargeMode_MAX + 1;

const std::string& DeviceBatteryChargeModeProto_BatteryChargeMode_Name(DeviceBatteryChargeModeProto_BatteryChargeMode value);
template<typename T>
inline const std::string& DeviceBatteryChargeModeProto_BatteryChargeMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DeviceBatteryChargeModeProto_BatteryChargeMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DeviceBatteryChargeModeProto_BatteryChargeMode_Name.");
  return DeviceBatteryChargeModeProto_BatteryChargeMode_Name(static_cast<DeviceBatteryChargeModeProto_BatteryChargeMode>(enum_t_value));
}
bool DeviceBatteryChargeModeProto_BatteryChargeMode_Parse(
    const std::string& name, DeviceBatteryChargeModeProto_BatteryChargeMode* value);
// ===================================================================

class DevicePolicyRefreshRateProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DevicePolicyRefreshRateProto) */ {
 public:
  inline DevicePolicyRefreshRateProto() : DevicePolicyRefreshRateProto(nullptr) {};
  virtual ~DevicePolicyRefreshRateProto();

  DevicePolicyRefreshRateProto(const DevicePolicyRefreshRateProto& from);
  DevicePolicyRefreshRateProto(DevicePolicyRefreshRateProto&& from) noexcept
    : DevicePolicyRefreshRateProto() {
    *this = ::std::move(from);
  }

  inline DevicePolicyRefreshRateProto& operator=(const DevicePolicyRefreshRateProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DevicePolicyRefreshRateProto& operator=(DevicePolicyRefreshRateProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DevicePolicyRefreshRateProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DevicePolicyRefreshRateProto* internal_default_instance() {
    return reinterpret_cast<const DevicePolicyRefreshRateProto*>(
               &_DevicePolicyRefreshRateProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DevicePolicyRefreshRateProto& a, DevicePolicyRefreshRateProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DevicePolicyRefreshRateProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DevicePolicyRefreshRateProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DevicePolicyRefreshRateProto* New() const final {
    return CreateMaybeMessage<DevicePolicyRefreshRateProto>(nullptr);
  }

  DevicePolicyRefreshRateProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DevicePolicyRefreshRateProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DevicePolicyRefreshRateProto& from);
  void MergeFrom(const DevicePolicyRefreshRateProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DevicePolicyRefreshRateProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.DevicePolicyRefreshRateProto";
  }
  protected:
  explicit DevicePolicyRefreshRateProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevicePolicyRefreshRateFieldNumber = 1,
  };
  // optional int64 device_policy_refresh_rate = 1;
  bool has_device_policy_refresh_rate() const;
  private:
  bool _internal_has_device_policy_refresh_rate() const;
  public:
  void clear_device_policy_refresh_rate();
  ::PROTOBUF_NAMESPACE_ID::int64 device_policy_refresh_rate() const;
  void set_device_policy_refresh_rate(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_device_policy_refresh_rate() const;
  void _internal_set_device_policy_refresh_rate(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.DevicePolicyRefreshRateProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 device_policy_refresh_rate_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class UserWhitelistProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.UserWhitelistProto) */ {
 public:
  inline UserWhitelistProto() : UserWhitelistProto(nullptr) {};
  virtual ~UserWhitelistProto();

  UserWhitelistProto(const UserWhitelistProto& from);
  UserWhitelistProto(UserWhitelistProto&& from) noexcept
    : UserWhitelistProto() {
    *this = ::std::move(from);
  }

  inline UserWhitelistProto& operator=(const UserWhitelistProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserWhitelistProto& operator=(UserWhitelistProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const UserWhitelistProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserWhitelistProto* internal_default_instance() {
    return reinterpret_cast<const UserWhitelistProto*>(
               &_UserWhitelistProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserWhitelistProto& a, UserWhitelistProto& b) {
    a.Swap(&b);
  }
  inline void Swap(UserWhitelistProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserWhitelistProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserWhitelistProto* New() const final {
    return CreateMaybeMessage<UserWhitelistProto>(nullptr);
  }

  UserWhitelistProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserWhitelistProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UserWhitelistProto& from);
  void MergeFrom(const UserWhitelistProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserWhitelistProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.UserWhitelistProto";
  }
  protected:
  explicit UserWhitelistProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserWhitelistFieldNumber = 1,
  };
  // repeated string user_whitelist = 1;
  int user_whitelist_size() const;
  private:
  int _internal_user_whitelist_size() const;
  public:
  void clear_user_whitelist();
  const std::string& user_whitelist(int index) const;
  std::string* mutable_user_whitelist(int index);
  void set_user_whitelist(int index, const std::string& value);
  void set_user_whitelist(int index, std::string&& value);
  void set_user_whitelist(int index, const char* value);
  void set_user_whitelist(int index, const char* value, size_t size);
  std::string* add_user_whitelist();
  void add_user_whitelist(const std::string& value);
  void add_user_whitelist(std::string&& value);
  void add_user_whitelist(const char* value);
  void add_user_whitelist(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& user_whitelist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_user_whitelist();
  private:
  const std::string& _internal_user_whitelist(int index) const;
  std::string* _internal_add_user_whitelist();
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.UserWhitelistProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> user_whitelist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class AllowNewUsersProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.AllowNewUsersProto) */ {
 public:
  inline AllowNewUsersProto() : AllowNewUsersProto(nullptr) {};
  virtual ~AllowNewUsersProto();

  AllowNewUsersProto(const AllowNewUsersProto& from);
  AllowNewUsersProto(AllowNewUsersProto&& from) noexcept
    : AllowNewUsersProto() {
    *this = ::std::move(from);
  }

  inline AllowNewUsersProto& operator=(const AllowNewUsersProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllowNewUsersProto& operator=(AllowNewUsersProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AllowNewUsersProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllowNewUsersProto* internal_default_instance() {
    return reinterpret_cast<const AllowNewUsersProto*>(
               &_AllowNewUsersProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AllowNewUsersProto& a, AllowNewUsersProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AllowNewUsersProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllowNewUsersProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AllowNewUsersProto* New() const final {
    return CreateMaybeMessage<AllowNewUsersProto>(nullptr);
  }

  AllowNewUsersProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AllowNewUsersProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AllowNewUsersProto& from);
  void MergeFrom(const AllowNewUsersProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AllowNewUsersProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.AllowNewUsersProto";
  }
  protected:
  explicit AllowNewUsersProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllowNewUsersFieldNumber = 1,
  };
  // optional bool allow_new_users = 1 [default = true];
  bool has_allow_new_users() const;
  private:
  bool _internal_has_allow_new_users() const;
  public:
  void clear_allow_new_users();
  bool allow_new_users() const;
  void set_allow_new_users(bool value);
  private:
  bool _internal_allow_new_users() const;
  void _internal_set_allow_new_users(bool value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.AllowNewUsersProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool allow_new_users_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class GuestModeEnabledProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.GuestModeEnabledProto) */ {
 public:
  inline GuestModeEnabledProto() : GuestModeEnabledProto(nullptr) {};
  virtual ~GuestModeEnabledProto();

  GuestModeEnabledProto(const GuestModeEnabledProto& from);
  GuestModeEnabledProto(GuestModeEnabledProto&& from) noexcept
    : GuestModeEnabledProto() {
    *this = ::std::move(from);
  }

  inline GuestModeEnabledProto& operator=(const GuestModeEnabledProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GuestModeEnabledProto& operator=(GuestModeEnabledProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GuestModeEnabledProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GuestModeEnabledProto* internal_default_instance() {
    return reinterpret_cast<const GuestModeEnabledProto*>(
               &_GuestModeEnabledProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GuestModeEnabledProto& a, GuestModeEnabledProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GuestModeEnabledProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GuestModeEnabledProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GuestModeEnabledProto* New() const final {
    return CreateMaybeMessage<GuestModeEnabledProto>(nullptr);
  }

  GuestModeEnabledProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GuestModeEnabledProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GuestModeEnabledProto& from);
  void MergeFrom(const GuestModeEnabledProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GuestModeEnabledProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.GuestModeEnabledProto";
  }
  protected:
  explicit GuestModeEnabledProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuestModeEnabledFieldNumber = 1,
  };
  // optional bool guest_mode_enabled = 1 [default = true];
  bool has_guest_mode_enabled() const;
  private:
  bool _internal_has_guest_mode_enabled() const;
  public:
  void clear_guest_mode_enabled();
  bool guest_mode_enabled() const;
  void set_guest_mode_enabled(bool value);
  private:
  bool _internal_guest_mode_enabled() const;
  void _internal_set_guest_mode_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.GuestModeEnabledProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool guest_mode_enabled_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class ShowUserNamesOnSigninProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.ShowUserNamesOnSigninProto) */ {
 public:
  inline ShowUserNamesOnSigninProto() : ShowUserNamesOnSigninProto(nullptr) {};
  virtual ~ShowUserNamesOnSigninProto();

  ShowUserNamesOnSigninProto(const ShowUserNamesOnSigninProto& from);
  ShowUserNamesOnSigninProto(ShowUserNamesOnSigninProto&& from) noexcept
    : ShowUserNamesOnSigninProto() {
    *this = ::std::move(from);
  }

  inline ShowUserNamesOnSigninProto& operator=(const ShowUserNamesOnSigninProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowUserNamesOnSigninProto& operator=(ShowUserNamesOnSigninProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ShowUserNamesOnSigninProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowUserNamesOnSigninProto* internal_default_instance() {
    return reinterpret_cast<const ShowUserNamesOnSigninProto*>(
               &_ShowUserNamesOnSigninProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ShowUserNamesOnSigninProto& a, ShowUserNamesOnSigninProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ShowUserNamesOnSigninProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShowUserNamesOnSigninProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShowUserNamesOnSigninProto* New() const final {
    return CreateMaybeMessage<ShowUserNamesOnSigninProto>(nullptr);
  }

  ShowUserNamesOnSigninProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShowUserNamesOnSigninProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ShowUserNamesOnSigninProto& from);
  void MergeFrom(const ShowUserNamesOnSigninProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ShowUserNamesOnSigninProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.ShowUserNamesOnSigninProto";
  }
  protected:
  explicit ShowUserNamesOnSigninProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowUserNamesFieldNumber = 1,
  };
  // optional bool show_user_names = 1 [default = true];
  bool has_show_user_names() const;
  private:
  bool _internal_has_show_user_names() const;
  public:
  void clear_show_user_names();
  bool show_user_names() const;
  void set_show_user_names(bool value);
  private:
  bool _internal_show_user_names() const;
  void _internal_set_show_user_names(bool value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.ShowUserNamesOnSigninProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool show_user_names_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class DataRoamingEnabledProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DataRoamingEnabledProto) */ {
 public:
  inline DataRoamingEnabledProto() : DataRoamingEnabledProto(nullptr) {};
  virtual ~DataRoamingEnabledProto();

  DataRoamingEnabledProto(const DataRoamingEnabledProto& from);
  DataRoamingEnabledProto(DataRoamingEnabledProto&& from) noexcept
    : DataRoamingEnabledProto() {
    *this = ::std::move(from);
  }

  inline DataRoamingEnabledProto& operator=(const DataRoamingEnabledProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataRoamingEnabledProto& operator=(DataRoamingEnabledProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DataRoamingEnabledProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataRoamingEnabledProto* internal_default_instance() {
    return reinterpret_cast<const DataRoamingEnabledProto*>(
               &_DataRoamingEnabledProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DataRoamingEnabledProto& a, DataRoamingEnabledProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DataRoamingEnabledProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataRoamingEnabledProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataRoamingEnabledProto* New() const final {
    return CreateMaybeMessage<DataRoamingEnabledProto>(nullptr);
  }

  DataRoamingEnabledProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataRoamingEnabledProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DataRoamingEnabledProto& from);
  void MergeFrom(const DataRoamingEnabledProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DataRoamingEnabledProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.DataRoamingEnabledProto";
  }
  protected:
  explicit DataRoamingEnabledProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataRoamingEnabledFieldNumber = 1,
  };
  // optional bool data_roaming_enabled = 1 [default = false];
  bool has_data_roaming_enabled() const;
  private:
  bool _internal_has_data_roaming_enabled() const;
  public:
  void clear_data_roaming_enabled();
  bool data_roaming_enabled() const;
  void set_data_roaming_enabled(bool value);
  private:
  bool _internal_data_roaming_enabled() const;
  void _internal_set_data_roaming_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.DataRoamingEnabledProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool data_roaming_enabled_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class OBSOLETE_DeviceProxySettingsProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.OBSOLETE_DeviceProxySettingsProto) */ {
 public:
  inline OBSOLETE_DeviceProxySettingsProto() : OBSOLETE_DeviceProxySettingsProto(nullptr) {};
  virtual ~OBSOLETE_DeviceProxySettingsProto();

  OBSOLETE_DeviceProxySettingsProto(const OBSOLETE_DeviceProxySettingsProto& from);
  OBSOLETE_DeviceProxySettingsProto(OBSOLETE_DeviceProxySettingsProto&& from) noexcept
    : OBSOLETE_DeviceProxySettingsProto() {
    *this = ::std::move(from);
  }

  inline OBSOLETE_DeviceProxySettingsProto& operator=(const OBSOLETE_DeviceProxySettingsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline OBSOLETE_DeviceProxySettingsProto& operator=(OBSOLETE_DeviceProxySettingsProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const OBSOLETE_DeviceProxySettingsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OBSOLETE_DeviceProxySettingsProto* internal_default_instance() {
    return reinterpret_cast<const OBSOLETE_DeviceProxySettingsProto*>(
               &_OBSOLETE_DeviceProxySettingsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(OBSOLETE_DeviceProxySettingsProto& a, OBSOLETE_DeviceProxySettingsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(OBSOLETE_DeviceProxySettingsProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OBSOLETE_DeviceProxySettingsProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OBSOLETE_DeviceProxySettingsProto* New() const final {
    return CreateMaybeMessage<OBSOLETE_DeviceProxySettingsProto>(nullptr);
  }

  OBSOLETE_DeviceProxySettingsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OBSOLETE_DeviceProxySettingsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const OBSOLETE_DeviceProxySettingsProto& from);
  void MergeFrom(const OBSOLETE_DeviceProxySettingsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OBSOLETE_DeviceProxySettingsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.OBSOLETE_DeviceProxySettingsProto";
  }
  protected:
  explicit OBSOLETE_DeviceProxySettingsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOBSOLETEProxyModeFieldNumber = 1,
    kOBSOLETEProxyServerFieldNumber = 2,
    kOBSOLETEProxyPacUrlFieldNumber = 3,
    kOBSOLETEProxyBypassListFieldNumber = 4,
  };
  // optional string OBSOLETE_proxy_mode = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_obsolete_proxy_mode() const;
  private:
  bool _internal_has_obsolete_proxy_mode() const;
  public:
  PROTOBUF_DEPRECATED void clear_obsolete_proxy_mode();
  PROTOBUF_DEPRECATED const std::string& obsolete_proxy_mode() const;
  PROTOBUF_DEPRECATED void set_obsolete_proxy_mode(const std::string& value);
  PROTOBUF_DEPRECATED void set_obsolete_proxy_mode(std::string&& value);
  PROTOBUF_DEPRECATED void set_obsolete_proxy_mode(const char* value);
  PROTOBUF_DEPRECATED void set_obsolete_proxy_mode(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_obsolete_proxy_mode();
  PROTOBUF_DEPRECATED std::string* release_obsolete_proxy_mode();
  PROTOBUF_DEPRECATED void set_allocated_obsolete_proxy_mode(std::string* obsolete_proxy_mode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_obsolete_proxy_mode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_obsolete_proxy_mode(
      std::string* obsolete_proxy_mode);
  private:
  const std::string& _internal_obsolete_proxy_mode() const;
  void _internal_set_obsolete_proxy_mode(const std::string& value);
  std::string* _internal_mutable_obsolete_proxy_mode();
  public:

  // optional string OBSOLETE_proxy_server = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_obsolete_proxy_server() const;
  private:
  bool _internal_has_obsolete_proxy_server() const;
  public:
  PROTOBUF_DEPRECATED void clear_obsolete_proxy_server();
  PROTOBUF_DEPRECATED const std::string& obsolete_proxy_server() const;
  PROTOBUF_DEPRECATED void set_obsolete_proxy_server(const std::string& value);
  PROTOBUF_DEPRECATED void set_obsolete_proxy_server(std::string&& value);
  PROTOBUF_DEPRECATED void set_obsolete_proxy_server(const char* value);
  PROTOBUF_DEPRECATED void set_obsolete_proxy_server(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_obsolete_proxy_server();
  PROTOBUF_DEPRECATED std::string* release_obsolete_proxy_server();
  PROTOBUF_DEPRECATED void set_allocated_obsolete_proxy_server(std::string* obsolete_proxy_server);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_obsolete_proxy_server();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_obsolete_proxy_server(
      std::string* obsolete_proxy_server);
  private:
  const std::string& _internal_obsolete_proxy_server() const;
  void _internal_set_obsolete_proxy_server(const std::string& value);
  std::string* _internal_mutable_obsolete_proxy_server();
  public:

  // optional string OBSOLETE_proxy_pac_url = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_obsolete_proxy_pac_url() const;
  private:
  bool _internal_has_obsolete_proxy_pac_url() const;
  public:
  PROTOBUF_DEPRECATED void clear_obsolete_proxy_pac_url();
  PROTOBUF_DEPRECATED const std::string& obsolete_proxy_pac_url() const;
  PROTOBUF_DEPRECATED void set_obsolete_proxy_pac_url(const std::string& value);
  PROTOBUF_DEPRECATED void set_obsolete_proxy_pac_url(std::string&& value);
  PROTOBUF_DEPRECATED void set_obsolete_proxy_pac_url(const char* value);
  PROTOBUF_DEPRECATED void set_obsolete_proxy_pac_url(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_obsolete_proxy_pac_url();
  PROTOBUF_DEPRECATED std::string* release_obsolete_proxy_pac_url();
  PROTOBUF_DEPRECATED void set_allocated_obsolete_proxy_pac_url(std::string* obsolete_proxy_pac_url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_obsolete_proxy_pac_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_obsolete_proxy_pac_url(
      std::string* obsolete_proxy_pac_url);
  private:
  const std::string& _internal_obsolete_proxy_pac_url() const;
  void _internal_set_obsolete_proxy_pac_url(const std::string& value);
  std::string* _internal_mutable_obsolete_proxy_pac_url();
  public:

  // optional string OBSOLETE_proxy_bypass_list = 4 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_obsolete_proxy_bypass_list() const;
  private:
  bool _internal_has_obsolete_proxy_bypass_list() const;
  public:
  PROTOBUF_DEPRECATED void clear_obsolete_proxy_bypass_list();
  PROTOBUF_DEPRECATED const std::string& obsolete_proxy_bypass_list() const;
  PROTOBUF_DEPRECATED void set_obsolete_proxy_bypass_list(const std::string& value);
  PROTOBUF_DEPRECATED void set_obsolete_proxy_bypass_list(std::string&& value);
  PROTOBUF_DEPRECATED void set_obsolete_proxy_bypass_list(const char* value);
  PROTOBUF_DEPRECATED void set_obsolete_proxy_bypass_list(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_obsolete_proxy_bypass_list();
  PROTOBUF_DEPRECATED std::string* release_obsolete_proxy_bypass_list();
  PROTOBUF_DEPRECATED void set_allocated_obsolete_proxy_bypass_list(std::string* obsolete_proxy_bypass_list);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_obsolete_proxy_bypass_list();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_obsolete_proxy_bypass_list(
      std::string* obsolete_proxy_bypass_list);
  private:
  const std::string& _internal_obsolete_proxy_bypass_list() const;
  void _internal_set_obsolete_proxy_bypass_list(const std::string& value);
  std::string* _internal_mutable_obsolete_proxy_bypass_list();
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.OBSOLETE_DeviceProxySettingsProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obsolete_proxy_mode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obsolete_proxy_server_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obsolete_proxy_pac_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obsolete_proxy_bypass_list_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class CameraEnabledProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.CameraEnabledProto) */ {
 public:
  inline CameraEnabledProto() : CameraEnabledProto(nullptr) {};
  virtual ~CameraEnabledProto();

  CameraEnabledProto(const CameraEnabledProto& from);
  CameraEnabledProto(CameraEnabledProto&& from) noexcept
    : CameraEnabledProto() {
    *this = ::std::move(from);
  }

  inline CameraEnabledProto& operator=(const CameraEnabledProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraEnabledProto& operator=(CameraEnabledProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CameraEnabledProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraEnabledProto* internal_default_instance() {
    return reinterpret_cast<const CameraEnabledProto*>(
               &_CameraEnabledProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CameraEnabledProto& a, CameraEnabledProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraEnabledProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraEnabledProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraEnabledProto* New() const final {
    return CreateMaybeMessage<CameraEnabledProto>(nullptr);
  }

  CameraEnabledProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraEnabledProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CameraEnabledProto& from);
  void MergeFrom(const CameraEnabledProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CameraEnabledProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.CameraEnabledProto";
  }
  protected:
  explicit CameraEnabledProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraEnabledFieldNumber = 1,
  };
  // optional bool camera_enabled = 1;
  bool has_camera_enabled() const;
  private:
  bool _internal_has_camera_enabled() const;
  public:
  void clear_camera_enabled();
  bool camera_enabled() const;
  void set_camera_enabled(bool value);
  private:
  bool _internal_camera_enabled() const;
  void _internal_set_camera_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.CameraEnabledProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool camera_enabled_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class MetricsEnabledProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.MetricsEnabledProto) */ {
 public:
  inline MetricsEnabledProto() : MetricsEnabledProto(nullptr) {};
  virtual ~MetricsEnabledProto();

  MetricsEnabledProto(const MetricsEnabledProto& from);
  MetricsEnabledProto(MetricsEnabledProto&& from) noexcept
    : MetricsEnabledProto() {
    *this = ::std::move(from);
  }

  inline MetricsEnabledProto& operator=(const MetricsEnabledProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetricsEnabledProto& operator=(MetricsEnabledProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const MetricsEnabledProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MetricsEnabledProto* internal_default_instance() {
    return reinterpret_cast<const MetricsEnabledProto*>(
               &_MetricsEnabledProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MetricsEnabledProto& a, MetricsEnabledProto& b) {
    a.Swap(&b);
  }
  inline void Swap(MetricsEnabledProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetricsEnabledProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetricsEnabledProto* New() const final {
    return CreateMaybeMessage<MetricsEnabledProto>(nullptr);
  }

  MetricsEnabledProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetricsEnabledProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MetricsEnabledProto& from);
  void MergeFrom(const MetricsEnabledProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MetricsEnabledProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.MetricsEnabledProto";
  }
  protected:
  explicit MetricsEnabledProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricsEnabledFieldNumber = 1,
  };
  // optional bool metrics_enabled = 1;
  bool has_metrics_enabled() const;
  private:
  bool _internal_has_metrics_enabled() const;
  public:
  void clear_metrics_enabled();
  bool metrics_enabled() const;
  void set_metrics_enabled(bool value);
  private:
  bool _internal_metrics_enabled() const;
  void _internal_set_metrics_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.MetricsEnabledProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool metrics_enabled_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class ReleaseChannelProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.ReleaseChannelProto) */ {
 public:
  inline ReleaseChannelProto() : ReleaseChannelProto(nullptr) {};
  virtual ~ReleaseChannelProto();

  ReleaseChannelProto(const ReleaseChannelProto& from);
  ReleaseChannelProto(ReleaseChannelProto&& from) noexcept
    : ReleaseChannelProto() {
    *this = ::std::move(from);
  }

  inline ReleaseChannelProto& operator=(const ReleaseChannelProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReleaseChannelProto& operator=(ReleaseChannelProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ReleaseChannelProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReleaseChannelProto* internal_default_instance() {
    return reinterpret_cast<const ReleaseChannelProto*>(
               &_ReleaseChannelProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ReleaseChannelProto& a, ReleaseChannelProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ReleaseChannelProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReleaseChannelProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReleaseChannelProto* New() const final {
    return CreateMaybeMessage<ReleaseChannelProto>(nullptr);
  }

  ReleaseChannelProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReleaseChannelProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ReleaseChannelProto& from);
  void MergeFrom(const ReleaseChannelProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReleaseChannelProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.ReleaseChannelProto";
  }
  protected:
  explicit ReleaseChannelProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReleaseChannelFieldNumber = 1,
    kReleaseChannelDelegatedFieldNumber = 2,
  };
  // optional string release_channel = 1;
  bool has_release_channel() const;
  private:
  bool _internal_has_release_channel() const;
  public:
  void clear_release_channel();
  const std::string& release_channel() const;
  void set_release_channel(const std::string& value);
  void set_release_channel(std::string&& value);
  void set_release_channel(const char* value);
  void set_release_channel(const char* value, size_t size);
  std::string* mutable_release_channel();
  std::string* release_release_channel();
  void set_allocated_release_channel(std::string* release_channel);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_release_channel();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_release_channel(
      std::string* release_channel);
  private:
  const std::string& _internal_release_channel() const;
  void _internal_set_release_channel(const std::string& value);
  std::string* _internal_mutable_release_channel();
  public:

  // optional bool release_channel_delegated = 2;
  bool has_release_channel_delegated() const;
  private:
  bool _internal_has_release_channel_delegated() const;
  public:
  void clear_release_channel_delegated();
  bool release_channel_delegated() const;
  void set_release_channel_delegated(bool value);
  private:
  bool _internal_release_channel_delegated() const;
  void _internal_set_release_channel_delegated(bool value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.ReleaseChannelProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr release_channel_;
  bool release_channel_delegated_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class DeviceOpenNetworkConfigurationProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceOpenNetworkConfigurationProto) */ {
 public:
  inline DeviceOpenNetworkConfigurationProto() : DeviceOpenNetworkConfigurationProto(nullptr) {};
  virtual ~DeviceOpenNetworkConfigurationProto();

  DeviceOpenNetworkConfigurationProto(const DeviceOpenNetworkConfigurationProto& from);
  DeviceOpenNetworkConfigurationProto(DeviceOpenNetworkConfigurationProto&& from) noexcept
    : DeviceOpenNetworkConfigurationProto() {
    *this = ::std::move(from);
  }

  inline DeviceOpenNetworkConfigurationProto& operator=(const DeviceOpenNetworkConfigurationProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceOpenNetworkConfigurationProto& operator=(DeviceOpenNetworkConfigurationProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeviceOpenNetworkConfigurationProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceOpenNetworkConfigurationProto* internal_default_instance() {
    return reinterpret_cast<const DeviceOpenNetworkConfigurationProto*>(
               &_DeviceOpenNetworkConfigurationProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DeviceOpenNetworkConfigurationProto& a, DeviceOpenNetworkConfigurationProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceOpenNetworkConfigurationProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceOpenNetworkConfigurationProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceOpenNetworkConfigurationProto* New() const final {
    return CreateMaybeMessage<DeviceOpenNetworkConfigurationProto>(nullptr);
  }

  DeviceOpenNetworkConfigurationProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceOpenNetworkConfigurationProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeviceOpenNetworkConfigurationProto& from);
  void MergeFrom(const DeviceOpenNetworkConfigurationProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceOpenNetworkConfigurationProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.DeviceOpenNetworkConfigurationProto";
  }
  protected:
  explicit DeviceOpenNetworkConfigurationProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpenNetworkConfigurationFieldNumber = 1,
  };
  // optional string open_network_configuration = 1;
  bool has_open_network_configuration() const;
  private:
  bool _internal_has_open_network_configuration() const;
  public:
  void clear_open_network_configuration();
  const std::string& open_network_configuration() const;
  void set_open_network_configuration(const std::string& value);
  void set_open_network_configuration(std::string&& value);
  void set_open_network_configuration(const char* value);
  void set_open_network_configuration(const char* value, size_t size);
  std::string* mutable_open_network_configuration();
  std::string* release_open_network_configuration();
  void set_allocated_open_network_configuration(std::string* open_network_configuration);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_open_network_configuration();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_open_network_configuration(
      std::string* open_network_configuration);
  private:
  const std::string& _internal_open_network_configuration() const;
  void _internal_set_open_network_configuration(const std::string& value);
  std::string* _internal_mutable_open_network_configuration();
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.DeviceOpenNetworkConfigurationProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr open_network_configuration_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class NetworkHostnameProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.NetworkHostnameProto) */ {
 public:
  inline NetworkHostnameProto() : NetworkHostnameProto(nullptr) {};
  virtual ~NetworkHostnameProto();

  NetworkHostnameProto(const NetworkHostnameProto& from);
  NetworkHostnameProto(NetworkHostnameProto&& from) noexcept
    : NetworkHostnameProto() {
    *this = ::std::move(from);
  }

  inline NetworkHostnameProto& operator=(const NetworkHostnameProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkHostnameProto& operator=(NetworkHostnameProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const NetworkHostnameProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkHostnameProto* internal_default_instance() {
    return reinterpret_cast<const NetworkHostnameProto*>(
               &_NetworkHostnameProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(NetworkHostnameProto& a, NetworkHostnameProto& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkHostnameProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkHostnameProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkHostnameProto* New() const final {
    return CreateMaybeMessage<NetworkHostnameProto>(nullptr);
  }

  NetworkHostnameProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkHostnameProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const NetworkHostnameProto& from);
  void MergeFrom(const NetworkHostnameProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NetworkHostnameProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.NetworkHostnameProto";
  }
  protected:
  explicit NetworkHostnameProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceHostnameTemplateFieldNumber = 1,
  };
  // optional string device_hostname_template = 1;
  bool has_device_hostname_template() const;
  private:
  bool _internal_has_device_hostname_template() const;
  public:
  void clear_device_hostname_template();
  const std::string& device_hostname_template() const;
  void set_device_hostname_template(const std::string& value);
  void set_device_hostname_template(std::string&& value);
  void set_device_hostname_template(const char* value);
  void set_device_hostname_template(const char* value, size_t size);
  std::string* mutable_device_hostname_template();
  std::string* release_device_hostname_template();
  void set_allocated_device_hostname_template(std::string* device_hostname_template);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_hostname_template();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_hostname_template(
      std::string* device_hostname_template);
  private:
  const std::string& _internal_device_hostname_template() const;
  void _internal_set_device_hostname_template(const std::string& value);
  std::string* _internal_mutable_device_hostname_template();
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.NetworkHostnameProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_hostname_template_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class DeviceReportingProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceReportingProto) */ {
 public:
  inline DeviceReportingProto() : DeviceReportingProto(nullptr) {};
  virtual ~DeviceReportingProto();

  DeviceReportingProto(const DeviceReportingProto& from);
  DeviceReportingProto(DeviceReportingProto&& from) noexcept
    : DeviceReportingProto() {
    *this = ::std::move(from);
  }

  inline DeviceReportingProto& operator=(const DeviceReportingProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceReportingProto& operator=(DeviceReportingProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeviceReportingProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceReportingProto* internal_default_instance() {
    return reinterpret_cast<const DeviceReportingProto*>(
               &_DeviceReportingProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DeviceReportingProto& a, DeviceReportingProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceReportingProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceReportingProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceReportingProto* New() const final {
    return CreateMaybeMessage<DeviceReportingProto>(nullptr);
  }

  DeviceReportingProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceReportingProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeviceReportingProto& from);
  void MergeFrom(const DeviceReportingProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceReportingProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.DeviceReportingProto";
  }
  protected:
  explicit DeviceReportingProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReportLocationFieldNumber = 4,
    kReportOsUpdateStatusFieldNumber = 10,
    kReportRunningKioskAppFieldNumber = 11,
    kReportPowerStatusFieldNumber = 12,
    kReportStorageStatusFieldNumber = 13,
    kReportBoardStatusFieldNumber = 14,
    kReportCpuInfoFieldNumber = 15,
    kReportGraphicsStatusFieldNumber = 16,
    kReportCrashReportInfoFieldNumber = 17,
    kReportTimezoneInfoFieldNumber = 18,
    kReportMemoryInfoFieldNumber = 19,
    kReportBacklightInfoFieldNumber = 20,
    kReportVersionInfoFieldNumber = 1,
    kReportActivityTimesFieldNumber = 2,
    kReportBootModeFieldNumber = 3,
    kReportNetworkInterfacesFieldNumber = 5,
    kReportUsersFieldNumber = 6,
    kReportHardwareStatusFieldNumber = 7,
    kReportSessionStatusFieldNumber = 8,
    kDeviceStatusFrequencyFieldNumber = 9,
  };
  // optional bool report_location = 4 [default = false];
  bool has_report_location() const;
  private:
  bool _internal_has_report_location() const;
  public:
  void clear_report_location();
  bool report_location() const;
  void set_report_location(bool value);
  private:
  bool _internal_report_location() const;
  void _internal_set_report_location(bool value);
  public:

  // optional bool report_os_update_status = 10 [default = false];
  bool has_report_os_update_status() const;
  private:
  bool _internal_has_report_os_update_status() const;
  public:
  void clear_report_os_update_status();
  bool report_os_update_status() const;
  void set_report_os_update_status(bool value);
  private:
  bool _internal_report_os_update_status() const;
  void _internal_set_report_os_update_status(bool value);
  public:

  // optional bool report_running_kiosk_app = 11 [default = false];
  bool has_report_running_kiosk_app() const;
  private:
  bool _internal_has_report_running_kiosk_app() const;
  public:
  void clear_report_running_kiosk_app();
  bool report_running_kiosk_app() const;
  void set_report_running_kiosk_app(bool value);
  private:
  bool _internal_report_running_kiosk_app() const;
  void _internal_set_report_running_kiosk_app(bool value);
  public:

  // optional bool report_power_status = 12 [default = false];
  bool has_report_power_status() const;
  private:
  bool _internal_has_report_power_status() const;
  public:
  void clear_report_power_status();
  bool report_power_status() const;
  void set_report_power_status(bool value);
  private:
  bool _internal_report_power_status() const;
  void _internal_set_report_power_status(bool value);
  public:

  // optional bool report_storage_status = 13 [default = false];
  bool has_report_storage_status() const;
  private:
  bool _internal_has_report_storage_status() const;
  public:
  void clear_report_storage_status();
  bool report_storage_status() const;
  void set_report_storage_status(bool value);
  private:
  bool _internal_report_storage_status() const;
  void _internal_set_report_storage_status(bool value);
  public:

  // optional bool report_board_status = 14 [default = false];
  bool has_report_board_status() const;
  private:
  bool _internal_has_report_board_status() const;
  public:
  void clear_report_board_status();
  bool report_board_status() const;
  void set_report_board_status(bool value);
  private:
  bool _internal_report_board_status() const;
  void _internal_set_report_board_status(bool value);
  public:

  // optional bool report_cpu_info = 15 [default = false];
  bool has_report_cpu_info() const;
  private:
  bool _internal_has_report_cpu_info() const;
  public:
  void clear_report_cpu_info();
  bool report_cpu_info() const;
  void set_report_cpu_info(bool value);
  private:
  bool _internal_report_cpu_info() const;
  void _internal_set_report_cpu_info(bool value);
  public:

  // optional bool report_graphics_status = 16 [default = false];
  bool has_report_graphics_status() const;
  private:
  bool _internal_has_report_graphics_status() const;
  public:
  void clear_report_graphics_status();
  bool report_graphics_status() const;
  void set_report_graphics_status(bool value);
  private:
  bool _internal_report_graphics_status() const;
  void _internal_set_report_graphics_status(bool value);
  public:

  // optional bool report_crash_report_info = 17 [default = false];
  bool has_report_crash_report_info() const;
  private:
  bool _internal_has_report_crash_report_info() const;
  public:
  void clear_report_crash_report_info();
  bool report_crash_report_info() const;
  void set_report_crash_report_info(bool value);
  private:
  bool _internal_report_crash_report_info() const;
  void _internal_set_report_crash_report_info(bool value);
  public:

  // optional bool report_timezone_info = 18 [default = false];
  bool has_report_timezone_info() const;
  private:
  bool _internal_has_report_timezone_info() const;
  public:
  void clear_report_timezone_info();
  bool report_timezone_info() const;
  void set_report_timezone_info(bool value);
  private:
  bool _internal_report_timezone_info() const;
  void _internal_set_report_timezone_info(bool value);
  public:

  // optional bool report_memory_info = 19 [default = false];
  bool has_report_memory_info() const;
  private:
  bool _internal_has_report_memory_info() const;
  public:
  void clear_report_memory_info();
  bool report_memory_info() const;
  void set_report_memory_info(bool value);
  private:
  bool _internal_report_memory_info() const;
  void _internal_set_report_memory_info(bool value);
  public:

  // optional bool report_backlight_info = 20 [default = false];
  bool has_report_backlight_info() const;
  private:
  bool _internal_has_report_backlight_info() const;
  public:
  void clear_report_backlight_info();
  bool report_backlight_info() const;
  void set_report_backlight_info(bool value);
  private:
  bool _internal_report_backlight_info() const;
  void _internal_set_report_backlight_info(bool value);
  public:

  // optional bool report_version_info = 1 [default = true];
  bool has_report_version_info() const;
  private:
  bool _internal_has_report_version_info() const;
  public:
  void clear_report_version_info();
  bool report_version_info() const;
  void set_report_version_info(bool value);
  private:
  bool _internal_report_version_info() const;
  void _internal_set_report_version_info(bool value);
  public:

  // optional bool report_activity_times = 2 [default = true];
  bool has_report_activity_times() const;
  private:
  bool _internal_has_report_activity_times() const;
  public:
  void clear_report_activity_times();
  bool report_activity_times() const;
  void set_report_activity_times(bool value);
  private:
  bool _internal_report_activity_times() const;
  void _internal_set_report_activity_times(bool value);
  public:

  // optional bool report_boot_mode = 3 [default = true];
  bool has_report_boot_mode() const;
  private:
  bool _internal_has_report_boot_mode() const;
  public:
  void clear_report_boot_mode();
  bool report_boot_mode() const;
  void set_report_boot_mode(bool value);
  private:
  bool _internal_report_boot_mode() const;
  void _internal_set_report_boot_mode(bool value);
  public:

  // optional bool report_network_interfaces = 5 [default = true];
  bool has_report_network_interfaces() const;
  private:
  bool _internal_has_report_network_interfaces() const;
  public:
  void clear_report_network_interfaces();
  bool report_network_interfaces() const;
  void set_report_network_interfaces(bool value);
  private:
  bool _internal_report_network_interfaces() const;
  void _internal_set_report_network_interfaces(bool value);
  public:

  // optional bool report_users = 6 [default = true];
  bool has_report_users() const;
  private:
  bool _internal_has_report_users() const;
  public:
  void clear_report_users();
  bool report_users() const;
  void set_report_users(bool value);
  private:
  bool _internal_report_users() const;
  void _internal_set_report_users(bool value);
  public:

  // optional bool report_hardware_status = 7 [default = true];
  bool has_report_hardware_status() const;
  private:
  bool _internal_has_report_hardware_status() const;
  public:
  void clear_report_hardware_status();
  bool report_hardware_status() const;
  void set_report_hardware_status(bool value);
  private:
  bool _internal_report_hardware_status() const;
  void _internal_set_report_hardware_status(bool value);
  public:

  // optional bool report_session_status = 8 [default = true];
  bool has_report_session_status() const;
  private:
  bool _internal_has_report_session_status() const;
  public:
  void clear_report_session_status();
  bool report_session_status() const;
  void set_report_session_status(bool value);
  private:
  bool _internal_report_session_status() const;
  void _internal_set_report_session_status(bool value);
  public:

  // optional int64 device_status_frequency = 9 [default = 10800000];
  bool has_device_status_frequency() const;
  private:
  bool _internal_has_device_status_frequency() const;
  public:
  void clear_device_status_frequency();
  ::PROTOBUF_NAMESPACE_ID::int64 device_status_frequency() const;
  void set_device_status_frequency(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_device_status_frequency() const;
  void _internal_set_device_status_frequency(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.DeviceReportingProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool report_location_;
  bool report_os_update_status_;
  bool report_running_kiosk_app_;
  bool report_power_status_;
  bool report_storage_status_;
  bool report_board_status_;
  bool report_cpu_info_;
  bool report_graphics_status_;
  bool report_crash_report_info_;
  bool report_timezone_info_;
  bool report_memory_info_;
  bool report_backlight_info_;
  bool report_version_info_;
  bool report_activity_times_;
  bool report_boot_mode_;
  bool report_network_interfaces_;
  bool report_users_;
  bool report_hardware_status_;
  bool report_session_status_;
  ::PROTOBUF_NAMESPACE_ID::int64 device_status_frequency_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class EphemeralUsersEnabledProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.EphemeralUsersEnabledProto) */ {
 public:
  inline EphemeralUsersEnabledProto() : EphemeralUsersEnabledProto(nullptr) {};
  virtual ~EphemeralUsersEnabledProto();

  EphemeralUsersEnabledProto(const EphemeralUsersEnabledProto& from);
  EphemeralUsersEnabledProto(EphemeralUsersEnabledProto&& from) noexcept
    : EphemeralUsersEnabledProto() {
    *this = ::std::move(from);
  }

  inline EphemeralUsersEnabledProto& operator=(const EphemeralUsersEnabledProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline EphemeralUsersEnabledProto& operator=(EphemeralUsersEnabledProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EphemeralUsersEnabledProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EphemeralUsersEnabledProto* internal_default_instance() {
    return reinterpret_cast<const EphemeralUsersEnabledProto*>(
               &_EphemeralUsersEnabledProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(EphemeralUsersEnabledProto& a, EphemeralUsersEnabledProto& b) {
    a.Swap(&b);
  }
  inline void Swap(EphemeralUsersEnabledProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EphemeralUsersEnabledProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EphemeralUsersEnabledProto* New() const final {
    return CreateMaybeMessage<EphemeralUsersEnabledProto>(nullptr);
  }

  EphemeralUsersEnabledProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EphemeralUsersEnabledProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const EphemeralUsersEnabledProto& from);
  void MergeFrom(const EphemeralUsersEnabledProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EphemeralUsersEnabledProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.EphemeralUsersEnabledProto";
  }
  protected:
  explicit EphemeralUsersEnabledProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEphemeralUsersEnabledFieldNumber = 1,
  };
  // optional bool ephemeral_users_enabled = 1;
  bool has_ephemeral_users_enabled() const;
  private:
  bool _internal_has_ephemeral_users_enabled() const;
  public:
  void clear_ephemeral_users_enabled();
  bool ephemeral_users_enabled() const;
  void set_ephemeral_users_enabled(bool value);
  private:
  bool _internal_ephemeral_users_enabled() const;
  void _internal_set_ephemeral_users_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.EphemeralUsersEnabledProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool ephemeral_users_enabled_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class OBSOLETE_AppPackEntryProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.OBSOLETE_AppPackEntryProto) */ {
 public:
  inline OBSOLETE_AppPackEntryProto() : OBSOLETE_AppPackEntryProto(nullptr) {};
  virtual ~OBSOLETE_AppPackEntryProto();

  OBSOLETE_AppPackEntryProto(const OBSOLETE_AppPackEntryProto& from);
  OBSOLETE_AppPackEntryProto(OBSOLETE_AppPackEntryProto&& from) noexcept
    : OBSOLETE_AppPackEntryProto() {
    *this = ::std::move(from);
  }

  inline OBSOLETE_AppPackEntryProto& operator=(const OBSOLETE_AppPackEntryProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline OBSOLETE_AppPackEntryProto& operator=(OBSOLETE_AppPackEntryProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const OBSOLETE_AppPackEntryProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OBSOLETE_AppPackEntryProto* internal_default_instance() {
    return reinterpret_cast<const OBSOLETE_AppPackEntryProto*>(
               &_OBSOLETE_AppPackEntryProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(OBSOLETE_AppPackEntryProto& a, OBSOLETE_AppPackEntryProto& b) {
    a.Swap(&b);
  }
  inline void Swap(OBSOLETE_AppPackEntryProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OBSOLETE_AppPackEntryProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OBSOLETE_AppPackEntryProto* New() const final {
    return CreateMaybeMessage<OBSOLETE_AppPackEntryProto>(nullptr);
  }

  OBSOLETE_AppPackEntryProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OBSOLETE_AppPackEntryProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const OBSOLETE_AppPackEntryProto& from);
  void MergeFrom(const OBSOLETE_AppPackEntryProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OBSOLETE_AppPackEntryProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.OBSOLETE_AppPackEntryProto";
  }
  protected:
  explicit OBSOLETE_AppPackEntryProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOBSOLETEExtensionIdFieldNumber = 1,
    kOBSOLETEUpdateUrlFieldNumber = 2,
    kOBSOLETEOnlineOnlyFieldNumber = 3,
  };
  // optional string OBSOLETE_extension_id = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_obsolete_extension_id() const;
  private:
  bool _internal_has_obsolete_extension_id() const;
  public:
  PROTOBUF_DEPRECATED void clear_obsolete_extension_id();
  PROTOBUF_DEPRECATED const std::string& obsolete_extension_id() const;
  PROTOBUF_DEPRECATED void set_obsolete_extension_id(const std::string& value);
  PROTOBUF_DEPRECATED void set_obsolete_extension_id(std::string&& value);
  PROTOBUF_DEPRECATED void set_obsolete_extension_id(const char* value);
  PROTOBUF_DEPRECATED void set_obsolete_extension_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_obsolete_extension_id();
  PROTOBUF_DEPRECATED std::string* release_obsolete_extension_id();
  PROTOBUF_DEPRECATED void set_allocated_obsolete_extension_id(std::string* obsolete_extension_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_obsolete_extension_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_obsolete_extension_id(
      std::string* obsolete_extension_id);
  private:
  const std::string& _internal_obsolete_extension_id() const;
  void _internal_set_obsolete_extension_id(const std::string& value);
  std::string* _internal_mutable_obsolete_extension_id();
  public:

  // optional string OBSOLETE_update_url = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_obsolete_update_url() const;
  private:
  bool _internal_has_obsolete_update_url() const;
  public:
  PROTOBUF_DEPRECATED void clear_obsolete_update_url();
  PROTOBUF_DEPRECATED const std::string& obsolete_update_url() const;
  PROTOBUF_DEPRECATED void set_obsolete_update_url(const std::string& value);
  PROTOBUF_DEPRECATED void set_obsolete_update_url(std::string&& value);
  PROTOBUF_DEPRECATED void set_obsolete_update_url(const char* value);
  PROTOBUF_DEPRECATED void set_obsolete_update_url(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_obsolete_update_url();
  PROTOBUF_DEPRECATED std::string* release_obsolete_update_url();
  PROTOBUF_DEPRECATED void set_allocated_obsolete_update_url(std::string* obsolete_update_url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_obsolete_update_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_obsolete_update_url(
      std::string* obsolete_update_url);
  private:
  const std::string& _internal_obsolete_update_url() const;
  void _internal_set_obsolete_update_url(const std::string& value);
  std::string* _internal_mutable_obsolete_update_url();
  public:

  // optional bool OBSOLETE_online_only = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_obsolete_online_only() const;
  private:
  bool _internal_has_obsolete_online_only() const;
  public:
  PROTOBUF_DEPRECATED void clear_obsolete_online_only();
  PROTOBUF_DEPRECATED bool obsolete_online_only() const;
  PROTOBUF_DEPRECATED void set_obsolete_online_only(bool value);
  private:
  bool _internal_obsolete_online_only() const;
  void _internal_set_obsolete_online_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.OBSOLETE_AppPackEntryProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obsolete_extension_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obsolete_update_url_;
  bool obsolete_online_only_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class OBSOLETE_AppPackProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.OBSOLETE_AppPackProto) */ {
 public:
  inline OBSOLETE_AppPackProto() : OBSOLETE_AppPackProto(nullptr) {};
  virtual ~OBSOLETE_AppPackProto();

  OBSOLETE_AppPackProto(const OBSOLETE_AppPackProto& from);
  OBSOLETE_AppPackProto(OBSOLETE_AppPackProto&& from) noexcept
    : OBSOLETE_AppPackProto() {
    *this = ::std::move(from);
  }

  inline OBSOLETE_AppPackProto& operator=(const OBSOLETE_AppPackProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline OBSOLETE_AppPackProto& operator=(OBSOLETE_AppPackProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const OBSOLETE_AppPackProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OBSOLETE_AppPackProto* internal_default_instance() {
    return reinterpret_cast<const OBSOLETE_AppPackProto*>(
               &_OBSOLETE_AppPackProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(OBSOLETE_AppPackProto& a, OBSOLETE_AppPackProto& b) {
    a.Swap(&b);
  }
  inline void Swap(OBSOLETE_AppPackProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OBSOLETE_AppPackProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OBSOLETE_AppPackProto* New() const final {
    return CreateMaybeMessage<OBSOLETE_AppPackProto>(nullptr);
  }

  OBSOLETE_AppPackProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OBSOLETE_AppPackProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const OBSOLETE_AppPackProto& from);
  void MergeFrom(const OBSOLETE_AppPackProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OBSOLETE_AppPackProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.OBSOLETE_AppPackProto";
  }
  protected:
  explicit OBSOLETE_AppPackProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppPackFieldNumber = 1,
  };
  // repeated .enterprise_management.OBSOLETE_AppPackEntryProto app_pack = 1 [deprecated = true];
  PROTOBUF_DEPRECATED int app_pack_size() const;
  private:
  int _internal_app_pack_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_app_pack();
  PROTOBUF_DEPRECATED ::enterprise_management::OBSOLETE_AppPackEntryProto* mutable_app_pack(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::enterprise_management::OBSOLETE_AppPackEntryProto >*
      mutable_app_pack();
  private:
  const ::enterprise_management::OBSOLETE_AppPackEntryProto& _internal_app_pack(int index) const;
  ::enterprise_management::OBSOLETE_AppPackEntryProto* _internal_add_app_pack();
  public:
  PROTOBUF_DEPRECATED const ::enterprise_management::OBSOLETE_AppPackEntryProto& app_pack(int index) const;
  PROTOBUF_DEPRECATED ::enterprise_management::OBSOLETE_AppPackEntryProto* add_app_pack();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::enterprise_management::OBSOLETE_AppPackEntryProto >&
      app_pack() const;

  // @@protoc_insertion_point(class_scope:enterprise_management.OBSOLETE_AppPackProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::enterprise_management::OBSOLETE_AppPackEntryProto > app_pack_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class OBSOLETE_PinnedAppsProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.OBSOLETE_PinnedAppsProto) */ {
 public:
  inline OBSOLETE_PinnedAppsProto() : OBSOLETE_PinnedAppsProto(nullptr) {};
  virtual ~OBSOLETE_PinnedAppsProto();

  OBSOLETE_PinnedAppsProto(const OBSOLETE_PinnedAppsProto& from);
  OBSOLETE_PinnedAppsProto(OBSOLETE_PinnedAppsProto&& from) noexcept
    : OBSOLETE_PinnedAppsProto() {
    *this = ::std::move(from);
  }

  inline OBSOLETE_PinnedAppsProto& operator=(const OBSOLETE_PinnedAppsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline OBSOLETE_PinnedAppsProto& operator=(OBSOLETE_PinnedAppsProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const OBSOLETE_PinnedAppsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OBSOLETE_PinnedAppsProto* internal_default_instance() {
    return reinterpret_cast<const OBSOLETE_PinnedAppsProto*>(
               &_OBSOLETE_PinnedAppsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(OBSOLETE_PinnedAppsProto& a, OBSOLETE_PinnedAppsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(OBSOLETE_PinnedAppsProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OBSOLETE_PinnedAppsProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OBSOLETE_PinnedAppsProto* New() const final {
    return CreateMaybeMessage<OBSOLETE_PinnedAppsProto>(nullptr);
  }

  OBSOLETE_PinnedAppsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OBSOLETE_PinnedAppsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const OBSOLETE_PinnedAppsProto& from);
  void MergeFrom(const OBSOLETE_PinnedAppsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OBSOLETE_PinnedAppsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.OBSOLETE_PinnedAppsProto";
  }
  protected:
  explicit OBSOLETE_PinnedAppsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOBSOLETEAppIdFieldNumber = 1,
  };
  // repeated string OBSOLETE_app_id = 1 [deprecated = true];
  PROTOBUF_DEPRECATED int obsolete_app_id_size() const;
  private:
  int _internal_obsolete_app_id_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_obsolete_app_id();
  PROTOBUF_DEPRECATED const std::string& obsolete_app_id(int index) const;
  PROTOBUF_DEPRECATED std::string* mutable_obsolete_app_id(int index);
  PROTOBUF_DEPRECATED void set_obsolete_app_id(int index, const std::string& value);
  PROTOBUF_DEPRECATED void set_obsolete_app_id(int index, std::string&& value);
  PROTOBUF_DEPRECATED void set_obsolete_app_id(int index, const char* value);
  PROTOBUF_DEPRECATED void set_obsolete_app_id(int index, const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* add_obsolete_app_id();
  PROTOBUF_DEPRECATED void add_obsolete_app_id(const std::string& value);
  PROTOBUF_DEPRECATED void add_obsolete_app_id(std::string&& value);
  PROTOBUF_DEPRECATED void add_obsolete_app_id(const char* value);
  PROTOBUF_DEPRECATED void add_obsolete_app_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& obsolete_app_id() const;
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_obsolete_app_id();
  private:
  const std::string& _internal_obsolete_app_id(int index) const;
  std::string* _internal_add_obsolete_app_id();
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.OBSOLETE_PinnedAppsProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> obsolete_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class OBSOLETE_ForcedLogoutTimeoutsProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.OBSOLETE_ForcedLogoutTimeoutsProto) */ {
 public:
  inline OBSOLETE_ForcedLogoutTimeoutsProto() : OBSOLETE_ForcedLogoutTimeoutsProto(nullptr) {};
  virtual ~OBSOLETE_ForcedLogoutTimeoutsProto();

  OBSOLETE_ForcedLogoutTimeoutsProto(const OBSOLETE_ForcedLogoutTimeoutsProto& from);
  OBSOLETE_ForcedLogoutTimeoutsProto(OBSOLETE_ForcedLogoutTimeoutsProto&& from) noexcept
    : OBSOLETE_ForcedLogoutTimeoutsProto() {
    *this = ::std::move(from);
  }

  inline OBSOLETE_ForcedLogoutTimeoutsProto& operator=(const OBSOLETE_ForcedLogoutTimeoutsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline OBSOLETE_ForcedLogoutTimeoutsProto& operator=(OBSOLETE_ForcedLogoutTimeoutsProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const OBSOLETE_ForcedLogoutTimeoutsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OBSOLETE_ForcedLogoutTimeoutsProto* internal_default_instance() {
    return reinterpret_cast<const OBSOLETE_ForcedLogoutTimeoutsProto*>(
               &_OBSOLETE_ForcedLogoutTimeoutsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(OBSOLETE_ForcedLogoutTimeoutsProto& a, OBSOLETE_ForcedLogoutTimeoutsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(OBSOLETE_ForcedLogoutTimeoutsProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OBSOLETE_ForcedLogoutTimeoutsProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OBSOLETE_ForcedLogoutTimeoutsProto* New() const final {
    return CreateMaybeMessage<OBSOLETE_ForcedLogoutTimeoutsProto>(nullptr);
  }

  OBSOLETE_ForcedLogoutTimeoutsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OBSOLETE_ForcedLogoutTimeoutsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const OBSOLETE_ForcedLogoutTimeoutsProto& from);
  void MergeFrom(const OBSOLETE_ForcedLogoutTimeoutsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OBSOLETE_ForcedLogoutTimeoutsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.OBSOLETE_ForcedLogoutTimeoutsProto";
  }
  protected:
  explicit OBSOLETE_ForcedLogoutTimeoutsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOBSOLETEIdleLogoutTimeoutFieldNumber = 1,
    kOBSOLETEIdleLogoutWarningDurationFieldNumber = 2,
  };
  // optional int64 OBSOLETE_idle_logout_timeout = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_obsolete_idle_logout_timeout() const;
  private:
  bool _internal_has_obsolete_idle_logout_timeout() const;
  public:
  PROTOBUF_DEPRECATED void clear_obsolete_idle_logout_timeout();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int64 obsolete_idle_logout_timeout() const;
  PROTOBUF_DEPRECATED void set_obsolete_idle_logout_timeout(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_obsolete_idle_logout_timeout() const;
  void _internal_set_obsolete_idle_logout_timeout(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 OBSOLETE_idle_logout_warning_duration = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_obsolete_idle_logout_warning_duration() const;
  private:
  bool _internal_has_obsolete_idle_logout_warning_duration() const;
  public:
  PROTOBUF_DEPRECATED void clear_obsolete_idle_logout_warning_duration();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int64 obsolete_idle_logout_warning_duration() const;
  PROTOBUF_DEPRECATED void set_obsolete_idle_logout_warning_duration(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_obsolete_idle_logout_warning_duration() const;
  void _internal_set_obsolete_idle_logout_warning_duration(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.OBSOLETE_ForcedLogoutTimeoutsProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 obsolete_idle_logout_timeout_;
  ::PROTOBUF_NAMESPACE_ID::int64 obsolete_idle_logout_warning_duration_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class OBSOLETE_ScreenSaverProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.OBSOLETE_ScreenSaverProto) */ {
 public:
  inline OBSOLETE_ScreenSaverProto() : OBSOLETE_ScreenSaverProto(nullptr) {};
  virtual ~OBSOLETE_ScreenSaverProto();

  OBSOLETE_ScreenSaverProto(const OBSOLETE_ScreenSaverProto& from);
  OBSOLETE_ScreenSaverProto(OBSOLETE_ScreenSaverProto&& from) noexcept
    : OBSOLETE_ScreenSaverProto() {
    *this = ::std::move(from);
  }

  inline OBSOLETE_ScreenSaverProto& operator=(const OBSOLETE_ScreenSaverProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline OBSOLETE_ScreenSaverProto& operator=(OBSOLETE_ScreenSaverProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const OBSOLETE_ScreenSaverProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OBSOLETE_ScreenSaverProto* internal_default_instance() {
    return reinterpret_cast<const OBSOLETE_ScreenSaverProto*>(
               &_OBSOLETE_ScreenSaverProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(OBSOLETE_ScreenSaverProto& a, OBSOLETE_ScreenSaverProto& b) {
    a.Swap(&b);
  }
  inline void Swap(OBSOLETE_ScreenSaverProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OBSOLETE_ScreenSaverProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OBSOLETE_ScreenSaverProto* New() const final {
    return CreateMaybeMessage<OBSOLETE_ScreenSaverProto>(nullptr);
  }

  OBSOLETE_ScreenSaverProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OBSOLETE_ScreenSaverProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const OBSOLETE_ScreenSaverProto& from);
  void MergeFrom(const OBSOLETE_ScreenSaverProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OBSOLETE_ScreenSaverProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.OBSOLETE_ScreenSaverProto";
  }
  protected:
  explicit OBSOLETE_ScreenSaverProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOBSOLETEScreenSaverExtensionIdFieldNumber = 1,
    kOBSOLETEScreenSaverTimeoutFieldNumber = 2,
  };
  // optional string OBSOLETE_screen_saver_extension_id = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_obsolete_screen_saver_extension_id() const;
  private:
  bool _internal_has_obsolete_screen_saver_extension_id() const;
  public:
  PROTOBUF_DEPRECATED void clear_obsolete_screen_saver_extension_id();
  PROTOBUF_DEPRECATED const std::string& obsolete_screen_saver_extension_id() const;
  PROTOBUF_DEPRECATED void set_obsolete_screen_saver_extension_id(const std::string& value);
  PROTOBUF_DEPRECATED void set_obsolete_screen_saver_extension_id(std::string&& value);
  PROTOBUF_DEPRECATED void set_obsolete_screen_saver_extension_id(const char* value);
  PROTOBUF_DEPRECATED void set_obsolete_screen_saver_extension_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_obsolete_screen_saver_extension_id();
  PROTOBUF_DEPRECATED std::string* release_obsolete_screen_saver_extension_id();
  PROTOBUF_DEPRECATED void set_allocated_obsolete_screen_saver_extension_id(std::string* obsolete_screen_saver_extension_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_obsolete_screen_saver_extension_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_obsolete_screen_saver_extension_id(
      std::string* obsolete_screen_saver_extension_id);
  private:
  const std::string& _internal_obsolete_screen_saver_extension_id() const;
  void _internal_set_obsolete_screen_saver_extension_id(const std::string& value);
  std::string* _internal_mutable_obsolete_screen_saver_extension_id();
  public:

  // optional int64 OBSOLETE_screen_saver_timeout = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_obsolete_screen_saver_timeout() const;
  private:
  bool _internal_has_obsolete_screen_saver_timeout() const;
  public:
  PROTOBUF_DEPRECATED void clear_obsolete_screen_saver_timeout();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int64 obsolete_screen_saver_timeout() const;
  PROTOBUF_DEPRECATED void set_obsolete_screen_saver_timeout(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_obsolete_screen_saver_timeout() const;
  void _internal_set_obsolete_screen_saver_timeout(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.OBSOLETE_ScreenSaverProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obsolete_screen_saver_extension_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 obsolete_screen_saver_timeout_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class AutoUpdateSettingsProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.AutoUpdateSettingsProto) */ {
 public:
  inline AutoUpdateSettingsProto() : AutoUpdateSettingsProto(nullptr) {};
  virtual ~AutoUpdateSettingsProto();

  AutoUpdateSettingsProto(const AutoUpdateSettingsProto& from);
  AutoUpdateSettingsProto(AutoUpdateSettingsProto&& from) noexcept
    : AutoUpdateSettingsProto() {
    *this = ::std::move(from);
  }

  inline AutoUpdateSettingsProto& operator=(const AutoUpdateSettingsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutoUpdateSettingsProto& operator=(AutoUpdateSettingsProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AutoUpdateSettingsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AutoUpdateSettingsProto* internal_default_instance() {
    return reinterpret_cast<const AutoUpdateSettingsProto*>(
               &_AutoUpdateSettingsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(AutoUpdateSettingsProto& a, AutoUpdateSettingsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AutoUpdateSettingsProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutoUpdateSettingsProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AutoUpdateSettingsProto* New() const final {
    return CreateMaybeMessage<AutoUpdateSettingsProto>(nullptr);
  }

  AutoUpdateSettingsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AutoUpdateSettingsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AutoUpdateSettingsProto& from);
  void MergeFrom(const AutoUpdateSettingsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AutoUpdateSettingsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.AutoUpdateSettingsProto";
  }
  protected:
  explicit AutoUpdateSettingsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef AutoUpdateSettingsProto_ConnectionType ConnectionType;
  static constexpr ConnectionType CONNECTION_TYPE_ETHERNET =
    AutoUpdateSettingsProto_ConnectionType_CONNECTION_TYPE_ETHERNET;
  static constexpr ConnectionType CONNECTION_TYPE_WIFI =
    AutoUpdateSettingsProto_ConnectionType_CONNECTION_TYPE_WIFI;
  static constexpr ConnectionType CONNECTION_TYPE_BLUETOOTH =
    AutoUpdateSettingsProto_ConnectionType_CONNECTION_TYPE_BLUETOOTH;
  static constexpr ConnectionType CONNECTION_TYPE_CELLULAR =
    AutoUpdateSettingsProto_ConnectionType_CONNECTION_TYPE_CELLULAR;
  static inline bool ConnectionType_IsValid(int value) {
    return AutoUpdateSettingsProto_ConnectionType_IsValid(value);
  }
  static constexpr ConnectionType ConnectionType_MIN =
    AutoUpdateSettingsProto_ConnectionType_ConnectionType_MIN;
  static constexpr ConnectionType ConnectionType_MAX =
    AutoUpdateSettingsProto_ConnectionType_ConnectionType_MAX;
  static constexpr int ConnectionType_ARRAYSIZE =
    AutoUpdateSettingsProto_ConnectionType_ConnectionType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ConnectionType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ConnectionType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ConnectionType_Name.");
    return AutoUpdateSettingsProto_ConnectionType_Name(enum_t_value);
  }
  static inline bool ConnectionType_Parse(const std::string& name,
      ConnectionType* value) {
    return AutoUpdateSettingsProto_ConnectionType_Parse(name, value);
  }

  typedef AutoUpdateSettingsProto_RollbackToTargetVersion RollbackToTargetVersion;
  static constexpr RollbackToTargetVersion ROLLBACK_UNSPECIFIED =
    AutoUpdateSettingsProto_RollbackToTargetVersion_ROLLBACK_UNSPECIFIED;
  static constexpr RollbackToTargetVersion ROLLBACK_DISABLED =
    AutoUpdateSettingsProto_RollbackToTargetVersion_ROLLBACK_DISABLED;
  static constexpr RollbackToTargetVersion ROLLBACK_AND_POWERWASH =
    AutoUpdateSettingsProto_RollbackToTargetVersion_ROLLBACK_AND_POWERWASH;
  static constexpr RollbackToTargetVersion ROLLBACK_AND_RESTORE_IF_POSSIBLE =
    AutoUpdateSettingsProto_RollbackToTargetVersion_ROLLBACK_AND_RESTORE_IF_POSSIBLE;
  static inline bool RollbackToTargetVersion_IsValid(int value) {
    return AutoUpdateSettingsProto_RollbackToTargetVersion_IsValid(value);
  }
  static constexpr RollbackToTargetVersion RollbackToTargetVersion_MIN =
    AutoUpdateSettingsProto_RollbackToTargetVersion_RollbackToTargetVersion_MIN;
  static constexpr RollbackToTargetVersion RollbackToTargetVersion_MAX =
    AutoUpdateSettingsProto_RollbackToTargetVersion_RollbackToTargetVersion_MAX;
  static constexpr int RollbackToTargetVersion_ARRAYSIZE =
    AutoUpdateSettingsProto_RollbackToTargetVersion_RollbackToTargetVersion_ARRAYSIZE;
  template<typename T>
  static inline const std::string& RollbackToTargetVersion_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RollbackToTargetVersion>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RollbackToTargetVersion_Name.");
    return AutoUpdateSettingsProto_RollbackToTargetVersion_Name(enum_t_value);
  }
  static inline bool RollbackToTargetVersion_Parse(const std::string& name,
      RollbackToTargetVersion* value) {
    return AutoUpdateSettingsProto_RollbackToTargetVersion_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAllowedConnectionTypesFieldNumber = 5,
    kTargetVersionPrefixFieldNumber = 2,
    kTargetVersionDisplayNameFieldNumber = 3,
    kDisallowedTimeIntervalsFieldNumber = 12,
    kStagingScheduleFieldNumber = 14,
    kDeviceQuickFixBuildTokenFieldNumber = 15,
    kScatterFactorInSecondsFieldNumber = 4,
    kUpdateDisabledFieldNumber = 1,
    kOBSOLETERebootAfterUpdateFieldNumber = 6,
    kHttpDownloadsEnabledFieldNumber = 7,
    kRebootAfterUpdateFieldNumber = 8,
    kP2PEnabledFieldNumber = 9,
    kRollbackAllowedMilestonesFieldNumber = 11,
    kRollbackToTargetVersionFieldNumber = 10,
  };
  // repeated .enterprise_management.AutoUpdateSettingsProto.ConnectionType allowed_connection_types = 5;
  int allowed_connection_types_size() const;
  private:
  int _internal_allowed_connection_types_size() const;
  public:
  void clear_allowed_connection_types();
  private:
  ::enterprise_management::AutoUpdateSettingsProto_ConnectionType _internal_allowed_connection_types(int index) const;
  void _internal_add_allowed_connection_types(::enterprise_management::AutoUpdateSettingsProto_ConnectionType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_allowed_connection_types();
  public:
  ::enterprise_management::AutoUpdateSettingsProto_ConnectionType allowed_connection_types(int index) const;
  void set_allowed_connection_types(int index, ::enterprise_management::AutoUpdateSettingsProto_ConnectionType value);
  void add_allowed_connection_types(::enterprise_management::AutoUpdateSettingsProto_ConnectionType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& allowed_connection_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_allowed_connection_types();

  // optional string target_version_prefix = 2;
  bool has_target_version_prefix() const;
  private:
  bool _internal_has_target_version_prefix() const;
  public:
  void clear_target_version_prefix();
  const std::string& target_version_prefix() const;
  void set_target_version_prefix(const std::string& value);
  void set_target_version_prefix(std::string&& value);
  void set_target_version_prefix(const char* value);
  void set_target_version_prefix(const char* value, size_t size);
  std::string* mutable_target_version_prefix();
  std::string* release_target_version_prefix();
  void set_allocated_target_version_prefix(std::string* target_version_prefix);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_target_version_prefix();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_target_version_prefix(
      std::string* target_version_prefix);
  private:
  const std::string& _internal_target_version_prefix() const;
  void _internal_set_target_version_prefix(const std::string& value);
  std::string* _internal_mutable_target_version_prefix();
  public:

  // optional string target_version_display_name = 3;
  bool has_target_version_display_name() const;
  private:
  bool _internal_has_target_version_display_name() const;
  public:
  void clear_target_version_display_name();
  const std::string& target_version_display_name() const;
  void set_target_version_display_name(const std::string& value);
  void set_target_version_display_name(std::string&& value);
  void set_target_version_display_name(const char* value);
  void set_target_version_display_name(const char* value, size_t size);
  std::string* mutable_target_version_display_name();
  std::string* release_target_version_display_name();
  void set_allocated_target_version_display_name(std::string* target_version_display_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_target_version_display_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_target_version_display_name(
      std::string* target_version_display_name);
  private:
  const std::string& _internal_target_version_display_name() const;
  void _internal_set_target_version_display_name(const std::string& value);
  std::string* _internal_mutable_target_version_display_name();
  public:

  // optional string disallowed_time_intervals = 12;
  bool has_disallowed_time_intervals() const;
  private:
  bool _internal_has_disallowed_time_intervals() const;
  public:
  void clear_disallowed_time_intervals();
  const std::string& disallowed_time_intervals() const;
  void set_disallowed_time_intervals(const std::string& value);
  void set_disallowed_time_intervals(std::string&& value);
  void set_disallowed_time_intervals(const char* value);
  void set_disallowed_time_intervals(const char* value, size_t size);
  std::string* mutable_disallowed_time_intervals();
  std::string* release_disallowed_time_intervals();
  void set_allocated_disallowed_time_intervals(std::string* disallowed_time_intervals);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_disallowed_time_intervals();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_disallowed_time_intervals(
      std::string* disallowed_time_intervals);
  private:
  const std::string& _internal_disallowed_time_intervals() const;
  void _internal_set_disallowed_time_intervals(const std::string& value);
  std::string* _internal_mutable_disallowed_time_intervals();
  public:

  // optional string staging_schedule = 14;
  bool has_staging_schedule() const;
  private:
  bool _internal_has_staging_schedule() const;
  public:
  void clear_staging_schedule();
  const std::string& staging_schedule() const;
  void set_staging_schedule(const std::string& value);
  void set_staging_schedule(std::string&& value);
  void set_staging_schedule(const char* value);
  void set_staging_schedule(const char* value, size_t size);
  std::string* mutable_staging_schedule();
  std::string* release_staging_schedule();
  void set_allocated_staging_schedule(std::string* staging_schedule);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_staging_schedule();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_staging_schedule(
      std::string* staging_schedule);
  private:
  const std::string& _internal_staging_schedule() const;
  void _internal_set_staging_schedule(const std::string& value);
  std::string* _internal_mutable_staging_schedule();
  public:

  // optional string device_quick_fix_build_token = 15;
  bool has_device_quick_fix_build_token() const;
  private:
  bool _internal_has_device_quick_fix_build_token() const;
  public:
  void clear_device_quick_fix_build_token();
  const std::string& device_quick_fix_build_token() const;
  void set_device_quick_fix_build_token(const std::string& value);
  void set_device_quick_fix_build_token(std::string&& value);
  void set_device_quick_fix_build_token(const char* value);
  void set_device_quick_fix_build_token(const char* value, size_t size);
  std::string* mutable_device_quick_fix_build_token();
  std::string* release_device_quick_fix_build_token();
  void set_allocated_device_quick_fix_build_token(std::string* device_quick_fix_build_token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_quick_fix_build_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_quick_fix_build_token(
      std::string* device_quick_fix_build_token);
  private:
  const std::string& _internal_device_quick_fix_build_token() const;
  void _internal_set_device_quick_fix_build_token(const std::string& value);
  std::string* _internal_mutable_device_quick_fix_build_token();
  public:

  // optional int64 scatter_factor_in_seconds = 4;
  bool has_scatter_factor_in_seconds() const;
  private:
  bool _internal_has_scatter_factor_in_seconds() const;
  public:
  void clear_scatter_factor_in_seconds();
  ::PROTOBUF_NAMESPACE_ID::int64 scatter_factor_in_seconds() const;
  void set_scatter_factor_in_seconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_scatter_factor_in_seconds() const;
  void _internal_set_scatter_factor_in_seconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional bool update_disabled = 1;
  bool has_update_disabled() const;
  private:
  bool _internal_has_update_disabled() const;
  public:
  void clear_update_disabled();
  bool update_disabled() const;
  void set_update_disabled(bool value);
  private:
  bool _internal_update_disabled() const;
  void _internal_set_update_disabled(bool value);
  public:

  // optional bool OBSOLETE_reboot_after_update = 6 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_obsolete_reboot_after_update() const;
  private:
  bool _internal_has_obsolete_reboot_after_update() const;
  public:
  PROTOBUF_DEPRECATED void clear_obsolete_reboot_after_update();
  PROTOBUF_DEPRECATED bool obsolete_reboot_after_update() const;
  PROTOBUF_DEPRECATED void set_obsolete_reboot_after_update(bool value);
  private:
  bool _internal_obsolete_reboot_after_update() const;
  void _internal_set_obsolete_reboot_after_update(bool value);
  public:

  // optional bool http_downloads_enabled = 7 [default = false];
  bool has_http_downloads_enabled() const;
  private:
  bool _internal_has_http_downloads_enabled() const;
  public:
  void clear_http_downloads_enabled();
  bool http_downloads_enabled() const;
  void set_http_downloads_enabled(bool value);
  private:
  bool _internal_http_downloads_enabled() const;
  void _internal_set_http_downloads_enabled(bool value);
  public:

  // optional bool reboot_after_update = 8;
  bool has_reboot_after_update() const;
  private:
  bool _internal_has_reboot_after_update() const;
  public:
  void clear_reboot_after_update();
  bool reboot_after_update() const;
  void set_reboot_after_update(bool value);
  private:
  bool _internal_reboot_after_update() const;
  void _internal_set_reboot_after_update(bool value);
  public:

  // optional bool p2p_enabled = 9 [default = false];
  bool has_p2p_enabled() const;
  private:
  bool _internal_has_p2p_enabled() const;
  public:
  void clear_p2p_enabled();
  bool p2p_enabled() const;
  void set_p2p_enabled(bool value);
  private:
  bool _internal_p2p_enabled() const;
  void _internal_set_p2p_enabled(bool value);
  public:

  // optional int32 rollback_allowed_milestones = 11 [default = 0];
  bool has_rollback_allowed_milestones() const;
  private:
  bool _internal_has_rollback_allowed_milestones() const;
  public:
  void clear_rollback_allowed_milestones();
  ::PROTOBUF_NAMESPACE_ID::int32 rollback_allowed_milestones() const;
  void set_rollback_allowed_milestones(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rollback_allowed_milestones() const;
  void _internal_set_rollback_allowed_milestones(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .enterprise_management.AutoUpdateSettingsProto.RollbackToTargetVersion rollback_to_target_version = 10 [default = ROLLBACK_DISABLED];
  bool has_rollback_to_target_version() const;
  private:
  bool _internal_has_rollback_to_target_version() const;
  public:
  void clear_rollback_to_target_version();
  ::enterprise_management::AutoUpdateSettingsProto_RollbackToTargetVersion rollback_to_target_version() const;
  void set_rollback_to_target_version(::enterprise_management::AutoUpdateSettingsProto_RollbackToTargetVersion value);
  private:
  ::enterprise_management::AutoUpdateSettingsProto_RollbackToTargetVersion _internal_rollback_to_target_version() const;
  void _internal_set_rollback_to_target_version(::enterprise_management::AutoUpdateSettingsProto_RollbackToTargetVersion value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.AutoUpdateSettingsProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> allowed_connection_types_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_version_prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_version_display_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr disallowed_time_intervals_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr staging_schedule_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_quick_fix_build_token_;
  ::PROTOBUF_NAMESPACE_ID::int64 scatter_factor_in_seconds_;
  bool update_disabled_;
  bool obsolete_reboot_after_update_;
  bool http_downloads_enabled_;
  bool reboot_after_update_;
  bool p2p_enabled_;
  ::PROTOBUF_NAMESPACE_ID::int32 rollback_allowed_milestones_;
  int rollback_to_target_version_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class OBSOLETE_StartUpUrlsProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.OBSOLETE_StartUpUrlsProto) */ {
 public:
  inline OBSOLETE_StartUpUrlsProto() : OBSOLETE_StartUpUrlsProto(nullptr) {};
  virtual ~OBSOLETE_StartUpUrlsProto();

  OBSOLETE_StartUpUrlsProto(const OBSOLETE_StartUpUrlsProto& from);
  OBSOLETE_StartUpUrlsProto(OBSOLETE_StartUpUrlsProto&& from) noexcept
    : OBSOLETE_StartUpUrlsProto() {
    *this = ::std::move(from);
  }

  inline OBSOLETE_StartUpUrlsProto& operator=(const OBSOLETE_StartUpUrlsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline OBSOLETE_StartUpUrlsProto& operator=(OBSOLETE_StartUpUrlsProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const OBSOLETE_StartUpUrlsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OBSOLETE_StartUpUrlsProto* internal_default_instance() {
    return reinterpret_cast<const OBSOLETE_StartUpUrlsProto*>(
               &_OBSOLETE_StartUpUrlsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(OBSOLETE_StartUpUrlsProto& a, OBSOLETE_StartUpUrlsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(OBSOLETE_StartUpUrlsProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OBSOLETE_StartUpUrlsProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OBSOLETE_StartUpUrlsProto* New() const final {
    return CreateMaybeMessage<OBSOLETE_StartUpUrlsProto>(nullptr);
  }

  OBSOLETE_StartUpUrlsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OBSOLETE_StartUpUrlsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const OBSOLETE_StartUpUrlsProto& from);
  void MergeFrom(const OBSOLETE_StartUpUrlsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OBSOLETE_StartUpUrlsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.OBSOLETE_StartUpUrlsProto";
  }
  protected:
  explicit OBSOLETE_StartUpUrlsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOBSOLETEStartUpUrlsFieldNumber = 1,
  };
  // repeated string OBSOLETE_start_up_urls = 1 [deprecated = true];
  PROTOBUF_DEPRECATED int obsolete_start_up_urls_size() const;
  private:
  int _internal_obsolete_start_up_urls_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_obsolete_start_up_urls();
  PROTOBUF_DEPRECATED const std::string& obsolete_start_up_urls(int index) const;
  PROTOBUF_DEPRECATED std::string* mutable_obsolete_start_up_urls(int index);
  PROTOBUF_DEPRECATED void set_obsolete_start_up_urls(int index, const std::string& value);
  PROTOBUF_DEPRECATED void set_obsolete_start_up_urls(int index, std::string&& value);
  PROTOBUF_DEPRECATED void set_obsolete_start_up_urls(int index, const char* value);
  PROTOBUF_DEPRECATED void set_obsolete_start_up_urls(int index, const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* add_obsolete_start_up_urls();
  PROTOBUF_DEPRECATED void add_obsolete_start_up_urls(const std::string& value);
  PROTOBUF_DEPRECATED void add_obsolete_start_up_urls(std::string&& value);
  PROTOBUF_DEPRECATED void add_obsolete_start_up_urls(const char* value);
  PROTOBUF_DEPRECATED void add_obsolete_start_up_urls(const char* value, size_t size);
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& obsolete_start_up_urls() const;
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_obsolete_start_up_urls();
  private:
  const std::string& _internal_obsolete_start_up_urls(int index) const;
  std::string* _internal_add_obsolete_start_up_urls();
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.OBSOLETE_StartUpUrlsProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> obsolete_start_up_urls_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class SystemTimezoneProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.SystemTimezoneProto) */ {
 public:
  inline SystemTimezoneProto() : SystemTimezoneProto(nullptr) {};
  virtual ~SystemTimezoneProto();

  SystemTimezoneProto(const SystemTimezoneProto& from);
  SystemTimezoneProto(SystemTimezoneProto&& from) noexcept
    : SystemTimezoneProto() {
    *this = ::std::move(from);
  }

  inline SystemTimezoneProto& operator=(const SystemTimezoneProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemTimezoneProto& operator=(SystemTimezoneProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SystemTimezoneProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemTimezoneProto* internal_default_instance() {
    return reinterpret_cast<const SystemTimezoneProto*>(
               &_SystemTimezoneProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SystemTimezoneProto& a, SystemTimezoneProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemTimezoneProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemTimezoneProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemTimezoneProto* New() const final {
    return CreateMaybeMessage<SystemTimezoneProto>(nullptr);
  }

  SystemTimezoneProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemTimezoneProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemTimezoneProto& from);
  void MergeFrom(const SystemTimezoneProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemTimezoneProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.SystemTimezoneProto";
  }
  protected:
  explicit SystemTimezoneProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SystemTimezoneProto_AutomaticTimezoneDetectionType AutomaticTimezoneDetectionType;
  static constexpr AutomaticTimezoneDetectionType USERS_DECIDE =
    SystemTimezoneProto_AutomaticTimezoneDetectionType_USERS_DECIDE;
  static constexpr AutomaticTimezoneDetectionType DISABLED =
    SystemTimezoneProto_AutomaticTimezoneDetectionType_DISABLED;
  static constexpr AutomaticTimezoneDetectionType IP_ONLY =
    SystemTimezoneProto_AutomaticTimezoneDetectionType_IP_ONLY;
  static constexpr AutomaticTimezoneDetectionType SEND_WIFI_ACCESS_POINTS =
    SystemTimezoneProto_AutomaticTimezoneDetectionType_SEND_WIFI_ACCESS_POINTS;
  static constexpr AutomaticTimezoneDetectionType SEND_ALL_LOCATION_INFO =
    SystemTimezoneProto_AutomaticTimezoneDetectionType_SEND_ALL_LOCATION_INFO;
  static inline bool AutomaticTimezoneDetectionType_IsValid(int value) {
    return SystemTimezoneProto_AutomaticTimezoneDetectionType_IsValid(value);
  }
  static constexpr AutomaticTimezoneDetectionType AutomaticTimezoneDetectionType_MIN =
    SystemTimezoneProto_AutomaticTimezoneDetectionType_AutomaticTimezoneDetectionType_MIN;
  static constexpr AutomaticTimezoneDetectionType AutomaticTimezoneDetectionType_MAX =
    SystemTimezoneProto_AutomaticTimezoneDetectionType_AutomaticTimezoneDetectionType_MAX;
  static constexpr int AutomaticTimezoneDetectionType_ARRAYSIZE =
    SystemTimezoneProto_AutomaticTimezoneDetectionType_AutomaticTimezoneDetectionType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& AutomaticTimezoneDetectionType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AutomaticTimezoneDetectionType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AutomaticTimezoneDetectionType_Name.");
    return SystemTimezoneProto_AutomaticTimezoneDetectionType_Name(enum_t_value);
  }
  static inline bool AutomaticTimezoneDetectionType_Parse(const std::string& name,
      AutomaticTimezoneDetectionType* value) {
    return SystemTimezoneProto_AutomaticTimezoneDetectionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTimezoneFieldNumber = 1,
    kTimezoneDetectionTypeFieldNumber = 2,
  };
  // optional string timezone = 1;
  bool has_timezone() const;
  private:
  bool _internal_has_timezone() const;
  public:
  void clear_timezone();
  const std::string& timezone() const;
  void set_timezone(const std::string& value);
  void set_timezone(std::string&& value);
  void set_timezone(const char* value);
  void set_timezone(const char* value, size_t size);
  std::string* mutable_timezone();
  std::string* release_timezone();
  void set_allocated_timezone(std::string* timezone);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_timezone();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_timezone(
      std::string* timezone);
  private:
  const std::string& _internal_timezone() const;
  void _internal_set_timezone(const std::string& value);
  std::string* _internal_mutable_timezone();
  public:

  // optional .enterprise_management.SystemTimezoneProto.AutomaticTimezoneDetectionType timezone_detection_type = 2;
  bool has_timezone_detection_type() const;
  private:
  bool _internal_has_timezone_detection_type() const;
  public:
  void clear_timezone_detection_type();
  ::enterprise_management::SystemTimezoneProto_AutomaticTimezoneDetectionType timezone_detection_type() const;
  void set_timezone_detection_type(::enterprise_management::SystemTimezoneProto_AutomaticTimezoneDetectionType value);
  private:
  ::enterprise_management::SystemTimezoneProto_AutomaticTimezoneDetectionType _internal_timezone_detection_type() const;
  void _internal_set_timezone_detection_type(::enterprise_management::SystemTimezoneProto_AutomaticTimezoneDetectionType value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.SystemTimezoneProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timezone_;
  int timezone_detection_type_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class SystemUse24HourClockProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.SystemUse24HourClockProto) */ {
 public:
  inline SystemUse24HourClockProto() : SystemUse24HourClockProto(nullptr) {};
  virtual ~SystemUse24HourClockProto();

  SystemUse24HourClockProto(const SystemUse24HourClockProto& from);
  SystemUse24HourClockProto(SystemUse24HourClockProto&& from) noexcept
    : SystemUse24HourClockProto() {
    *this = ::std::move(from);
  }

  inline SystemUse24HourClockProto& operator=(const SystemUse24HourClockProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemUse24HourClockProto& operator=(SystemUse24HourClockProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SystemUse24HourClockProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemUse24HourClockProto* internal_default_instance() {
    return reinterpret_cast<const SystemUse24HourClockProto*>(
               &_SystemUse24HourClockProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SystemUse24HourClockProto& a, SystemUse24HourClockProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemUse24HourClockProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemUse24HourClockProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemUse24HourClockProto* New() const final {
    return CreateMaybeMessage<SystemUse24HourClockProto>(nullptr);
  }

  SystemUse24HourClockProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemUse24HourClockProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemUse24HourClockProto& from);
  void MergeFrom(const SystemUse24HourClockProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemUse24HourClockProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.SystemUse24HourClockProto";
  }
  protected:
  explicit SystemUse24HourClockProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUse24HourClockFieldNumber = 1,
  };
  // optional bool use_24hour_clock = 1;
  bool has_use_24hour_clock() const;
  private:
  bool _internal_has_use_24hour_clock() const;
  public:
  void clear_use_24hour_clock();
  bool use_24hour_clock() const;
  void set_use_24hour_clock(bool value);
  private:
  bool _internal_use_24hour_clock() const;
  void _internal_set_use_24hour_clock(bool value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.SystemUse24HourClockProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool use_24hour_clock_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class KioskAppInfoProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.KioskAppInfoProto) */ {
 public:
  inline KioskAppInfoProto() : KioskAppInfoProto(nullptr) {};
  virtual ~KioskAppInfoProto();

  KioskAppInfoProto(const KioskAppInfoProto& from);
  KioskAppInfoProto(KioskAppInfoProto&& from) noexcept
    : KioskAppInfoProto() {
    *this = ::std::move(from);
  }

  inline KioskAppInfoProto& operator=(const KioskAppInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline KioskAppInfoProto& operator=(KioskAppInfoProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const KioskAppInfoProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KioskAppInfoProto* internal_default_instance() {
    return reinterpret_cast<const KioskAppInfoProto*>(
               &_KioskAppInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(KioskAppInfoProto& a, KioskAppInfoProto& b) {
    a.Swap(&b);
  }
  inline void Swap(KioskAppInfoProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KioskAppInfoProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KioskAppInfoProto* New() const final {
    return CreateMaybeMessage<KioskAppInfoProto>(nullptr);
  }

  KioskAppInfoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KioskAppInfoProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const KioskAppInfoProto& from);
  void MergeFrom(const KioskAppInfoProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KioskAppInfoProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.KioskAppInfoProto";
  }
  protected:
  explicit KioskAppInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
    kUpdateUrlFieldNumber = 2,
  };
  // optional string app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  const std::string& app_id() const;
  void set_app_id(const std::string& value);
  void set_app_id(std::string&& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  std::string* mutable_app_id();
  std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_app_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_app_id(
      std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // optional string update_url = 2;
  bool has_update_url() const;
  private:
  bool _internal_has_update_url() const;
  public:
  void clear_update_url();
  const std::string& update_url() const;
  void set_update_url(const std::string& value);
  void set_update_url(std::string&& value);
  void set_update_url(const char* value);
  void set_update_url(const char* value, size_t size);
  std::string* mutable_update_url();
  std::string* release_update_url();
  void set_allocated_update_url(std::string* update_url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_update_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_update_url(
      std::string* update_url);
  private:
  const std::string& _internal_update_url() const;
  void _internal_set_update_url(const std::string& value);
  std::string* _internal_mutable_update_url();
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.KioskAppInfoProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr update_url_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class AndroidKioskAppInfoProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.AndroidKioskAppInfoProto) */ {
 public:
  inline AndroidKioskAppInfoProto() : AndroidKioskAppInfoProto(nullptr) {};
  virtual ~AndroidKioskAppInfoProto();

  AndroidKioskAppInfoProto(const AndroidKioskAppInfoProto& from);
  AndroidKioskAppInfoProto(AndroidKioskAppInfoProto&& from) noexcept
    : AndroidKioskAppInfoProto() {
    *this = ::std::move(from);
  }

  inline AndroidKioskAppInfoProto& operator=(const AndroidKioskAppInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AndroidKioskAppInfoProto& operator=(AndroidKioskAppInfoProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AndroidKioskAppInfoProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AndroidKioskAppInfoProto* internal_default_instance() {
    return reinterpret_cast<const AndroidKioskAppInfoProto*>(
               &_AndroidKioskAppInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(AndroidKioskAppInfoProto& a, AndroidKioskAppInfoProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AndroidKioskAppInfoProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AndroidKioskAppInfoProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AndroidKioskAppInfoProto* New() const final {
    return CreateMaybeMessage<AndroidKioskAppInfoProto>(nullptr);
  }

  AndroidKioskAppInfoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AndroidKioskAppInfoProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AndroidKioskAppInfoProto& from);
  void MergeFrom(const AndroidKioskAppInfoProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AndroidKioskAppInfoProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.AndroidKioskAppInfoProto";
  }
  protected:
  explicit AndroidKioskAppInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageNameFieldNumber = 1,
    kClassNameFieldNumber = 2,
    kActionFieldNumber = 3,
    kDisplayNameFieldNumber = 4,
  };
  // optional string package_name = 1;
  bool has_package_name() const;
  private:
  bool _internal_has_package_name() const;
  public:
  void clear_package_name();
  const std::string& package_name() const;
  void set_package_name(const std::string& value);
  void set_package_name(std::string&& value);
  void set_package_name(const char* value);
  void set_package_name(const char* value, size_t size);
  std::string* mutable_package_name();
  std::string* release_package_name();
  void set_allocated_package_name(std::string* package_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_package_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_package_name(
      std::string* package_name);
  private:
  const std::string& _internal_package_name() const;
  void _internal_set_package_name(const std::string& value);
  std::string* _internal_mutable_package_name();
  public:

  // optional string class_name = 2;
  bool has_class_name() const;
  private:
  bool _internal_has_class_name() const;
  public:
  void clear_class_name();
  const std::string& class_name() const;
  void set_class_name(const std::string& value);
  void set_class_name(std::string&& value);
  void set_class_name(const char* value);
  void set_class_name(const char* value, size_t size);
  std::string* mutable_class_name();
  std::string* release_class_name();
  void set_allocated_class_name(std::string* class_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_class_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_class_name(
      std::string* class_name);
  private:
  const std::string& _internal_class_name() const;
  void _internal_set_class_name(const std::string& value);
  std::string* _internal_mutable_class_name();
  public:

  // optional string action = 3;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_action();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_action(
      std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // optional string display_name = 4;
  bool has_display_name() const;
  private:
  bool _internal_has_display_name() const;
  public:
  void clear_display_name();
  const std::string& display_name() const;
  void set_display_name(const std::string& value);
  void set_display_name(std::string&& value);
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  std::string* mutable_display_name();
  std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_display_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_display_name(
      std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.AndroidKioskAppInfoProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class WebKioskAppInfoProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.WebKioskAppInfoProto) */ {
 public:
  inline WebKioskAppInfoProto() : WebKioskAppInfoProto(nullptr) {};
  virtual ~WebKioskAppInfoProto();

  WebKioskAppInfoProto(const WebKioskAppInfoProto& from);
  WebKioskAppInfoProto(WebKioskAppInfoProto&& from) noexcept
    : WebKioskAppInfoProto() {
    *this = ::std::move(from);
  }

  inline WebKioskAppInfoProto& operator=(const WebKioskAppInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline WebKioskAppInfoProto& operator=(WebKioskAppInfoProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const WebKioskAppInfoProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WebKioskAppInfoProto* internal_default_instance() {
    return reinterpret_cast<const WebKioskAppInfoProto*>(
               &_WebKioskAppInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(WebKioskAppInfoProto& a, WebKioskAppInfoProto& b) {
    a.Swap(&b);
  }
  inline void Swap(WebKioskAppInfoProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WebKioskAppInfoProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WebKioskAppInfoProto* New() const final {
    return CreateMaybeMessage<WebKioskAppInfoProto>(nullptr);
  }

  WebKioskAppInfoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WebKioskAppInfoProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const WebKioskAppInfoProto& from);
  void MergeFrom(const WebKioskAppInfoProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WebKioskAppInfoProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.WebKioskAppInfoProto";
  }
  protected:
  explicit WebKioskAppInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
  };
  // optional string url = 1;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_url(
      std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.WebKioskAppInfoProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class DeviceLocalAccountInfoProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceLocalAccountInfoProto) */ {
 public:
  inline DeviceLocalAccountInfoProto() : DeviceLocalAccountInfoProto(nullptr) {};
  virtual ~DeviceLocalAccountInfoProto();

  DeviceLocalAccountInfoProto(const DeviceLocalAccountInfoProto& from);
  DeviceLocalAccountInfoProto(DeviceLocalAccountInfoProto&& from) noexcept
    : DeviceLocalAccountInfoProto() {
    *this = ::std::move(from);
  }

  inline DeviceLocalAccountInfoProto& operator=(const DeviceLocalAccountInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceLocalAccountInfoProto& operator=(DeviceLocalAccountInfoProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeviceLocalAccountInfoProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceLocalAccountInfoProto* internal_default_instance() {
    return reinterpret_cast<const DeviceLocalAccountInfoProto*>(
               &_DeviceLocalAccountInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(DeviceLocalAccountInfoProto& a, DeviceLocalAccountInfoProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceLocalAccountInfoProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceLocalAccountInfoProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceLocalAccountInfoProto* New() const final {
    return CreateMaybeMessage<DeviceLocalAccountInfoProto>(nullptr);
  }

  DeviceLocalAccountInfoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceLocalAccountInfoProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeviceLocalAccountInfoProto& from);
  void MergeFrom(const DeviceLocalAccountInfoProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceLocalAccountInfoProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.DeviceLocalAccountInfoProto";
  }
  protected:
  explicit DeviceLocalAccountInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DeviceLocalAccountInfoProto_AccountType AccountType;
  static constexpr AccountType ACCOUNT_TYPE_PUBLIC_SESSION =
    DeviceLocalAccountInfoProto_AccountType_ACCOUNT_TYPE_PUBLIC_SESSION;
  static constexpr AccountType ACCOUNT_TYPE_KIOSK_APP =
    DeviceLocalAccountInfoProto_AccountType_ACCOUNT_TYPE_KIOSK_APP;
  static constexpr AccountType ACCOUNT_TYPE_KIOSK_ANDROID_APP =
    DeviceLocalAccountInfoProto_AccountType_ACCOUNT_TYPE_KIOSK_ANDROID_APP;
  static constexpr AccountType ACCOUNT_TYPE_SAML_PUBLIC_SESSION =
    DeviceLocalAccountInfoProto_AccountType_ACCOUNT_TYPE_SAML_PUBLIC_SESSION;
  static constexpr AccountType ACCOUNT_TYPE_WEB_KIOSK_APP =
    DeviceLocalAccountInfoProto_AccountType_ACCOUNT_TYPE_WEB_KIOSK_APP;
  static inline bool AccountType_IsValid(int value) {
    return DeviceLocalAccountInfoProto_AccountType_IsValid(value);
  }
  static constexpr AccountType AccountType_MIN =
    DeviceLocalAccountInfoProto_AccountType_AccountType_MIN;
  static constexpr AccountType AccountType_MAX =
    DeviceLocalAccountInfoProto_AccountType_AccountType_MAX;
  static constexpr int AccountType_ARRAYSIZE =
    DeviceLocalAccountInfoProto_AccountType_AccountType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& AccountType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AccountType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AccountType_Name.");
    return DeviceLocalAccountInfoProto_AccountType_Name(enum_t_value);
  }
  static inline bool AccountType_Parse(const std::string& name,
      AccountType* value) {
    return DeviceLocalAccountInfoProto_AccountType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDeprecatedPublicSessionIdFieldNumber = 1,
    kAccountIdFieldNumber = 2,
    kKioskAppFieldNumber = 4,
    kAndroidKioskAppFieldNumber = 5,
    kWebKioskAppFieldNumber = 6,
    kTypeFieldNumber = 3,
  };
  // optional string deprecated_public_session_id = 1;
  bool has_deprecated_public_session_id() const;
  private:
  bool _internal_has_deprecated_public_session_id() const;
  public:
  void clear_deprecated_public_session_id();
  const std::string& deprecated_public_session_id() const;
  void set_deprecated_public_session_id(const std::string& value);
  void set_deprecated_public_session_id(std::string&& value);
  void set_deprecated_public_session_id(const char* value);
  void set_deprecated_public_session_id(const char* value, size_t size);
  std::string* mutable_deprecated_public_session_id();
  std::string* release_deprecated_public_session_id();
  void set_allocated_deprecated_public_session_id(std::string* deprecated_public_session_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_deprecated_public_session_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_deprecated_public_session_id(
      std::string* deprecated_public_session_id);
  private:
  const std::string& _internal_deprecated_public_session_id() const;
  void _internal_set_deprecated_public_session_id(const std::string& value);
  std::string* _internal_mutable_deprecated_public_session_id();
  public:

  // optional string account_id = 2;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  const std::string& account_id() const;
  void set_account_id(const std::string& value);
  void set_account_id(std::string&& value);
  void set_account_id(const char* value);
  void set_account_id(const char* value, size_t size);
  std::string* mutable_account_id();
  std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_account_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_account_id(
      std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // optional .enterprise_management.KioskAppInfoProto kiosk_app = 4;
  bool has_kiosk_app() const;
  private:
  bool _internal_has_kiosk_app() const;
  public:
  void clear_kiosk_app();
  const ::enterprise_management::KioskAppInfoProto& kiosk_app() const;
  ::enterprise_management::KioskAppInfoProto* release_kiosk_app();
  ::enterprise_management::KioskAppInfoProto* mutable_kiosk_app();
  void set_allocated_kiosk_app(::enterprise_management::KioskAppInfoProto* kiosk_app);
  private:
  const ::enterprise_management::KioskAppInfoProto& _internal_kiosk_app() const;
  ::enterprise_management::KioskAppInfoProto* _internal_mutable_kiosk_app();
  public:
  void unsafe_arena_set_allocated_kiosk_app(
      ::enterprise_management::KioskAppInfoProto* kiosk_app);
  ::enterprise_management::KioskAppInfoProto* unsafe_arena_release_kiosk_app();

  // optional .enterprise_management.AndroidKioskAppInfoProto android_kiosk_app = 5;
  bool has_android_kiosk_app() const;
  private:
  bool _internal_has_android_kiosk_app() const;
  public:
  void clear_android_kiosk_app();
  const ::enterprise_management::AndroidKioskAppInfoProto& android_kiosk_app() const;
  ::enterprise_management::AndroidKioskAppInfoProto* release_android_kiosk_app();
  ::enterprise_management::AndroidKioskAppInfoProto* mutable_android_kiosk_app();
  void set_allocated_android_kiosk_app(::enterprise_management::AndroidKioskAppInfoProto* android_kiosk_app);
  private:
  const ::enterprise_management::AndroidKioskAppInfoProto& _internal_android_kiosk_app() const;
  ::enterprise_management::AndroidKioskAppInfoProto* _internal_mutable_android_kiosk_app();
  public:
  void unsafe_arena_set_allocated_android_kiosk_app(
      ::enterprise_management::AndroidKioskAppInfoProto* android_kiosk_app);
  ::enterprise_management::AndroidKioskAppInfoProto* unsafe_arena_release_android_kiosk_app();

  // optional .enterprise_management.WebKioskAppInfoProto web_kiosk_app = 6;
  bool has_web_kiosk_app() const;
  private:
  bool _internal_has_web_kiosk_app() const;
  public:
  void clear_web_kiosk_app();
  const ::enterprise_management::WebKioskAppInfoProto& web_kiosk_app() const;
  ::enterprise_management::WebKioskAppInfoProto* release_web_kiosk_app();
  ::enterprise_management::WebKioskAppInfoProto* mutable_web_kiosk_app();
  void set_allocated_web_kiosk_app(::enterprise_management::WebKioskAppInfoProto* web_kiosk_app);
  private:
  const ::enterprise_management::WebKioskAppInfoProto& _internal_web_kiosk_app() const;
  ::enterprise_management::WebKioskAppInfoProto* _internal_mutable_web_kiosk_app();
  public:
  void unsafe_arena_set_allocated_web_kiosk_app(
      ::enterprise_management::WebKioskAppInfoProto* web_kiosk_app);
  ::enterprise_management::WebKioskAppInfoProto* unsafe_arena_release_web_kiosk_app();

  // optional .enterprise_management.DeviceLocalAccountInfoProto.AccountType type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::enterprise_management::DeviceLocalAccountInfoProto_AccountType type() const;
  void set_type(::enterprise_management::DeviceLocalAccountInfoProto_AccountType value);
  private:
  ::enterprise_management::DeviceLocalAccountInfoProto_AccountType _internal_type() const;
  void _internal_set_type(::enterprise_management::DeviceLocalAccountInfoProto_AccountType value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.DeviceLocalAccountInfoProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deprecated_public_session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
  ::enterprise_management::KioskAppInfoProto* kiosk_app_;
  ::enterprise_management::AndroidKioskAppInfoProto* android_kiosk_app_;
  ::enterprise_management::WebKioskAppInfoProto* web_kiosk_app_;
  int type_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class DeviceLocalAccountsProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceLocalAccountsProto) */ {
 public:
  inline DeviceLocalAccountsProto() : DeviceLocalAccountsProto(nullptr) {};
  virtual ~DeviceLocalAccountsProto();

  DeviceLocalAccountsProto(const DeviceLocalAccountsProto& from);
  DeviceLocalAccountsProto(DeviceLocalAccountsProto&& from) noexcept
    : DeviceLocalAccountsProto() {
    *this = ::std::move(from);
  }

  inline DeviceLocalAccountsProto& operator=(const DeviceLocalAccountsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceLocalAccountsProto& operator=(DeviceLocalAccountsProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeviceLocalAccountsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceLocalAccountsProto* internal_default_instance() {
    return reinterpret_cast<const DeviceLocalAccountsProto*>(
               &_DeviceLocalAccountsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(DeviceLocalAccountsProto& a, DeviceLocalAccountsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceLocalAccountsProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceLocalAccountsProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceLocalAccountsProto* New() const final {
    return CreateMaybeMessage<DeviceLocalAccountsProto>(nullptr);
  }

  DeviceLocalAccountsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceLocalAccountsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeviceLocalAccountsProto& from);
  void MergeFrom(const DeviceLocalAccountsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceLocalAccountsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.DeviceLocalAccountsProto";
  }
  protected:
  explicit DeviceLocalAccountsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kAutoLoginIdFieldNumber = 2,
    kAutoLoginDelayFieldNumber = 3,
    kEnableAutoLoginBailoutFieldNumber = 4,
    kPromptForNetworkWhenOfflineFieldNumber = 5,
  };
  // repeated .enterprise_management.DeviceLocalAccountInfoProto account = 1;
  int account_size() const;
  private:
  int _internal_account_size() const;
  public:
  void clear_account();
  ::enterprise_management::DeviceLocalAccountInfoProto* mutable_account(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::enterprise_management::DeviceLocalAccountInfoProto >*
      mutable_account();
  private:
  const ::enterprise_management::DeviceLocalAccountInfoProto& _internal_account(int index) const;
  ::enterprise_management::DeviceLocalAccountInfoProto* _internal_add_account();
  public:
  const ::enterprise_management::DeviceLocalAccountInfoProto& account(int index) const;
  ::enterprise_management::DeviceLocalAccountInfoProto* add_account();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::enterprise_management::DeviceLocalAccountInfoProto >&
      account() const;

  // optional string auto_login_id = 2;
  bool has_auto_login_id() const;
  private:
  bool _internal_has_auto_login_id() const;
  public:
  void clear_auto_login_id();
  const std::string& auto_login_id() const;
  void set_auto_login_id(const std::string& value);
  void set_auto_login_id(std::string&& value);
  void set_auto_login_id(const char* value);
  void set_auto_login_id(const char* value, size_t size);
  std::string* mutable_auto_login_id();
  std::string* release_auto_login_id();
  void set_allocated_auto_login_id(std::string* auto_login_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_auto_login_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_auto_login_id(
      std::string* auto_login_id);
  private:
  const std::string& _internal_auto_login_id() const;
  void _internal_set_auto_login_id(const std::string& value);
  std::string* _internal_mutable_auto_login_id();
  public:

  // optional int64 auto_login_delay = 3;
  bool has_auto_login_delay() const;
  private:
  bool _internal_has_auto_login_delay() const;
  public:
  void clear_auto_login_delay();
  ::PROTOBUF_NAMESPACE_ID::int64 auto_login_delay() const;
  void set_auto_login_delay(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_auto_login_delay() const;
  void _internal_set_auto_login_delay(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional bool enable_auto_login_bailout = 4 [default = true];
  bool has_enable_auto_login_bailout() const;
  private:
  bool _internal_has_enable_auto_login_bailout() const;
  public:
  void clear_enable_auto_login_bailout();
  bool enable_auto_login_bailout() const;
  void set_enable_auto_login_bailout(bool value);
  private:
  bool _internal_enable_auto_login_bailout() const;
  void _internal_set_enable_auto_login_bailout(bool value);
  public:

  // optional bool prompt_for_network_when_offline = 5 [default = true];
  bool has_prompt_for_network_when_offline() const;
  private:
  bool _internal_has_prompt_for_network_when_offline() const;
  public:
  void clear_prompt_for_network_when_offline();
  bool prompt_for_network_when_offline() const;
  void set_prompt_for_network_when_offline(bool value);
  private:
  bool _internal_prompt_for_network_when_offline() const;
  void _internal_set_prompt_for_network_when_offline(bool value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.DeviceLocalAccountsProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::enterprise_management::DeviceLocalAccountInfoProto > account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auto_login_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 auto_login_delay_;
  bool enable_auto_login_bailout_;
  bool prompt_for_network_when_offline_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class AllowRedeemChromeOsRegistrationOffersProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.AllowRedeemChromeOsRegistrationOffersProto) */ {
 public:
  inline AllowRedeemChromeOsRegistrationOffersProto() : AllowRedeemChromeOsRegistrationOffersProto(nullptr) {};
  virtual ~AllowRedeemChromeOsRegistrationOffersProto();

  AllowRedeemChromeOsRegistrationOffersProto(const AllowRedeemChromeOsRegistrationOffersProto& from);
  AllowRedeemChromeOsRegistrationOffersProto(AllowRedeemChromeOsRegistrationOffersProto&& from) noexcept
    : AllowRedeemChromeOsRegistrationOffersProto() {
    *this = ::std::move(from);
  }

  inline AllowRedeemChromeOsRegistrationOffersProto& operator=(const AllowRedeemChromeOsRegistrationOffersProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllowRedeemChromeOsRegistrationOffersProto& operator=(AllowRedeemChromeOsRegistrationOffersProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AllowRedeemChromeOsRegistrationOffersProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllowRedeemChromeOsRegistrationOffersProto* internal_default_instance() {
    return reinterpret_cast<const AllowRedeemChromeOsRegistrationOffersProto*>(
               &_AllowRedeemChromeOsRegistrationOffersProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(AllowRedeemChromeOsRegistrationOffersProto& a, AllowRedeemChromeOsRegistrationOffersProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AllowRedeemChromeOsRegistrationOffersProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllowRedeemChromeOsRegistrationOffersProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AllowRedeemChromeOsRegistrationOffersProto* New() const final {
    return CreateMaybeMessage<AllowRedeemChromeOsRegistrationOffersProto>(nullptr);
  }

  AllowRedeemChromeOsRegistrationOffersProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AllowRedeemChromeOsRegistrationOffersProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AllowRedeemChromeOsRegistrationOffersProto& from);
  void MergeFrom(const AllowRedeemChromeOsRegistrationOffersProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AllowRedeemChromeOsRegistrationOffersProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.AllowRedeemChromeOsRegistrationOffersProto";
  }
  protected:
  explicit AllowRedeemChromeOsRegistrationOffersProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllowRedeemOffersFieldNumber = 1,
  };
  // optional bool allow_redeem_offers = 1 [default = true];
  bool has_allow_redeem_offers() const;
  private:
  bool _internal_has_allow_redeem_offers() const;
  public:
  void clear_allow_redeem_offers();
  bool allow_redeem_offers() const;
  void set_allow_redeem_offers(bool value);
  private:
  bool _internal_allow_redeem_offers() const;
  void _internal_set_allow_redeem_offers(bool value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.AllowRedeemChromeOsRegistrationOffersProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool allow_redeem_offers_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class StartUpFlagsProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.StartUpFlagsProto) */ {
 public:
  inline StartUpFlagsProto() : StartUpFlagsProto(nullptr) {};
  virtual ~StartUpFlagsProto();

  StartUpFlagsProto(const StartUpFlagsProto& from);
  StartUpFlagsProto(StartUpFlagsProto&& from) noexcept
    : StartUpFlagsProto() {
    *this = ::std::move(from);
  }

  inline StartUpFlagsProto& operator=(const StartUpFlagsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartUpFlagsProto& operator=(StartUpFlagsProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const StartUpFlagsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartUpFlagsProto* internal_default_instance() {
    return reinterpret_cast<const StartUpFlagsProto*>(
               &_StartUpFlagsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(StartUpFlagsProto& a, StartUpFlagsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(StartUpFlagsProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartUpFlagsProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartUpFlagsProto* New() const final {
    return CreateMaybeMessage<StartUpFlagsProto>(nullptr);
  }

  StartUpFlagsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartUpFlagsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const StartUpFlagsProto& from);
  void MergeFrom(const StartUpFlagsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StartUpFlagsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.StartUpFlagsProto";
  }
  protected:
  explicit StartUpFlagsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 1,
  };
  // repeated string flags = 1;
  int flags_size() const;
  private:
  int _internal_flags_size() const;
  public:
  void clear_flags();
  const std::string& flags(int index) const;
  std::string* mutable_flags(int index);
  void set_flags(int index, const std::string& value);
  void set_flags(int index, std::string&& value);
  void set_flags(int index, const char* value);
  void set_flags(int index, const char* value, size_t size);
  std::string* add_flags();
  void add_flags(const std::string& value);
  void add_flags(std::string&& value);
  void add_flags(const char* value);
  void add_flags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& flags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_flags();
  private:
  const std::string& _internal_flags(int index) const;
  std::string* _internal_add_flags();
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.StartUpFlagsProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class UptimeLimitProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.UptimeLimitProto) */ {
 public:
  inline UptimeLimitProto() : UptimeLimitProto(nullptr) {};
  virtual ~UptimeLimitProto();

  UptimeLimitProto(const UptimeLimitProto& from);
  UptimeLimitProto(UptimeLimitProto&& from) noexcept
    : UptimeLimitProto() {
    *this = ::std::move(from);
  }

  inline UptimeLimitProto& operator=(const UptimeLimitProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline UptimeLimitProto& operator=(UptimeLimitProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const UptimeLimitProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UptimeLimitProto* internal_default_instance() {
    return reinterpret_cast<const UptimeLimitProto*>(
               &_UptimeLimitProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(UptimeLimitProto& a, UptimeLimitProto& b) {
    a.Swap(&b);
  }
  inline void Swap(UptimeLimitProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UptimeLimitProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UptimeLimitProto* New() const final {
    return CreateMaybeMessage<UptimeLimitProto>(nullptr);
  }

  UptimeLimitProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UptimeLimitProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UptimeLimitProto& from);
  void MergeFrom(const UptimeLimitProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UptimeLimitProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.UptimeLimitProto";
  }
  protected:
  explicit UptimeLimitProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOBSOLETEUptimeLimitFieldNumber = 1,
    kUptimeLimitFieldNumber = 2,
  };
  // optional int64 OBSOLETE_uptime_limit = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_obsolete_uptime_limit() const;
  private:
  bool _internal_has_obsolete_uptime_limit() const;
  public:
  PROTOBUF_DEPRECATED void clear_obsolete_uptime_limit();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int64 obsolete_uptime_limit() const;
  PROTOBUF_DEPRECATED void set_obsolete_uptime_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_obsolete_uptime_limit() const;
  void _internal_set_obsolete_uptime_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 uptime_limit = 2;
  bool has_uptime_limit() const;
  private:
  bool _internal_has_uptime_limit() const;
  public:
  void clear_uptime_limit();
  ::PROTOBUF_NAMESPACE_ID::int64 uptime_limit() const;
  void set_uptime_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_uptime_limit() const;
  void _internal_set_uptime_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.UptimeLimitProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 obsolete_uptime_limit_;
  ::PROTOBUF_NAMESPACE_ID::int64 uptime_limit_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class VariationsParameterProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.VariationsParameterProto) */ {
 public:
  inline VariationsParameterProto() : VariationsParameterProto(nullptr) {};
  virtual ~VariationsParameterProto();

  VariationsParameterProto(const VariationsParameterProto& from);
  VariationsParameterProto(VariationsParameterProto&& from) noexcept
    : VariationsParameterProto() {
    *this = ::std::move(from);
  }

  inline VariationsParameterProto& operator=(const VariationsParameterProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline VariationsParameterProto& operator=(VariationsParameterProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const VariationsParameterProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VariationsParameterProto* internal_default_instance() {
    return reinterpret_cast<const VariationsParameterProto*>(
               &_VariationsParameterProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(VariationsParameterProto& a, VariationsParameterProto& b) {
    a.Swap(&b);
  }
  inline void Swap(VariationsParameterProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VariationsParameterProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VariationsParameterProto* New() const final {
    return CreateMaybeMessage<VariationsParameterProto>(nullptr);
  }

  VariationsParameterProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VariationsParameterProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const VariationsParameterProto& from);
  void MergeFrom(const VariationsParameterProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VariationsParameterProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.VariationsParameterProto";
  }
  protected:
  explicit VariationsParameterProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParameterFieldNumber = 1,
  };
  // optional string parameter = 1;
  bool has_parameter() const;
  private:
  bool _internal_has_parameter() const;
  public:
  void clear_parameter();
  const std::string& parameter() const;
  void set_parameter(const std::string& value);
  void set_parameter(std::string&& value);
  void set_parameter(const char* value);
  void set_parameter(const char* value, size_t size);
  std::string* mutable_parameter();
  std::string* release_parameter();
  void set_allocated_parameter(std::string* parameter);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_parameter();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_parameter(
      std::string* parameter);
  private:
  const std::string& _internal_parameter() const;
  void _internal_set_parameter(const std::string& value);
  std::string* _internal_mutable_parameter();
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.VariationsParameterProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parameter_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class AttestationSettingsProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.AttestationSettingsProto) */ {
 public:
  inline AttestationSettingsProto() : AttestationSettingsProto(nullptr) {};
  virtual ~AttestationSettingsProto();

  AttestationSettingsProto(const AttestationSettingsProto& from);
  AttestationSettingsProto(AttestationSettingsProto&& from) noexcept
    : AttestationSettingsProto() {
    *this = ::std::move(from);
  }

  inline AttestationSettingsProto& operator=(const AttestationSettingsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttestationSettingsProto& operator=(AttestationSettingsProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AttestationSettingsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttestationSettingsProto* internal_default_instance() {
    return reinterpret_cast<const AttestationSettingsProto*>(
               &_AttestationSettingsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(AttestationSettingsProto& a, AttestationSettingsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AttestationSettingsProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttestationSettingsProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AttestationSettingsProto* New() const final {
    return CreateMaybeMessage<AttestationSettingsProto>(nullptr);
  }

  AttestationSettingsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AttestationSettingsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AttestationSettingsProto& from);
  void MergeFrom(const AttestationSettingsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AttestationSettingsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.AttestationSettingsProto";
  }
  protected:
  explicit AttestationSettingsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttestationEnabledFieldNumber = 1,
    kContentProtectionEnabledFieldNumber = 2,
  };
  // optional bool attestation_enabled = 1 [default = false];
  bool has_attestation_enabled() const;
  private:
  bool _internal_has_attestation_enabled() const;
  public:
  void clear_attestation_enabled();
  bool attestation_enabled() const;
  void set_attestation_enabled(bool value);
  private:
  bool _internal_attestation_enabled() const;
  void _internal_set_attestation_enabled(bool value);
  public:

  // optional bool content_protection_enabled = 2 [default = true];
  bool has_content_protection_enabled() const;
  private:
  bool _internal_has_content_protection_enabled() const;
  public:
  void clear_content_protection_enabled();
  bool content_protection_enabled() const;
  void set_content_protection_enabled(bool value);
  private:
  bool _internal_content_protection_enabled() const;
  void _internal_set_content_protection_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.AttestationSettingsProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool attestation_enabled_;
  bool content_protection_enabled_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class AccessibilitySettingsProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.AccessibilitySettingsProto) */ {
 public:
  inline AccessibilitySettingsProto() : AccessibilitySettingsProto(nullptr) {};
  virtual ~AccessibilitySettingsProto();

  AccessibilitySettingsProto(const AccessibilitySettingsProto& from);
  AccessibilitySettingsProto(AccessibilitySettingsProto&& from) noexcept
    : AccessibilitySettingsProto() {
    *this = ::std::move(from);
  }

  inline AccessibilitySettingsProto& operator=(const AccessibilitySettingsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccessibilitySettingsProto& operator=(AccessibilitySettingsProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AccessibilitySettingsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccessibilitySettingsProto* internal_default_instance() {
    return reinterpret_cast<const AccessibilitySettingsProto*>(
               &_AccessibilitySettingsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(AccessibilitySettingsProto& a, AccessibilitySettingsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AccessibilitySettingsProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccessibilitySettingsProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccessibilitySettingsProto* New() const final {
    return CreateMaybeMessage<AccessibilitySettingsProto>(nullptr);
  }

  AccessibilitySettingsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccessibilitySettingsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AccessibilitySettingsProto& from);
  void MergeFrom(const AccessibilitySettingsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AccessibilitySettingsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.AccessibilitySettingsProto";
  }
  protected:
  explicit AccessibilitySettingsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef AccessibilitySettingsProto_ScreenMagnifierType ScreenMagnifierType;
  static constexpr ScreenMagnifierType SCREEN_MAGNIFIER_TYPE_NONE =
    AccessibilitySettingsProto_ScreenMagnifierType_SCREEN_MAGNIFIER_TYPE_NONE;
  static constexpr ScreenMagnifierType SCREEN_MAGNIFIER_TYPE_FULL =
    AccessibilitySettingsProto_ScreenMagnifierType_SCREEN_MAGNIFIER_TYPE_FULL;
  static inline bool ScreenMagnifierType_IsValid(int value) {
    return AccessibilitySettingsProto_ScreenMagnifierType_IsValid(value);
  }
  static constexpr ScreenMagnifierType ScreenMagnifierType_MIN =
    AccessibilitySettingsProto_ScreenMagnifierType_ScreenMagnifierType_MIN;
  static constexpr ScreenMagnifierType ScreenMagnifierType_MAX =
    AccessibilitySettingsProto_ScreenMagnifierType_ScreenMagnifierType_MAX;
  static constexpr int ScreenMagnifierType_ARRAYSIZE =
    AccessibilitySettingsProto_ScreenMagnifierType_ScreenMagnifierType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ScreenMagnifierType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ScreenMagnifierType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ScreenMagnifierType_Name.");
    return AccessibilitySettingsProto_ScreenMagnifierType_Name(enum_t_value);
  }
  static inline bool ScreenMagnifierType_Parse(const std::string& name,
      ScreenMagnifierType* value) {
    return AccessibilitySettingsProto_ScreenMagnifierType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLoginScreenLargeCursorEnabledOptionsFieldNumber = 7,
    kLoginScreenSpokenFeedbackEnabledOptionsFieldNumber = 9,
    kLoginScreenHighContrastEnabledOptionsFieldNumber = 11,
    kLoginScreenVirtualKeyboardEnabledOptionsFieldNumber = 13,
    kLoginScreenDictationEnabledOptionsFieldNumber = 15,
    kLoginScreenSelectToSpeakEnabledOptionsFieldNumber = 17,
    kLoginScreenCursorHighlightEnabledOptionsFieldNumber = 19,
    kLoginScreenCaretHighlightEnabledOptionsFieldNumber = 21,
    kLoginScreenMonoAudioEnabledOptionsFieldNumber = 23,
    kLoginScreenAutoclickEnabledOptionsFieldNumber = 25,
    kLoginScreenStickyKeysEnabledOptionsFieldNumber = 27,
    kLoginScreenKeyboardFocusHighlightEnabledOptionsFieldNumber = 29,
    kLoginScreenScreenMagnifierTypeOptionsFieldNumber = 31,
    kLoginScreenShowOptionsInSystemTrayMenuEnabledOptionsFieldNumber = 33,
    kLoginScreenShortcutsEnabledOptionsFieldNumber = 35,
    kLoginScreenDefaultLargeCursorEnabledFieldNumber = 1,
    kLoginScreenDefaultSpokenFeedbackEnabledFieldNumber = 2,
    kLoginScreenDefaultHighContrastEnabledFieldNumber = 3,
    kLoginScreenDefaultVirtualKeyboardEnabledFieldNumber = 5,
    kLoginScreenDefaultScreenMagnifierTypeFieldNumber = 4,
    kLoginScreenLargeCursorEnabledFieldNumber = 6,
    kLoginScreenSpokenFeedbackEnabledFieldNumber = 8,
    kLoginScreenHighContrastEnabledFieldNumber = 10,
    kLoginScreenVirtualKeyboardEnabledFieldNumber = 12,
    kLoginScreenDictationEnabledFieldNumber = 14,
    kLoginScreenSelectToSpeakEnabledFieldNumber = 16,
    kLoginScreenCursorHighlightEnabledFieldNumber = 18,
    kLoginScreenCaretHighlightEnabledFieldNumber = 20,
    kLoginScreenMonoAudioEnabledFieldNumber = 22,
    kLoginScreenAutoclickEnabledFieldNumber = 24,
    kLoginScreenStickyKeysEnabledFieldNumber = 26,
    kLoginScreenKeyboardFocusHighlightEnabledFieldNumber = 28,
    kLoginScreenShowOptionsInSystemTrayMenuEnabledFieldNumber = 32,
    kLoginScreenShortcutsEnabledFieldNumber = 34,
    kLoginScreenScreenMagnifierTypeFieldNumber = 30,
  };
  // optional .enterprise_management.PolicyOptions login_screen_large_cursor_enabled_options = 7;
  bool has_login_screen_large_cursor_enabled_options() const;
  private:
  bool _internal_has_login_screen_large_cursor_enabled_options() const;
  public:
  void clear_login_screen_large_cursor_enabled_options();
  const ::enterprise_management::PolicyOptions& login_screen_large_cursor_enabled_options() const;
  ::enterprise_management::PolicyOptions* release_login_screen_large_cursor_enabled_options();
  ::enterprise_management::PolicyOptions* mutable_login_screen_large_cursor_enabled_options();
  void set_allocated_login_screen_large_cursor_enabled_options(::enterprise_management::PolicyOptions* login_screen_large_cursor_enabled_options);
  private:
  const ::enterprise_management::PolicyOptions& _internal_login_screen_large_cursor_enabled_options() const;
  ::enterprise_management::PolicyOptions* _internal_mutable_login_screen_large_cursor_enabled_options();
  public:
  void unsafe_arena_set_allocated_login_screen_large_cursor_enabled_options(
      ::enterprise_management::PolicyOptions* login_screen_large_cursor_enabled_options);
  ::enterprise_management::PolicyOptions* unsafe_arena_release_login_screen_large_cursor_enabled_options();

  // optional .enterprise_management.PolicyOptions login_screen_spoken_feedback_enabled_options = 9;
  bool has_login_screen_spoken_feedback_enabled_options() const;
  private:
  bool _internal_has_login_screen_spoken_feedback_enabled_options() const;
  public:
  void clear_login_screen_spoken_feedback_enabled_options();
  const ::enterprise_management::PolicyOptions& login_screen_spoken_feedback_enabled_options() const;
  ::enterprise_management::PolicyOptions* release_login_screen_spoken_feedback_enabled_options();
  ::enterprise_management::PolicyOptions* mutable_login_screen_spoken_feedback_enabled_options();
  void set_allocated_login_screen_spoken_feedback_enabled_options(::enterprise_management::PolicyOptions* login_screen_spoken_feedback_enabled_options);
  private:
  const ::enterprise_management::PolicyOptions& _internal_login_screen_spoken_feedback_enabled_options() const;
  ::enterprise_management::PolicyOptions* _internal_mutable_login_screen_spoken_feedback_enabled_options();
  public:
  void unsafe_arena_set_allocated_login_screen_spoken_feedback_enabled_options(
      ::enterprise_management::PolicyOptions* login_screen_spoken_feedback_enabled_options);
  ::enterprise_management::PolicyOptions* unsafe_arena_release_login_screen_spoken_feedback_enabled_options();

  // optional .enterprise_management.PolicyOptions login_screen_high_contrast_enabled_options = 11;
  bool has_login_screen_high_contrast_enabled_options() const;
  private:
  bool _internal_has_login_screen_high_contrast_enabled_options() const;
  public:
  void clear_login_screen_high_contrast_enabled_options();
  const ::enterprise_management::PolicyOptions& login_screen_high_contrast_enabled_options() const;
  ::enterprise_management::PolicyOptions* release_login_screen_high_contrast_enabled_options();
  ::enterprise_management::PolicyOptions* mutable_login_screen_high_contrast_enabled_options();
  void set_allocated_login_screen_high_contrast_enabled_options(::enterprise_management::PolicyOptions* login_screen_high_contrast_enabled_options);
  private:
  const ::enterprise_management::PolicyOptions& _internal_login_screen_high_contrast_enabled_options() const;
  ::enterprise_management::PolicyOptions* _internal_mutable_login_screen_high_contrast_enabled_options();
  public:
  void unsafe_arena_set_allocated_login_screen_high_contrast_enabled_options(
      ::enterprise_management::PolicyOptions* login_screen_high_contrast_enabled_options);
  ::enterprise_management::PolicyOptions* unsafe_arena_release_login_screen_high_contrast_enabled_options();

  // optional .enterprise_management.PolicyOptions login_screen_virtual_keyboard_enabled_options = 13;
  bool has_login_screen_virtual_keyboard_enabled_options() const;
  private:
  bool _internal_has_login_screen_virtual_keyboard_enabled_options() const;
  public:
  void clear_login_screen_virtual_keyboard_enabled_options();
  const ::enterprise_management::PolicyOptions& login_screen_virtual_keyboard_enabled_options() const;
  ::enterprise_management::PolicyOptions* release_login_screen_virtual_keyboard_enabled_options();
  ::enterprise_management::PolicyOptions* mutable_login_screen_virtual_keyboard_enabled_options();
  void set_allocated_login_screen_virtual_keyboard_enabled_options(::enterprise_management::PolicyOptions* login_screen_virtual_keyboard_enabled_options);
  private:
  const ::enterprise_management::PolicyOptions& _internal_login_screen_virtual_keyboard_enabled_options() const;
  ::enterprise_management::PolicyOptions* _internal_mutable_login_screen_virtual_keyboard_enabled_options();
  public:
  void unsafe_arena_set_allocated_login_screen_virtual_keyboard_enabled_options(
      ::enterprise_management::PolicyOptions* login_screen_virtual_keyboard_enabled_options);
  ::enterprise_management::PolicyOptions* unsafe_arena_release_login_screen_virtual_keyboard_enabled_options();

  // optional .enterprise_management.PolicyOptions login_screen_dictation_enabled_options = 15;
  bool has_login_screen_dictation_enabled_options() const;
  private:
  bool _internal_has_login_screen_dictation_enabled_options() const;
  public:
  void clear_login_screen_dictation_enabled_options();
  const ::enterprise_management::PolicyOptions& login_screen_dictation_enabled_options() const;
  ::enterprise_management::PolicyOptions* release_login_screen_dictation_enabled_options();
  ::enterprise_management::PolicyOptions* mutable_login_screen_dictation_enabled_options();
  void set_allocated_login_screen_dictation_enabled_options(::enterprise_management::PolicyOptions* login_screen_dictation_enabled_options);
  private:
  const ::enterprise_management::PolicyOptions& _internal_login_screen_dictation_enabled_options() const;
  ::enterprise_management::PolicyOptions* _internal_mutable_login_screen_dictation_enabled_options();
  public:
  void unsafe_arena_set_allocated_login_screen_dictation_enabled_options(
      ::enterprise_management::PolicyOptions* login_screen_dictation_enabled_options);
  ::enterprise_management::PolicyOptions* unsafe_arena_release_login_screen_dictation_enabled_options();

  // optional .enterprise_management.PolicyOptions login_screen_select_to_speak_enabled_options = 17;
  bool has_login_screen_select_to_speak_enabled_options() const;
  private:
  bool _internal_has_login_screen_select_to_speak_enabled_options() const;
  public:
  void clear_login_screen_select_to_speak_enabled_options();
  const ::enterprise_management::PolicyOptions& login_screen_select_to_speak_enabled_options() const;
  ::enterprise_management::PolicyOptions* release_login_screen_select_to_speak_enabled_options();
  ::enterprise_management::PolicyOptions* mutable_login_screen_select_to_speak_enabled_options();
  void set_allocated_login_screen_select_to_speak_enabled_options(::enterprise_management::PolicyOptions* login_screen_select_to_speak_enabled_options);
  private:
  const ::enterprise_management::PolicyOptions& _internal_login_screen_select_to_speak_enabled_options() const;
  ::enterprise_management::PolicyOptions* _internal_mutable_login_screen_select_to_speak_enabled_options();
  public:
  void unsafe_arena_set_allocated_login_screen_select_to_speak_enabled_options(
      ::enterprise_management::PolicyOptions* login_screen_select_to_speak_enabled_options);
  ::enterprise_management::PolicyOptions* unsafe_arena_release_login_screen_select_to_speak_enabled_options();

  // optional .enterprise_management.PolicyOptions login_screen_cursor_highlight_enabled_options = 19;
  bool has_login_screen_cursor_highlight_enabled_options() const;
  private:
  bool _internal_has_login_screen_cursor_highlight_enabled_options() const;
  public:
  void clear_login_screen_cursor_highlight_enabled_options();
  const ::enterprise_management::PolicyOptions& login_screen_cursor_highlight_enabled_options() const;
  ::enterprise_management::PolicyOptions* release_login_screen_cursor_highlight_enabled_options();
  ::enterprise_management::PolicyOptions* mutable_login_screen_cursor_highlight_enabled_options();
  void set_allocated_login_screen_cursor_highlight_enabled_options(::enterprise_management::PolicyOptions* login_screen_cursor_highlight_enabled_options);
  private:
  const ::enterprise_management::PolicyOptions& _internal_login_screen_cursor_highlight_enabled_options() const;
  ::enterprise_management::PolicyOptions* _internal_mutable_login_screen_cursor_highlight_enabled_options();
  public:
  void unsafe_arena_set_allocated_login_screen_cursor_highlight_enabled_options(
      ::enterprise_management::PolicyOptions* login_screen_cursor_highlight_enabled_options);
  ::enterprise_management::PolicyOptions* unsafe_arena_release_login_screen_cursor_highlight_enabled_options();

  // optional .enterprise_management.PolicyOptions login_screen_caret_highlight_enabled_options = 21;
  bool has_login_screen_caret_highlight_enabled_options() const;
  private:
  bool _internal_has_login_screen_caret_highlight_enabled_options() const;
  public:
  void clear_login_screen_caret_highlight_enabled_options();
  const ::enterprise_management::PolicyOptions& login_screen_caret_highlight_enabled_options() const;
  ::enterprise_management::PolicyOptions* release_login_screen_caret_highlight_enabled_options();
  ::enterprise_management::PolicyOptions* mutable_login_screen_caret_highlight_enabled_options();
  void set_allocated_login_screen_caret_highlight_enabled_options(::enterprise_management::PolicyOptions* login_screen_caret_highlight_enabled_options);
  private:
  const ::enterprise_management::PolicyOptions& _internal_login_screen_caret_highlight_enabled_options() const;
  ::enterprise_management::PolicyOptions* _internal_mutable_login_screen_caret_highlight_enabled_options();
  public:
  void unsafe_arena_set_allocated_login_screen_caret_highlight_enabled_options(
      ::enterprise_management::PolicyOptions* login_screen_caret_highlight_enabled_options);
  ::enterprise_management::PolicyOptions* unsafe_arena_release_login_screen_caret_highlight_enabled_options();

  // optional .enterprise_management.PolicyOptions login_screen_mono_audio_enabled_options = 23;
  bool has_login_screen_mono_audio_enabled_options() const;
  private:
  bool _internal_has_login_screen_mono_audio_enabled_options() const;
  public:
  void clear_login_screen_mono_audio_enabled_options();
  const ::enterprise_management::PolicyOptions& login_screen_mono_audio_enabled_options() const;
  ::enterprise_management::PolicyOptions* release_login_screen_mono_audio_enabled_options();
  ::enterprise_management::PolicyOptions* mutable_login_screen_mono_audio_enabled_options();
  void set_allocated_login_screen_mono_audio_enabled_options(::enterprise_management::PolicyOptions* login_screen_mono_audio_enabled_options);
  private:
  const ::enterprise_management::PolicyOptions& _internal_login_screen_mono_audio_enabled_options() const;
  ::enterprise_management::PolicyOptions* _internal_mutable_login_screen_mono_audio_enabled_options();
  public:
  void unsafe_arena_set_allocated_login_screen_mono_audio_enabled_options(
      ::enterprise_management::PolicyOptions* login_screen_mono_audio_enabled_options);
  ::enterprise_management::PolicyOptions* unsafe_arena_release_login_screen_mono_audio_enabled_options();

  // optional .enterprise_management.PolicyOptions login_screen_autoclick_enabled_options = 25;
  bool has_login_screen_autoclick_enabled_options() const;
  private:
  bool _internal_has_login_screen_autoclick_enabled_options() const;
  public:
  void clear_login_screen_autoclick_enabled_options();
  const ::enterprise_management::PolicyOptions& login_screen_autoclick_enabled_options() const;
  ::enterprise_management::PolicyOptions* release_login_screen_autoclick_enabled_options();
  ::enterprise_management::PolicyOptions* mutable_login_screen_autoclick_enabled_options();
  void set_allocated_login_screen_autoclick_enabled_options(::enterprise_management::PolicyOptions* login_screen_autoclick_enabled_options);
  private:
  const ::enterprise_management::PolicyOptions& _internal_login_screen_autoclick_enabled_options() const;
  ::enterprise_management::PolicyOptions* _internal_mutable_login_screen_autoclick_enabled_options();
  public:
  void unsafe_arena_set_allocated_login_screen_autoclick_enabled_options(
      ::enterprise_management::PolicyOptions* login_screen_autoclick_enabled_options);
  ::enterprise_management::PolicyOptions* unsafe_arena_release_login_screen_autoclick_enabled_options();

  // optional .enterprise_management.PolicyOptions login_screen_sticky_keys_enabled_options = 27;
  bool has_login_screen_sticky_keys_enabled_options() const;
  private:
  bool _internal_has_login_screen_sticky_keys_enabled_options() const;
  public:
  void clear_login_screen_sticky_keys_enabled_options();
  const ::enterprise_management::PolicyOptions& login_screen_sticky_keys_enabled_options() const;
  ::enterprise_management::PolicyOptions* release_login_screen_sticky_keys_enabled_options();
  ::enterprise_management::PolicyOptions* mutable_login_screen_sticky_keys_enabled_options();
  void set_allocated_login_screen_sticky_keys_enabled_options(::enterprise_management::PolicyOptions* login_screen_sticky_keys_enabled_options);
  private:
  const ::enterprise_management::PolicyOptions& _internal_login_screen_sticky_keys_enabled_options() const;
  ::enterprise_management::PolicyOptions* _internal_mutable_login_screen_sticky_keys_enabled_options();
  public:
  void unsafe_arena_set_allocated_login_screen_sticky_keys_enabled_options(
      ::enterprise_management::PolicyOptions* login_screen_sticky_keys_enabled_options);
  ::enterprise_management::PolicyOptions* unsafe_arena_release_login_screen_sticky_keys_enabled_options();

  // optional .enterprise_management.PolicyOptions login_screen_keyboard_focus_highlight_enabled_options = 29;
  bool has_login_screen_keyboard_focus_highlight_enabled_options() const;
  private:
  bool _internal_has_login_screen_keyboard_focus_highlight_enabled_options() const;
  public:
  void clear_login_screen_keyboard_focus_highlight_enabled_options();
  const ::enterprise_management::PolicyOptions& login_screen_keyboard_focus_highlight_enabled_options() const;
  ::enterprise_management::PolicyOptions* release_login_screen_keyboard_focus_highlight_enabled_options();
  ::enterprise_management::PolicyOptions* mutable_login_screen_keyboard_focus_highlight_enabled_options();
  void set_allocated_login_screen_keyboard_focus_highlight_enabled_options(::enterprise_management::PolicyOptions* login_screen_keyboard_focus_highlight_enabled_options);
  private:
  const ::enterprise_management::PolicyOptions& _internal_login_screen_keyboard_focus_highlight_enabled_options() const;
  ::enterprise_management::PolicyOptions* _internal_mutable_login_screen_keyboard_focus_highlight_enabled_options();
  public:
  void unsafe_arena_set_allocated_login_screen_keyboard_focus_highlight_enabled_options(
      ::enterprise_management::PolicyOptions* login_screen_keyboard_focus_highlight_enabled_options);
  ::enterprise_management::PolicyOptions* unsafe_arena_release_login_screen_keyboard_focus_highlight_enabled_options();

  // optional .enterprise_management.PolicyOptions login_screen_screen_magnifier_type_options = 31;
  bool has_login_screen_screen_magnifier_type_options() const;
  private:
  bool _internal_has_login_screen_screen_magnifier_type_options() const;
  public:
  void clear_login_screen_screen_magnifier_type_options();
  const ::enterprise_management::PolicyOptions& login_screen_screen_magnifier_type_options() const;
  ::enterprise_management::PolicyOptions* release_login_screen_screen_magnifier_type_options();
  ::enterprise_management::PolicyOptions* mutable_login_screen_screen_magnifier_type_options();
  void set_allocated_login_screen_screen_magnifier_type_options(::enterprise_management::PolicyOptions* login_screen_screen_magnifier_type_options);
  private:
  const ::enterprise_management::PolicyOptions& _internal_login_screen_screen_magnifier_type_options() const;
  ::enterprise_management::PolicyOptions* _internal_mutable_login_screen_screen_magnifier_type_options();
  public:
  void unsafe_arena_set_allocated_login_screen_screen_magnifier_type_options(
      ::enterprise_management::PolicyOptions* login_screen_screen_magnifier_type_options);
  ::enterprise_management::PolicyOptions* unsafe_arena_release_login_screen_screen_magnifier_type_options();

  // optional .enterprise_management.PolicyOptions login_screen_show_options_in_system_tray_menu_enabled_options = 33;
  bool has_login_screen_show_options_in_system_tray_menu_enabled_options() const;
  private:
  bool _internal_has_login_screen_show_options_in_system_tray_menu_enabled_options() const;
  public:
  void clear_login_screen_show_options_in_system_tray_menu_enabled_options();
  const ::enterprise_management::PolicyOptions& login_screen_show_options_in_system_tray_menu_enabled_options() const;
  ::enterprise_management::PolicyOptions* release_login_screen_show_options_in_system_tray_menu_enabled_options();
  ::enterprise_management::PolicyOptions* mutable_login_screen_show_options_in_system_tray_menu_enabled_options();
  void set_allocated_login_screen_show_options_in_system_tray_menu_enabled_options(::enterprise_management::PolicyOptions* login_screen_show_options_in_system_tray_menu_enabled_options);
  private:
  const ::enterprise_management::PolicyOptions& _internal_login_screen_show_options_in_system_tray_menu_enabled_options() const;
  ::enterprise_management::PolicyOptions* _internal_mutable_login_screen_show_options_in_system_tray_menu_enabled_options();
  public:
  void unsafe_arena_set_allocated_login_screen_show_options_in_system_tray_menu_enabled_options(
      ::enterprise_management::PolicyOptions* login_screen_show_options_in_system_tray_menu_enabled_options);
  ::enterprise_management::PolicyOptions* unsafe_arena_release_login_screen_show_options_in_system_tray_menu_enabled_options();

  // optional .enterprise_management.PolicyOptions login_screen_shortcuts_enabled_options = 35;
  bool has_login_screen_shortcuts_enabled_options() const;
  private:
  bool _internal_has_login_screen_shortcuts_enabled_options() const;
  public:
  void clear_login_screen_shortcuts_enabled_options();
  const ::enterprise_management::PolicyOptions& login_screen_shortcuts_enabled_options() const;
  ::enterprise_management::PolicyOptions* release_login_screen_shortcuts_enabled_options();
  ::enterprise_management::PolicyOptions* mutable_login_screen_shortcuts_enabled_options();
  void set_allocated_login_screen_shortcuts_enabled_options(::enterprise_management::PolicyOptions* login_screen_shortcuts_enabled_options);
  private:
  const ::enterprise_management::PolicyOptions& _internal_login_screen_shortcuts_enabled_options() const;
  ::enterprise_management::PolicyOptions* _internal_mutable_login_screen_shortcuts_enabled_options();
  public:
  void unsafe_arena_set_allocated_login_screen_shortcuts_enabled_options(
      ::enterprise_management::PolicyOptions* login_screen_shortcuts_enabled_options);
  ::enterprise_management::PolicyOptions* unsafe_arena_release_login_screen_shortcuts_enabled_options();

  // optional bool login_screen_default_large_cursor_enabled = 1;
  bool has_login_screen_default_large_cursor_enabled() const;
  private:
  bool _internal_has_login_screen_default_large_cursor_enabled() const;
  public:
  void clear_login_screen_default_large_cursor_enabled();
  bool login_screen_default_large_cursor_enabled() const;
  void set_login_screen_default_large_cursor_enabled(bool value);
  private:
  bool _internal_login_screen_default_large_cursor_enabled() const;
  void _internal_set_login_screen_default_large_cursor_enabled(bool value);
  public:

  // optional bool login_screen_default_spoken_feedback_enabled = 2;
  bool has_login_screen_default_spoken_feedback_enabled() const;
  private:
  bool _internal_has_login_screen_default_spoken_feedback_enabled() const;
  public:
  void clear_login_screen_default_spoken_feedback_enabled();
  bool login_screen_default_spoken_feedback_enabled() const;
  void set_login_screen_default_spoken_feedback_enabled(bool value);
  private:
  bool _internal_login_screen_default_spoken_feedback_enabled() const;
  void _internal_set_login_screen_default_spoken_feedback_enabled(bool value);
  public:

  // optional bool login_screen_default_high_contrast_enabled = 3;
  bool has_login_screen_default_high_contrast_enabled() const;
  private:
  bool _internal_has_login_screen_default_high_contrast_enabled() const;
  public:
  void clear_login_screen_default_high_contrast_enabled();
  bool login_screen_default_high_contrast_enabled() const;
  void set_login_screen_default_high_contrast_enabled(bool value);
  private:
  bool _internal_login_screen_default_high_contrast_enabled() const;
  void _internal_set_login_screen_default_high_contrast_enabled(bool value);
  public:

  // optional bool login_screen_default_virtual_keyboard_enabled = 5;
  bool has_login_screen_default_virtual_keyboard_enabled() const;
  private:
  bool _internal_has_login_screen_default_virtual_keyboard_enabled() const;
  public:
  void clear_login_screen_default_virtual_keyboard_enabled();
  bool login_screen_default_virtual_keyboard_enabled() const;
  void set_login_screen_default_virtual_keyboard_enabled(bool value);
  private:
  bool _internal_login_screen_default_virtual_keyboard_enabled() const;
  void _internal_set_login_screen_default_virtual_keyboard_enabled(bool value);
  public:

  // optional .enterprise_management.AccessibilitySettingsProto.ScreenMagnifierType login_screen_default_screen_magnifier_type = 4;
  bool has_login_screen_default_screen_magnifier_type() const;
  private:
  bool _internal_has_login_screen_default_screen_magnifier_type() const;
  public:
  void clear_login_screen_default_screen_magnifier_type();
  ::enterprise_management::AccessibilitySettingsProto_ScreenMagnifierType login_screen_default_screen_magnifier_type() const;
  void set_login_screen_default_screen_magnifier_type(::enterprise_management::AccessibilitySettingsProto_ScreenMagnifierType value);
  private:
  ::enterprise_management::AccessibilitySettingsProto_ScreenMagnifierType _internal_login_screen_default_screen_magnifier_type() const;
  void _internal_set_login_screen_default_screen_magnifier_type(::enterprise_management::AccessibilitySettingsProto_ScreenMagnifierType value);
  public:

  // optional bool login_screen_large_cursor_enabled = 6;
  bool has_login_screen_large_cursor_enabled() const;
  private:
  bool _internal_has_login_screen_large_cursor_enabled() const;
  public:
  void clear_login_screen_large_cursor_enabled();
  bool login_screen_large_cursor_enabled() const;
  void set_login_screen_large_cursor_enabled(bool value);
  private:
  bool _internal_login_screen_large_cursor_enabled() const;
  void _internal_set_login_screen_large_cursor_enabled(bool value);
  public:

  // optional bool login_screen_spoken_feedback_enabled = 8;
  bool has_login_screen_spoken_feedback_enabled() const;
  private:
  bool _internal_has_login_screen_spoken_feedback_enabled() const;
  public:
  void clear_login_screen_spoken_feedback_enabled();
  bool login_screen_spoken_feedback_enabled() const;
  void set_login_screen_spoken_feedback_enabled(bool value);
  private:
  bool _internal_login_screen_spoken_feedback_enabled() const;
  void _internal_set_login_screen_spoken_feedback_enabled(bool value);
  public:

  // optional bool login_screen_high_contrast_enabled = 10;
  bool has_login_screen_high_contrast_enabled() const;
  private:
  bool _internal_has_login_screen_high_contrast_enabled() const;
  public:
  void clear_login_screen_high_contrast_enabled();
  bool login_screen_high_contrast_enabled() const;
  void set_login_screen_high_contrast_enabled(bool value);
  private:
  bool _internal_login_screen_high_contrast_enabled() const;
  void _internal_set_login_screen_high_contrast_enabled(bool value);
  public:

  // optional bool login_screen_virtual_keyboard_enabled = 12;
  bool has_login_screen_virtual_keyboard_enabled() const;
  private:
  bool _internal_has_login_screen_virtual_keyboard_enabled() const;
  public:
  void clear_login_screen_virtual_keyboard_enabled();
  bool login_screen_virtual_keyboard_enabled() const;
  void set_login_screen_virtual_keyboard_enabled(bool value);
  private:
  bool _internal_login_screen_virtual_keyboard_enabled() const;
  void _internal_set_login_screen_virtual_keyboard_enabled(bool value);
  public:

  // optional bool login_screen_dictation_enabled = 14;
  bool has_login_screen_dictation_enabled() const;
  private:
  bool _internal_has_login_screen_dictation_enabled() const;
  public:
  void clear_login_screen_dictation_enabled();
  bool login_screen_dictation_enabled() const;
  void set_login_screen_dictation_enabled(bool value);
  private:
  bool _internal_login_screen_dictation_enabled() const;
  void _internal_set_login_screen_dictation_enabled(bool value);
  public:

  // optional bool login_screen_select_to_speak_enabled = 16;
  bool has_login_screen_select_to_speak_enabled() const;
  private:
  bool _internal_has_login_screen_select_to_speak_enabled() const;
  public:
  void clear_login_screen_select_to_speak_enabled();
  bool login_screen_select_to_speak_enabled() const;
  void set_login_screen_select_to_speak_enabled(bool value);
  private:
  bool _internal_login_screen_select_to_speak_enabled() const;
  void _internal_set_login_screen_select_to_speak_enabled(bool value);
  public:

  // optional bool login_screen_cursor_highlight_enabled = 18;
  bool has_login_screen_cursor_highlight_enabled() const;
  private:
  bool _internal_has_login_screen_cursor_highlight_enabled() const;
  public:
  void clear_login_screen_cursor_highlight_enabled();
  bool login_screen_cursor_highlight_enabled() const;
  void set_login_screen_cursor_highlight_enabled(bool value);
  private:
  bool _internal_login_screen_cursor_highlight_enabled() const;
  void _internal_set_login_screen_cursor_highlight_enabled(bool value);
  public:

  // optional bool login_screen_caret_highlight_enabled = 20;
  bool has_login_screen_caret_highlight_enabled() const;
  private:
  bool _internal_has_login_screen_caret_highlight_enabled() const;
  public:
  void clear_login_screen_caret_highlight_enabled();
  bool login_screen_caret_highlight_enabled() const;
  void set_login_screen_caret_highlight_enabled(bool value);
  private:
  bool _internal_login_screen_caret_highlight_enabled() const;
  void _internal_set_login_screen_caret_highlight_enabled(bool value);
  public:

  // optional bool login_screen_mono_audio_enabled = 22;
  bool has_login_screen_mono_audio_enabled() const;
  private:
  bool _internal_has_login_screen_mono_audio_enabled() const;
  public:
  void clear_login_screen_mono_audio_enabled();
  bool login_screen_mono_audio_enabled() const;
  void set_login_screen_mono_audio_enabled(bool value);
  private:
  bool _internal_login_screen_mono_audio_enabled() const;
  void _internal_set_login_screen_mono_audio_enabled(bool value);
  public:

  // optional bool login_screen_autoclick_enabled = 24;
  bool has_login_screen_autoclick_enabled() const;
  private:
  bool _internal_has_login_screen_autoclick_enabled() const;
  public:
  void clear_login_screen_autoclick_enabled();
  bool login_screen_autoclick_enabled() const;
  void set_login_screen_autoclick_enabled(bool value);
  private:
  bool _internal_login_screen_autoclick_enabled() const;
  void _internal_set_login_screen_autoclick_enabled(bool value);
  public:

  // optional bool login_screen_sticky_keys_enabled = 26;
  bool has_login_screen_sticky_keys_enabled() const;
  private:
  bool _internal_has_login_screen_sticky_keys_enabled() const;
  public:
  void clear_login_screen_sticky_keys_enabled();
  bool login_screen_sticky_keys_enabled() const;
  void set_login_screen_sticky_keys_enabled(bool value);
  private:
  bool _internal_login_screen_sticky_keys_enabled() const;
  void _internal_set_login_screen_sticky_keys_enabled(bool value);
  public:

  // optional bool login_screen_keyboard_focus_highlight_enabled = 28;
  bool has_login_screen_keyboard_focus_highlight_enabled() const;
  private:
  bool _internal_has_login_screen_keyboard_focus_highlight_enabled() const;
  public:
  void clear_login_screen_keyboard_focus_highlight_enabled();
  bool login_screen_keyboard_focus_highlight_enabled() const;
  void set_login_screen_keyboard_focus_highlight_enabled(bool value);
  private:
  bool _internal_login_screen_keyboard_focus_highlight_enabled() const;
  void _internal_set_login_screen_keyboard_focus_highlight_enabled(bool value);
  public:

  // optional bool login_screen_show_options_in_system_tray_menu_enabled = 32;
  bool has_login_screen_show_options_in_system_tray_menu_enabled() const;
  private:
  bool _internal_has_login_screen_show_options_in_system_tray_menu_enabled() const;
  public:
  void clear_login_screen_show_options_in_system_tray_menu_enabled();
  bool login_screen_show_options_in_system_tray_menu_enabled() const;
  void set_login_screen_show_options_in_system_tray_menu_enabled(bool value);
  private:
  bool _internal_login_screen_show_options_in_system_tray_menu_enabled() const;
  void _internal_set_login_screen_show_options_in_system_tray_menu_enabled(bool value);
  public:

  // optional bool login_screen_shortcuts_enabled = 34;
  bool has_login_screen_shortcuts_enabled() const;
  private:
  bool _internal_has_login_screen_shortcuts_enabled() const;
  public:
  void clear_login_screen_shortcuts_enabled();
  bool login_screen_shortcuts_enabled() const;
  void set_login_screen_shortcuts_enabled(bool value);
  private:
  bool _internal_login_screen_shortcuts_enabled() const;
  void _internal_set_login_screen_shortcuts_enabled(bool value);
  public:

  // optional int64 login_screen_screen_magnifier_type = 30;
  bool has_login_screen_screen_magnifier_type() const;
  private:
  bool _internal_has_login_screen_screen_magnifier_type() const;
  public:
  void clear_login_screen_screen_magnifier_type();
  ::PROTOBUF_NAMESPACE_ID::int64 login_screen_screen_magnifier_type() const;
  void set_login_screen_screen_magnifier_type(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_login_screen_screen_magnifier_type() const;
  void _internal_set_login_screen_screen_magnifier_type(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.AccessibilitySettingsProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::enterprise_management::PolicyOptions* login_screen_large_cursor_enabled_options_;
  ::enterprise_management::PolicyOptions* login_screen_spoken_feedback_enabled_options_;
  ::enterprise_management::PolicyOptions* login_screen_high_contrast_enabled_options_;
  ::enterprise_management::PolicyOptions* login_screen_virtual_keyboard_enabled_options_;
  ::enterprise_management::PolicyOptions* login_screen_dictation_enabled_options_;
  ::enterprise_management::PolicyOptions* login_screen_select_to_speak_enabled_options_;
  ::enterprise_management::PolicyOptions* login_screen_cursor_highlight_enabled_options_;
  ::enterprise_management::PolicyOptions* login_screen_caret_highlight_enabled_options_;
  ::enterprise_management::PolicyOptions* login_screen_mono_audio_enabled_options_;
  ::enterprise_management::PolicyOptions* login_screen_autoclick_enabled_options_;
  ::enterprise_management::PolicyOptions* login_screen_sticky_keys_enabled_options_;
  ::enterprise_management::PolicyOptions* login_screen_keyboard_focus_highlight_enabled_options_;
  ::enterprise_management::PolicyOptions* login_screen_screen_magnifier_type_options_;
  ::enterprise_management::PolicyOptions* login_screen_show_options_in_system_tray_menu_enabled_options_;
  ::enterprise_management::PolicyOptions* login_screen_shortcuts_enabled_options_;
  bool login_screen_default_large_cursor_enabled_;
  bool login_screen_default_spoken_feedback_enabled_;
  bool login_screen_default_high_contrast_enabled_;
  bool login_screen_default_virtual_keyboard_enabled_;
  int login_screen_default_screen_magnifier_type_;
  bool login_screen_large_cursor_enabled_;
  bool login_screen_spoken_feedback_enabled_;
  bool login_screen_high_contrast_enabled_;
  bool login_screen_virtual_keyboard_enabled_;
  bool login_screen_dictation_enabled_;
  bool login_screen_select_to_speak_enabled_;
  bool login_screen_cursor_highlight_enabled_;
  bool login_screen_caret_highlight_enabled_;
  bool login_screen_mono_audio_enabled_;
  bool login_screen_autoclick_enabled_;
  bool login_screen_sticky_keys_enabled_;
  bool login_screen_keyboard_focus_highlight_enabled_;
  bool login_screen_show_options_in_system_tray_menu_enabled_;
  bool login_screen_shortcuts_enabled_;
  ::PROTOBUF_NAMESPACE_ID::int64 login_screen_screen_magnifier_type_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class OBSOLETE_SupervisedUsersSettingsProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.OBSOLETE_SupervisedUsersSettingsProto) */ {
 public:
  inline OBSOLETE_SupervisedUsersSettingsProto() : OBSOLETE_SupervisedUsersSettingsProto(nullptr) {};
  virtual ~OBSOLETE_SupervisedUsersSettingsProto();

  OBSOLETE_SupervisedUsersSettingsProto(const OBSOLETE_SupervisedUsersSettingsProto& from);
  OBSOLETE_SupervisedUsersSettingsProto(OBSOLETE_SupervisedUsersSettingsProto&& from) noexcept
    : OBSOLETE_SupervisedUsersSettingsProto() {
    *this = ::std::move(from);
  }

  inline OBSOLETE_SupervisedUsersSettingsProto& operator=(const OBSOLETE_SupervisedUsersSettingsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline OBSOLETE_SupervisedUsersSettingsProto& operator=(OBSOLETE_SupervisedUsersSettingsProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const OBSOLETE_SupervisedUsersSettingsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OBSOLETE_SupervisedUsersSettingsProto* internal_default_instance() {
    return reinterpret_cast<const OBSOLETE_SupervisedUsersSettingsProto*>(
               &_OBSOLETE_SupervisedUsersSettingsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(OBSOLETE_SupervisedUsersSettingsProto& a, OBSOLETE_SupervisedUsersSettingsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(OBSOLETE_SupervisedUsersSettingsProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OBSOLETE_SupervisedUsersSettingsProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OBSOLETE_SupervisedUsersSettingsProto* New() const final {
    return CreateMaybeMessage<OBSOLETE_SupervisedUsersSettingsProto>(nullptr);
  }

  OBSOLETE_SupervisedUsersSettingsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OBSOLETE_SupervisedUsersSettingsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const OBSOLETE_SupervisedUsersSettingsProto& from);
  void MergeFrom(const OBSOLETE_SupervisedUsersSettingsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OBSOLETE_SupervisedUsersSettingsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.OBSOLETE_SupervisedUsersSettingsProto";
  }
  protected:
  explicit OBSOLETE_SupervisedUsersSettingsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOBSOLETESupervisedUsersEnabledFieldNumber = 1,
  };
  // optional bool OBSOLETE_supervised_users_enabled = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_obsolete_supervised_users_enabled() const;
  private:
  bool _internal_has_obsolete_supervised_users_enabled() const;
  public:
  PROTOBUF_DEPRECATED void clear_obsolete_supervised_users_enabled();
  PROTOBUF_DEPRECATED bool obsolete_supervised_users_enabled() const;
  PROTOBUF_DEPRECATED void set_obsolete_supervised_users_enabled(bool value);
  private:
  bool _internal_obsolete_supervised_users_enabled() const;
  void _internal_set_obsolete_supervised_users_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.OBSOLETE_SupervisedUsersSettingsProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool obsolete_supervised_users_enabled_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class LoginScreenPowerManagementProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.LoginScreenPowerManagementProto) */ {
 public:
  inline LoginScreenPowerManagementProto() : LoginScreenPowerManagementProto(nullptr) {};
  virtual ~LoginScreenPowerManagementProto();

  LoginScreenPowerManagementProto(const LoginScreenPowerManagementProto& from);
  LoginScreenPowerManagementProto(LoginScreenPowerManagementProto&& from) noexcept
    : LoginScreenPowerManagementProto() {
    *this = ::std::move(from);
  }

  inline LoginScreenPowerManagementProto& operator=(const LoginScreenPowerManagementProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginScreenPowerManagementProto& operator=(LoginScreenPowerManagementProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LoginScreenPowerManagementProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginScreenPowerManagementProto* internal_default_instance() {
    return reinterpret_cast<const LoginScreenPowerManagementProto*>(
               &_LoginScreenPowerManagementProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(LoginScreenPowerManagementProto& a, LoginScreenPowerManagementProto& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginScreenPowerManagementProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginScreenPowerManagementProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginScreenPowerManagementProto* New() const final {
    return CreateMaybeMessage<LoginScreenPowerManagementProto>(nullptr);
  }

  LoginScreenPowerManagementProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginScreenPowerManagementProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LoginScreenPowerManagementProto& from);
  void MergeFrom(const LoginScreenPowerManagementProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoginScreenPowerManagementProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.LoginScreenPowerManagementProto";
  }
  protected:
  explicit LoginScreenPowerManagementProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginScreenPowerManagementFieldNumber = 1,
  };
  // optional string login_screen_power_management = 1;
  bool has_login_screen_power_management() const;
  private:
  bool _internal_has_login_screen_power_management() const;
  public:
  void clear_login_screen_power_management();
  const std::string& login_screen_power_management() const;
  void set_login_screen_power_management(const std::string& value);
  void set_login_screen_power_management(std::string&& value);
  void set_login_screen_power_management(const char* value);
  void set_login_screen_power_management(const char* value, size_t size);
  std::string* mutable_login_screen_power_management();
  std::string* release_login_screen_power_management();
  void set_allocated_login_screen_power_management(std::string* login_screen_power_management);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_login_screen_power_management();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_login_screen_power_management(
      std::string* login_screen_power_management);
  private:
  const std::string& _internal_login_screen_power_management() const;
  void _internal_set_login_screen_power_management(const std::string& value);
  std::string* _internal_mutable_login_screen_power_management();
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.LoginScreenPowerManagementProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_screen_power_management_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class AutoCleanupSettigsProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.AutoCleanupSettigsProto) */ {
 public:
  inline AutoCleanupSettigsProto() : AutoCleanupSettigsProto(nullptr) {};
  virtual ~AutoCleanupSettigsProto();

  AutoCleanupSettigsProto(const AutoCleanupSettigsProto& from);
  AutoCleanupSettigsProto(AutoCleanupSettigsProto&& from) noexcept
    : AutoCleanupSettigsProto() {
    *this = ::std::move(from);
  }

  inline AutoCleanupSettigsProto& operator=(const AutoCleanupSettigsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutoCleanupSettigsProto& operator=(AutoCleanupSettigsProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AutoCleanupSettigsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AutoCleanupSettigsProto* internal_default_instance() {
    return reinterpret_cast<const AutoCleanupSettigsProto*>(
               &_AutoCleanupSettigsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(AutoCleanupSettigsProto& a, AutoCleanupSettigsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AutoCleanupSettigsProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutoCleanupSettigsProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AutoCleanupSettigsProto* New() const final {
    return CreateMaybeMessage<AutoCleanupSettigsProto>(nullptr);
  }

  AutoCleanupSettigsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AutoCleanupSettigsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AutoCleanupSettigsProto& from);
  void MergeFrom(const AutoCleanupSettigsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AutoCleanupSettigsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.AutoCleanupSettigsProto";
  }
  protected:
  explicit AutoCleanupSettigsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCleanUpStrategyFieldNumber = 1,
  };
  // optional string clean_up_strategy = 1;
  bool has_clean_up_strategy() const;
  private:
  bool _internal_has_clean_up_strategy() const;
  public:
  void clear_clean_up_strategy();
  const std::string& clean_up_strategy() const;
  void set_clean_up_strategy(const std::string& value);
  void set_clean_up_strategy(std::string&& value);
  void set_clean_up_strategy(const char* value);
  void set_clean_up_strategy(const char* value, size_t size);
  std::string* mutable_clean_up_strategy();
  std::string* release_clean_up_strategy();
  void set_allocated_clean_up_strategy(std::string* clean_up_strategy);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_clean_up_strategy();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_clean_up_strategy(
      std::string* clean_up_strategy);
  private:
  const std::string& _internal_clean_up_strategy() const;
  void _internal_set_clean_up_strategy(const std::string& value);
  std::string* _internal_mutable_clean_up_strategy();
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.AutoCleanupSettigsProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clean_up_strategy_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class SystemSettingsProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.SystemSettingsProto) */ {
 public:
  inline SystemSettingsProto() : SystemSettingsProto(nullptr) {};
  virtual ~SystemSettingsProto();

  SystemSettingsProto(const SystemSettingsProto& from);
  SystemSettingsProto(SystemSettingsProto&& from) noexcept
    : SystemSettingsProto() {
    *this = ::std::move(from);
  }

  inline SystemSettingsProto& operator=(const SystemSettingsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemSettingsProto& operator=(SystemSettingsProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SystemSettingsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemSettingsProto* internal_default_instance() {
    return reinterpret_cast<const SystemSettingsProto*>(
               &_SystemSettingsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(SystemSettingsProto& a, SystemSettingsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemSettingsProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemSettingsProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemSettingsProto* New() const final {
    return CreateMaybeMessage<SystemSettingsProto>(nullptr);
  }

  SystemSettingsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemSettingsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemSettingsProto& from);
  void MergeFrom(const SystemSettingsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemSettingsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.SystemSettingsProto";
  }
  protected:
  explicit SystemSettingsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockDevmodeFieldNumber = 1,
  };
  // optional bool block_devmode = 1;
  bool has_block_devmode() const;
  private:
  bool _internal_has_block_devmode() const;
  public:
  void clear_block_devmode();
  bool block_devmode() const;
  void set_block_devmode(bool value);
  private:
  bool _internal_block_devmode() const;
  void _internal_set_block_devmode(bool value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.SystemSettingsProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool block_devmode_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class SAMLSettingsProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.SAMLSettingsProto) */ {
 public:
  inline SAMLSettingsProto() : SAMLSettingsProto(nullptr) {};
  virtual ~SAMLSettingsProto();

  SAMLSettingsProto(const SAMLSettingsProto& from);
  SAMLSettingsProto(SAMLSettingsProto&& from) noexcept
    : SAMLSettingsProto() {
    *this = ::std::move(from);
  }

  inline SAMLSettingsProto& operator=(const SAMLSettingsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SAMLSettingsProto& operator=(SAMLSettingsProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SAMLSettingsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SAMLSettingsProto* internal_default_instance() {
    return reinterpret_cast<const SAMLSettingsProto*>(
               &_SAMLSettingsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(SAMLSettingsProto& a, SAMLSettingsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SAMLSettingsProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SAMLSettingsProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SAMLSettingsProto* New() const final {
    return CreateMaybeMessage<SAMLSettingsProto>(nullptr);
  }

  SAMLSettingsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SAMLSettingsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SAMLSettingsProto& from);
  void MergeFrom(const SAMLSettingsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SAMLSettingsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.SAMLSettingsProto";
  }
  protected:
  explicit SAMLSettingsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransferSamlCookiesFieldNumber = 1,
  };
  // optional bool transfer_saml_cookies = 1;
  bool has_transfer_saml_cookies() const;
  private:
  bool _internal_has_transfer_saml_cookies() const;
  public:
  void clear_transfer_saml_cookies();
  bool transfer_saml_cookies() const;
  void set_transfer_saml_cookies(bool value);
  private:
  bool _internal_transfer_saml_cookies() const;
  void _internal_set_transfer_saml_cookies(bool value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.SAMLSettingsProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool transfer_saml_cookies_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class RebootOnShutdownProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.RebootOnShutdownProto) */ {
 public:
  inline RebootOnShutdownProto() : RebootOnShutdownProto(nullptr) {};
  virtual ~RebootOnShutdownProto();

  RebootOnShutdownProto(const RebootOnShutdownProto& from);
  RebootOnShutdownProto(RebootOnShutdownProto&& from) noexcept
    : RebootOnShutdownProto() {
    *this = ::std::move(from);
  }

  inline RebootOnShutdownProto& operator=(const RebootOnShutdownProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RebootOnShutdownProto& operator=(RebootOnShutdownProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RebootOnShutdownProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RebootOnShutdownProto* internal_default_instance() {
    return reinterpret_cast<const RebootOnShutdownProto*>(
               &_RebootOnShutdownProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(RebootOnShutdownProto& a, RebootOnShutdownProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RebootOnShutdownProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RebootOnShutdownProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RebootOnShutdownProto* New() const final {
    return CreateMaybeMessage<RebootOnShutdownProto>(nullptr);
  }

  RebootOnShutdownProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RebootOnShutdownProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RebootOnShutdownProto& from);
  void MergeFrom(const RebootOnShutdownProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RebootOnShutdownProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.RebootOnShutdownProto";
  }
  protected:
  explicit RebootOnShutdownProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRebootOnShutdownFieldNumber = 1,
  };
  // optional bool reboot_on_shutdown = 1 [default = false];
  bool has_reboot_on_shutdown() const;
  private:
  bool _internal_has_reboot_on_shutdown() const;
  public:
  void clear_reboot_on_shutdown();
  bool reboot_on_shutdown() const;
  void set_reboot_on_shutdown(bool value);
  private:
  bool _internal_reboot_on_shutdown() const;
  void _internal_set_reboot_on_shutdown(bool value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.RebootOnShutdownProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool reboot_on_shutdown_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class DeviceHeartbeatSettingsProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceHeartbeatSettingsProto) */ {
 public:
  inline DeviceHeartbeatSettingsProto() : DeviceHeartbeatSettingsProto(nullptr) {};
  virtual ~DeviceHeartbeatSettingsProto();

  DeviceHeartbeatSettingsProto(const DeviceHeartbeatSettingsProto& from);
  DeviceHeartbeatSettingsProto(DeviceHeartbeatSettingsProto&& from) noexcept
    : DeviceHeartbeatSettingsProto() {
    *this = ::std::move(from);
  }

  inline DeviceHeartbeatSettingsProto& operator=(const DeviceHeartbeatSettingsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceHeartbeatSettingsProto& operator=(DeviceHeartbeatSettingsProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeviceHeartbeatSettingsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceHeartbeatSettingsProto* internal_default_instance() {
    return reinterpret_cast<const DeviceHeartbeatSettingsProto*>(
               &_DeviceHeartbeatSettingsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(DeviceHeartbeatSettingsProto& a, DeviceHeartbeatSettingsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceHeartbeatSettingsProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceHeartbeatSettingsProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceHeartbeatSettingsProto* New() const final {
    return CreateMaybeMessage<DeviceHeartbeatSettingsProto>(nullptr);
  }

  DeviceHeartbeatSettingsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceHeartbeatSettingsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeviceHeartbeatSettingsProto& from);
  void MergeFrom(const DeviceHeartbeatSettingsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceHeartbeatSettingsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.DeviceHeartbeatSettingsProto";
  }
  protected:
  explicit DeviceHeartbeatSettingsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeartbeatEnabledFieldNumber = 1,
    kHeartbeatFrequencyFieldNumber = 2,
  };
  // optional bool heartbeat_enabled = 1 [default = false];
  bool has_heartbeat_enabled() const;
  private:
  bool _internal_has_heartbeat_enabled() const;
  public:
  void clear_heartbeat_enabled();
  bool heartbeat_enabled() const;
  void set_heartbeat_enabled(bool value);
  private:
  bool _internal_heartbeat_enabled() const;
  void _internal_set_heartbeat_enabled(bool value);
  public:

  // optional int64 heartbeat_frequency = 2 [default = 120000];
  bool has_heartbeat_frequency() const;
  private:
  bool _internal_has_heartbeat_frequency() const;
  public:
  void clear_heartbeat_frequency();
  ::PROTOBUF_NAMESPACE_ID::int64 heartbeat_frequency() const;
  void set_heartbeat_frequency(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_heartbeat_frequency() const;
  void _internal_set_heartbeat_frequency(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.DeviceHeartbeatSettingsProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool heartbeat_enabled_;
  ::PROTOBUF_NAMESPACE_ID::int64 heartbeat_frequency_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class ExtensionCacheSizeProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.ExtensionCacheSizeProto) */ {
 public:
  inline ExtensionCacheSizeProto() : ExtensionCacheSizeProto(nullptr) {};
  virtual ~ExtensionCacheSizeProto();

  ExtensionCacheSizeProto(const ExtensionCacheSizeProto& from);
  ExtensionCacheSizeProto(ExtensionCacheSizeProto&& from) noexcept
    : ExtensionCacheSizeProto() {
    *this = ::std::move(from);
  }

  inline ExtensionCacheSizeProto& operator=(const ExtensionCacheSizeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtensionCacheSizeProto& operator=(ExtensionCacheSizeProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ExtensionCacheSizeProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExtensionCacheSizeProto* internal_default_instance() {
    return reinterpret_cast<const ExtensionCacheSizeProto*>(
               &_ExtensionCacheSizeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(ExtensionCacheSizeProto& a, ExtensionCacheSizeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtensionCacheSizeProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtensionCacheSizeProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExtensionCacheSizeProto* New() const final {
    return CreateMaybeMessage<ExtensionCacheSizeProto>(nullptr);
  }

  ExtensionCacheSizeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExtensionCacheSizeProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ExtensionCacheSizeProto& from);
  void MergeFrom(const ExtensionCacheSizeProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExtensionCacheSizeProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.ExtensionCacheSizeProto";
  }
  protected:
  explicit ExtensionCacheSizeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtensionCacheSizeFieldNumber = 1,
  };
  // optional int64 extension_cache_size = 1;
  bool has_extension_cache_size() const;
  private:
  bool _internal_has_extension_cache_size() const;
  public:
  void clear_extension_cache_size();
  ::PROTOBUF_NAMESPACE_ID::int64 extension_cache_size() const;
  void set_extension_cache_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_extension_cache_size() const;
  void _internal_set_extension_cache_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.ExtensionCacheSizeProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 extension_cache_size_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class LoginScreenDomainAutoCompleteProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.LoginScreenDomainAutoCompleteProto) */ {
 public:
  inline LoginScreenDomainAutoCompleteProto() : LoginScreenDomainAutoCompleteProto(nullptr) {};
  virtual ~LoginScreenDomainAutoCompleteProto();

  LoginScreenDomainAutoCompleteProto(const LoginScreenDomainAutoCompleteProto& from);
  LoginScreenDomainAutoCompleteProto(LoginScreenDomainAutoCompleteProto&& from) noexcept
    : LoginScreenDomainAutoCompleteProto() {
    *this = ::std::move(from);
  }

  inline LoginScreenDomainAutoCompleteProto& operator=(const LoginScreenDomainAutoCompleteProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginScreenDomainAutoCompleteProto& operator=(LoginScreenDomainAutoCompleteProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LoginScreenDomainAutoCompleteProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginScreenDomainAutoCompleteProto* internal_default_instance() {
    return reinterpret_cast<const LoginScreenDomainAutoCompleteProto*>(
               &_LoginScreenDomainAutoCompleteProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(LoginScreenDomainAutoCompleteProto& a, LoginScreenDomainAutoCompleteProto& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginScreenDomainAutoCompleteProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginScreenDomainAutoCompleteProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginScreenDomainAutoCompleteProto* New() const final {
    return CreateMaybeMessage<LoginScreenDomainAutoCompleteProto>(nullptr);
  }

  LoginScreenDomainAutoCompleteProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginScreenDomainAutoCompleteProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LoginScreenDomainAutoCompleteProto& from);
  void MergeFrom(const LoginScreenDomainAutoCompleteProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoginScreenDomainAutoCompleteProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.LoginScreenDomainAutoCompleteProto";
  }
  protected:
  explicit LoginScreenDomainAutoCompleteProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginScreenDomainAutoCompleteFieldNumber = 1,
  };
  // optional string login_screen_domain_auto_complete = 1;
  bool has_login_screen_domain_auto_complete() const;
  private:
  bool _internal_has_login_screen_domain_auto_complete() const;
  public:
  void clear_login_screen_domain_auto_complete();
  const std::string& login_screen_domain_auto_complete() const;
  void set_login_screen_domain_auto_complete(const std::string& value);
  void set_login_screen_domain_auto_complete(std::string&& value);
  void set_login_screen_domain_auto_complete(const char* value);
  void set_login_screen_domain_auto_complete(const char* value, size_t size);
  std::string* mutable_login_screen_domain_auto_complete();
  std::string* release_login_screen_domain_auto_complete();
  void set_allocated_login_screen_domain_auto_complete(std::string* login_screen_domain_auto_complete);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_login_screen_domain_auto_complete();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_login_screen_domain_auto_complete(
      std::string* login_screen_domain_auto_complete);
  private:
  const std::string& _internal_login_screen_domain_auto_complete() const;
  void _internal_set_login_screen_domain_auto_complete(const std::string& value);
  std::string* _internal_mutable_login_screen_domain_auto_complete();
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.LoginScreenDomainAutoCompleteProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_screen_domain_auto_complete_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class DeviceLogUploadSettingsProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceLogUploadSettingsProto) */ {
 public:
  inline DeviceLogUploadSettingsProto() : DeviceLogUploadSettingsProto(nullptr) {};
  virtual ~DeviceLogUploadSettingsProto();

  DeviceLogUploadSettingsProto(const DeviceLogUploadSettingsProto& from);
  DeviceLogUploadSettingsProto(DeviceLogUploadSettingsProto&& from) noexcept
    : DeviceLogUploadSettingsProto() {
    *this = ::std::move(from);
  }

  inline DeviceLogUploadSettingsProto& operator=(const DeviceLogUploadSettingsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceLogUploadSettingsProto& operator=(DeviceLogUploadSettingsProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeviceLogUploadSettingsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceLogUploadSettingsProto* internal_default_instance() {
    return reinterpret_cast<const DeviceLogUploadSettingsProto*>(
               &_DeviceLogUploadSettingsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(DeviceLogUploadSettingsProto& a, DeviceLogUploadSettingsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceLogUploadSettingsProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceLogUploadSettingsProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceLogUploadSettingsProto* New() const final {
    return CreateMaybeMessage<DeviceLogUploadSettingsProto>(nullptr);
  }

  DeviceLogUploadSettingsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceLogUploadSettingsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeviceLogUploadSettingsProto& from);
  void MergeFrom(const DeviceLogUploadSettingsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceLogUploadSettingsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.DeviceLogUploadSettingsProto";
  }
  protected:
  explicit DeviceLogUploadSettingsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSystemLogUploadEnabledFieldNumber = 1,
  };
  // optional bool system_log_upload_enabled = 1 [default = false];
  bool has_system_log_upload_enabled() const;
  private:
  bool _internal_has_system_log_upload_enabled() const;
  public:
  void clear_system_log_upload_enabled();
  bool system_log_upload_enabled() const;
  void set_system_log_upload_enabled(bool value);
  private:
  bool _internal_system_log_upload_enabled() const;
  void _internal_set_system_log_upload_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.DeviceLogUploadSettingsProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool system_log_upload_enabled_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class DisplayRotationDefaultProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DisplayRotationDefaultProto) */ {
 public:
  inline DisplayRotationDefaultProto() : DisplayRotationDefaultProto(nullptr) {};
  virtual ~DisplayRotationDefaultProto();

  DisplayRotationDefaultProto(const DisplayRotationDefaultProto& from);
  DisplayRotationDefaultProto(DisplayRotationDefaultProto&& from) noexcept
    : DisplayRotationDefaultProto() {
    *this = ::std::move(from);
  }

  inline DisplayRotationDefaultProto& operator=(const DisplayRotationDefaultProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisplayRotationDefaultProto& operator=(DisplayRotationDefaultProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DisplayRotationDefaultProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisplayRotationDefaultProto* internal_default_instance() {
    return reinterpret_cast<const DisplayRotationDefaultProto*>(
               &_DisplayRotationDefaultProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(DisplayRotationDefaultProto& a, DisplayRotationDefaultProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DisplayRotationDefaultProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisplayRotationDefaultProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DisplayRotationDefaultProto* New() const final {
    return CreateMaybeMessage<DisplayRotationDefaultProto>(nullptr);
  }

  DisplayRotationDefaultProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisplayRotationDefaultProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DisplayRotationDefaultProto& from);
  void MergeFrom(const DisplayRotationDefaultProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DisplayRotationDefaultProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.DisplayRotationDefaultProto";
  }
  protected:
  explicit DisplayRotationDefaultProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DisplayRotationDefaultProto_Rotation Rotation;
  static constexpr Rotation ROTATE_0 =
    DisplayRotationDefaultProto_Rotation_ROTATE_0;
  static constexpr Rotation ROTATE_90 =
    DisplayRotationDefaultProto_Rotation_ROTATE_90;
  static constexpr Rotation ROTATE_180 =
    DisplayRotationDefaultProto_Rotation_ROTATE_180;
  static constexpr Rotation ROTATE_270 =
    DisplayRotationDefaultProto_Rotation_ROTATE_270;
  static inline bool Rotation_IsValid(int value) {
    return DisplayRotationDefaultProto_Rotation_IsValid(value);
  }
  static constexpr Rotation Rotation_MIN =
    DisplayRotationDefaultProto_Rotation_Rotation_MIN;
  static constexpr Rotation Rotation_MAX =
    DisplayRotationDefaultProto_Rotation_Rotation_MAX;
  static constexpr int Rotation_ARRAYSIZE =
    DisplayRotationDefaultProto_Rotation_Rotation_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Rotation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Rotation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Rotation_Name.");
    return DisplayRotationDefaultProto_Rotation_Name(enum_t_value);
  }
  static inline bool Rotation_Parse(const std::string& name,
      Rotation* value) {
    return DisplayRotationDefaultProto_Rotation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDisplayRotationDefaultFieldNumber = 1,
  };
  // optional .enterprise_management.DisplayRotationDefaultProto.Rotation display_rotation_default = 1;
  bool has_display_rotation_default() const;
  private:
  bool _internal_has_display_rotation_default() const;
  public:
  void clear_display_rotation_default();
  ::enterprise_management::DisplayRotationDefaultProto_Rotation display_rotation_default() const;
  void set_display_rotation_default(::enterprise_management::DisplayRotationDefaultProto_Rotation value);
  private:
  ::enterprise_management::DisplayRotationDefaultProto_Rotation _internal_display_rotation_default() const;
  void _internal_set_display_rotation_default(::enterprise_management::DisplayRotationDefaultProto_Rotation value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.DisplayRotationDefaultProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int display_rotation_default_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class DeviceLoginScreenPrivacyScreenEnabledProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceLoginScreenPrivacyScreenEnabledProto) */ {
 public:
  inline DeviceLoginScreenPrivacyScreenEnabledProto() : DeviceLoginScreenPrivacyScreenEnabledProto(nullptr) {};
  virtual ~DeviceLoginScreenPrivacyScreenEnabledProto();

  DeviceLoginScreenPrivacyScreenEnabledProto(const DeviceLoginScreenPrivacyScreenEnabledProto& from);
  DeviceLoginScreenPrivacyScreenEnabledProto(DeviceLoginScreenPrivacyScreenEnabledProto&& from) noexcept
    : DeviceLoginScreenPrivacyScreenEnabledProto() {
    *this = ::std::move(from);
  }

  inline DeviceLoginScreenPrivacyScreenEnabledProto& operator=(const DeviceLoginScreenPrivacyScreenEnabledProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceLoginScreenPrivacyScreenEnabledProto& operator=(DeviceLoginScreenPrivacyScreenEnabledProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeviceLoginScreenPrivacyScreenEnabledProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceLoginScreenPrivacyScreenEnabledProto* internal_default_instance() {
    return reinterpret_cast<const DeviceLoginScreenPrivacyScreenEnabledProto*>(
               &_DeviceLoginScreenPrivacyScreenEnabledProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(DeviceLoginScreenPrivacyScreenEnabledProto& a, DeviceLoginScreenPrivacyScreenEnabledProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceLoginScreenPrivacyScreenEnabledProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceLoginScreenPrivacyScreenEnabledProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceLoginScreenPrivacyScreenEnabledProto* New() const final {
    return CreateMaybeMessage<DeviceLoginScreenPrivacyScreenEnabledProto>(nullptr);
  }

  DeviceLoginScreenPrivacyScreenEnabledProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceLoginScreenPrivacyScreenEnabledProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeviceLoginScreenPrivacyScreenEnabledProto& from);
  void MergeFrom(const DeviceLoginScreenPrivacyScreenEnabledProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceLoginScreenPrivacyScreenEnabledProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.DeviceLoginScreenPrivacyScreenEnabledProto";
  }
  protected:
  explicit DeviceLoginScreenPrivacyScreenEnabledProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
  };
  // optional bool enabled = 1 [default = false];
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.DeviceLoginScreenPrivacyScreenEnabledProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool enabled_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class DeviceDisplayResolutionProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceDisplayResolutionProto) */ {
 public:
  inline DeviceDisplayResolutionProto() : DeviceDisplayResolutionProto(nullptr) {};
  virtual ~DeviceDisplayResolutionProto();

  DeviceDisplayResolutionProto(const DeviceDisplayResolutionProto& from);
  DeviceDisplayResolutionProto(DeviceDisplayResolutionProto&& from) noexcept
    : DeviceDisplayResolutionProto() {
    *this = ::std::move(from);
  }

  inline DeviceDisplayResolutionProto& operator=(const DeviceDisplayResolutionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceDisplayResolutionProto& operator=(DeviceDisplayResolutionProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeviceDisplayResolutionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceDisplayResolutionProto* internal_default_instance() {
    return reinterpret_cast<const DeviceDisplayResolutionProto*>(
               &_DeviceDisplayResolutionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(DeviceDisplayResolutionProto& a, DeviceDisplayResolutionProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceDisplayResolutionProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceDisplayResolutionProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceDisplayResolutionProto* New() const final {
    return CreateMaybeMessage<DeviceDisplayResolutionProto>(nullptr);
  }

  DeviceDisplayResolutionProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceDisplayResolutionProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeviceDisplayResolutionProto& from);
  void MergeFrom(const DeviceDisplayResolutionProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceDisplayResolutionProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.DeviceDisplayResolutionProto";
  }
  protected:
  explicit DeviceDisplayResolutionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceDisplayResolutionFieldNumber = 1,
  };
  // optional string device_display_resolution = 1;
  bool has_device_display_resolution() const;
  private:
  bool _internal_has_device_display_resolution() const;
  public:
  void clear_device_display_resolution();
  const std::string& device_display_resolution() const;
  void set_device_display_resolution(const std::string& value);
  void set_device_display_resolution(std::string&& value);
  void set_device_display_resolution(const char* value);
  void set_device_display_resolution(const char* value, size_t size);
  std::string* mutable_device_display_resolution();
  std::string* release_device_display_resolution();
  void set_allocated_device_display_resolution(std::string* device_display_resolution);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_display_resolution();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_display_resolution(
      std::string* device_display_resolution);
  private:
  const std::string& _internal_device_display_resolution() const;
  void _internal_set_device_display_resolution(const std::string& value);
  std::string* _internal_mutable_device_display_resolution();
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.DeviceDisplayResolutionProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_display_resolution_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class AllowKioskAppControlChromeVersionProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.AllowKioskAppControlChromeVersionProto) */ {
 public:
  inline AllowKioskAppControlChromeVersionProto() : AllowKioskAppControlChromeVersionProto(nullptr) {};
  virtual ~AllowKioskAppControlChromeVersionProto();

  AllowKioskAppControlChromeVersionProto(const AllowKioskAppControlChromeVersionProto& from);
  AllowKioskAppControlChromeVersionProto(AllowKioskAppControlChromeVersionProto&& from) noexcept
    : AllowKioskAppControlChromeVersionProto() {
    *this = ::std::move(from);
  }

  inline AllowKioskAppControlChromeVersionProto& operator=(const AllowKioskAppControlChromeVersionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllowKioskAppControlChromeVersionProto& operator=(AllowKioskAppControlChromeVersionProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AllowKioskAppControlChromeVersionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllowKioskAppControlChromeVersionProto* internal_default_instance() {
    return reinterpret_cast<const AllowKioskAppControlChromeVersionProto*>(
               &_AllowKioskAppControlChromeVersionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(AllowKioskAppControlChromeVersionProto& a, AllowKioskAppControlChromeVersionProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AllowKioskAppControlChromeVersionProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllowKioskAppControlChromeVersionProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AllowKioskAppControlChromeVersionProto* New() const final {
    return CreateMaybeMessage<AllowKioskAppControlChromeVersionProto>(nullptr);
  }

  AllowKioskAppControlChromeVersionProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AllowKioskAppControlChromeVersionProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AllowKioskAppControlChromeVersionProto& from);
  void MergeFrom(const AllowKioskAppControlChromeVersionProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AllowKioskAppControlChromeVersionProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.AllowKioskAppControlChromeVersionProto";
  }
  protected:
  explicit AllowKioskAppControlChromeVersionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllowKioskAppControlChromeVersionFieldNumber = 1,
  };
  // optional bool allow_kiosk_app_control_chrome_version = 1 [default = false];
  bool has_allow_kiosk_app_control_chrome_version() const;
  private:
  bool _internal_has_allow_kiosk_app_control_chrome_version() const;
  public:
  void clear_allow_kiosk_app_control_chrome_version();
  bool allow_kiosk_app_control_chrome_version() const;
  void set_allow_kiosk_app_control_chrome_version(bool value);
  private:
  bool _internal_allow_kiosk_app_control_chrome_version() const;
  void _internal_set_allow_kiosk_app_control_chrome_version(bool value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.AllowKioskAppControlChromeVersionProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool allow_kiosk_app_control_chrome_version_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class LoginAuthenticationBehaviorProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.LoginAuthenticationBehaviorProto) */ {
 public:
  inline LoginAuthenticationBehaviorProto() : LoginAuthenticationBehaviorProto(nullptr) {};
  virtual ~LoginAuthenticationBehaviorProto();

  LoginAuthenticationBehaviorProto(const LoginAuthenticationBehaviorProto& from);
  LoginAuthenticationBehaviorProto(LoginAuthenticationBehaviorProto&& from) noexcept
    : LoginAuthenticationBehaviorProto() {
    *this = ::std::move(from);
  }

  inline LoginAuthenticationBehaviorProto& operator=(const LoginAuthenticationBehaviorProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginAuthenticationBehaviorProto& operator=(LoginAuthenticationBehaviorProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LoginAuthenticationBehaviorProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginAuthenticationBehaviorProto* internal_default_instance() {
    return reinterpret_cast<const LoginAuthenticationBehaviorProto*>(
               &_LoginAuthenticationBehaviorProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(LoginAuthenticationBehaviorProto& a, LoginAuthenticationBehaviorProto& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginAuthenticationBehaviorProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginAuthenticationBehaviorProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginAuthenticationBehaviorProto* New() const final {
    return CreateMaybeMessage<LoginAuthenticationBehaviorProto>(nullptr);
  }

  LoginAuthenticationBehaviorProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginAuthenticationBehaviorProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LoginAuthenticationBehaviorProto& from);
  void MergeFrom(const LoginAuthenticationBehaviorProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoginAuthenticationBehaviorProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.LoginAuthenticationBehaviorProto";
  }
  protected:
  explicit LoginAuthenticationBehaviorProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef LoginAuthenticationBehaviorProto_LoginBehavior LoginBehavior;
  static constexpr LoginBehavior GAIA =
    LoginAuthenticationBehaviorProto_LoginBehavior_GAIA;
  static constexpr LoginBehavior SAML_INTERSTITIAL =
    LoginAuthenticationBehaviorProto_LoginBehavior_SAML_INTERSTITIAL;
  static inline bool LoginBehavior_IsValid(int value) {
    return LoginAuthenticationBehaviorProto_LoginBehavior_IsValid(value);
  }
  static constexpr LoginBehavior LoginBehavior_MIN =
    LoginAuthenticationBehaviorProto_LoginBehavior_LoginBehavior_MIN;
  static constexpr LoginBehavior LoginBehavior_MAX =
    LoginAuthenticationBehaviorProto_LoginBehavior_LoginBehavior_MAX;
  static constexpr int LoginBehavior_ARRAYSIZE =
    LoginAuthenticationBehaviorProto_LoginBehavior_LoginBehavior_ARRAYSIZE;
  template<typename T>
  static inline const std::string& LoginBehavior_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LoginBehavior>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LoginBehavior_Name.");
    return LoginAuthenticationBehaviorProto_LoginBehavior_Name(enum_t_value);
  }
  static inline bool LoginBehavior_Parse(const std::string& name,
      LoginBehavior* value) {
    return LoginAuthenticationBehaviorProto_LoginBehavior_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLoginAuthenticationBehaviorFieldNumber = 1,
  };
  // optional .enterprise_management.LoginAuthenticationBehaviorProto.LoginBehavior login_authentication_behavior = 1 [default = GAIA];
  bool has_login_authentication_behavior() const;
  private:
  bool _internal_has_login_authentication_behavior() const;
  public:
  void clear_login_authentication_behavior();
  ::enterprise_management::LoginAuthenticationBehaviorProto_LoginBehavior login_authentication_behavior() const;
  void set_login_authentication_behavior(::enterprise_management::LoginAuthenticationBehaviorProto_LoginBehavior value);
  private:
  ::enterprise_management::LoginAuthenticationBehaviorProto_LoginBehavior _internal_login_authentication_behavior() const;
  void _internal_set_login_authentication_behavior(::enterprise_management::LoginAuthenticationBehaviorProto_LoginBehavior value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.LoginAuthenticationBehaviorProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int login_authentication_behavior_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class UsbDeviceIdProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.UsbDeviceIdProto) */ {
 public:
  inline UsbDeviceIdProto() : UsbDeviceIdProto(nullptr) {};
  virtual ~UsbDeviceIdProto();

  UsbDeviceIdProto(const UsbDeviceIdProto& from);
  UsbDeviceIdProto(UsbDeviceIdProto&& from) noexcept
    : UsbDeviceIdProto() {
    *this = ::std::move(from);
  }

  inline UsbDeviceIdProto& operator=(const UsbDeviceIdProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline UsbDeviceIdProto& operator=(UsbDeviceIdProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const UsbDeviceIdProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UsbDeviceIdProto* internal_default_instance() {
    return reinterpret_cast<const UsbDeviceIdProto*>(
               &_UsbDeviceIdProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(UsbDeviceIdProto& a, UsbDeviceIdProto& b) {
    a.Swap(&b);
  }
  inline void Swap(UsbDeviceIdProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UsbDeviceIdProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UsbDeviceIdProto* New() const final {
    return CreateMaybeMessage<UsbDeviceIdProto>(nullptr);
  }

  UsbDeviceIdProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UsbDeviceIdProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UsbDeviceIdProto& from);
  void MergeFrom(const UsbDeviceIdProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UsbDeviceIdProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.UsbDeviceIdProto";
  }
  protected:
  explicit UsbDeviceIdProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVendorIdFieldNumber = 1,
    kProductIdFieldNumber = 2,
  };
  // optional int32 vendor_id = 1;
  bool has_vendor_id() const;
  private:
  bool _internal_has_vendor_id() const;
  public:
  void clear_vendor_id();
  ::PROTOBUF_NAMESPACE_ID::int32 vendor_id() const;
  void set_vendor_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vendor_id() const;
  void _internal_set_vendor_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 product_id = 2;
  bool has_product_id() const;
  private:
  bool _internal_has_product_id() const;
  public:
  void clear_product_id();
  ::PROTOBUF_NAMESPACE_ID::int32 product_id() const;
  void set_product_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_product_id() const;
  void _internal_set_product_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.UsbDeviceIdProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 vendor_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 product_id_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class UsbDetachableWhitelistProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.UsbDetachableWhitelistProto) */ {
 public:
  inline UsbDetachableWhitelistProto() : UsbDetachableWhitelistProto(nullptr) {};
  virtual ~UsbDetachableWhitelistProto();

  UsbDetachableWhitelistProto(const UsbDetachableWhitelistProto& from);
  UsbDetachableWhitelistProto(UsbDetachableWhitelistProto&& from) noexcept
    : UsbDetachableWhitelistProto() {
    *this = ::std::move(from);
  }

  inline UsbDetachableWhitelistProto& operator=(const UsbDetachableWhitelistProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline UsbDetachableWhitelistProto& operator=(UsbDetachableWhitelistProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const UsbDetachableWhitelistProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UsbDetachableWhitelistProto* internal_default_instance() {
    return reinterpret_cast<const UsbDetachableWhitelistProto*>(
               &_UsbDetachableWhitelistProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(UsbDetachableWhitelistProto& a, UsbDetachableWhitelistProto& b) {
    a.Swap(&b);
  }
  inline void Swap(UsbDetachableWhitelistProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UsbDetachableWhitelistProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UsbDetachableWhitelistProto* New() const final {
    return CreateMaybeMessage<UsbDetachableWhitelistProto>(nullptr);
  }

  UsbDetachableWhitelistProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UsbDetachableWhitelistProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UsbDetachableWhitelistProto& from);
  void MergeFrom(const UsbDetachableWhitelistProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UsbDetachableWhitelistProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.UsbDetachableWhitelistProto";
  }
  protected:
  explicit UsbDetachableWhitelistProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // repeated .enterprise_management.UsbDeviceIdProto id = 1;
  int id_size() const;
  private:
  int _internal_id_size() const;
  public:
  void clear_id();
  ::enterprise_management::UsbDeviceIdProto* mutable_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::enterprise_management::UsbDeviceIdProto >*
      mutable_id();
  private:
  const ::enterprise_management::UsbDeviceIdProto& _internal_id(int index) const;
  ::enterprise_management::UsbDeviceIdProto* _internal_add_id();
  public:
  const ::enterprise_management::UsbDeviceIdProto& id(int index) const;
  ::enterprise_management::UsbDeviceIdProto* add_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::enterprise_management::UsbDeviceIdProto >&
      id() const;

  // @@protoc_insertion_point(class_scope:enterprise_management.UsbDetachableWhitelistProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::enterprise_management::UsbDeviceIdProto > id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class AllowBluetoothProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.AllowBluetoothProto) */ {
 public:
  inline AllowBluetoothProto() : AllowBluetoothProto(nullptr) {};
  virtual ~AllowBluetoothProto();

  AllowBluetoothProto(const AllowBluetoothProto& from);
  AllowBluetoothProto(AllowBluetoothProto&& from) noexcept
    : AllowBluetoothProto() {
    *this = ::std::move(from);
  }

  inline AllowBluetoothProto& operator=(const AllowBluetoothProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllowBluetoothProto& operator=(AllowBluetoothProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AllowBluetoothProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllowBluetoothProto* internal_default_instance() {
    return reinterpret_cast<const AllowBluetoothProto*>(
               &_AllowBluetoothProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(AllowBluetoothProto& a, AllowBluetoothProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AllowBluetoothProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllowBluetoothProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AllowBluetoothProto* New() const final {
    return CreateMaybeMessage<AllowBluetoothProto>(nullptr);
  }

  AllowBluetoothProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AllowBluetoothProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AllowBluetoothProto& from);
  void MergeFrom(const AllowBluetoothProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AllowBluetoothProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.AllowBluetoothProto";
  }
  protected:
  explicit AllowBluetoothProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllowBluetoothFieldNumber = 1,
  };
  // optional bool allow_bluetooth = 1 [default = true];
  bool has_allow_bluetooth() const;
  private:
  bool _internal_has_allow_bluetooth() const;
  public:
  void clear_allow_bluetooth();
  bool allow_bluetooth() const;
  void set_allow_bluetooth(bool value);
  private:
  bool _internal_allow_bluetooth() const;
  void _internal_set_allow_bluetooth(bool value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.AllowBluetoothProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool allow_bluetooth_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class DeviceWiFiAllowedProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceWiFiAllowedProto) */ {
 public:
  inline DeviceWiFiAllowedProto() : DeviceWiFiAllowedProto(nullptr) {};
  virtual ~DeviceWiFiAllowedProto();

  DeviceWiFiAllowedProto(const DeviceWiFiAllowedProto& from);
  DeviceWiFiAllowedProto(DeviceWiFiAllowedProto&& from) noexcept
    : DeviceWiFiAllowedProto() {
    *this = ::std::move(from);
  }

  inline DeviceWiFiAllowedProto& operator=(const DeviceWiFiAllowedProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceWiFiAllowedProto& operator=(DeviceWiFiAllowedProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeviceWiFiAllowedProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceWiFiAllowedProto* internal_default_instance() {
    return reinterpret_cast<const DeviceWiFiAllowedProto*>(
               &_DeviceWiFiAllowedProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(DeviceWiFiAllowedProto& a, DeviceWiFiAllowedProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceWiFiAllowedProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceWiFiAllowedProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceWiFiAllowedProto* New() const final {
    return CreateMaybeMessage<DeviceWiFiAllowedProto>(nullptr);
  }

  DeviceWiFiAllowedProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceWiFiAllowedProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeviceWiFiAllowedProto& from);
  void MergeFrom(const DeviceWiFiAllowedProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceWiFiAllowedProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.DeviceWiFiAllowedProto";
  }
  protected:
  explicit DeviceWiFiAllowedProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceWifiAllowedFieldNumber = 1,
  };
  // optional bool device_wifi_allowed = 1 [default = true];
  bool has_device_wifi_allowed() const;
  private:
  bool _internal_has_device_wifi_allowed() const;
  public:
  void clear_device_wifi_allowed();
  bool device_wifi_allowed() const;
  void set_device_wifi_allowed(bool value);
  private:
  bool _internal_device_wifi_allowed() const;
  void _internal_set_device_wifi_allowed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.DeviceWiFiAllowedProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool device_wifi_allowed_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class DeviceQuirksDownloadEnabledProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceQuirksDownloadEnabledProto) */ {
 public:
  inline DeviceQuirksDownloadEnabledProto() : DeviceQuirksDownloadEnabledProto(nullptr) {};
  virtual ~DeviceQuirksDownloadEnabledProto();

  DeviceQuirksDownloadEnabledProto(const DeviceQuirksDownloadEnabledProto& from);
  DeviceQuirksDownloadEnabledProto(DeviceQuirksDownloadEnabledProto&& from) noexcept
    : DeviceQuirksDownloadEnabledProto() {
    *this = ::std::move(from);
  }

  inline DeviceQuirksDownloadEnabledProto& operator=(const DeviceQuirksDownloadEnabledProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceQuirksDownloadEnabledProto& operator=(DeviceQuirksDownloadEnabledProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeviceQuirksDownloadEnabledProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceQuirksDownloadEnabledProto* internal_default_instance() {
    return reinterpret_cast<const DeviceQuirksDownloadEnabledProto*>(
               &_DeviceQuirksDownloadEnabledProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(DeviceQuirksDownloadEnabledProto& a, DeviceQuirksDownloadEnabledProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceQuirksDownloadEnabledProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceQuirksDownloadEnabledProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceQuirksDownloadEnabledProto* New() const final {
    return CreateMaybeMessage<DeviceQuirksDownloadEnabledProto>(nullptr);
  }

  DeviceQuirksDownloadEnabledProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceQuirksDownloadEnabledProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeviceQuirksDownloadEnabledProto& from);
  void MergeFrom(const DeviceQuirksDownloadEnabledProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceQuirksDownloadEnabledProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.DeviceQuirksDownloadEnabledProto";
  }
  protected:
  explicit DeviceQuirksDownloadEnabledProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuirksDownloadEnabledFieldNumber = 1,
  };
  // optional bool quirks_download_enabled = 1;
  bool has_quirks_download_enabled() const;
  private:
  bool _internal_has_quirks_download_enabled() const;
  public:
  void clear_quirks_download_enabled();
  bool quirks_download_enabled() const;
  void set_quirks_download_enabled(bool value);
  private:
  bool _internal_quirks_download_enabled() const;
  void _internal_set_quirks_download_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.DeviceQuirksDownloadEnabledProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool quirks_download_enabled_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class LoginVideoCaptureAllowedUrlsProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.LoginVideoCaptureAllowedUrlsProto) */ {
 public:
  inline LoginVideoCaptureAllowedUrlsProto() : LoginVideoCaptureAllowedUrlsProto(nullptr) {};
  virtual ~LoginVideoCaptureAllowedUrlsProto();

  LoginVideoCaptureAllowedUrlsProto(const LoginVideoCaptureAllowedUrlsProto& from);
  LoginVideoCaptureAllowedUrlsProto(LoginVideoCaptureAllowedUrlsProto&& from) noexcept
    : LoginVideoCaptureAllowedUrlsProto() {
    *this = ::std::move(from);
  }

  inline LoginVideoCaptureAllowedUrlsProto& operator=(const LoginVideoCaptureAllowedUrlsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginVideoCaptureAllowedUrlsProto& operator=(LoginVideoCaptureAllowedUrlsProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LoginVideoCaptureAllowedUrlsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginVideoCaptureAllowedUrlsProto* internal_default_instance() {
    return reinterpret_cast<const LoginVideoCaptureAllowedUrlsProto*>(
               &_LoginVideoCaptureAllowedUrlsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(LoginVideoCaptureAllowedUrlsProto& a, LoginVideoCaptureAllowedUrlsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginVideoCaptureAllowedUrlsProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginVideoCaptureAllowedUrlsProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginVideoCaptureAllowedUrlsProto* New() const final {
    return CreateMaybeMessage<LoginVideoCaptureAllowedUrlsProto>(nullptr);
  }

  LoginVideoCaptureAllowedUrlsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginVideoCaptureAllowedUrlsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LoginVideoCaptureAllowedUrlsProto& from);
  void MergeFrom(const LoginVideoCaptureAllowedUrlsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoginVideoCaptureAllowedUrlsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.LoginVideoCaptureAllowedUrlsProto";
  }
  protected:
  explicit LoginVideoCaptureAllowedUrlsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlsFieldNumber = 1,
  };
  // repeated string urls = 1;
  int urls_size() const;
  private:
  int _internal_urls_size() const;
  public:
  void clear_urls();
  const std::string& urls(int index) const;
  std::string* mutable_urls(int index);
  void set_urls(int index, const std::string& value);
  void set_urls(int index, std::string&& value);
  void set_urls(int index, const char* value);
  void set_urls(int index, const char* value, size_t size);
  std::string* add_urls();
  void add_urls(const std::string& value);
  void add_urls(std::string&& value);
  void add_urls(const char* value);
  void add_urls(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& urls() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_urls();
  private:
  const std::string& _internal_urls(int index) const;
  std::string* _internal_add_urls();
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.LoginVideoCaptureAllowedUrlsProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> urls_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class DeviceWiFiFastTransitionEnabledProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceWiFiFastTransitionEnabledProto) */ {
 public:
  inline DeviceWiFiFastTransitionEnabledProto() : DeviceWiFiFastTransitionEnabledProto(nullptr) {};
  virtual ~DeviceWiFiFastTransitionEnabledProto();

  DeviceWiFiFastTransitionEnabledProto(const DeviceWiFiFastTransitionEnabledProto& from);
  DeviceWiFiFastTransitionEnabledProto(DeviceWiFiFastTransitionEnabledProto&& from) noexcept
    : DeviceWiFiFastTransitionEnabledProto() {
    *this = ::std::move(from);
  }

  inline DeviceWiFiFastTransitionEnabledProto& operator=(const DeviceWiFiFastTransitionEnabledProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceWiFiFastTransitionEnabledProto& operator=(DeviceWiFiFastTransitionEnabledProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeviceWiFiFastTransitionEnabledProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceWiFiFastTransitionEnabledProto* internal_default_instance() {
    return reinterpret_cast<const DeviceWiFiFastTransitionEnabledProto*>(
               &_DeviceWiFiFastTransitionEnabledProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(DeviceWiFiFastTransitionEnabledProto& a, DeviceWiFiFastTransitionEnabledProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceWiFiFastTransitionEnabledProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceWiFiFastTransitionEnabledProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceWiFiFastTransitionEnabledProto* New() const final {
    return CreateMaybeMessage<DeviceWiFiFastTransitionEnabledProto>(nullptr);
  }

  DeviceWiFiFastTransitionEnabledProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceWiFiFastTransitionEnabledProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeviceWiFiFastTransitionEnabledProto& from);
  void MergeFrom(const DeviceWiFiFastTransitionEnabledProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceWiFiFastTransitionEnabledProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.DeviceWiFiFastTransitionEnabledProto";
  }
  protected:
  explicit DeviceWiFiFastTransitionEnabledProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceWifiFastTransitionEnabledFieldNumber = 1,
  };
  // optional bool device_wifi_fast_transition_enabled = 1;
  bool has_device_wifi_fast_transition_enabled() const;
  private:
  bool _internal_has_device_wifi_fast_transition_enabled() const;
  public:
  void clear_device_wifi_fast_transition_enabled();
  bool device_wifi_fast_transition_enabled() const;
  void set_device_wifi_fast_transition_enabled(bool value);
  private:
  bool _internal_device_wifi_fast_transition_enabled() const;
  void _internal_set_device_wifi_fast_transition_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.DeviceWiFiFastTransitionEnabledProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool device_wifi_fast_transition_enabled_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class NetworkThrottlingEnabledProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.NetworkThrottlingEnabledProto) */ {
 public:
  inline NetworkThrottlingEnabledProto() : NetworkThrottlingEnabledProto(nullptr) {};
  virtual ~NetworkThrottlingEnabledProto();

  NetworkThrottlingEnabledProto(const NetworkThrottlingEnabledProto& from);
  NetworkThrottlingEnabledProto(NetworkThrottlingEnabledProto&& from) noexcept
    : NetworkThrottlingEnabledProto() {
    *this = ::std::move(from);
  }

  inline NetworkThrottlingEnabledProto& operator=(const NetworkThrottlingEnabledProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkThrottlingEnabledProto& operator=(NetworkThrottlingEnabledProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const NetworkThrottlingEnabledProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkThrottlingEnabledProto* internal_default_instance() {
    return reinterpret_cast<const NetworkThrottlingEnabledProto*>(
               &_NetworkThrottlingEnabledProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(NetworkThrottlingEnabledProto& a, NetworkThrottlingEnabledProto& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkThrottlingEnabledProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkThrottlingEnabledProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkThrottlingEnabledProto* New() const final {
    return CreateMaybeMessage<NetworkThrottlingEnabledProto>(nullptr);
  }

  NetworkThrottlingEnabledProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkThrottlingEnabledProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const NetworkThrottlingEnabledProto& from);
  void MergeFrom(const NetworkThrottlingEnabledProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NetworkThrottlingEnabledProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.NetworkThrottlingEnabledProto";
  }
  protected:
  explicit NetworkThrottlingEnabledProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
    kUploadRateKbitsFieldNumber = 2,
    kDownloadRateKbitsFieldNumber = 3,
  };
  // optional bool enabled = 1 [default = false];
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // optional int32 upload_rate_kbits = 2 [default = 0];
  bool has_upload_rate_kbits() const;
  private:
  bool _internal_has_upload_rate_kbits() const;
  public:
  void clear_upload_rate_kbits();
  ::PROTOBUF_NAMESPACE_ID::int32 upload_rate_kbits() const;
  void set_upload_rate_kbits(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_upload_rate_kbits() const;
  void _internal_set_upload_rate_kbits(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 download_rate_kbits = 3 [default = 0];
  bool has_download_rate_kbits() const;
  private:
  bool _internal_has_download_rate_kbits() const;
  public:
  void clear_download_rate_kbits();
  ::PROTOBUF_NAMESPACE_ID::int32 download_rate_kbits() const;
  void set_download_rate_kbits(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_download_rate_kbits() const;
  void _internal_set_download_rate_kbits(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.NetworkThrottlingEnabledProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool enabled_;
  ::PROTOBUF_NAMESPACE_ID::int32 upload_rate_kbits_;
  ::PROTOBUF_NAMESPACE_ID::int32 download_rate_kbits_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class DeviceLoginScreenExtensionsProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceLoginScreenExtensionsProto) */ {
 public:
  inline DeviceLoginScreenExtensionsProto() : DeviceLoginScreenExtensionsProto(nullptr) {};
  virtual ~DeviceLoginScreenExtensionsProto();

  DeviceLoginScreenExtensionsProto(const DeviceLoginScreenExtensionsProto& from);
  DeviceLoginScreenExtensionsProto(DeviceLoginScreenExtensionsProto&& from) noexcept
    : DeviceLoginScreenExtensionsProto() {
    *this = ::std::move(from);
  }

  inline DeviceLoginScreenExtensionsProto& operator=(const DeviceLoginScreenExtensionsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceLoginScreenExtensionsProto& operator=(DeviceLoginScreenExtensionsProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeviceLoginScreenExtensionsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceLoginScreenExtensionsProto* internal_default_instance() {
    return reinterpret_cast<const DeviceLoginScreenExtensionsProto*>(
               &_DeviceLoginScreenExtensionsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(DeviceLoginScreenExtensionsProto& a, DeviceLoginScreenExtensionsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceLoginScreenExtensionsProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceLoginScreenExtensionsProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceLoginScreenExtensionsProto* New() const final {
    return CreateMaybeMessage<DeviceLoginScreenExtensionsProto>(nullptr);
  }

  DeviceLoginScreenExtensionsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceLoginScreenExtensionsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeviceLoginScreenExtensionsProto& from);
  void MergeFrom(const DeviceLoginScreenExtensionsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceLoginScreenExtensionsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.DeviceLoginScreenExtensionsProto";
  }
  protected:
  explicit DeviceLoginScreenExtensionsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceLoginScreenExtensionsFieldNumber = 1,
  };
  // repeated string device_login_screen_extensions = 1;
  int device_login_screen_extensions_size() const;
  private:
  int _internal_device_login_screen_extensions_size() const;
  public:
  void clear_device_login_screen_extensions();
  const std::string& device_login_screen_extensions(int index) const;
  std::string* mutable_device_login_screen_extensions(int index);
  void set_device_login_screen_extensions(int index, const std::string& value);
  void set_device_login_screen_extensions(int index, std::string&& value);
  void set_device_login_screen_extensions(int index, const char* value);
  void set_device_login_screen_extensions(int index, const char* value, size_t size);
  std::string* add_device_login_screen_extensions();
  void add_device_login_screen_extensions(const std::string& value);
  void add_device_login_screen_extensions(std::string&& value);
  void add_device_login_screen_extensions(const char* value);
  void add_device_login_screen_extensions(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& device_login_screen_extensions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_device_login_screen_extensions();
  private:
  const std::string& _internal_device_login_screen_extensions(int index) const;
  std::string* _internal_add_device_login_screen_extensions();
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.DeviceLoginScreenExtensionsProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> device_login_screen_extensions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class LoginScreenLocalesProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.LoginScreenLocalesProto) */ {
 public:
  inline LoginScreenLocalesProto() : LoginScreenLocalesProto(nullptr) {};
  virtual ~LoginScreenLocalesProto();

  LoginScreenLocalesProto(const LoginScreenLocalesProto& from);
  LoginScreenLocalesProto(LoginScreenLocalesProto&& from) noexcept
    : LoginScreenLocalesProto() {
    *this = ::std::move(from);
  }

  inline LoginScreenLocalesProto& operator=(const LoginScreenLocalesProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginScreenLocalesProto& operator=(LoginScreenLocalesProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LoginScreenLocalesProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginScreenLocalesProto* internal_default_instance() {
    return reinterpret_cast<const LoginScreenLocalesProto*>(
               &_LoginScreenLocalesProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(LoginScreenLocalesProto& a, LoginScreenLocalesProto& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginScreenLocalesProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginScreenLocalesProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginScreenLocalesProto* New() const final {
    return CreateMaybeMessage<LoginScreenLocalesProto>(nullptr);
  }

  LoginScreenLocalesProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginScreenLocalesProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LoginScreenLocalesProto& from);
  void MergeFrom(const LoginScreenLocalesProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoginScreenLocalesProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.LoginScreenLocalesProto";
  }
  protected:
  explicit LoginScreenLocalesProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginScreenLocalesFieldNumber = 1,
  };
  // repeated string login_screen_locales = 1;
  int login_screen_locales_size() const;
  private:
  int _internal_login_screen_locales_size() const;
  public:
  void clear_login_screen_locales();
  const std::string& login_screen_locales(int index) const;
  std::string* mutable_login_screen_locales(int index);
  void set_login_screen_locales(int index, const std::string& value);
  void set_login_screen_locales(int index, std::string&& value);
  void set_login_screen_locales(int index, const char* value);
  void set_login_screen_locales(int index, const char* value, size_t size);
  std::string* add_login_screen_locales();
  void add_login_screen_locales(const std::string& value);
  void add_login_screen_locales(std::string&& value);
  void add_login_screen_locales(const char* value);
  void add_login_screen_locales(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& login_screen_locales() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_login_screen_locales();
  private:
  const std::string& _internal_login_screen_locales(int index) const;
  std::string* _internal_add_login_screen_locales();
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.LoginScreenLocalesProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> login_screen_locales_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class LoginScreenInputMethodsProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.LoginScreenInputMethodsProto) */ {
 public:
  inline LoginScreenInputMethodsProto() : LoginScreenInputMethodsProto(nullptr) {};
  virtual ~LoginScreenInputMethodsProto();

  LoginScreenInputMethodsProto(const LoginScreenInputMethodsProto& from);
  LoginScreenInputMethodsProto(LoginScreenInputMethodsProto&& from) noexcept
    : LoginScreenInputMethodsProto() {
    *this = ::std::move(from);
  }

  inline LoginScreenInputMethodsProto& operator=(const LoginScreenInputMethodsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginScreenInputMethodsProto& operator=(LoginScreenInputMethodsProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LoginScreenInputMethodsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginScreenInputMethodsProto* internal_default_instance() {
    return reinterpret_cast<const LoginScreenInputMethodsProto*>(
               &_LoginScreenInputMethodsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(LoginScreenInputMethodsProto& a, LoginScreenInputMethodsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginScreenInputMethodsProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginScreenInputMethodsProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginScreenInputMethodsProto* New() const final {
    return CreateMaybeMessage<LoginScreenInputMethodsProto>(nullptr);
  }

  LoginScreenInputMethodsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginScreenInputMethodsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LoginScreenInputMethodsProto& from);
  void MergeFrom(const LoginScreenInputMethodsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoginScreenInputMethodsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.LoginScreenInputMethodsProto";
  }
  protected:
  explicit LoginScreenInputMethodsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginScreenInputMethodsFieldNumber = 1,
  };
  // repeated string login_screen_input_methods = 1;
  int login_screen_input_methods_size() const;
  private:
  int _internal_login_screen_input_methods_size() const;
  public:
  void clear_login_screen_input_methods();
  const std::string& login_screen_input_methods(int index) const;
  std::string* mutable_login_screen_input_methods(int index);
  void set_login_screen_input_methods(int index, const std::string& value);
  void set_login_screen_input_methods(int index, std::string&& value);
  void set_login_screen_input_methods(int index, const char* value);
  void set_login_screen_input_methods(int index, const char* value, size_t size);
  std::string* add_login_screen_input_methods();
  void add_login_screen_input_methods(const std::string& value);
  void add_login_screen_input_methods(std::string&& value);
  void add_login_screen_input_methods(const char* value);
  void add_login_screen_input_methods(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& login_screen_input_methods() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_login_screen_input_methods();
  private:
  const std::string& _internal_login_screen_input_methods(int index) const;
  std::string* _internal_add_login_screen_input_methods();
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.LoginScreenInputMethodsProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> login_screen_input_methods_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class DeviceWallpaperImageProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceWallpaperImageProto) */ {
 public:
  inline DeviceWallpaperImageProto() : DeviceWallpaperImageProto(nullptr) {};
  virtual ~DeviceWallpaperImageProto();

  DeviceWallpaperImageProto(const DeviceWallpaperImageProto& from);
  DeviceWallpaperImageProto(DeviceWallpaperImageProto&& from) noexcept
    : DeviceWallpaperImageProto() {
    *this = ::std::move(from);
  }

  inline DeviceWallpaperImageProto& operator=(const DeviceWallpaperImageProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceWallpaperImageProto& operator=(DeviceWallpaperImageProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeviceWallpaperImageProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceWallpaperImageProto* internal_default_instance() {
    return reinterpret_cast<const DeviceWallpaperImageProto*>(
               &_DeviceWallpaperImageProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(DeviceWallpaperImageProto& a, DeviceWallpaperImageProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceWallpaperImageProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceWallpaperImageProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceWallpaperImageProto* New() const final {
    return CreateMaybeMessage<DeviceWallpaperImageProto>(nullptr);
  }

  DeviceWallpaperImageProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceWallpaperImageProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeviceWallpaperImageProto& from);
  void MergeFrom(const DeviceWallpaperImageProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceWallpaperImageProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.DeviceWallpaperImageProto";
  }
  protected:
  explicit DeviceWallpaperImageProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceWallpaperImageFieldNumber = 1,
  };
  // optional string device_wallpaper_image = 1;
  bool has_device_wallpaper_image() const;
  private:
  bool _internal_has_device_wallpaper_image() const;
  public:
  void clear_device_wallpaper_image();
  const std::string& device_wallpaper_image() const;
  void set_device_wallpaper_image(const std::string& value);
  void set_device_wallpaper_image(std::string&& value);
  void set_device_wallpaper_image(const char* value);
  void set_device_wallpaper_image(const char* value, size_t size);
  std::string* mutable_device_wallpaper_image();
  std::string* release_device_wallpaper_image();
  void set_allocated_device_wallpaper_image(std::string* device_wallpaper_image);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_wallpaper_image();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_wallpaper_image(
      std::string* device_wallpaper_image);
  private:
  const std::string& _internal_device_wallpaper_image() const;
  void _internal_set_device_wallpaper_image(const std::string& value);
  std::string* _internal_mutable_device_wallpaper_image();
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.DeviceWallpaperImageProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_wallpaper_image_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class DeviceEcryptfsMigrationStrategyProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceEcryptfsMigrationStrategyProto) */ {
 public:
  inline DeviceEcryptfsMigrationStrategyProto() : DeviceEcryptfsMigrationStrategyProto(nullptr) {};
  virtual ~DeviceEcryptfsMigrationStrategyProto();

  DeviceEcryptfsMigrationStrategyProto(const DeviceEcryptfsMigrationStrategyProto& from);
  DeviceEcryptfsMigrationStrategyProto(DeviceEcryptfsMigrationStrategyProto&& from) noexcept
    : DeviceEcryptfsMigrationStrategyProto() {
    *this = ::std::move(from);
  }

  inline DeviceEcryptfsMigrationStrategyProto& operator=(const DeviceEcryptfsMigrationStrategyProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceEcryptfsMigrationStrategyProto& operator=(DeviceEcryptfsMigrationStrategyProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeviceEcryptfsMigrationStrategyProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceEcryptfsMigrationStrategyProto* internal_default_instance() {
    return reinterpret_cast<const DeviceEcryptfsMigrationStrategyProto*>(
               &_DeviceEcryptfsMigrationStrategyProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(DeviceEcryptfsMigrationStrategyProto& a, DeviceEcryptfsMigrationStrategyProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceEcryptfsMigrationStrategyProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceEcryptfsMigrationStrategyProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceEcryptfsMigrationStrategyProto* New() const final {
    return CreateMaybeMessage<DeviceEcryptfsMigrationStrategyProto>(nullptr);
  }

  DeviceEcryptfsMigrationStrategyProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceEcryptfsMigrationStrategyProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeviceEcryptfsMigrationStrategyProto& from);
  void MergeFrom(const DeviceEcryptfsMigrationStrategyProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceEcryptfsMigrationStrategyProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.DeviceEcryptfsMigrationStrategyProto";
  }
  protected:
  explicit DeviceEcryptfsMigrationStrategyProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DeviceEcryptfsMigrationStrategyProto_MigrationStrategy MigrationStrategy;
  static constexpr MigrationStrategy UNSET =
    DeviceEcryptfsMigrationStrategyProto_MigrationStrategy_UNSET;
  static constexpr MigrationStrategy DISALLOW_ARC =
    DeviceEcryptfsMigrationStrategyProto_MigrationStrategy_DISALLOW_ARC;
  static constexpr MigrationStrategy ALLOW_MIGRATION =
    DeviceEcryptfsMigrationStrategyProto_MigrationStrategy_ALLOW_MIGRATION;
  static inline bool MigrationStrategy_IsValid(int value) {
    return DeviceEcryptfsMigrationStrategyProto_MigrationStrategy_IsValid(value);
  }
  static constexpr MigrationStrategy MigrationStrategy_MIN =
    DeviceEcryptfsMigrationStrategyProto_MigrationStrategy_MigrationStrategy_MIN;
  static constexpr MigrationStrategy MigrationStrategy_MAX =
    DeviceEcryptfsMigrationStrategyProto_MigrationStrategy_MigrationStrategy_MAX;
  static constexpr int MigrationStrategy_ARRAYSIZE =
    DeviceEcryptfsMigrationStrategyProto_MigrationStrategy_MigrationStrategy_ARRAYSIZE;
  template<typename T>
  static inline const std::string& MigrationStrategy_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MigrationStrategy>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MigrationStrategy_Name.");
    return DeviceEcryptfsMigrationStrategyProto_MigrationStrategy_Name(enum_t_value);
  }
  static inline bool MigrationStrategy_Parse(const std::string& name,
      MigrationStrategy* value) {
    return DeviceEcryptfsMigrationStrategyProto_MigrationStrategy_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMigrationStrategyFieldNumber = 1,
  };
  // optional .enterprise_management.DeviceEcryptfsMigrationStrategyProto.MigrationStrategy migration_strategy = 1;
  bool has_migration_strategy() const;
  private:
  bool _internal_has_migration_strategy() const;
  public:
  void clear_migration_strategy();
  ::enterprise_management::DeviceEcryptfsMigrationStrategyProto_MigrationStrategy migration_strategy() const;
  void set_migration_strategy(::enterprise_management::DeviceEcryptfsMigrationStrategyProto_MigrationStrategy value);
  private:
  ::enterprise_management::DeviceEcryptfsMigrationStrategyProto_MigrationStrategy _internal_migration_strategy() const;
  void _internal_set_migration_strategy(::enterprise_management::DeviceEcryptfsMigrationStrategyProto_MigrationStrategy value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.DeviceEcryptfsMigrationStrategyProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int migration_strategy_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class DeviceSecondFactorAuthenticationProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceSecondFactorAuthenticationProto) */ {
 public:
  inline DeviceSecondFactorAuthenticationProto() : DeviceSecondFactorAuthenticationProto(nullptr) {};
  virtual ~DeviceSecondFactorAuthenticationProto();

  DeviceSecondFactorAuthenticationProto(const DeviceSecondFactorAuthenticationProto& from);
  DeviceSecondFactorAuthenticationProto(DeviceSecondFactorAuthenticationProto&& from) noexcept
    : DeviceSecondFactorAuthenticationProto() {
    *this = ::std::move(from);
  }

  inline DeviceSecondFactorAuthenticationProto& operator=(const DeviceSecondFactorAuthenticationProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceSecondFactorAuthenticationProto& operator=(DeviceSecondFactorAuthenticationProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeviceSecondFactorAuthenticationProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceSecondFactorAuthenticationProto* internal_default_instance() {
    return reinterpret_cast<const DeviceSecondFactorAuthenticationProto*>(
               &_DeviceSecondFactorAuthenticationProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(DeviceSecondFactorAuthenticationProto& a, DeviceSecondFactorAuthenticationProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceSecondFactorAuthenticationProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceSecondFactorAuthenticationProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceSecondFactorAuthenticationProto* New() const final {
    return CreateMaybeMessage<DeviceSecondFactorAuthenticationProto>(nullptr);
  }

  DeviceSecondFactorAuthenticationProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceSecondFactorAuthenticationProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeviceSecondFactorAuthenticationProto& from);
  void MergeFrom(const DeviceSecondFactorAuthenticationProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceSecondFactorAuthenticationProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.DeviceSecondFactorAuthenticationProto";
  }
  protected:
  explicit DeviceSecondFactorAuthenticationProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DeviceSecondFactorAuthenticationProto_U2fMode U2fMode;
  static constexpr U2fMode UNSET =
    DeviceSecondFactorAuthenticationProto_U2fMode_UNSET;
  static constexpr U2fMode DISABLED =
    DeviceSecondFactorAuthenticationProto_U2fMode_DISABLED;
  static constexpr U2fMode U2F =
    DeviceSecondFactorAuthenticationProto_U2fMode_U2F;
  static constexpr U2fMode U2F_EXTENDED =
    DeviceSecondFactorAuthenticationProto_U2fMode_U2F_EXTENDED;
  static inline bool U2fMode_IsValid(int value) {
    return DeviceSecondFactorAuthenticationProto_U2fMode_IsValid(value);
  }
  static constexpr U2fMode U2fMode_MIN =
    DeviceSecondFactorAuthenticationProto_U2fMode_U2fMode_MIN;
  static constexpr U2fMode U2fMode_MAX =
    DeviceSecondFactorAuthenticationProto_U2fMode_U2fMode_MAX;
  static constexpr int U2fMode_ARRAYSIZE =
    DeviceSecondFactorAuthenticationProto_U2fMode_U2fMode_ARRAYSIZE;
  template<typename T>
  static inline const std::string& U2fMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, U2fMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function U2fMode_Name.");
    return DeviceSecondFactorAuthenticationProto_U2fMode_Name(enum_t_value);
  }
  static inline bool U2fMode_Parse(const std::string& name,
      U2fMode* value) {
    return DeviceSecondFactorAuthenticationProto_U2fMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 1,
  };
  // optional .enterprise_management.DeviceSecondFactorAuthenticationProto.U2fMode mode = 1;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  ::enterprise_management::DeviceSecondFactorAuthenticationProto_U2fMode mode() const;
  void set_mode(::enterprise_management::DeviceSecondFactorAuthenticationProto_U2fMode value);
  private:
  ::enterprise_management::DeviceSecondFactorAuthenticationProto_U2fMode _internal_mode() const;
  void _internal_set_mode(::enterprise_management::DeviceSecondFactorAuthenticationProto_U2fMode value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.DeviceSecondFactorAuthenticationProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int mode_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class CastReceiverNameProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.CastReceiverNameProto) */ {
 public:
  inline CastReceiverNameProto() : CastReceiverNameProto(nullptr) {};
  virtual ~CastReceiverNameProto();

  CastReceiverNameProto(const CastReceiverNameProto& from);
  CastReceiverNameProto(CastReceiverNameProto&& from) noexcept
    : CastReceiverNameProto() {
    *this = ::std::move(from);
  }

  inline CastReceiverNameProto& operator=(const CastReceiverNameProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CastReceiverNameProto& operator=(CastReceiverNameProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CastReceiverNameProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CastReceiverNameProto* internal_default_instance() {
    return reinterpret_cast<const CastReceiverNameProto*>(
               &_CastReceiverNameProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(CastReceiverNameProto& a, CastReceiverNameProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CastReceiverNameProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CastReceiverNameProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CastReceiverNameProto* New() const final {
    return CreateMaybeMessage<CastReceiverNameProto>(nullptr);
  }

  CastReceiverNameProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CastReceiverNameProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CastReceiverNameProto& from);
  void MergeFrom(const CastReceiverNameProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CastReceiverNameProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.CastReceiverNameProto";
  }
  protected:
  explicit CastReceiverNameProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.CastReceiverNameProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class WeeklyTimeProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.WeeklyTimeProto) */ {
 public:
  inline WeeklyTimeProto() : WeeklyTimeProto(nullptr) {};
  virtual ~WeeklyTimeProto();

  WeeklyTimeProto(const WeeklyTimeProto& from);
  WeeklyTimeProto(WeeklyTimeProto&& from) noexcept
    : WeeklyTimeProto() {
    *this = ::std::move(from);
  }

  inline WeeklyTimeProto& operator=(const WeeklyTimeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline WeeklyTimeProto& operator=(WeeklyTimeProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const WeeklyTimeProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WeeklyTimeProto* internal_default_instance() {
    return reinterpret_cast<const WeeklyTimeProto*>(
               &_WeeklyTimeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(WeeklyTimeProto& a, WeeklyTimeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(WeeklyTimeProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WeeklyTimeProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WeeklyTimeProto* New() const final {
    return CreateMaybeMessage<WeeklyTimeProto>(nullptr);
  }

  WeeklyTimeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WeeklyTimeProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const WeeklyTimeProto& from);
  void MergeFrom(const WeeklyTimeProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WeeklyTimeProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.WeeklyTimeProto";
  }
  protected:
  explicit WeeklyTimeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef WeeklyTimeProto_DayOfWeek DayOfWeek;
  static constexpr DayOfWeek DAY_OF_WEEK_UNSPECIFIED =
    WeeklyTimeProto_DayOfWeek_DAY_OF_WEEK_UNSPECIFIED;
  static constexpr DayOfWeek MONDAY =
    WeeklyTimeProto_DayOfWeek_MONDAY;
  static constexpr DayOfWeek TUESDAY =
    WeeklyTimeProto_DayOfWeek_TUESDAY;
  static constexpr DayOfWeek WEDNESDAY =
    WeeklyTimeProto_DayOfWeek_WEDNESDAY;
  static constexpr DayOfWeek THURSDAY =
    WeeklyTimeProto_DayOfWeek_THURSDAY;
  static constexpr DayOfWeek FRIDAY =
    WeeklyTimeProto_DayOfWeek_FRIDAY;
  static constexpr DayOfWeek SATURDAY =
    WeeklyTimeProto_DayOfWeek_SATURDAY;
  static constexpr DayOfWeek SUNDAY =
    WeeklyTimeProto_DayOfWeek_SUNDAY;
  static inline bool DayOfWeek_IsValid(int value) {
    return WeeklyTimeProto_DayOfWeek_IsValid(value);
  }
  static constexpr DayOfWeek DayOfWeek_MIN =
    WeeklyTimeProto_DayOfWeek_DayOfWeek_MIN;
  static constexpr DayOfWeek DayOfWeek_MAX =
    WeeklyTimeProto_DayOfWeek_DayOfWeek_MAX;
  static constexpr int DayOfWeek_ARRAYSIZE =
    WeeklyTimeProto_DayOfWeek_DayOfWeek_ARRAYSIZE;
  template<typename T>
  static inline const std::string& DayOfWeek_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DayOfWeek>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DayOfWeek_Name.");
    return WeeklyTimeProto_DayOfWeek_Name(enum_t_value);
  }
  static inline bool DayOfWeek_Parse(const std::string& name,
      DayOfWeek* value) {
    return WeeklyTimeProto_DayOfWeek_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDayOfWeekFieldNumber = 1,
    kTimeFieldNumber = 2,
  };
  // optional .enterprise_management.WeeklyTimeProto.DayOfWeek day_of_week = 1;
  bool has_day_of_week() const;
  private:
  bool _internal_has_day_of_week() const;
  public:
  void clear_day_of_week();
  ::enterprise_management::WeeklyTimeProto_DayOfWeek day_of_week() const;
  void set_day_of_week(::enterprise_management::WeeklyTimeProto_DayOfWeek value);
  private:
  ::enterprise_management::WeeklyTimeProto_DayOfWeek _internal_day_of_week() const;
  void _internal_set_day_of_week(::enterprise_management::WeeklyTimeProto_DayOfWeek value);
  public:

  // optional int32 time = 2;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.WeeklyTimeProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int day_of_week_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class WeeklyTimeIntervalProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.WeeklyTimeIntervalProto) */ {
 public:
  inline WeeklyTimeIntervalProto() : WeeklyTimeIntervalProto(nullptr) {};
  virtual ~WeeklyTimeIntervalProto();

  WeeklyTimeIntervalProto(const WeeklyTimeIntervalProto& from);
  WeeklyTimeIntervalProto(WeeklyTimeIntervalProto&& from) noexcept
    : WeeklyTimeIntervalProto() {
    *this = ::std::move(from);
  }

  inline WeeklyTimeIntervalProto& operator=(const WeeklyTimeIntervalProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline WeeklyTimeIntervalProto& operator=(WeeklyTimeIntervalProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const WeeklyTimeIntervalProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WeeklyTimeIntervalProto* internal_default_instance() {
    return reinterpret_cast<const WeeklyTimeIntervalProto*>(
               &_WeeklyTimeIntervalProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(WeeklyTimeIntervalProto& a, WeeklyTimeIntervalProto& b) {
    a.Swap(&b);
  }
  inline void Swap(WeeklyTimeIntervalProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WeeklyTimeIntervalProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WeeklyTimeIntervalProto* New() const final {
    return CreateMaybeMessage<WeeklyTimeIntervalProto>(nullptr);
  }

  WeeklyTimeIntervalProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WeeklyTimeIntervalProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const WeeklyTimeIntervalProto& from);
  void MergeFrom(const WeeklyTimeIntervalProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WeeklyTimeIntervalProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.WeeklyTimeIntervalProto";
  }
  protected:
  explicit WeeklyTimeIntervalProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
  };
  // optional .enterprise_management.WeeklyTimeProto start = 1;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const ::enterprise_management::WeeklyTimeProto& start() const;
  ::enterprise_management::WeeklyTimeProto* release_start();
  ::enterprise_management::WeeklyTimeProto* mutable_start();
  void set_allocated_start(::enterprise_management::WeeklyTimeProto* start);
  private:
  const ::enterprise_management::WeeklyTimeProto& _internal_start() const;
  ::enterprise_management::WeeklyTimeProto* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      ::enterprise_management::WeeklyTimeProto* start);
  ::enterprise_management::WeeklyTimeProto* unsafe_arena_release_start();

  // optional .enterprise_management.WeeklyTimeProto end = 2;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const ::enterprise_management::WeeklyTimeProto& end() const;
  ::enterprise_management::WeeklyTimeProto* release_end();
  ::enterprise_management::WeeklyTimeProto* mutable_end();
  void set_allocated_end(::enterprise_management::WeeklyTimeProto* end);
  private:
  const ::enterprise_management::WeeklyTimeProto& _internal_end() const;
  ::enterprise_management::WeeklyTimeProto* _internal_mutable_end();
  public:
  void unsafe_arena_set_allocated_end(
      ::enterprise_management::WeeklyTimeProto* end);
  ::enterprise_management::WeeklyTimeProto* unsafe_arena_release_end();

  // @@protoc_insertion_point(class_scope:enterprise_management.WeeklyTimeIntervalProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::enterprise_management::WeeklyTimeProto* start_;
  ::enterprise_management::WeeklyTimeProto* end_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class DeviceOffHoursProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceOffHoursProto) */ {
 public:
  inline DeviceOffHoursProto() : DeviceOffHoursProto(nullptr) {};
  virtual ~DeviceOffHoursProto();

  DeviceOffHoursProto(const DeviceOffHoursProto& from);
  DeviceOffHoursProto(DeviceOffHoursProto&& from) noexcept
    : DeviceOffHoursProto() {
    *this = ::std::move(from);
  }

  inline DeviceOffHoursProto& operator=(const DeviceOffHoursProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceOffHoursProto& operator=(DeviceOffHoursProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeviceOffHoursProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceOffHoursProto* internal_default_instance() {
    return reinterpret_cast<const DeviceOffHoursProto*>(
               &_DeviceOffHoursProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(DeviceOffHoursProto& a, DeviceOffHoursProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceOffHoursProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceOffHoursProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceOffHoursProto* New() const final {
    return CreateMaybeMessage<DeviceOffHoursProto>(nullptr);
  }

  DeviceOffHoursProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceOffHoursProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeviceOffHoursProto& from);
  void MergeFrom(const DeviceOffHoursProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceOffHoursProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.DeviceOffHoursProto";
  }
  protected:
  explicit DeviceOffHoursProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntervalsFieldNumber = 1,
    kIgnoredPolicyProtoTagsFieldNumber = 3,
    kTimezoneFieldNumber = 2,
  };
  // repeated .enterprise_management.WeeklyTimeIntervalProto intervals = 1;
  int intervals_size() const;
  private:
  int _internal_intervals_size() const;
  public:
  void clear_intervals();
  ::enterprise_management::WeeklyTimeIntervalProto* mutable_intervals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::enterprise_management::WeeklyTimeIntervalProto >*
      mutable_intervals();
  private:
  const ::enterprise_management::WeeklyTimeIntervalProto& _internal_intervals(int index) const;
  ::enterprise_management::WeeklyTimeIntervalProto* _internal_add_intervals();
  public:
  const ::enterprise_management::WeeklyTimeIntervalProto& intervals(int index) const;
  ::enterprise_management::WeeklyTimeIntervalProto* add_intervals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::enterprise_management::WeeklyTimeIntervalProto >&
      intervals() const;

  // repeated int32 ignored_policy_proto_tags = 3;
  int ignored_policy_proto_tags_size() const;
  private:
  int _internal_ignored_policy_proto_tags_size() const;
  public:
  void clear_ignored_policy_proto_tags();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ignored_policy_proto_tags(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_ignored_policy_proto_tags() const;
  void _internal_add_ignored_policy_proto_tags(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_ignored_policy_proto_tags();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 ignored_policy_proto_tags(int index) const;
  void set_ignored_policy_proto_tags(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_ignored_policy_proto_tags(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      ignored_policy_proto_tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_ignored_policy_proto_tags();

  // optional string timezone = 2;
  bool has_timezone() const;
  private:
  bool _internal_has_timezone() const;
  public:
  void clear_timezone();
  const std::string& timezone() const;
  void set_timezone(const std::string& value);
  void set_timezone(std::string&& value);
  void set_timezone(const char* value);
  void set_timezone(const char* value, size_t size);
  std::string* mutable_timezone();
  std::string* release_timezone();
  void set_allocated_timezone(std::string* timezone);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_timezone();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_timezone(
      std::string* timezone);
  private:
  const std::string& _internal_timezone() const;
  void _internal_set_timezone(const std::string& value);
  std::string* _internal_mutable_timezone();
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.DeviceOffHoursProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::enterprise_management::WeeklyTimeIntervalProto > intervals_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > ignored_policy_proto_tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timezone_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class DeviceNativePrintersProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceNativePrintersProto) */ {
 public:
  inline DeviceNativePrintersProto() : DeviceNativePrintersProto(nullptr) {};
  virtual ~DeviceNativePrintersProto();

  DeviceNativePrintersProto(const DeviceNativePrintersProto& from);
  DeviceNativePrintersProto(DeviceNativePrintersProto&& from) noexcept
    : DeviceNativePrintersProto() {
    *this = ::std::move(from);
  }

  inline DeviceNativePrintersProto& operator=(const DeviceNativePrintersProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceNativePrintersProto& operator=(DeviceNativePrintersProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeviceNativePrintersProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceNativePrintersProto* internal_default_instance() {
    return reinterpret_cast<const DeviceNativePrintersProto*>(
               &_DeviceNativePrintersProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(DeviceNativePrintersProto& a, DeviceNativePrintersProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceNativePrintersProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceNativePrintersProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceNativePrintersProto* New() const final {
    return CreateMaybeMessage<DeviceNativePrintersProto>(nullptr);
  }

  DeviceNativePrintersProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceNativePrintersProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeviceNativePrintersProto& from);
  void MergeFrom(const DeviceNativePrintersProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceNativePrintersProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.DeviceNativePrintersProto";
  }
  protected:
  explicit DeviceNativePrintersProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExternalPolicyFieldNumber = 1,
  };
  // optional string external_policy = 1;
  bool has_external_policy() const;
  private:
  bool _internal_has_external_policy() const;
  public:
  void clear_external_policy();
  const std::string& external_policy() const;
  void set_external_policy(const std::string& value);
  void set_external_policy(std::string&& value);
  void set_external_policy(const char* value);
  void set_external_policy(const char* value, size_t size);
  std::string* mutable_external_policy();
  std::string* release_external_policy();
  void set_allocated_external_policy(std::string* external_policy);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_external_policy();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_external_policy(
      std::string* external_policy);
  private:
  const std::string& _internal_external_policy() const;
  void _internal_set_external_policy(const std::string& value);
  std::string* _internal_mutable_external_policy();
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.DeviceNativePrintersProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr external_policy_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class DeviceNativePrintersAccessModeProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceNativePrintersAccessModeProto) */ {
 public:
  inline DeviceNativePrintersAccessModeProto() : DeviceNativePrintersAccessModeProto(nullptr) {};
  virtual ~DeviceNativePrintersAccessModeProto();

  DeviceNativePrintersAccessModeProto(const DeviceNativePrintersAccessModeProto& from);
  DeviceNativePrintersAccessModeProto(DeviceNativePrintersAccessModeProto&& from) noexcept
    : DeviceNativePrintersAccessModeProto() {
    *this = ::std::move(from);
  }

  inline DeviceNativePrintersAccessModeProto& operator=(const DeviceNativePrintersAccessModeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceNativePrintersAccessModeProto& operator=(DeviceNativePrintersAccessModeProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeviceNativePrintersAccessModeProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceNativePrintersAccessModeProto* internal_default_instance() {
    return reinterpret_cast<const DeviceNativePrintersAccessModeProto*>(
               &_DeviceNativePrintersAccessModeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(DeviceNativePrintersAccessModeProto& a, DeviceNativePrintersAccessModeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceNativePrintersAccessModeProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceNativePrintersAccessModeProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceNativePrintersAccessModeProto* New() const final {
    return CreateMaybeMessage<DeviceNativePrintersAccessModeProto>(nullptr);
  }

  DeviceNativePrintersAccessModeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceNativePrintersAccessModeProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeviceNativePrintersAccessModeProto& from);
  void MergeFrom(const DeviceNativePrintersAccessModeProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceNativePrintersAccessModeProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.DeviceNativePrintersAccessModeProto";
  }
  protected:
  explicit DeviceNativePrintersAccessModeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DeviceNativePrintersAccessModeProto_AccessMode AccessMode;
  static constexpr AccessMode ACCESS_MODE_BLACKLIST =
    DeviceNativePrintersAccessModeProto_AccessMode_ACCESS_MODE_BLACKLIST;
  static constexpr AccessMode ACCESS_MODE_WHITELIST =
    DeviceNativePrintersAccessModeProto_AccessMode_ACCESS_MODE_WHITELIST;
  static constexpr AccessMode ACCESS_MODE_ALL =
    DeviceNativePrintersAccessModeProto_AccessMode_ACCESS_MODE_ALL;
  static inline bool AccessMode_IsValid(int value) {
    return DeviceNativePrintersAccessModeProto_AccessMode_IsValid(value);
  }
  static constexpr AccessMode AccessMode_MIN =
    DeviceNativePrintersAccessModeProto_AccessMode_AccessMode_MIN;
  static constexpr AccessMode AccessMode_MAX =
    DeviceNativePrintersAccessModeProto_AccessMode_AccessMode_MAX;
  static constexpr int AccessMode_ARRAYSIZE =
    DeviceNativePrintersAccessModeProto_AccessMode_AccessMode_ARRAYSIZE;
  template<typename T>
  static inline const std::string& AccessMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AccessMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AccessMode_Name.");
    return DeviceNativePrintersAccessModeProto_AccessMode_Name(enum_t_value);
  }
  static inline bool AccessMode_Parse(const std::string& name,
      AccessMode* value) {
    return DeviceNativePrintersAccessModeProto_AccessMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAccessModeFieldNumber = 1,
  };
  // optional .enterprise_management.DeviceNativePrintersAccessModeProto.AccessMode access_mode = 1;
  bool has_access_mode() const;
  private:
  bool _internal_has_access_mode() const;
  public:
  void clear_access_mode();
  ::enterprise_management::DeviceNativePrintersAccessModeProto_AccessMode access_mode() const;
  void set_access_mode(::enterprise_management::DeviceNativePrintersAccessModeProto_AccessMode value);
  private:
  ::enterprise_management::DeviceNativePrintersAccessModeProto_AccessMode _internal_access_mode() const;
  void _internal_set_access_mode(::enterprise_management::DeviceNativePrintersAccessModeProto_AccessMode value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.DeviceNativePrintersAccessModeProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int access_mode_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class DeviceNativePrintersBlacklistProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceNativePrintersBlacklistProto) */ {
 public:
  inline DeviceNativePrintersBlacklistProto() : DeviceNativePrintersBlacklistProto(nullptr) {};
  virtual ~DeviceNativePrintersBlacklistProto();

  DeviceNativePrintersBlacklistProto(const DeviceNativePrintersBlacklistProto& from);
  DeviceNativePrintersBlacklistProto(DeviceNativePrintersBlacklistProto&& from) noexcept
    : DeviceNativePrintersBlacklistProto() {
    *this = ::std::move(from);
  }

  inline DeviceNativePrintersBlacklistProto& operator=(const DeviceNativePrintersBlacklistProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceNativePrintersBlacklistProto& operator=(DeviceNativePrintersBlacklistProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeviceNativePrintersBlacklistProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceNativePrintersBlacklistProto* internal_default_instance() {
    return reinterpret_cast<const DeviceNativePrintersBlacklistProto*>(
               &_DeviceNativePrintersBlacklistProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(DeviceNativePrintersBlacklistProto& a, DeviceNativePrintersBlacklistProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceNativePrintersBlacklistProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceNativePrintersBlacklistProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceNativePrintersBlacklistProto* New() const final {
    return CreateMaybeMessage<DeviceNativePrintersBlacklistProto>(nullptr);
  }

  DeviceNativePrintersBlacklistProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceNativePrintersBlacklistProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeviceNativePrintersBlacklistProto& from);
  void MergeFrom(const DeviceNativePrintersBlacklistProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceNativePrintersBlacklistProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.DeviceNativePrintersBlacklistProto";
  }
  protected:
  explicit DeviceNativePrintersBlacklistProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlacklistFieldNumber = 1,
  };
  // repeated string blacklist = 1;
  int blacklist_size() const;
  private:
  int _internal_blacklist_size() const;
  public:
  void clear_blacklist();
  const std::string& blacklist(int index) const;
  std::string* mutable_blacklist(int index);
  void set_blacklist(int index, const std::string& value);
  void set_blacklist(int index, std::string&& value);
  void set_blacklist(int index, const char* value);
  void set_blacklist(int index, const char* value, size_t size);
  std::string* add_blacklist();
  void add_blacklist(const std::string& value);
  void add_blacklist(std::string&& value);
  void add_blacklist(const char* value);
  void add_blacklist(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& blacklist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_blacklist();
  private:
  const std::string& _internal_blacklist(int index) const;
  std::string* _internal_add_blacklist();
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.DeviceNativePrintersBlacklistProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> blacklist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class DeviceNativePrintersWhitelistProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceNativePrintersWhitelistProto) */ {
 public:
  inline DeviceNativePrintersWhitelistProto() : DeviceNativePrintersWhitelistProto(nullptr) {};
  virtual ~DeviceNativePrintersWhitelistProto();

  DeviceNativePrintersWhitelistProto(const DeviceNativePrintersWhitelistProto& from);
  DeviceNativePrintersWhitelistProto(DeviceNativePrintersWhitelistProto&& from) noexcept
    : DeviceNativePrintersWhitelistProto() {
    *this = ::std::move(from);
  }

  inline DeviceNativePrintersWhitelistProto& operator=(const DeviceNativePrintersWhitelistProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceNativePrintersWhitelistProto& operator=(DeviceNativePrintersWhitelistProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeviceNativePrintersWhitelistProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceNativePrintersWhitelistProto* internal_default_instance() {
    return reinterpret_cast<const DeviceNativePrintersWhitelistProto*>(
               &_DeviceNativePrintersWhitelistProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(DeviceNativePrintersWhitelistProto& a, DeviceNativePrintersWhitelistProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceNativePrintersWhitelistProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceNativePrintersWhitelistProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceNativePrintersWhitelistProto* New() const final {
    return CreateMaybeMessage<DeviceNativePrintersWhitelistProto>(nullptr);
  }

  DeviceNativePrintersWhitelistProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceNativePrintersWhitelistProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeviceNativePrintersWhitelistProto& from);
  void MergeFrom(const DeviceNativePrintersWhitelistProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceNativePrintersWhitelistProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.DeviceNativePrintersWhitelistProto";
  }
  protected:
  explicit DeviceNativePrintersWhitelistProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWhitelistFieldNumber = 1,
  };
  // repeated string whitelist = 1;
  int whitelist_size() const;
  private:
  int _internal_whitelist_size() const;
  public:
  void clear_whitelist();
  const std::string& whitelist(int index) const;
  std::string* mutable_whitelist(int index);
  void set_whitelist(int index, const std::string& value);
  void set_whitelist(int index, std::string&& value);
  void set_whitelist(int index, const char* value);
  void set_whitelist(int index, const char* value, size_t size);
  std::string* add_whitelist();
  void add_whitelist(const std::string& value);
  void add_whitelist(std::string&& value);
  void add_whitelist(const char* value);
  void add_whitelist(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& whitelist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_whitelist();
  private:
  const std::string& _internal_whitelist(int index) const;
  std::string* _internal_add_whitelist();
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.DeviceNativePrintersWhitelistProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> whitelist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class TPMFirmwareUpdateSettingsProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.TPMFirmwareUpdateSettingsProto) */ {
 public:
  inline TPMFirmwareUpdateSettingsProto() : TPMFirmwareUpdateSettingsProto(nullptr) {};
  virtual ~TPMFirmwareUpdateSettingsProto();

  TPMFirmwareUpdateSettingsProto(const TPMFirmwareUpdateSettingsProto& from);
  TPMFirmwareUpdateSettingsProto(TPMFirmwareUpdateSettingsProto&& from) noexcept
    : TPMFirmwareUpdateSettingsProto() {
    *this = ::std::move(from);
  }

  inline TPMFirmwareUpdateSettingsProto& operator=(const TPMFirmwareUpdateSettingsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TPMFirmwareUpdateSettingsProto& operator=(TPMFirmwareUpdateSettingsProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TPMFirmwareUpdateSettingsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TPMFirmwareUpdateSettingsProto* internal_default_instance() {
    return reinterpret_cast<const TPMFirmwareUpdateSettingsProto*>(
               &_TPMFirmwareUpdateSettingsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(TPMFirmwareUpdateSettingsProto& a, TPMFirmwareUpdateSettingsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TPMFirmwareUpdateSettingsProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TPMFirmwareUpdateSettingsProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TPMFirmwareUpdateSettingsProto* New() const final {
    return CreateMaybeMessage<TPMFirmwareUpdateSettingsProto>(nullptr);
  }

  TPMFirmwareUpdateSettingsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TPMFirmwareUpdateSettingsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TPMFirmwareUpdateSettingsProto& from);
  void MergeFrom(const TPMFirmwareUpdateSettingsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TPMFirmwareUpdateSettingsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.TPMFirmwareUpdateSettingsProto";
  }
  protected:
  explicit TPMFirmwareUpdateSettingsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef TPMFirmwareUpdateSettingsProto_AutoUpdateMode AutoUpdateMode;
  static constexpr AutoUpdateMode AUTO_UPDATE_MODE_UNSPECIFIED =
    TPMFirmwareUpdateSettingsProto_AutoUpdateMode_AUTO_UPDATE_MODE_UNSPECIFIED;
  static constexpr AutoUpdateMode NEVER =
    TPMFirmwareUpdateSettingsProto_AutoUpdateMode_NEVER;
  static constexpr AutoUpdateMode USER_ACKNOWLEDGMENT =
    TPMFirmwareUpdateSettingsProto_AutoUpdateMode_USER_ACKNOWLEDGMENT;
  static constexpr AutoUpdateMode WITHOUT_ACKNOWLEDGMENT =
    TPMFirmwareUpdateSettingsProto_AutoUpdateMode_WITHOUT_ACKNOWLEDGMENT;
  static constexpr AutoUpdateMode ENROLLMENT =
    TPMFirmwareUpdateSettingsProto_AutoUpdateMode_ENROLLMENT;
  static inline bool AutoUpdateMode_IsValid(int value) {
    return TPMFirmwareUpdateSettingsProto_AutoUpdateMode_IsValid(value);
  }
  static constexpr AutoUpdateMode AutoUpdateMode_MIN =
    TPMFirmwareUpdateSettingsProto_AutoUpdateMode_AutoUpdateMode_MIN;
  static constexpr AutoUpdateMode AutoUpdateMode_MAX =
    TPMFirmwareUpdateSettingsProto_AutoUpdateMode_AutoUpdateMode_MAX;
  static constexpr int AutoUpdateMode_ARRAYSIZE =
    TPMFirmwareUpdateSettingsProto_AutoUpdateMode_AutoUpdateMode_ARRAYSIZE;
  template<typename T>
  static inline const std::string& AutoUpdateMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AutoUpdateMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AutoUpdateMode_Name.");
    return TPMFirmwareUpdateSettingsProto_AutoUpdateMode_Name(enum_t_value);
  }
  static inline bool AutoUpdateMode_Parse(const std::string& name,
      AutoUpdateMode* value) {
    return TPMFirmwareUpdateSettingsProto_AutoUpdateMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAllowUserInitiatedPowerwashFieldNumber = 1,
    kAllowUserInitiatedPreserveDeviceStateFieldNumber = 2,
    kAutoUpdateModeFieldNumber = 3,
  };
  // optional bool allow_user_initiated_powerwash = 1;
  bool has_allow_user_initiated_powerwash() const;
  private:
  bool _internal_has_allow_user_initiated_powerwash() const;
  public:
  void clear_allow_user_initiated_powerwash();
  bool allow_user_initiated_powerwash() const;
  void set_allow_user_initiated_powerwash(bool value);
  private:
  bool _internal_allow_user_initiated_powerwash() const;
  void _internal_set_allow_user_initiated_powerwash(bool value);
  public:

  // optional bool allow_user_initiated_preserve_device_state = 2;
  bool has_allow_user_initiated_preserve_device_state() const;
  private:
  bool _internal_has_allow_user_initiated_preserve_device_state() const;
  public:
  void clear_allow_user_initiated_preserve_device_state();
  bool allow_user_initiated_preserve_device_state() const;
  void set_allow_user_initiated_preserve_device_state(bool value);
  private:
  bool _internal_allow_user_initiated_preserve_device_state() const;
  void _internal_set_allow_user_initiated_preserve_device_state(bool value);
  public:

  // optional .enterprise_management.TPMFirmwareUpdateSettingsProto.AutoUpdateMode auto_update_mode = 3 [default = NEVER];
  bool has_auto_update_mode() const;
  private:
  bool _internal_has_auto_update_mode() const;
  public:
  void clear_auto_update_mode();
  ::enterprise_management::TPMFirmwareUpdateSettingsProto_AutoUpdateMode auto_update_mode() const;
  void set_auto_update_mode(::enterprise_management::TPMFirmwareUpdateSettingsProto_AutoUpdateMode value);
  private:
  ::enterprise_management::TPMFirmwareUpdateSettingsProto_AutoUpdateMode _internal_auto_update_mode() const;
  void _internal_set_auto_update_mode(::enterprise_management::TPMFirmwareUpdateSettingsProto_AutoUpdateMode value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.TPMFirmwareUpdateSettingsProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool allow_user_initiated_powerwash_;
  bool allow_user_initiated_preserve_device_state_;
  int auto_update_mode_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class OBSOLETE_MinimumRequiredVersionProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.OBSOLETE_MinimumRequiredVersionProto) */ {
 public:
  inline OBSOLETE_MinimumRequiredVersionProto() : OBSOLETE_MinimumRequiredVersionProto(nullptr) {};
  virtual ~OBSOLETE_MinimumRequiredVersionProto();

  OBSOLETE_MinimumRequiredVersionProto(const OBSOLETE_MinimumRequiredVersionProto& from);
  OBSOLETE_MinimumRequiredVersionProto(OBSOLETE_MinimumRequiredVersionProto&& from) noexcept
    : OBSOLETE_MinimumRequiredVersionProto() {
    *this = ::std::move(from);
  }

  inline OBSOLETE_MinimumRequiredVersionProto& operator=(const OBSOLETE_MinimumRequiredVersionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline OBSOLETE_MinimumRequiredVersionProto& operator=(OBSOLETE_MinimumRequiredVersionProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const OBSOLETE_MinimumRequiredVersionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OBSOLETE_MinimumRequiredVersionProto* internal_default_instance() {
    return reinterpret_cast<const OBSOLETE_MinimumRequiredVersionProto*>(
               &_OBSOLETE_MinimumRequiredVersionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(OBSOLETE_MinimumRequiredVersionProto& a, OBSOLETE_MinimumRequiredVersionProto& b) {
    a.Swap(&b);
  }
  inline void Swap(OBSOLETE_MinimumRequiredVersionProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OBSOLETE_MinimumRequiredVersionProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OBSOLETE_MinimumRequiredVersionProto* New() const final {
    return CreateMaybeMessage<OBSOLETE_MinimumRequiredVersionProto>(nullptr);
  }

  OBSOLETE_MinimumRequiredVersionProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OBSOLETE_MinimumRequiredVersionProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const OBSOLETE_MinimumRequiredVersionProto& from);
  void MergeFrom(const OBSOLETE_MinimumRequiredVersionProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OBSOLETE_MinimumRequiredVersionProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.OBSOLETE_MinimumRequiredVersionProto";
  }
  protected:
  explicit OBSOLETE_MinimumRequiredVersionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOBSOLETEChromeVersionFieldNumber = 1,
  };
  // optional string OBSOLETE_chrome_version = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_obsolete_chrome_version() const;
  private:
  bool _internal_has_obsolete_chrome_version() const;
  public:
  PROTOBUF_DEPRECATED void clear_obsolete_chrome_version();
  PROTOBUF_DEPRECATED const std::string& obsolete_chrome_version() const;
  PROTOBUF_DEPRECATED void set_obsolete_chrome_version(const std::string& value);
  PROTOBUF_DEPRECATED void set_obsolete_chrome_version(std::string&& value);
  PROTOBUF_DEPRECATED void set_obsolete_chrome_version(const char* value);
  PROTOBUF_DEPRECATED void set_obsolete_chrome_version(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_obsolete_chrome_version();
  PROTOBUF_DEPRECATED std::string* release_obsolete_chrome_version();
  PROTOBUF_DEPRECATED void set_allocated_obsolete_chrome_version(std::string* obsolete_chrome_version);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_obsolete_chrome_version();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_obsolete_chrome_version(
      std::string* obsolete_chrome_version);
  private:
  const std::string& _internal_obsolete_chrome_version() const;
  void _internal_set_obsolete_chrome_version(const std::string& value);
  std::string* _internal_mutable_obsolete_chrome_version();
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.OBSOLETE_MinimumRequiredVersionProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obsolete_chrome_version_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class DeviceLoginScreenAutoSelectCertificateForUrls PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceLoginScreenAutoSelectCertificateForUrls) */ {
 public:
  inline DeviceLoginScreenAutoSelectCertificateForUrls() : DeviceLoginScreenAutoSelectCertificateForUrls(nullptr) {};
  virtual ~DeviceLoginScreenAutoSelectCertificateForUrls();

  DeviceLoginScreenAutoSelectCertificateForUrls(const DeviceLoginScreenAutoSelectCertificateForUrls& from);
  DeviceLoginScreenAutoSelectCertificateForUrls(DeviceLoginScreenAutoSelectCertificateForUrls&& from) noexcept
    : DeviceLoginScreenAutoSelectCertificateForUrls() {
    *this = ::std::move(from);
  }

  inline DeviceLoginScreenAutoSelectCertificateForUrls& operator=(const DeviceLoginScreenAutoSelectCertificateForUrls& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceLoginScreenAutoSelectCertificateForUrls& operator=(DeviceLoginScreenAutoSelectCertificateForUrls&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeviceLoginScreenAutoSelectCertificateForUrls& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceLoginScreenAutoSelectCertificateForUrls* internal_default_instance() {
    return reinterpret_cast<const DeviceLoginScreenAutoSelectCertificateForUrls*>(
               &_DeviceLoginScreenAutoSelectCertificateForUrls_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(DeviceLoginScreenAutoSelectCertificateForUrls& a, DeviceLoginScreenAutoSelectCertificateForUrls& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceLoginScreenAutoSelectCertificateForUrls* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceLoginScreenAutoSelectCertificateForUrls* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceLoginScreenAutoSelectCertificateForUrls* New() const final {
    return CreateMaybeMessage<DeviceLoginScreenAutoSelectCertificateForUrls>(nullptr);
  }

  DeviceLoginScreenAutoSelectCertificateForUrls* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceLoginScreenAutoSelectCertificateForUrls>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeviceLoginScreenAutoSelectCertificateForUrls& from);
  void MergeFrom(const DeviceLoginScreenAutoSelectCertificateForUrls& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceLoginScreenAutoSelectCertificateForUrls* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.DeviceLoginScreenAutoSelectCertificateForUrls";
  }
  protected:
  explicit DeviceLoginScreenAutoSelectCertificateForUrls(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginScreenAutoSelectCertificateRulesFieldNumber = 1,
  };
  // repeated string login_screen_auto_select_certificate_rules = 1;
  int login_screen_auto_select_certificate_rules_size() const;
  private:
  int _internal_login_screen_auto_select_certificate_rules_size() const;
  public:
  void clear_login_screen_auto_select_certificate_rules();
  const std::string& login_screen_auto_select_certificate_rules(int index) const;
  std::string* mutable_login_screen_auto_select_certificate_rules(int index);
  void set_login_screen_auto_select_certificate_rules(int index, const std::string& value);
  void set_login_screen_auto_select_certificate_rules(int index, std::string&& value);
  void set_login_screen_auto_select_certificate_rules(int index, const char* value);
  void set_login_screen_auto_select_certificate_rules(int index, const char* value, size_t size);
  std::string* add_login_screen_auto_select_certificate_rules();
  void add_login_screen_auto_select_certificate_rules(const std::string& value);
  void add_login_screen_auto_select_certificate_rules(std::string&& value);
  void add_login_screen_auto_select_certificate_rules(const char* value);
  void add_login_screen_auto_select_certificate_rules(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& login_screen_auto_select_certificate_rules() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_login_screen_auto_select_certificate_rules();
  private:
  const std::string& _internal_login_screen_auto_select_certificate_rules(int index) const;
  std::string* _internal_add_login_screen_auto_select_certificate_rules();
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.DeviceLoginScreenAutoSelectCertificateForUrls)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> login_screen_auto_select_certificate_rules_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class UnaffiliatedArcAllowedProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.UnaffiliatedArcAllowedProto) */ {
 public:
  inline UnaffiliatedArcAllowedProto() : UnaffiliatedArcAllowedProto(nullptr) {};
  virtual ~UnaffiliatedArcAllowedProto();

  UnaffiliatedArcAllowedProto(const UnaffiliatedArcAllowedProto& from);
  UnaffiliatedArcAllowedProto(UnaffiliatedArcAllowedProto&& from) noexcept
    : UnaffiliatedArcAllowedProto() {
    *this = ::std::move(from);
  }

  inline UnaffiliatedArcAllowedProto& operator=(const UnaffiliatedArcAllowedProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnaffiliatedArcAllowedProto& operator=(UnaffiliatedArcAllowedProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const UnaffiliatedArcAllowedProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnaffiliatedArcAllowedProto* internal_default_instance() {
    return reinterpret_cast<const UnaffiliatedArcAllowedProto*>(
               &_UnaffiliatedArcAllowedProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(UnaffiliatedArcAllowedProto& a, UnaffiliatedArcAllowedProto& b) {
    a.Swap(&b);
  }
  inline void Swap(UnaffiliatedArcAllowedProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnaffiliatedArcAllowedProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnaffiliatedArcAllowedProto* New() const final {
    return CreateMaybeMessage<UnaffiliatedArcAllowedProto>(nullptr);
  }

  UnaffiliatedArcAllowedProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnaffiliatedArcAllowedProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UnaffiliatedArcAllowedProto& from);
  void MergeFrom(const UnaffiliatedArcAllowedProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UnaffiliatedArcAllowedProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.UnaffiliatedArcAllowedProto";
  }
  protected:
  explicit UnaffiliatedArcAllowedProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnaffiliatedArcAllowedFieldNumber = 1,
  };
  // optional bool unaffiliated_arc_allowed = 1;
  bool has_unaffiliated_arc_allowed() const;
  private:
  bool _internal_has_unaffiliated_arc_allowed() const;
  public:
  void clear_unaffiliated_arc_allowed();
  bool unaffiliated_arc_allowed() const;
  void set_unaffiliated_arc_allowed(bool value);
  private:
  bool _internal_unaffiliated_arc_allowed() const;
  void _internal_set_unaffiliated_arc_allowed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.UnaffiliatedArcAllowedProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool unaffiliated_arc_allowed_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class DeviceKerberosEncryptionTypesProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceKerberosEncryptionTypesProto) */ {
 public:
  inline DeviceKerberosEncryptionTypesProto() : DeviceKerberosEncryptionTypesProto(nullptr) {};
  virtual ~DeviceKerberosEncryptionTypesProto();

  DeviceKerberosEncryptionTypesProto(const DeviceKerberosEncryptionTypesProto& from);
  DeviceKerberosEncryptionTypesProto(DeviceKerberosEncryptionTypesProto&& from) noexcept
    : DeviceKerberosEncryptionTypesProto() {
    *this = ::std::move(from);
  }

  inline DeviceKerberosEncryptionTypesProto& operator=(const DeviceKerberosEncryptionTypesProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceKerberosEncryptionTypesProto& operator=(DeviceKerberosEncryptionTypesProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeviceKerberosEncryptionTypesProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceKerberosEncryptionTypesProto* internal_default_instance() {
    return reinterpret_cast<const DeviceKerberosEncryptionTypesProto*>(
               &_DeviceKerberosEncryptionTypesProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(DeviceKerberosEncryptionTypesProto& a, DeviceKerberosEncryptionTypesProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceKerberosEncryptionTypesProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceKerberosEncryptionTypesProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceKerberosEncryptionTypesProto* New() const final {
    return CreateMaybeMessage<DeviceKerberosEncryptionTypesProto>(nullptr);
  }

  DeviceKerberosEncryptionTypesProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceKerberosEncryptionTypesProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeviceKerberosEncryptionTypesProto& from);
  void MergeFrom(const DeviceKerberosEncryptionTypesProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceKerberosEncryptionTypesProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.DeviceKerberosEncryptionTypesProto";
  }
  protected:
  explicit DeviceKerberosEncryptionTypesProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DeviceKerberosEncryptionTypesProto_Types Types;
  static constexpr Types ENC_TYPES_ALL =
    DeviceKerberosEncryptionTypesProto_Types_ENC_TYPES_ALL;
  static constexpr Types ENC_TYPES_STRONG =
    DeviceKerberosEncryptionTypesProto_Types_ENC_TYPES_STRONG;
  static constexpr Types ENC_TYPES_LEGACY =
    DeviceKerberosEncryptionTypesProto_Types_ENC_TYPES_LEGACY;
  static inline bool Types_IsValid(int value) {
    return DeviceKerberosEncryptionTypesProto_Types_IsValid(value);
  }
  static constexpr Types Types_MIN =
    DeviceKerberosEncryptionTypesProto_Types_Types_MIN;
  static constexpr Types Types_MAX =
    DeviceKerberosEncryptionTypesProto_Types_Types_MAX;
  static constexpr int Types_ARRAYSIZE =
    DeviceKerberosEncryptionTypesProto_Types_Types_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Types_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Types>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Types_Name.");
    return DeviceKerberosEncryptionTypesProto_Types_Name(enum_t_value);
  }
  static inline bool Types_Parse(const std::string& name,
      Types* value) {
    return DeviceKerberosEncryptionTypesProto_Types_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypesFieldNumber = 1,
  };
  // optional .enterprise_management.DeviceKerberosEncryptionTypesProto.Types types = 1 [default = ENC_TYPES_STRONG];
  bool has_types() const;
  private:
  bool _internal_has_types() const;
  public:
  void clear_types();
  ::enterprise_management::DeviceKerberosEncryptionTypesProto_Types types() const;
  void set_types(::enterprise_management::DeviceKerberosEncryptionTypesProto_Types value);
  private:
  ::enterprise_management::DeviceKerberosEncryptionTypesProto_Types _internal_types() const;
  void _internal_set_types(::enterprise_management::DeviceKerberosEncryptionTypesProto_Types value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.DeviceKerberosEncryptionTypesProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int types_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class DeviceUserPolicyLoopbackProcessingModeProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceUserPolicyLoopbackProcessingModeProto) */ {
 public:
  inline DeviceUserPolicyLoopbackProcessingModeProto() : DeviceUserPolicyLoopbackProcessingModeProto(nullptr) {};
  virtual ~DeviceUserPolicyLoopbackProcessingModeProto();

  DeviceUserPolicyLoopbackProcessingModeProto(const DeviceUserPolicyLoopbackProcessingModeProto& from);
  DeviceUserPolicyLoopbackProcessingModeProto(DeviceUserPolicyLoopbackProcessingModeProto&& from) noexcept
    : DeviceUserPolicyLoopbackProcessingModeProto() {
    *this = ::std::move(from);
  }

  inline DeviceUserPolicyLoopbackProcessingModeProto& operator=(const DeviceUserPolicyLoopbackProcessingModeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceUserPolicyLoopbackProcessingModeProto& operator=(DeviceUserPolicyLoopbackProcessingModeProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeviceUserPolicyLoopbackProcessingModeProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceUserPolicyLoopbackProcessingModeProto* internal_default_instance() {
    return reinterpret_cast<const DeviceUserPolicyLoopbackProcessingModeProto*>(
               &_DeviceUserPolicyLoopbackProcessingModeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(DeviceUserPolicyLoopbackProcessingModeProto& a, DeviceUserPolicyLoopbackProcessingModeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceUserPolicyLoopbackProcessingModeProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceUserPolicyLoopbackProcessingModeProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceUserPolicyLoopbackProcessingModeProto* New() const final {
    return CreateMaybeMessage<DeviceUserPolicyLoopbackProcessingModeProto>(nullptr);
  }

  DeviceUserPolicyLoopbackProcessingModeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceUserPolicyLoopbackProcessingModeProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeviceUserPolicyLoopbackProcessingModeProto& from);
  void MergeFrom(const DeviceUserPolicyLoopbackProcessingModeProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceUserPolicyLoopbackProcessingModeProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.DeviceUserPolicyLoopbackProcessingModeProto";
  }
  protected:
  explicit DeviceUserPolicyLoopbackProcessingModeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DeviceUserPolicyLoopbackProcessingModeProto_Mode Mode;
  static constexpr Mode USER_POLICY_MODE_DEFAULT =
    DeviceUserPolicyLoopbackProcessingModeProto_Mode_USER_POLICY_MODE_DEFAULT;
  static constexpr Mode USER_POLICY_MODE_MERGE =
    DeviceUserPolicyLoopbackProcessingModeProto_Mode_USER_POLICY_MODE_MERGE;
  static constexpr Mode USER_POLICY_MODE_REPLACE =
    DeviceUserPolicyLoopbackProcessingModeProto_Mode_USER_POLICY_MODE_REPLACE;
  static inline bool Mode_IsValid(int value) {
    return DeviceUserPolicyLoopbackProcessingModeProto_Mode_IsValid(value);
  }
  static constexpr Mode Mode_MIN =
    DeviceUserPolicyLoopbackProcessingModeProto_Mode_Mode_MIN;
  static constexpr Mode Mode_MAX =
    DeviceUserPolicyLoopbackProcessingModeProto_Mode_Mode_MAX;
  static constexpr int Mode_ARRAYSIZE =
    DeviceUserPolicyLoopbackProcessingModeProto_Mode_Mode_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Mode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Mode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Mode_Name.");
    return DeviceUserPolicyLoopbackProcessingModeProto_Mode_Name(enum_t_value);
  }
  static inline bool Mode_Parse(const std::string& name,
      Mode* value) {
    return DeviceUserPolicyLoopbackProcessingModeProto_Mode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 1,
  };
  // optional .enterprise_management.DeviceUserPolicyLoopbackProcessingModeProto.Mode mode = 1 [default = USER_POLICY_MODE_DEFAULT];
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  ::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto_Mode mode() const;
  void set_mode(::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto_Mode value);
  private:
  ::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto_Mode _internal_mode() const;
  void _internal_set_mode(::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto_Mode value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.DeviceUserPolicyLoopbackProcessingModeProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int mode_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class DeviceLoginScreenIsolateOriginsProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceLoginScreenIsolateOriginsProto) */ {
 public:
  inline DeviceLoginScreenIsolateOriginsProto() : DeviceLoginScreenIsolateOriginsProto(nullptr) {};
  virtual ~DeviceLoginScreenIsolateOriginsProto();

  DeviceLoginScreenIsolateOriginsProto(const DeviceLoginScreenIsolateOriginsProto& from);
  DeviceLoginScreenIsolateOriginsProto(DeviceLoginScreenIsolateOriginsProto&& from) noexcept
    : DeviceLoginScreenIsolateOriginsProto() {
    *this = ::std::move(from);
  }

  inline DeviceLoginScreenIsolateOriginsProto& operator=(const DeviceLoginScreenIsolateOriginsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceLoginScreenIsolateOriginsProto& operator=(DeviceLoginScreenIsolateOriginsProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeviceLoginScreenIsolateOriginsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceLoginScreenIsolateOriginsProto* internal_default_instance() {
    return reinterpret_cast<const DeviceLoginScreenIsolateOriginsProto*>(
               &_DeviceLoginScreenIsolateOriginsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(DeviceLoginScreenIsolateOriginsProto& a, DeviceLoginScreenIsolateOriginsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceLoginScreenIsolateOriginsProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceLoginScreenIsolateOriginsProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceLoginScreenIsolateOriginsProto* New() const final {
    return CreateMaybeMessage<DeviceLoginScreenIsolateOriginsProto>(nullptr);
  }

  DeviceLoginScreenIsolateOriginsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceLoginScreenIsolateOriginsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeviceLoginScreenIsolateOriginsProto& from);
  void MergeFrom(const DeviceLoginScreenIsolateOriginsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceLoginScreenIsolateOriginsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.DeviceLoginScreenIsolateOriginsProto";
  }
  protected:
  explicit DeviceLoginScreenIsolateOriginsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsolateOriginsFieldNumber = 1,
  };
  // optional string isolate_origins = 1;
  bool has_isolate_origins() const;
  private:
  bool _internal_has_isolate_origins() const;
  public:
  void clear_isolate_origins();
  const std::string& isolate_origins() const;
  void set_isolate_origins(const std::string& value);
  void set_isolate_origins(std::string&& value);
  void set_isolate_origins(const char* value);
  void set_isolate_origins(const char* value, size_t size);
  std::string* mutable_isolate_origins();
  std::string* release_isolate_origins();
  void set_allocated_isolate_origins(std::string* isolate_origins);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_isolate_origins();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_isolate_origins(
      std::string* isolate_origins);
  private:
  const std::string& _internal_isolate_origins() const;
  void _internal_set_isolate_origins(const std::string& value);
  std::string* _internal_mutable_isolate_origins();
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.DeviceLoginScreenIsolateOriginsProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr isolate_origins_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class DeviceLoginScreenSitePerProcessProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceLoginScreenSitePerProcessProto) */ {
 public:
  inline DeviceLoginScreenSitePerProcessProto() : DeviceLoginScreenSitePerProcessProto(nullptr) {};
  virtual ~DeviceLoginScreenSitePerProcessProto();

  DeviceLoginScreenSitePerProcessProto(const DeviceLoginScreenSitePerProcessProto& from);
  DeviceLoginScreenSitePerProcessProto(DeviceLoginScreenSitePerProcessProto&& from) noexcept
    : DeviceLoginScreenSitePerProcessProto() {
    *this = ::std::move(from);
  }

  inline DeviceLoginScreenSitePerProcessProto& operator=(const DeviceLoginScreenSitePerProcessProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceLoginScreenSitePerProcessProto& operator=(DeviceLoginScreenSitePerProcessProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeviceLoginScreenSitePerProcessProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceLoginScreenSitePerProcessProto* internal_default_instance() {
    return reinterpret_cast<const DeviceLoginScreenSitePerProcessProto*>(
               &_DeviceLoginScreenSitePerProcessProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(DeviceLoginScreenSitePerProcessProto& a, DeviceLoginScreenSitePerProcessProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceLoginScreenSitePerProcessProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceLoginScreenSitePerProcessProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceLoginScreenSitePerProcessProto* New() const final {
    return CreateMaybeMessage<DeviceLoginScreenSitePerProcessProto>(nullptr);
  }

  DeviceLoginScreenSitePerProcessProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceLoginScreenSitePerProcessProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeviceLoginScreenSitePerProcessProto& from);
  void MergeFrom(const DeviceLoginScreenSitePerProcessProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceLoginScreenSitePerProcessProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.DeviceLoginScreenSitePerProcessProto";
  }
  protected:
  explicit DeviceLoginScreenSitePerProcessProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSitePerProcessFieldNumber = 1,
  };
  // optional bool site_per_process = 1;
  bool has_site_per_process() const;
  private:
  bool _internal_has_site_per_process() const;
  public:
  void clear_site_per_process();
  bool site_per_process() const;
  void set_site_per_process(bool value);
  private:
  bool _internal_site_per_process() const;
  void _internal_set_site_per_process(bool value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.DeviceLoginScreenSitePerProcessProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool site_per_process_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class VirtualMachinesAllowedProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.VirtualMachinesAllowedProto) */ {
 public:
  inline VirtualMachinesAllowedProto() : VirtualMachinesAllowedProto(nullptr) {};
  virtual ~VirtualMachinesAllowedProto();

  VirtualMachinesAllowedProto(const VirtualMachinesAllowedProto& from);
  VirtualMachinesAllowedProto(VirtualMachinesAllowedProto&& from) noexcept
    : VirtualMachinesAllowedProto() {
    *this = ::std::move(from);
  }

  inline VirtualMachinesAllowedProto& operator=(const VirtualMachinesAllowedProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtualMachinesAllowedProto& operator=(VirtualMachinesAllowedProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const VirtualMachinesAllowedProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VirtualMachinesAllowedProto* internal_default_instance() {
    return reinterpret_cast<const VirtualMachinesAllowedProto*>(
               &_VirtualMachinesAllowedProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(VirtualMachinesAllowedProto& a, VirtualMachinesAllowedProto& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtualMachinesAllowedProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtualMachinesAllowedProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VirtualMachinesAllowedProto* New() const final {
    return CreateMaybeMessage<VirtualMachinesAllowedProto>(nullptr);
  }

  VirtualMachinesAllowedProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VirtualMachinesAllowedProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const VirtualMachinesAllowedProto& from);
  void MergeFrom(const VirtualMachinesAllowedProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VirtualMachinesAllowedProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.VirtualMachinesAllowedProto";
  }
  protected:
  explicit VirtualMachinesAllowedProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirtualMachinesAllowedFieldNumber = 1,
  };
  // optional bool virtual_machines_allowed = 1;
  bool has_virtual_machines_allowed() const;
  private:
  bool _internal_has_virtual_machines_allowed() const;
  public:
  void clear_virtual_machines_allowed();
  bool virtual_machines_allowed() const;
  void set_virtual_machines_allowed(bool value);
  private:
  bool _internal_virtual_machines_allowed() const;
  void _internal_set_virtual_machines_allowed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.VirtualMachinesAllowedProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool virtual_machines_allowed_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class DeviceMachinePasswordChangeRateProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceMachinePasswordChangeRateProto) */ {
 public:
  inline DeviceMachinePasswordChangeRateProto() : DeviceMachinePasswordChangeRateProto(nullptr) {};
  virtual ~DeviceMachinePasswordChangeRateProto();

  DeviceMachinePasswordChangeRateProto(const DeviceMachinePasswordChangeRateProto& from);
  DeviceMachinePasswordChangeRateProto(DeviceMachinePasswordChangeRateProto&& from) noexcept
    : DeviceMachinePasswordChangeRateProto() {
    *this = ::std::move(from);
  }

  inline DeviceMachinePasswordChangeRateProto& operator=(const DeviceMachinePasswordChangeRateProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceMachinePasswordChangeRateProto& operator=(DeviceMachinePasswordChangeRateProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeviceMachinePasswordChangeRateProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceMachinePasswordChangeRateProto* internal_default_instance() {
    return reinterpret_cast<const DeviceMachinePasswordChangeRateProto*>(
               &_DeviceMachinePasswordChangeRateProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(DeviceMachinePasswordChangeRateProto& a, DeviceMachinePasswordChangeRateProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceMachinePasswordChangeRateProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceMachinePasswordChangeRateProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceMachinePasswordChangeRateProto* New() const final {
    return CreateMaybeMessage<DeviceMachinePasswordChangeRateProto>(nullptr);
  }

  DeviceMachinePasswordChangeRateProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceMachinePasswordChangeRateProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeviceMachinePasswordChangeRateProto& from);
  void MergeFrom(const DeviceMachinePasswordChangeRateProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceMachinePasswordChangeRateProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.DeviceMachinePasswordChangeRateProto";
  }
  protected:
  explicit DeviceMachinePasswordChangeRateProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRateDaysFieldNumber = 1,
  };
  // optional int32 rate_days = 1;
  bool has_rate_days() const;
  private:
  bool _internal_has_rate_days() const;
  public:
  void clear_rate_days();
  ::PROTOBUF_NAMESPACE_ID::int32 rate_days() const;
  void set_rate_days(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rate_days() const;
  void _internal_set_rate_days(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.DeviceMachinePasswordChangeRateProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 rate_days_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class DeviceGpoCacheLifetimeProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceGpoCacheLifetimeProto) */ {
 public:
  inline DeviceGpoCacheLifetimeProto() : DeviceGpoCacheLifetimeProto(nullptr) {};
  virtual ~DeviceGpoCacheLifetimeProto();

  DeviceGpoCacheLifetimeProto(const DeviceGpoCacheLifetimeProto& from);
  DeviceGpoCacheLifetimeProto(DeviceGpoCacheLifetimeProto&& from) noexcept
    : DeviceGpoCacheLifetimeProto() {
    *this = ::std::move(from);
  }

  inline DeviceGpoCacheLifetimeProto& operator=(const DeviceGpoCacheLifetimeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceGpoCacheLifetimeProto& operator=(DeviceGpoCacheLifetimeProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeviceGpoCacheLifetimeProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceGpoCacheLifetimeProto* internal_default_instance() {
    return reinterpret_cast<const DeviceGpoCacheLifetimeProto*>(
               &_DeviceGpoCacheLifetimeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(DeviceGpoCacheLifetimeProto& a, DeviceGpoCacheLifetimeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceGpoCacheLifetimeProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceGpoCacheLifetimeProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceGpoCacheLifetimeProto* New() const final {
    return CreateMaybeMessage<DeviceGpoCacheLifetimeProto>(nullptr);
  }

  DeviceGpoCacheLifetimeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceGpoCacheLifetimeProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeviceGpoCacheLifetimeProto& from);
  void MergeFrom(const DeviceGpoCacheLifetimeProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceGpoCacheLifetimeProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.DeviceGpoCacheLifetimeProto";
  }
  protected:
  explicit DeviceGpoCacheLifetimeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLifetimeHoursFieldNumber = 1,
  };
  // optional int32 lifetime_hours = 1;
  bool has_lifetime_hours() const;
  private:
  bool _internal_has_lifetime_hours() const;
  public:
  void clear_lifetime_hours();
  ::PROTOBUF_NAMESPACE_ID::int32 lifetime_hours() const;
  void set_lifetime_hours(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lifetime_hours() const;
  void _internal_set_lifetime_hours(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.DeviceGpoCacheLifetimeProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 lifetime_hours_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class DeviceAuthDataCacheLifetimeProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceAuthDataCacheLifetimeProto) */ {
 public:
  inline DeviceAuthDataCacheLifetimeProto() : DeviceAuthDataCacheLifetimeProto(nullptr) {};
  virtual ~DeviceAuthDataCacheLifetimeProto();

  DeviceAuthDataCacheLifetimeProto(const DeviceAuthDataCacheLifetimeProto& from);
  DeviceAuthDataCacheLifetimeProto(DeviceAuthDataCacheLifetimeProto&& from) noexcept
    : DeviceAuthDataCacheLifetimeProto() {
    *this = ::std::move(from);
  }

  inline DeviceAuthDataCacheLifetimeProto& operator=(const DeviceAuthDataCacheLifetimeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceAuthDataCacheLifetimeProto& operator=(DeviceAuthDataCacheLifetimeProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeviceAuthDataCacheLifetimeProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceAuthDataCacheLifetimeProto* internal_default_instance() {
    return reinterpret_cast<const DeviceAuthDataCacheLifetimeProto*>(
               &_DeviceAuthDataCacheLifetimeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(DeviceAuthDataCacheLifetimeProto& a, DeviceAuthDataCacheLifetimeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceAuthDataCacheLifetimeProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceAuthDataCacheLifetimeProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceAuthDataCacheLifetimeProto* New() const final {
    return CreateMaybeMessage<DeviceAuthDataCacheLifetimeProto>(nullptr);
  }

  DeviceAuthDataCacheLifetimeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceAuthDataCacheLifetimeProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeviceAuthDataCacheLifetimeProto& from);
  void MergeFrom(const DeviceAuthDataCacheLifetimeProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceAuthDataCacheLifetimeProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.DeviceAuthDataCacheLifetimeProto";
  }
  protected:
  explicit DeviceAuthDataCacheLifetimeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLifetimeHoursFieldNumber = 1,
  };
  // optional int32 lifetime_hours = 1;
  bool has_lifetime_hours() const;
  private:
  bool _internal_has_lifetime_hours() const;
  public:
  void clear_lifetime_hours();
  ::PROTOBUF_NAMESPACE_ID::int32 lifetime_hours() const;
  void set_lifetime_hours(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lifetime_hours() const;
  void _internal_set_lifetime_hours(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.DeviceAuthDataCacheLifetimeProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 lifetime_hours_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class SamlLoginAuthenticationTypeProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.SamlLoginAuthenticationTypeProto) */ {
 public:
  inline SamlLoginAuthenticationTypeProto() : SamlLoginAuthenticationTypeProto(nullptr) {};
  virtual ~SamlLoginAuthenticationTypeProto();

  SamlLoginAuthenticationTypeProto(const SamlLoginAuthenticationTypeProto& from);
  SamlLoginAuthenticationTypeProto(SamlLoginAuthenticationTypeProto&& from) noexcept
    : SamlLoginAuthenticationTypeProto() {
    *this = ::std::move(from);
  }

  inline SamlLoginAuthenticationTypeProto& operator=(const SamlLoginAuthenticationTypeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SamlLoginAuthenticationTypeProto& operator=(SamlLoginAuthenticationTypeProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SamlLoginAuthenticationTypeProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SamlLoginAuthenticationTypeProto* internal_default_instance() {
    return reinterpret_cast<const SamlLoginAuthenticationTypeProto*>(
               &_SamlLoginAuthenticationTypeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(SamlLoginAuthenticationTypeProto& a, SamlLoginAuthenticationTypeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SamlLoginAuthenticationTypeProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SamlLoginAuthenticationTypeProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SamlLoginAuthenticationTypeProto* New() const final {
    return CreateMaybeMessage<SamlLoginAuthenticationTypeProto>(nullptr);
  }

  SamlLoginAuthenticationTypeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SamlLoginAuthenticationTypeProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SamlLoginAuthenticationTypeProto& from);
  void MergeFrom(const SamlLoginAuthenticationTypeProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SamlLoginAuthenticationTypeProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.SamlLoginAuthenticationTypeProto";
  }
  protected:
  explicit SamlLoginAuthenticationTypeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SamlLoginAuthenticationTypeProto_Type Type;
  static constexpr Type TYPE_DEFAULT =
    SamlLoginAuthenticationTypeProto_Type_TYPE_DEFAULT;
  static constexpr Type TYPE_CLIENT_CERTIFICATE =
    SamlLoginAuthenticationTypeProto_Type_TYPE_CLIENT_CERTIFICATE;
  static inline bool Type_IsValid(int value) {
    return SamlLoginAuthenticationTypeProto_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    SamlLoginAuthenticationTypeProto_Type_Type_MIN;
  static constexpr Type Type_MAX =
    SamlLoginAuthenticationTypeProto_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    SamlLoginAuthenticationTypeProto_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return SamlLoginAuthenticationTypeProto_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return SamlLoginAuthenticationTypeProto_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSamlLoginAuthenticationTypeFieldNumber = 1,
  };
  // optional .enterprise_management.SamlLoginAuthenticationTypeProto.Type saml_login_authentication_type = 1 [default = TYPE_DEFAULT];
  bool has_saml_login_authentication_type() const;
  private:
  bool _internal_has_saml_login_authentication_type() const;
  public:
  void clear_saml_login_authentication_type();
  ::enterprise_management::SamlLoginAuthenticationTypeProto_Type saml_login_authentication_type() const;
  void set_saml_login_authentication_type(::enterprise_management::SamlLoginAuthenticationTypeProto_Type value);
  private:
  ::enterprise_management::SamlLoginAuthenticationTypeProto_Type _internal_saml_login_authentication_type() const;
  void _internal_set_saml_login_authentication_type(::enterprise_management::SamlLoginAuthenticationTypeProto_Type value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.SamlLoginAuthenticationTypeProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int saml_login_authentication_type_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class DeviceUnaffiliatedCrostiniAllowedProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceUnaffiliatedCrostiniAllowedProto) */ {
 public:
  inline DeviceUnaffiliatedCrostiniAllowedProto() : DeviceUnaffiliatedCrostiniAllowedProto(nullptr) {};
  virtual ~DeviceUnaffiliatedCrostiniAllowedProto();

  DeviceUnaffiliatedCrostiniAllowedProto(const DeviceUnaffiliatedCrostiniAllowedProto& from);
  DeviceUnaffiliatedCrostiniAllowedProto(DeviceUnaffiliatedCrostiniAllowedProto&& from) noexcept
    : DeviceUnaffiliatedCrostiniAllowedProto() {
    *this = ::std::move(from);
  }

  inline DeviceUnaffiliatedCrostiniAllowedProto& operator=(const DeviceUnaffiliatedCrostiniAllowedProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceUnaffiliatedCrostiniAllowedProto& operator=(DeviceUnaffiliatedCrostiniAllowedProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeviceUnaffiliatedCrostiniAllowedProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceUnaffiliatedCrostiniAllowedProto* internal_default_instance() {
    return reinterpret_cast<const DeviceUnaffiliatedCrostiniAllowedProto*>(
               &_DeviceUnaffiliatedCrostiniAllowedProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(DeviceUnaffiliatedCrostiniAllowedProto& a, DeviceUnaffiliatedCrostiniAllowedProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceUnaffiliatedCrostiniAllowedProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceUnaffiliatedCrostiniAllowedProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceUnaffiliatedCrostiniAllowedProto* New() const final {
    return CreateMaybeMessage<DeviceUnaffiliatedCrostiniAllowedProto>(nullptr);
  }

  DeviceUnaffiliatedCrostiniAllowedProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceUnaffiliatedCrostiniAllowedProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeviceUnaffiliatedCrostiniAllowedProto& from);
  void MergeFrom(const DeviceUnaffiliatedCrostiniAllowedProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceUnaffiliatedCrostiniAllowedProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.DeviceUnaffiliatedCrostiniAllowedProto";
  }
  protected:
  explicit DeviceUnaffiliatedCrostiniAllowedProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceUnaffiliatedCrostiniAllowedFieldNumber = 1,
  };
  // optional bool device_unaffiliated_crostini_allowed = 1;
  bool has_device_unaffiliated_crostini_allowed() const;
  private:
  bool _internal_has_device_unaffiliated_crostini_allowed() const;
  public:
  void clear_device_unaffiliated_crostini_allowed();
  bool device_unaffiliated_crostini_allowed() const;
  void set_device_unaffiliated_crostini_allowed(bool value);
  private:
  bool _internal_device_unaffiliated_crostini_allowed() const;
  void _internal_set_device_unaffiliated_crostini_allowed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.DeviceUnaffiliatedCrostiniAllowedProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool device_unaffiliated_crostini_allowed_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class PluginVmAllowedProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.PluginVmAllowedProto) */ {
 public:
  inline PluginVmAllowedProto() : PluginVmAllowedProto(nullptr) {};
  virtual ~PluginVmAllowedProto();

  PluginVmAllowedProto(const PluginVmAllowedProto& from);
  PluginVmAllowedProto(PluginVmAllowedProto&& from) noexcept
    : PluginVmAllowedProto() {
    *this = ::std::move(from);
  }

  inline PluginVmAllowedProto& operator=(const PluginVmAllowedProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PluginVmAllowedProto& operator=(PluginVmAllowedProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PluginVmAllowedProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PluginVmAllowedProto* internal_default_instance() {
    return reinterpret_cast<const PluginVmAllowedProto*>(
               &_PluginVmAllowedProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(PluginVmAllowedProto& a, PluginVmAllowedProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PluginVmAllowedProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PluginVmAllowedProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PluginVmAllowedProto* New() const final {
    return CreateMaybeMessage<PluginVmAllowedProto>(nullptr);
  }

  PluginVmAllowedProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PluginVmAllowedProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PluginVmAllowedProto& from);
  void MergeFrom(const PluginVmAllowedProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PluginVmAllowedProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.PluginVmAllowedProto";
  }
  protected:
  explicit PluginVmAllowedProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPluginVmAllowedFieldNumber = 1,
  };
  // optional bool plugin_vm_allowed = 1;
  bool has_plugin_vm_allowed() const;
  private:
  bool _internal_has_plugin_vm_allowed() const;
  public:
  void clear_plugin_vm_allowed();
  bool plugin_vm_allowed() const;
  void set_plugin_vm_allowed(bool value);
  private:
  bool _internal_plugin_vm_allowed() const;
  void _internal_set_plugin_vm_allowed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.PluginVmAllowedProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool plugin_vm_allowed_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class PluginVmLicenseKeyProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.PluginVmLicenseKeyProto) */ {
 public:
  inline PluginVmLicenseKeyProto() : PluginVmLicenseKeyProto(nullptr) {};
  virtual ~PluginVmLicenseKeyProto();

  PluginVmLicenseKeyProto(const PluginVmLicenseKeyProto& from);
  PluginVmLicenseKeyProto(PluginVmLicenseKeyProto&& from) noexcept
    : PluginVmLicenseKeyProto() {
    *this = ::std::move(from);
  }

  inline PluginVmLicenseKeyProto& operator=(const PluginVmLicenseKeyProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PluginVmLicenseKeyProto& operator=(PluginVmLicenseKeyProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PluginVmLicenseKeyProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PluginVmLicenseKeyProto* internal_default_instance() {
    return reinterpret_cast<const PluginVmLicenseKeyProto*>(
               &_PluginVmLicenseKeyProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(PluginVmLicenseKeyProto& a, PluginVmLicenseKeyProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PluginVmLicenseKeyProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PluginVmLicenseKeyProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PluginVmLicenseKeyProto* New() const final {
    return CreateMaybeMessage<PluginVmLicenseKeyProto>(nullptr);
  }

  PluginVmLicenseKeyProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PluginVmLicenseKeyProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PluginVmLicenseKeyProto& from);
  void MergeFrom(const PluginVmLicenseKeyProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PluginVmLicenseKeyProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.PluginVmLicenseKeyProto";
  }
  protected:
  explicit PluginVmLicenseKeyProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPluginVmLicenseKeyFieldNumber = 1,
  };
  // optional string plugin_vm_license_key = 1;
  bool has_plugin_vm_license_key() const;
  private:
  bool _internal_has_plugin_vm_license_key() const;
  public:
  void clear_plugin_vm_license_key();
  const std::string& plugin_vm_license_key() const;
  void set_plugin_vm_license_key(const std::string& value);
  void set_plugin_vm_license_key(std::string&& value);
  void set_plugin_vm_license_key(const char* value);
  void set_plugin_vm_license_key(const char* value, size_t size);
  std::string* mutable_plugin_vm_license_key();
  std::string* release_plugin_vm_license_key();
  void set_allocated_plugin_vm_license_key(std::string* plugin_vm_license_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_plugin_vm_license_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_plugin_vm_license_key(
      std::string* plugin_vm_license_key);
  private:
  const std::string& _internal_plugin_vm_license_key() const;
  void _internal_set_plugin_vm_license_key(const std::string& value);
  std::string* _internal_mutable_plugin_vm_license_key();
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.PluginVmLicenseKeyProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plugin_vm_license_key_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class DeviceRebootOnUserSignoutProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceRebootOnUserSignoutProto) */ {
 public:
  inline DeviceRebootOnUserSignoutProto() : DeviceRebootOnUserSignoutProto(nullptr) {};
  virtual ~DeviceRebootOnUserSignoutProto();

  DeviceRebootOnUserSignoutProto(const DeviceRebootOnUserSignoutProto& from);
  DeviceRebootOnUserSignoutProto(DeviceRebootOnUserSignoutProto&& from) noexcept
    : DeviceRebootOnUserSignoutProto() {
    *this = ::std::move(from);
  }

  inline DeviceRebootOnUserSignoutProto& operator=(const DeviceRebootOnUserSignoutProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceRebootOnUserSignoutProto& operator=(DeviceRebootOnUserSignoutProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeviceRebootOnUserSignoutProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceRebootOnUserSignoutProto* internal_default_instance() {
    return reinterpret_cast<const DeviceRebootOnUserSignoutProto*>(
               &_DeviceRebootOnUserSignoutProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(DeviceRebootOnUserSignoutProto& a, DeviceRebootOnUserSignoutProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceRebootOnUserSignoutProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceRebootOnUserSignoutProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceRebootOnUserSignoutProto* New() const final {
    return CreateMaybeMessage<DeviceRebootOnUserSignoutProto>(nullptr);
  }

  DeviceRebootOnUserSignoutProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceRebootOnUserSignoutProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeviceRebootOnUserSignoutProto& from);
  void MergeFrom(const DeviceRebootOnUserSignoutProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceRebootOnUserSignoutProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.DeviceRebootOnUserSignoutProto";
  }
  protected:
  explicit DeviceRebootOnUserSignoutProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DeviceRebootOnUserSignoutProto_RebootOnSignoutMode RebootOnSignoutMode;
  static constexpr RebootOnSignoutMode REBOOT_ON_SIGNOUT_MODE_UNSPECIFIED =
    DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_REBOOT_ON_SIGNOUT_MODE_UNSPECIFIED;
  static constexpr RebootOnSignoutMode NEVER =
    DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_NEVER;
  static constexpr RebootOnSignoutMode ARC_SESSION =
    DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_ARC_SESSION;
  static constexpr RebootOnSignoutMode ALWAYS =
    DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_ALWAYS;
  static constexpr RebootOnSignoutMode VM_STARTED_OR_ARC_SESSION =
    DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_VM_STARTED_OR_ARC_SESSION;
  static inline bool RebootOnSignoutMode_IsValid(int value) {
    return DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_IsValid(value);
  }
  static constexpr RebootOnSignoutMode RebootOnSignoutMode_MIN =
    DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_RebootOnSignoutMode_MIN;
  static constexpr RebootOnSignoutMode RebootOnSignoutMode_MAX =
    DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_RebootOnSignoutMode_MAX;
  static constexpr int RebootOnSignoutMode_ARRAYSIZE =
    DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_RebootOnSignoutMode_ARRAYSIZE;
  template<typename T>
  static inline const std::string& RebootOnSignoutMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RebootOnSignoutMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RebootOnSignoutMode_Name.");
    return DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_Name(enum_t_value);
  }
  static inline bool RebootOnSignoutMode_Parse(const std::string& name,
      RebootOnSignoutMode* value) {
    return DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRebootOnSignoutModeFieldNumber = 1,
  };
  // optional .enterprise_management.DeviceRebootOnUserSignoutProto.RebootOnSignoutMode reboot_on_signout_mode = 1 [default = NEVER];
  bool has_reboot_on_signout_mode() const;
  private:
  bool _internal_has_reboot_on_signout_mode() const;
  public:
  void clear_reboot_on_signout_mode();
  ::enterprise_management::DeviceRebootOnUserSignoutProto_RebootOnSignoutMode reboot_on_signout_mode() const;
  void set_reboot_on_signout_mode(::enterprise_management::DeviceRebootOnUserSignoutProto_RebootOnSignoutMode value);
  private:
  ::enterprise_management::DeviceRebootOnUserSignoutProto_RebootOnSignoutMode _internal_reboot_on_signout_mode() const;
  void _internal_set_reboot_on_signout_mode(::enterprise_management::DeviceRebootOnUserSignoutProto_RebootOnSignoutMode value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.DeviceRebootOnUserSignoutProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int reboot_on_signout_mode_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class DeviceWilcoDtcAllowedProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceWilcoDtcAllowedProto) */ {
 public:
  inline DeviceWilcoDtcAllowedProto() : DeviceWilcoDtcAllowedProto(nullptr) {};
  virtual ~DeviceWilcoDtcAllowedProto();

  DeviceWilcoDtcAllowedProto(const DeviceWilcoDtcAllowedProto& from);
  DeviceWilcoDtcAllowedProto(DeviceWilcoDtcAllowedProto&& from) noexcept
    : DeviceWilcoDtcAllowedProto() {
    *this = ::std::move(from);
  }

  inline DeviceWilcoDtcAllowedProto& operator=(const DeviceWilcoDtcAllowedProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceWilcoDtcAllowedProto& operator=(DeviceWilcoDtcAllowedProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeviceWilcoDtcAllowedProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceWilcoDtcAllowedProto* internal_default_instance() {
    return reinterpret_cast<const DeviceWilcoDtcAllowedProto*>(
               &_DeviceWilcoDtcAllowedProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(DeviceWilcoDtcAllowedProto& a, DeviceWilcoDtcAllowedProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceWilcoDtcAllowedProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceWilcoDtcAllowedProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceWilcoDtcAllowedProto* New() const final {
    return CreateMaybeMessage<DeviceWilcoDtcAllowedProto>(nullptr);
  }

  DeviceWilcoDtcAllowedProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceWilcoDtcAllowedProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeviceWilcoDtcAllowedProto& from);
  void MergeFrom(const DeviceWilcoDtcAllowedProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceWilcoDtcAllowedProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.DeviceWilcoDtcAllowedProto";
  }
  protected:
  explicit DeviceWilcoDtcAllowedProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceWilcoDtcAllowedFieldNumber = 1,
  };
  // optional bool device_wilco_dtc_allowed = 1;
  bool has_device_wilco_dtc_allowed() const;
  private:
  bool _internal_has_device_wilco_dtc_allowed() const;
  public:
  void clear_device_wilco_dtc_allowed();
  bool device_wilco_dtc_allowed() const;
  void set_device_wilco_dtc_allowed(bool value);
  private:
  bool _internal_device_wilco_dtc_allowed() const;
  void _internal_set_device_wilco_dtc_allowed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.DeviceWilcoDtcAllowedProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool device_wilco_dtc_allowed_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class DeviceWilcoDtcConfigurationProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceWilcoDtcConfigurationProto) */ {
 public:
  inline DeviceWilcoDtcConfigurationProto() : DeviceWilcoDtcConfigurationProto(nullptr) {};
  virtual ~DeviceWilcoDtcConfigurationProto();

  DeviceWilcoDtcConfigurationProto(const DeviceWilcoDtcConfigurationProto& from);
  DeviceWilcoDtcConfigurationProto(DeviceWilcoDtcConfigurationProto&& from) noexcept
    : DeviceWilcoDtcConfigurationProto() {
    *this = ::std::move(from);
  }

  inline DeviceWilcoDtcConfigurationProto& operator=(const DeviceWilcoDtcConfigurationProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceWilcoDtcConfigurationProto& operator=(DeviceWilcoDtcConfigurationProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeviceWilcoDtcConfigurationProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceWilcoDtcConfigurationProto* internal_default_instance() {
    return reinterpret_cast<const DeviceWilcoDtcConfigurationProto*>(
               &_DeviceWilcoDtcConfigurationProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(DeviceWilcoDtcConfigurationProto& a, DeviceWilcoDtcConfigurationProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceWilcoDtcConfigurationProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceWilcoDtcConfigurationProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceWilcoDtcConfigurationProto* New() const final {
    return CreateMaybeMessage<DeviceWilcoDtcConfigurationProto>(nullptr);
  }

  DeviceWilcoDtcConfigurationProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceWilcoDtcConfigurationProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeviceWilcoDtcConfigurationProto& from);
  void MergeFrom(const DeviceWilcoDtcConfigurationProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceWilcoDtcConfigurationProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.DeviceWilcoDtcConfigurationProto";
  }
  protected:
  explicit DeviceWilcoDtcConfigurationProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceWilcoDtcConfigurationFieldNumber = 1,
  };
  // optional string device_wilco_dtc_configuration = 1;
  bool has_device_wilco_dtc_configuration() const;
  private:
  bool _internal_has_device_wilco_dtc_configuration() const;
  public:
  void clear_device_wilco_dtc_configuration();
  const std::string& device_wilco_dtc_configuration() const;
  void set_device_wilco_dtc_configuration(const std::string& value);
  void set_device_wilco_dtc_configuration(std::string&& value);
  void set_device_wilco_dtc_configuration(const char* value);
  void set_device_wilco_dtc_configuration(const char* value, size_t size);
  std::string* mutable_device_wilco_dtc_configuration();
  std::string* release_device_wilco_dtc_configuration();
  void set_allocated_device_wilco_dtc_configuration(std::string* device_wilco_dtc_configuration);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_wilco_dtc_configuration();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_wilco_dtc_configuration(
      std::string* device_wilco_dtc_configuration);
  private:
  const std::string& _internal_device_wilco_dtc_configuration() const;
  void _internal_set_device_wilco_dtc_configuration(const std::string& value);
  std::string* _internal_mutable_device_wilco_dtc_configuration();
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.DeviceWilcoDtcConfigurationProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_wilco_dtc_configuration_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class DevicePowerPeakShiftProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DevicePowerPeakShiftProto) */ {
 public:
  inline DevicePowerPeakShiftProto() : DevicePowerPeakShiftProto(nullptr) {};
  virtual ~DevicePowerPeakShiftProto();

  DevicePowerPeakShiftProto(const DevicePowerPeakShiftProto& from);
  DevicePowerPeakShiftProto(DevicePowerPeakShiftProto&& from) noexcept
    : DevicePowerPeakShiftProto() {
    *this = ::std::move(from);
  }

  inline DevicePowerPeakShiftProto& operator=(const DevicePowerPeakShiftProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DevicePowerPeakShiftProto& operator=(DevicePowerPeakShiftProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DevicePowerPeakShiftProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DevicePowerPeakShiftProto* internal_default_instance() {
    return reinterpret_cast<const DevicePowerPeakShiftProto*>(
               &_DevicePowerPeakShiftProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(DevicePowerPeakShiftProto& a, DevicePowerPeakShiftProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DevicePowerPeakShiftProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DevicePowerPeakShiftProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DevicePowerPeakShiftProto* New() const final {
    return CreateMaybeMessage<DevicePowerPeakShiftProto>(nullptr);
  }

  DevicePowerPeakShiftProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DevicePowerPeakShiftProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DevicePowerPeakShiftProto& from);
  void MergeFrom(const DevicePowerPeakShiftProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DevicePowerPeakShiftProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.DevicePowerPeakShiftProto";
  }
  protected:
  explicit DevicePowerPeakShiftProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDayConfigsFieldNumber = 3,
    kEnabledFieldNumber = 1,
    kBatteryThresholdFieldNumber = 2,
  };
  // optional string day_configs = 3;
  bool has_day_configs() const;
  private:
  bool _internal_has_day_configs() const;
  public:
  void clear_day_configs();
  const std::string& day_configs() const;
  void set_day_configs(const std::string& value);
  void set_day_configs(std::string&& value);
  void set_day_configs(const char* value);
  void set_day_configs(const char* value, size_t size);
  std::string* mutable_day_configs();
  std::string* release_day_configs();
  void set_allocated_day_configs(std::string* day_configs);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_day_configs();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_day_configs(
      std::string* day_configs);
  private:
  const std::string& _internal_day_configs() const;
  void _internal_set_day_configs(const std::string& value);
  std::string* _internal_mutable_day_configs();
  public:

  // optional bool enabled = 1;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // optional int32 battery_threshold = 2;
  bool has_battery_threshold() const;
  private:
  bool _internal_has_battery_threshold() const;
  public:
  void clear_battery_threshold();
  ::PROTOBUF_NAMESPACE_ID::int32 battery_threshold() const;
  void set_battery_threshold(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_battery_threshold() const;
  void _internal_set_battery_threshold(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.DevicePowerPeakShiftProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr day_configs_;
  bool enabled_;
  ::PROTOBUF_NAMESPACE_ID::int32 battery_threshold_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class DeviceBootOnAcProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceBootOnAcProto) */ {
 public:
  inline DeviceBootOnAcProto() : DeviceBootOnAcProto(nullptr) {};
  virtual ~DeviceBootOnAcProto();

  DeviceBootOnAcProto(const DeviceBootOnAcProto& from);
  DeviceBootOnAcProto(DeviceBootOnAcProto&& from) noexcept
    : DeviceBootOnAcProto() {
    *this = ::std::move(from);
  }

  inline DeviceBootOnAcProto& operator=(const DeviceBootOnAcProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceBootOnAcProto& operator=(DeviceBootOnAcProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeviceBootOnAcProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceBootOnAcProto* internal_default_instance() {
    return reinterpret_cast<const DeviceBootOnAcProto*>(
               &_DeviceBootOnAcProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(DeviceBootOnAcProto& a, DeviceBootOnAcProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceBootOnAcProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceBootOnAcProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceBootOnAcProto* New() const final {
    return CreateMaybeMessage<DeviceBootOnAcProto>(nullptr);
  }

  DeviceBootOnAcProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceBootOnAcProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeviceBootOnAcProto& from);
  void MergeFrom(const DeviceBootOnAcProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceBootOnAcProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.DeviceBootOnAcProto";
  }
  protected:
  explicit DeviceBootOnAcProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
  };
  // optional bool enabled = 1;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.DeviceBootOnAcProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool enabled_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class DeviceDockMacAddressSourceProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceDockMacAddressSourceProto) */ {
 public:
  inline DeviceDockMacAddressSourceProto() : DeviceDockMacAddressSourceProto(nullptr) {};
  virtual ~DeviceDockMacAddressSourceProto();

  DeviceDockMacAddressSourceProto(const DeviceDockMacAddressSourceProto& from);
  DeviceDockMacAddressSourceProto(DeviceDockMacAddressSourceProto&& from) noexcept
    : DeviceDockMacAddressSourceProto() {
    *this = ::std::move(from);
  }

  inline DeviceDockMacAddressSourceProto& operator=(const DeviceDockMacAddressSourceProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceDockMacAddressSourceProto& operator=(DeviceDockMacAddressSourceProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeviceDockMacAddressSourceProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceDockMacAddressSourceProto* internal_default_instance() {
    return reinterpret_cast<const DeviceDockMacAddressSourceProto*>(
               &_DeviceDockMacAddressSourceProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(DeviceDockMacAddressSourceProto& a, DeviceDockMacAddressSourceProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceDockMacAddressSourceProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceDockMacAddressSourceProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceDockMacAddressSourceProto* New() const final {
    return CreateMaybeMessage<DeviceDockMacAddressSourceProto>(nullptr);
  }

  DeviceDockMacAddressSourceProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceDockMacAddressSourceProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeviceDockMacAddressSourceProto& from);
  void MergeFrom(const DeviceDockMacAddressSourceProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceDockMacAddressSourceProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.DeviceDockMacAddressSourceProto";
  }
  protected:
  explicit DeviceDockMacAddressSourceProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DeviceDockMacAddressSourceProto_Source Source;
  static constexpr Source SOURCE_UNSPECIFIED =
    DeviceDockMacAddressSourceProto_Source_SOURCE_UNSPECIFIED;
  static constexpr Source DEVICE_DOCK_MAC_ADDRESS =
    DeviceDockMacAddressSourceProto_Source_DEVICE_DOCK_MAC_ADDRESS;
  static constexpr Source DEVICE_NIC_MAC_ADDRESS =
    DeviceDockMacAddressSourceProto_Source_DEVICE_NIC_MAC_ADDRESS;
  static constexpr Source DOCK_NIC_MAC_ADDRESS =
    DeviceDockMacAddressSourceProto_Source_DOCK_NIC_MAC_ADDRESS;
  static inline bool Source_IsValid(int value) {
    return DeviceDockMacAddressSourceProto_Source_IsValid(value);
  }
  static constexpr Source Source_MIN =
    DeviceDockMacAddressSourceProto_Source_Source_MIN;
  static constexpr Source Source_MAX =
    DeviceDockMacAddressSourceProto_Source_Source_MAX;
  static constexpr int Source_ARRAYSIZE =
    DeviceDockMacAddressSourceProto_Source_Source_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Source_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Source>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Source_Name.");
    return DeviceDockMacAddressSourceProto_Source_Name(enum_t_value);
  }
  static inline bool Source_Parse(const std::string& name,
      Source* value) {
    return DeviceDockMacAddressSourceProto_Source_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
  };
  // optional .enterprise_management.DeviceDockMacAddressSourceProto.Source source = 1;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  ::enterprise_management::DeviceDockMacAddressSourceProto_Source source() const;
  void set_source(::enterprise_management::DeviceDockMacAddressSourceProto_Source value);
  private:
  ::enterprise_management::DeviceDockMacAddressSourceProto_Source _internal_source() const;
  void _internal_set_source(::enterprise_management::DeviceDockMacAddressSourceProto_Source value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.DeviceDockMacAddressSourceProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int source_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class DeviceAdvancedBatteryChargeModeProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceAdvancedBatteryChargeModeProto) */ {
 public:
  inline DeviceAdvancedBatteryChargeModeProto() : DeviceAdvancedBatteryChargeModeProto(nullptr) {};
  virtual ~DeviceAdvancedBatteryChargeModeProto();

  DeviceAdvancedBatteryChargeModeProto(const DeviceAdvancedBatteryChargeModeProto& from);
  DeviceAdvancedBatteryChargeModeProto(DeviceAdvancedBatteryChargeModeProto&& from) noexcept
    : DeviceAdvancedBatteryChargeModeProto() {
    *this = ::std::move(from);
  }

  inline DeviceAdvancedBatteryChargeModeProto& operator=(const DeviceAdvancedBatteryChargeModeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceAdvancedBatteryChargeModeProto& operator=(DeviceAdvancedBatteryChargeModeProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeviceAdvancedBatteryChargeModeProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceAdvancedBatteryChargeModeProto* internal_default_instance() {
    return reinterpret_cast<const DeviceAdvancedBatteryChargeModeProto*>(
               &_DeviceAdvancedBatteryChargeModeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(DeviceAdvancedBatteryChargeModeProto& a, DeviceAdvancedBatteryChargeModeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceAdvancedBatteryChargeModeProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceAdvancedBatteryChargeModeProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceAdvancedBatteryChargeModeProto* New() const final {
    return CreateMaybeMessage<DeviceAdvancedBatteryChargeModeProto>(nullptr);
  }

  DeviceAdvancedBatteryChargeModeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceAdvancedBatteryChargeModeProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeviceAdvancedBatteryChargeModeProto& from);
  void MergeFrom(const DeviceAdvancedBatteryChargeModeProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceAdvancedBatteryChargeModeProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.DeviceAdvancedBatteryChargeModeProto";
  }
  protected:
  explicit DeviceAdvancedBatteryChargeModeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDayConfigsFieldNumber = 2,
    kEnabledFieldNumber = 1,
  };
  // optional string day_configs = 2;
  bool has_day_configs() const;
  private:
  bool _internal_has_day_configs() const;
  public:
  void clear_day_configs();
  const std::string& day_configs() const;
  void set_day_configs(const std::string& value);
  void set_day_configs(std::string&& value);
  void set_day_configs(const char* value);
  void set_day_configs(const char* value, size_t size);
  std::string* mutable_day_configs();
  std::string* release_day_configs();
  void set_allocated_day_configs(std::string* day_configs);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_day_configs();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_day_configs(
      std::string* day_configs);
  private:
  const std::string& _internal_day_configs() const;
  void _internal_set_day_configs(const std::string& value);
  std::string* _internal_mutable_day_configs();
  public:

  // optional bool enabled = 1;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.DeviceAdvancedBatteryChargeModeProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr day_configs_;
  bool enabled_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class DeviceBatteryChargeModeProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceBatteryChargeModeProto) */ {
 public:
  inline DeviceBatteryChargeModeProto() : DeviceBatteryChargeModeProto(nullptr) {};
  virtual ~DeviceBatteryChargeModeProto();

  DeviceBatteryChargeModeProto(const DeviceBatteryChargeModeProto& from);
  DeviceBatteryChargeModeProto(DeviceBatteryChargeModeProto&& from) noexcept
    : DeviceBatteryChargeModeProto() {
    *this = ::std::move(from);
  }

  inline DeviceBatteryChargeModeProto& operator=(const DeviceBatteryChargeModeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceBatteryChargeModeProto& operator=(DeviceBatteryChargeModeProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeviceBatteryChargeModeProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceBatteryChargeModeProto* internal_default_instance() {
    return reinterpret_cast<const DeviceBatteryChargeModeProto*>(
               &_DeviceBatteryChargeModeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(DeviceBatteryChargeModeProto& a, DeviceBatteryChargeModeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceBatteryChargeModeProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceBatteryChargeModeProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceBatteryChargeModeProto* New() const final {
    return CreateMaybeMessage<DeviceBatteryChargeModeProto>(nullptr);
  }

  DeviceBatteryChargeModeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceBatteryChargeModeProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeviceBatteryChargeModeProto& from);
  void MergeFrom(const DeviceBatteryChargeModeProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceBatteryChargeModeProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.DeviceBatteryChargeModeProto";
  }
  protected:
  explicit DeviceBatteryChargeModeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DeviceBatteryChargeModeProto_BatteryChargeMode BatteryChargeMode;
  static constexpr BatteryChargeMode MODE_UNSPECIFIED =
    DeviceBatteryChargeModeProto_BatteryChargeMode_MODE_UNSPECIFIED;
  static constexpr BatteryChargeMode STANDARD =
    DeviceBatteryChargeModeProto_BatteryChargeMode_STANDARD;
  static constexpr BatteryChargeMode EXPRESS_CHARGE =
    DeviceBatteryChargeModeProto_BatteryChargeMode_EXPRESS_CHARGE;
  static constexpr BatteryChargeMode PRIMARILY_AC_USE =
    DeviceBatteryChargeModeProto_BatteryChargeMode_PRIMARILY_AC_USE;
  static constexpr BatteryChargeMode ADAPTIVE =
    DeviceBatteryChargeModeProto_BatteryChargeMode_ADAPTIVE;
  static constexpr BatteryChargeMode CUSTOM =
    DeviceBatteryChargeModeProto_BatteryChargeMode_CUSTOM;
  static inline bool BatteryChargeMode_IsValid(int value) {
    return DeviceBatteryChargeModeProto_BatteryChargeMode_IsValid(value);
  }
  static constexpr BatteryChargeMode BatteryChargeMode_MIN =
    DeviceBatteryChargeModeProto_BatteryChargeMode_BatteryChargeMode_MIN;
  static constexpr BatteryChargeMode BatteryChargeMode_MAX =
    DeviceBatteryChargeModeProto_BatteryChargeMode_BatteryChargeMode_MAX;
  static constexpr int BatteryChargeMode_ARRAYSIZE =
    DeviceBatteryChargeModeProto_BatteryChargeMode_BatteryChargeMode_ARRAYSIZE;
  template<typename T>
  static inline const std::string& BatteryChargeMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BatteryChargeMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BatteryChargeMode_Name.");
    return DeviceBatteryChargeModeProto_BatteryChargeMode_Name(enum_t_value);
  }
  static inline bool BatteryChargeMode_Parse(const std::string& name,
      BatteryChargeMode* value) {
    return DeviceBatteryChargeModeProto_BatteryChargeMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBatteryChargeModeFieldNumber = 1,
    kCustomChargeStartFieldNumber = 2,
    kCustomChargeStopFieldNumber = 3,
  };
  // optional .enterprise_management.DeviceBatteryChargeModeProto.BatteryChargeMode battery_charge_mode = 1;
  bool has_battery_charge_mode() const;
  private:
  bool _internal_has_battery_charge_mode() const;
  public:
  void clear_battery_charge_mode();
  ::enterprise_management::DeviceBatteryChargeModeProto_BatteryChargeMode battery_charge_mode() const;
  void set_battery_charge_mode(::enterprise_management::DeviceBatteryChargeModeProto_BatteryChargeMode value);
  private:
  ::enterprise_management::DeviceBatteryChargeModeProto_BatteryChargeMode _internal_battery_charge_mode() const;
  void _internal_set_battery_charge_mode(::enterprise_management::DeviceBatteryChargeModeProto_BatteryChargeMode value);
  public:

  // optional int32 custom_charge_start = 2;
  bool has_custom_charge_start() const;
  private:
  bool _internal_has_custom_charge_start() const;
  public:
  void clear_custom_charge_start();
  ::PROTOBUF_NAMESPACE_ID::int32 custom_charge_start() const;
  void set_custom_charge_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_custom_charge_start() const;
  void _internal_set_custom_charge_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 custom_charge_stop = 3;
  bool has_custom_charge_stop() const;
  private:
  bool _internal_has_custom_charge_stop() const;
  public:
  void clear_custom_charge_stop();
  ::PROTOBUF_NAMESPACE_ID::int32 custom_charge_stop() const;
  void set_custom_charge_stop(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_custom_charge_stop() const;
  void _internal_set_custom_charge_stop(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.DeviceBatteryChargeModeProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int battery_charge_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 custom_charge_start_;
  ::PROTOBUF_NAMESPACE_ID::int32 custom_charge_stop_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class DeviceUsbPowerShareProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceUsbPowerShareProto) */ {
 public:
  inline DeviceUsbPowerShareProto() : DeviceUsbPowerShareProto(nullptr) {};
  virtual ~DeviceUsbPowerShareProto();

  DeviceUsbPowerShareProto(const DeviceUsbPowerShareProto& from);
  DeviceUsbPowerShareProto(DeviceUsbPowerShareProto&& from) noexcept
    : DeviceUsbPowerShareProto() {
    *this = ::std::move(from);
  }

  inline DeviceUsbPowerShareProto& operator=(const DeviceUsbPowerShareProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceUsbPowerShareProto& operator=(DeviceUsbPowerShareProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeviceUsbPowerShareProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceUsbPowerShareProto* internal_default_instance() {
    return reinterpret_cast<const DeviceUsbPowerShareProto*>(
               &_DeviceUsbPowerShareProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(DeviceUsbPowerShareProto& a, DeviceUsbPowerShareProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceUsbPowerShareProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceUsbPowerShareProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceUsbPowerShareProto* New() const final {
    return CreateMaybeMessage<DeviceUsbPowerShareProto>(nullptr);
  }

  DeviceUsbPowerShareProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceUsbPowerShareProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeviceUsbPowerShareProto& from);
  void MergeFrom(const DeviceUsbPowerShareProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceUsbPowerShareProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.DeviceUsbPowerShareProto";
  }
  protected:
  explicit DeviceUsbPowerShareProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
  };
  // optional bool enabled = 1;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.DeviceUsbPowerShareProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool enabled_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class DeviceScheduledUpdateCheckProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceScheduledUpdateCheckProto) */ {
 public:
  inline DeviceScheduledUpdateCheckProto() : DeviceScheduledUpdateCheckProto(nullptr) {};
  virtual ~DeviceScheduledUpdateCheckProto();

  DeviceScheduledUpdateCheckProto(const DeviceScheduledUpdateCheckProto& from);
  DeviceScheduledUpdateCheckProto(DeviceScheduledUpdateCheckProto&& from) noexcept
    : DeviceScheduledUpdateCheckProto() {
    *this = ::std::move(from);
  }

  inline DeviceScheduledUpdateCheckProto& operator=(const DeviceScheduledUpdateCheckProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceScheduledUpdateCheckProto& operator=(DeviceScheduledUpdateCheckProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeviceScheduledUpdateCheckProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceScheduledUpdateCheckProto* internal_default_instance() {
    return reinterpret_cast<const DeviceScheduledUpdateCheckProto*>(
               &_DeviceScheduledUpdateCheckProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(DeviceScheduledUpdateCheckProto& a, DeviceScheduledUpdateCheckProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceScheduledUpdateCheckProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceScheduledUpdateCheckProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceScheduledUpdateCheckProto* New() const final {
    return CreateMaybeMessage<DeviceScheduledUpdateCheckProto>(nullptr);
  }

  DeviceScheduledUpdateCheckProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceScheduledUpdateCheckProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeviceScheduledUpdateCheckProto& from);
  void MergeFrom(const DeviceScheduledUpdateCheckProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceScheduledUpdateCheckProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.DeviceScheduledUpdateCheckProto";
  }
  protected:
  explicit DeviceScheduledUpdateCheckProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceScheduledUpdateCheckSettingsFieldNumber = 1,
  };
  // optional string device_scheduled_update_check_settings = 1;
  bool has_device_scheduled_update_check_settings() const;
  private:
  bool _internal_has_device_scheduled_update_check_settings() const;
  public:
  void clear_device_scheduled_update_check_settings();
  const std::string& device_scheduled_update_check_settings() const;
  void set_device_scheduled_update_check_settings(const std::string& value);
  void set_device_scheduled_update_check_settings(std::string&& value);
  void set_device_scheduled_update_check_settings(const char* value);
  void set_device_scheduled_update_check_settings(const char* value, size_t size);
  std::string* mutable_device_scheduled_update_check_settings();
  std::string* release_device_scheduled_update_check_settings();
  void set_allocated_device_scheduled_update_check_settings(std::string* device_scheduled_update_check_settings);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_scheduled_update_check_settings();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_scheduled_update_check_settings(
      std::string* device_scheduled_update_check_settings);
  private:
  const std::string& _internal_device_scheduled_update_check_settings() const;
  void _internal_set_device_scheduled_update_check_settings(const std::string& value);
  std::string* _internal_mutable_device_scheduled_update_check_settings();
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.DeviceScheduledUpdateCheckProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_scheduled_update_check_settings_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class DevicePowerwashAllowedProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DevicePowerwashAllowedProto) */ {
 public:
  inline DevicePowerwashAllowedProto() : DevicePowerwashAllowedProto(nullptr) {};
  virtual ~DevicePowerwashAllowedProto();

  DevicePowerwashAllowedProto(const DevicePowerwashAllowedProto& from);
  DevicePowerwashAllowedProto(DevicePowerwashAllowedProto&& from) noexcept
    : DevicePowerwashAllowedProto() {
    *this = ::std::move(from);
  }

  inline DevicePowerwashAllowedProto& operator=(const DevicePowerwashAllowedProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DevicePowerwashAllowedProto& operator=(DevicePowerwashAllowedProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DevicePowerwashAllowedProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DevicePowerwashAllowedProto* internal_default_instance() {
    return reinterpret_cast<const DevicePowerwashAllowedProto*>(
               &_DevicePowerwashAllowedProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(DevicePowerwashAllowedProto& a, DevicePowerwashAllowedProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DevicePowerwashAllowedProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DevicePowerwashAllowedProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DevicePowerwashAllowedProto* New() const final {
    return CreateMaybeMessage<DevicePowerwashAllowedProto>(nullptr);
  }

  DevicePowerwashAllowedProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DevicePowerwashAllowedProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DevicePowerwashAllowedProto& from);
  void MergeFrom(const DevicePowerwashAllowedProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DevicePowerwashAllowedProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.DevicePowerwashAllowedProto";
  }
  protected:
  explicit DevicePowerwashAllowedProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevicePowerwashAllowedFieldNumber = 1,
  };
  // optional bool device_powerwash_allowed = 1;
  bool has_device_powerwash_allowed() const;
  private:
  bool _internal_has_device_powerwash_allowed() const;
  public:
  void clear_device_powerwash_allowed();
  bool device_powerwash_allowed() const;
  void set_device_powerwash_allowed(bool value);
  private:
  bool _internal_device_powerwash_allowed() const;
  void _internal_set_device_powerwash_allowed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.DevicePowerwashAllowedProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool device_powerwash_allowed_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class DeviceLoginScreenWebUsbAllowDevicesForUrlsProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.DeviceLoginScreenWebUsbAllowDevicesForUrlsProto) */ {
 public:
  inline DeviceLoginScreenWebUsbAllowDevicesForUrlsProto() : DeviceLoginScreenWebUsbAllowDevicesForUrlsProto(nullptr) {};
  virtual ~DeviceLoginScreenWebUsbAllowDevicesForUrlsProto();

  DeviceLoginScreenWebUsbAllowDevicesForUrlsProto(const DeviceLoginScreenWebUsbAllowDevicesForUrlsProto& from);
  DeviceLoginScreenWebUsbAllowDevicesForUrlsProto(DeviceLoginScreenWebUsbAllowDevicesForUrlsProto&& from) noexcept
    : DeviceLoginScreenWebUsbAllowDevicesForUrlsProto() {
    *this = ::std::move(from);
  }

  inline DeviceLoginScreenWebUsbAllowDevicesForUrlsProto& operator=(const DeviceLoginScreenWebUsbAllowDevicesForUrlsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceLoginScreenWebUsbAllowDevicesForUrlsProto& operator=(DeviceLoginScreenWebUsbAllowDevicesForUrlsProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeviceLoginScreenWebUsbAllowDevicesForUrlsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceLoginScreenWebUsbAllowDevicesForUrlsProto* internal_default_instance() {
    return reinterpret_cast<const DeviceLoginScreenWebUsbAllowDevicesForUrlsProto*>(
               &_DeviceLoginScreenWebUsbAllowDevicesForUrlsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(DeviceLoginScreenWebUsbAllowDevicesForUrlsProto& a, DeviceLoginScreenWebUsbAllowDevicesForUrlsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceLoginScreenWebUsbAllowDevicesForUrlsProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceLoginScreenWebUsbAllowDevicesForUrlsProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceLoginScreenWebUsbAllowDevicesForUrlsProto* New() const final {
    return CreateMaybeMessage<DeviceLoginScreenWebUsbAllowDevicesForUrlsProto>(nullptr);
  }

  DeviceLoginScreenWebUsbAllowDevicesForUrlsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceLoginScreenWebUsbAllowDevicesForUrlsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeviceLoginScreenWebUsbAllowDevicesForUrlsProto& from);
  void MergeFrom(const DeviceLoginScreenWebUsbAllowDevicesForUrlsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceLoginScreenWebUsbAllowDevicesForUrlsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.DeviceLoginScreenWebUsbAllowDevicesForUrlsProto";
  }
  protected:
  explicit DeviceLoginScreenWebUsbAllowDevicesForUrlsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceLoginScreenWebusbAllowDevicesForUrlsFieldNumber = 1,
  };
  // optional string device_login_screen_webusb_allow_devices_for_urls = 1;
  bool has_device_login_screen_webusb_allow_devices_for_urls() const;
  private:
  bool _internal_has_device_login_screen_webusb_allow_devices_for_urls() const;
  public:
  void clear_device_login_screen_webusb_allow_devices_for_urls();
  const std::string& device_login_screen_webusb_allow_devices_for_urls() const;
  void set_device_login_screen_webusb_allow_devices_for_urls(const std::string& value);
  void set_device_login_screen_webusb_allow_devices_for_urls(std::string&& value);
  void set_device_login_screen_webusb_allow_devices_for_urls(const char* value);
  void set_device_login_screen_webusb_allow_devices_for_urls(const char* value, size_t size);
  std::string* mutable_device_login_screen_webusb_allow_devices_for_urls();
  std::string* release_device_login_screen_webusb_allow_devices_for_urls();
  void set_allocated_device_login_screen_webusb_allow_devices_for_urls(std::string* device_login_screen_webusb_allow_devices_for_urls);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_login_screen_webusb_allow_devices_for_urls();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_login_screen_webusb_allow_devices_for_urls(
      std::string* device_login_screen_webusb_allow_devices_for_urls);
  private:
  const std::string& _internal_device_login_screen_webusb_allow_devices_for_urls() const;
  void _internal_set_device_login_screen_webusb_allow_devices_for_urls(const std::string& value);
  std::string* _internal_mutable_device_login_screen_webusb_allow_devices_for_urls();
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.DeviceLoginScreenWebUsbAllowDevicesForUrlsProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_login_screen_webusb_allow_devices_for_urls_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class SystemProxySettingsProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.SystemProxySettingsProto) */ {
 public:
  inline SystemProxySettingsProto() : SystemProxySettingsProto(nullptr) {};
  virtual ~SystemProxySettingsProto();

  SystemProxySettingsProto(const SystemProxySettingsProto& from);
  SystemProxySettingsProto(SystemProxySettingsProto&& from) noexcept
    : SystemProxySettingsProto() {
    *this = ::std::move(from);
  }

  inline SystemProxySettingsProto& operator=(const SystemProxySettingsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProxySettingsProto& operator=(SystemProxySettingsProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SystemProxySettingsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProxySettingsProto* internal_default_instance() {
    return reinterpret_cast<const SystemProxySettingsProto*>(
               &_SystemProxySettingsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(SystemProxySettingsProto& a, SystemProxySettingsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProxySettingsProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemProxySettingsProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProxySettingsProto* New() const final {
    return CreateMaybeMessage<SystemProxySettingsProto>(nullptr);
  }

  SystemProxySettingsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProxySettingsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProxySettingsProto& from);
  void MergeFrom(const SystemProxySettingsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProxySettingsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.SystemProxySettingsProto";
  }
  protected:
  explicit SystemProxySettingsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSystemProxySettingsFieldNumber = 1,
  };
  // optional string system_proxy_settings = 1;
  bool has_system_proxy_settings() const;
  private:
  bool _internal_has_system_proxy_settings() const;
  public:
  void clear_system_proxy_settings();
  const std::string& system_proxy_settings() const;
  void set_system_proxy_settings(const std::string& value);
  void set_system_proxy_settings(std::string&& value);
  void set_system_proxy_settings(const char* value);
  void set_system_proxy_settings(const char* value, size_t size);
  std::string* mutable_system_proxy_settings();
  std::string* release_system_proxy_settings();
  void set_allocated_system_proxy_settings(std::string* system_proxy_settings);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_system_proxy_settings();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_system_proxy_settings(
      std::string* system_proxy_settings);
  private:
  const std::string& _internal_system_proxy_settings() const;
  void _internal_set_system_proxy_settings(const std::string& value);
  std::string* _internal_mutable_system_proxy_settings();
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.SystemProxySettingsProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr system_proxy_settings_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class RequiredClientCertificateForDeviceProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.RequiredClientCertificateForDeviceProto) */ {
 public:
  inline RequiredClientCertificateForDeviceProto() : RequiredClientCertificateForDeviceProto(nullptr) {};
  virtual ~RequiredClientCertificateForDeviceProto();

  RequiredClientCertificateForDeviceProto(const RequiredClientCertificateForDeviceProto& from);
  RequiredClientCertificateForDeviceProto(RequiredClientCertificateForDeviceProto&& from) noexcept
    : RequiredClientCertificateForDeviceProto() {
    *this = ::std::move(from);
  }

  inline RequiredClientCertificateForDeviceProto& operator=(const RequiredClientCertificateForDeviceProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequiredClientCertificateForDeviceProto& operator=(RequiredClientCertificateForDeviceProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RequiredClientCertificateForDeviceProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequiredClientCertificateForDeviceProto* internal_default_instance() {
    return reinterpret_cast<const RequiredClientCertificateForDeviceProto*>(
               &_RequiredClientCertificateForDeviceProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(RequiredClientCertificateForDeviceProto& a, RequiredClientCertificateForDeviceProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RequiredClientCertificateForDeviceProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequiredClientCertificateForDeviceProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequiredClientCertificateForDeviceProto* New() const final {
    return CreateMaybeMessage<RequiredClientCertificateForDeviceProto>(nullptr);
  }

  RequiredClientCertificateForDeviceProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequiredClientCertificateForDeviceProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RequiredClientCertificateForDeviceProto& from);
  void MergeFrom(const RequiredClientCertificateForDeviceProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequiredClientCertificateForDeviceProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.RequiredClientCertificateForDeviceProto";
  }
  protected:
  explicit RequiredClientCertificateForDeviceProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequiredClientCertificateForDeviceFieldNumber = 1,
  };
  // optional string required_client_certificate_for_device = 1;
  bool has_required_client_certificate_for_device() const;
  private:
  bool _internal_has_required_client_certificate_for_device() const;
  public:
  void clear_required_client_certificate_for_device();
  const std::string& required_client_certificate_for_device() const;
  void set_required_client_certificate_for_device(const std::string& value);
  void set_required_client_certificate_for_device(std::string&& value);
  void set_required_client_certificate_for_device(const char* value);
  void set_required_client_certificate_for_device(const char* value, size_t size);
  std::string* mutable_required_client_certificate_for_device();
  std::string* release_required_client_certificate_for_device();
  void set_allocated_required_client_certificate_for_device(std::string* required_client_certificate_for_device);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_required_client_certificate_for_device();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_required_client_certificate_for_device(
      std::string* required_client_certificate_for_device);
  private:
  const std::string& _internal_required_client_certificate_for_device() const;
  void _internal_set_required_client_certificate_for_device(const std::string& value);
  std::string* _internal_mutable_required_client_certificate_for_device();
  public:

  // @@protoc_insertion_point(class_scope:enterprise_management.RequiredClientCertificateForDeviceProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr required_client_certificate_for_device_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class ChromeDeviceSettingsProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.ChromeDeviceSettingsProto) */ {
 public:
  inline ChromeDeviceSettingsProto() : ChromeDeviceSettingsProto(nullptr) {};
  virtual ~ChromeDeviceSettingsProto();

  ChromeDeviceSettingsProto(const ChromeDeviceSettingsProto& from);
  ChromeDeviceSettingsProto(ChromeDeviceSettingsProto&& from) noexcept
    : ChromeDeviceSettingsProto() {
    *this = ::std::move(from);
  }

  inline ChromeDeviceSettingsProto& operator=(const ChromeDeviceSettingsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeDeviceSettingsProto& operator=(ChromeDeviceSettingsProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ChromeDeviceSettingsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChromeDeviceSettingsProto* internal_default_instance() {
    return reinterpret_cast<const ChromeDeviceSettingsProto*>(
               &_ChromeDeviceSettingsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(ChromeDeviceSettingsProto& a, ChromeDeviceSettingsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ChromeDeviceSettingsProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChromeDeviceSettingsProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChromeDeviceSettingsProto* New() const final {
    return CreateMaybeMessage<ChromeDeviceSettingsProto>(nullptr);
  }

  ChromeDeviceSettingsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChromeDeviceSettingsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ChromeDeviceSettingsProto& from);
  void MergeFrom(const ChromeDeviceSettingsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeDeviceSettingsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_management.ChromeDeviceSettingsProto";
  }
  protected:
  explicit ChromeDeviceSettingsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevicePolicyRefreshRateFieldNumber = 1,
    kUserWhitelistFieldNumber = 2,
    kGuestModeEnabledFieldNumber = 3,
    kDeviceProxySettingsFieldNumber = 4,
    kCameraEnabledFieldNumber = 5,
    kShowUserNamesFieldNumber = 6,
    kDataRoamingEnabledFieldNumber = 7,
    kAllowNewUsersFieldNumber = 8,
    kMetricsEnabledFieldNumber = 9,
    kReleaseChannelFieldNumber = 10,
    kOpenNetworkConfigurationFieldNumber = 11,
    kDeviceReportingFieldNumber = 12,
    kEphemeralUsersEnabledFieldNumber = 13,
    kAppPackFieldNumber = 14,
    kForcedLogoutTimeoutsFieldNumber = 15,
    kLoginScreenSaverFieldNumber = 16,
    kAutoUpdateSettingsFieldNumber = 17,
    kStartUpUrlsFieldNumber = 18,
    kPinnedAppsFieldNumber = 19,
    kSystemTimezoneFieldNumber = 20,
    kDeviceLocalAccountsFieldNumber = 21,
    kAllowRedeemOffersFieldNumber = 22,
    kStartUpFlagsFieldNumber = 23,
    kUptimeLimitFieldNumber = 24,
    kVariationsParameterFieldNumber = 25,
    kAttestationSettingsFieldNumber = 26,
    kAccessibilitySettingsFieldNumber = 27,
    kSupervisedUsersSettingsFieldNumber = 28,
    kLoginScreenPowerManagementFieldNumber = 29,
    kUse24HourClockFieldNumber = 30,
    kAutoCleanUpSettingsFieldNumber = 31,
    kSystemSettingsFieldNumber = 32,
    kSamlSettingsFieldNumber = 33,
    kRebootOnShutdownFieldNumber = 34,
    kDeviceHeartbeatSettingsFieldNumber = 35,
    kExtensionCacheSizeFieldNumber = 36,
    kLoginScreenDomainAutoCompleteFieldNumber = 37,
    kDeviceLogUploadSettingsFieldNumber = 38,
    kDisplayRotationDefaultFieldNumber = 39,
    kAllowKioskAppControlChromeVersionFieldNumber = 40,
    kLoginAuthenticationBehaviorFieldNumber = 41,
    kUsbDetachableWhitelistFieldNumber = 42,
    kAllowBluetoothFieldNumber = 43,
    kQuirksDownloadEnabledFieldNumber = 44,
    kLoginVideoCaptureAllowedUrlsFieldNumber = 45,
    kDeviceLoginScreenExtensionsFieldNumber = 46,
    kNetworkThrottlingFieldNumber = 47,
    kDeviceWallpaperImageFieldNumber = 48,
    kLoginScreenLocalesFieldNumber = 49,
    kLoginScreenInputMethodsFieldNumber = 50,
    kDeviceEcryptfsMigrationStrategyFieldNumber = 51,
    kDeviceSecondFactorAuthenticationFieldNumber = 52,
    kCastReceiverNameFieldNumber = 53,
    kDeviceOffHoursFieldNumber = 54,
    kNativeDevicePrintersFieldNumber = 55,
    kNativeDevicePrintersAccessModeFieldNumber = 56,
    kNativeDevicePrintersBlacklistFieldNumber = 57,
    kNativeDevicePrintersWhitelistFieldNumber = 58,
    kTpmFirmwareUpdateSettingsFieldNumber = 59,
    kMinimumRequiredVersionFieldNumber = 60,
    kDeviceLoginScreenAutoSelectCertificateForUrlsFieldNumber = 62,
    kUnaffiliatedArcAllowedFieldNumber = 63,
    kNetworkHostnameFieldNumber = 64,
    kDeviceKerberosEncryptionTypesFieldNumber = 65,
    kDeviceUserPolicyLoopbackProcessingModeFieldNumber = 66,
    kDeviceLoginScreenIsolateOriginsFieldNumber = 67,
    kDeviceLoginScreenSitePerProcessFieldNumber = 68,
    kVirtualMachinesAllowedFieldNumber = 69,
    kDeviceMachinePasswordChangeRateFieldNumber = 70,
    kSamlLoginAuthenticationTypeFieldNumber = 71,
    kDeviceUnaffiliatedCrostiniAllowedFieldNumber = 72,
    kDeviceWifiFastTransitionEnabledFieldNumber = 73,
    kDeviceDisplayResolutionFieldNumber = 74,
    kPluginVmAllowedFieldNumber = 75,
    kDeviceGpoCacheLifetimeFieldNumber = 76,
    kDeviceAuthDataCacheLifetimeFieldNumber = 77,
    kPluginVmLicenseKeyFieldNumber = 78,
    kDeviceRebootOnUserSignoutFieldNumber = 79,
    kDeviceWilcoDtcAllowedFieldNumber = 80,
    kDeviceWilcoDtcConfigurationFieldNumber = 81,
    kDeviceWifiAllowedFieldNumber = 82,
    kDevicePowerPeakShiftFieldNumber = 83,
    kDeviceBootOnAcFieldNumber = 84,
    kDeviceDockMacAddressSourceFieldNumber = 85,
    kDeviceAdvancedBatteryChargeModeFieldNumber = 86,
    kDeviceBatteryChargeModeFieldNumber = 87,
    kDeviceUsbPowerShareFieldNumber = 88,
    kDeviceScheduledUpdateCheckFieldNumber = 89,
    kDevicePowerwashAllowedFieldNumber = 91,
    kDeviceLoginScreenWebusbAllowDevicesForUrlsFieldNumber = 92,
    kDeviceLoginScreenSystemInfoEnforcedFieldNumber = 93,
    kDeviceWebBasedAttestationAllowedUrlsFieldNumber = 94,
    kDeviceShowNumericKeyboardForPasswordFieldNumber = 95,
    kLoginScreenPrimaryMouseButtonSwitchFieldNumber = 96,
    kMinimumChromeVersionEnforcedFieldNumber = 97,
    kSystemProxySettingsFieldNumber = 98,
    kDeviceChromeVariationsTypeFieldNumber = 99,
    kDeviceLoginScreenPrivacyScreenEnabledFieldNumber = 100,
    kRequiredClientCertificateForDeviceFieldNumber = 101,
  };
  // optional .enterprise_management.DevicePolicyRefreshRateProto device_policy_refresh_rate = 1;
  bool has_device_policy_refresh_rate() const;
  private:
  bool _internal_has_device_policy_refresh_rate() const;
  public:
  void clear_device_policy_refresh_rate();
  const ::enterprise_management::DevicePolicyRefreshRateProto& device_policy_refresh_rate() const;
  ::enterprise_management::DevicePolicyRefreshRateProto* release_device_policy_refresh_rate();
  ::enterprise_management::DevicePolicyRefreshRateProto* mutable_device_policy_refresh_rate();
  void set_allocated_device_policy_refresh_rate(::enterprise_management::DevicePolicyRefreshRateProto* device_policy_refresh_rate);
  private:
  const ::enterprise_management::DevicePolicyRefreshRateProto& _internal_device_policy_refresh_rate() const;
  ::enterprise_management::DevicePolicyRefreshRateProto* _internal_mutable_device_policy_refresh_rate();
  public:
  void unsafe_arena_set_allocated_device_policy_refresh_rate(
      ::enterprise_management::DevicePolicyRefreshRateProto* device_policy_refresh_rate);
  ::enterprise_management::DevicePolicyRefreshRateProto* unsafe_arena_release_device_policy_refresh_rate();

  // optional .enterprise_management.UserWhitelistProto user_whitelist = 2;
  bool has_user_whitelist() const;
  private:
  bool _internal_has_user_whitelist() const;
  public:
  void clear_user_whitelist();
  const ::enterprise_management::UserWhitelistProto& user_whitelist() const;
  ::enterprise_management::UserWhitelistProto* release_user_whitelist();
  ::enterprise_management::UserWhitelistProto* mutable_user_whitelist();
  void set_allocated_user_whitelist(::enterprise_management::UserWhitelistProto* user_whitelist);
  private:
  const ::enterprise_management::UserWhitelistProto& _internal_user_whitelist() const;
  ::enterprise_management::UserWhitelistProto* _internal_mutable_user_whitelist();
  public:
  void unsafe_arena_set_allocated_user_whitelist(
      ::enterprise_management::UserWhitelistProto* user_whitelist);
  ::enterprise_management::UserWhitelistProto* unsafe_arena_release_user_whitelist();

  // optional .enterprise_management.GuestModeEnabledProto guest_mode_enabled = 3;
  bool has_guest_mode_enabled() const;
  private:
  bool _internal_has_guest_mode_enabled() const;
  public:
  void clear_guest_mode_enabled();
  const ::enterprise_management::GuestModeEnabledProto& guest_mode_enabled() const;
  ::enterprise_management::GuestModeEnabledProto* release_guest_mode_enabled();
  ::enterprise_management::GuestModeEnabledProto* mutable_guest_mode_enabled();
  void set_allocated_guest_mode_enabled(::enterprise_management::GuestModeEnabledProto* guest_mode_enabled);
  private:
  const ::enterprise_management::GuestModeEnabledProto& _internal_guest_mode_enabled() const;
  ::enterprise_management::GuestModeEnabledProto* _internal_mutable_guest_mode_enabled();
  public:
  void unsafe_arena_set_allocated_guest_mode_enabled(
      ::enterprise_management::GuestModeEnabledProto* guest_mode_enabled);
  ::enterprise_management::GuestModeEnabledProto* unsafe_arena_release_guest_mode_enabled();

  // optional .enterprise_management.OBSOLETE_DeviceProxySettingsProto device_proxy_settings = 4 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_device_proxy_settings() const;
  private:
  bool _internal_has_device_proxy_settings() const;
  public:
  PROTOBUF_DEPRECATED void clear_device_proxy_settings();
  PROTOBUF_DEPRECATED const ::enterprise_management::OBSOLETE_DeviceProxySettingsProto& device_proxy_settings() const;
  PROTOBUF_DEPRECATED ::enterprise_management::OBSOLETE_DeviceProxySettingsProto* release_device_proxy_settings();
  PROTOBUF_DEPRECATED ::enterprise_management::OBSOLETE_DeviceProxySettingsProto* mutable_device_proxy_settings();
  PROTOBUF_DEPRECATED void set_allocated_device_proxy_settings(::enterprise_management::OBSOLETE_DeviceProxySettingsProto* device_proxy_settings);
  private:
  const ::enterprise_management::OBSOLETE_DeviceProxySettingsProto& _internal_device_proxy_settings() const;
  ::enterprise_management::OBSOLETE_DeviceProxySettingsProto* _internal_mutable_device_proxy_settings();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_device_proxy_settings(
      ::enterprise_management::OBSOLETE_DeviceProxySettingsProto* device_proxy_settings);
  PROTOBUF_DEPRECATED ::enterprise_management::OBSOLETE_DeviceProxySettingsProto* unsafe_arena_release_device_proxy_settings();

  // optional .enterprise_management.CameraEnabledProto camera_enabled = 5;
  bool has_camera_enabled() const;
  private:
  bool _internal_has_camera_enabled() const;
  public:
  void clear_camera_enabled();
  const ::enterprise_management::CameraEnabledProto& camera_enabled() const;
  ::enterprise_management::CameraEnabledProto* release_camera_enabled();
  ::enterprise_management::CameraEnabledProto* mutable_camera_enabled();
  void set_allocated_camera_enabled(::enterprise_management::CameraEnabledProto* camera_enabled);
  private:
  const ::enterprise_management::CameraEnabledProto& _internal_camera_enabled() const;
  ::enterprise_management::CameraEnabledProto* _internal_mutable_camera_enabled();
  public:
  void unsafe_arena_set_allocated_camera_enabled(
      ::enterprise_management::CameraEnabledProto* camera_enabled);
  ::enterprise_management::CameraEnabledProto* unsafe_arena_release_camera_enabled();

  // optional .enterprise_management.ShowUserNamesOnSigninProto show_user_names = 6;
  bool has_show_user_names() const;
  private:
  bool _internal_has_show_user_names() const;
  public:
  void clear_show_user_names();
  const ::enterprise_management::ShowUserNamesOnSigninProto& show_user_names() const;
  ::enterprise_management::ShowUserNamesOnSigninProto* release_show_user_names();
  ::enterprise_management::ShowUserNamesOnSigninProto* mutable_show_user_names();
  void set_allocated_show_user_names(::enterprise_management::ShowUserNamesOnSigninProto* show_user_names);
  private:
  const ::enterprise_management::ShowUserNamesOnSigninProto& _internal_show_user_names() const;
  ::enterprise_management::ShowUserNamesOnSigninProto* _internal_mutable_show_user_names();
  public:
  void unsafe_arena_set_allocated_show_user_names(
      ::enterprise_management::ShowUserNamesOnSigninProto* show_user_names);
  ::enterprise_management::ShowUserNamesOnSigninProto* unsafe_arena_release_show_user_names();

  // optional .enterprise_management.DataRoamingEnabledProto data_roaming_enabled = 7;
  bool has_data_roaming_enabled() const;
  private:
  bool _internal_has_data_roaming_enabled() const;
  public:
  void clear_data_roaming_enabled();
  const ::enterprise_management::DataRoamingEnabledProto& data_roaming_enabled() const;
  ::enterprise_management::DataRoamingEnabledProto* release_data_roaming_enabled();
  ::enterprise_management::DataRoamingEnabledProto* mutable_data_roaming_enabled();
  void set_allocated_data_roaming_enabled(::enterprise_management::DataRoamingEnabledProto* data_roaming_enabled);
  private:
  const ::enterprise_management::DataRoamingEnabledProto& _internal_data_roaming_enabled() const;
  ::enterprise_management::DataRoamingEnabledProto* _internal_mutable_data_roaming_enabled();
  public:
  void unsafe_arena_set_allocated_data_roaming_enabled(
      ::enterprise_management::DataRoamingEnabledProto* data_roaming_enabled);
  ::enterprise_management::DataRoamingEnabledProto* unsafe_arena_release_data_roaming_enabled();

  // optional .enterprise_management.AllowNewUsersProto allow_new_users = 8;
  bool has_allow_new_users() const;
  private:
  bool _internal_has_allow_new_users() const;
  public:
  void clear_allow_new_users();
  const ::enterprise_management::AllowNewUsersProto& allow_new_users() const;
  ::enterprise_management::AllowNewUsersProto* release_allow_new_users();
  ::enterprise_management::AllowNewUsersProto* mutable_allow_new_users();
  void set_allocated_allow_new_users(::enterprise_management::AllowNewUsersProto* allow_new_users);
  private:
  const ::enterprise_management::AllowNewUsersProto& _internal_allow_new_users() const;
  ::enterprise_management::AllowNewUsersProto* _internal_mutable_allow_new_users();
  public:
  void unsafe_arena_set_allocated_allow_new_users(
      ::enterprise_management::AllowNewUsersProto* allow_new_users);
  ::enterprise_management::AllowNewUsersProto* unsafe_arena_release_allow_new_users();

  // optional .enterprise_management.MetricsEnabledProto metrics_enabled = 9;
  bool has_metrics_enabled() const;
  private:
  bool _internal_has_metrics_enabled() const;
  public:
  void clear_metrics_enabled();
  const ::enterprise_management::MetricsEnabledProto& metrics_enabled() const;
  ::enterprise_management::MetricsEnabledProto* release_metrics_enabled();
  ::enterprise_management::MetricsEnabledProto* mutable_metrics_enabled();
  void set_allocated_metrics_enabled(::enterprise_management::MetricsEnabledProto* metrics_enabled);
  private:
  const ::enterprise_management::MetricsEnabledProto& _internal_metrics_enabled() const;
  ::enterprise_management::MetricsEnabledProto* _internal_mutable_metrics_enabled();
  public:
  void unsafe_arena_set_allocated_metrics_enabled(
      ::enterprise_management::MetricsEnabledProto* metrics_enabled);
  ::enterprise_management::MetricsEnabledProto* unsafe_arena_release_metrics_enabled();

  // optional .enterprise_management.ReleaseChannelProto release_channel = 10;
  bool has_release_channel() const;
  private:
  bool _internal_has_release_channel() const;
  public:
  void clear_release_channel();
  const ::enterprise_management::ReleaseChannelProto& release_channel() const;
  ::enterprise_management::ReleaseChannelProto* release_release_channel();
  ::enterprise_management::ReleaseChannelProto* mutable_release_channel();
  void set_allocated_release_channel(::enterprise_management::ReleaseChannelProto* release_channel);
  private:
  const ::enterprise_management::ReleaseChannelProto& _internal_release_channel() const;
  ::enterprise_management::ReleaseChannelProto* _internal_mutable_release_channel();
  public:
  void unsafe_arena_set_allocated_release_channel(
      ::enterprise_management::ReleaseChannelProto* release_channel);
  ::enterprise_management::ReleaseChannelProto* unsafe_arena_release_release_channel();

  // optional .enterprise_management.DeviceOpenNetworkConfigurationProto open_network_configuration = 11;
  bool has_open_network_configuration() const;
  private:
  bool _internal_has_open_network_configuration() const;
  public:
  void clear_open_network_configuration();
  const ::enterprise_management::DeviceOpenNetworkConfigurationProto& open_network_configuration() const;
  ::enterprise_management::DeviceOpenNetworkConfigurationProto* release_open_network_configuration();
  ::enterprise_management::DeviceOpenNetworkConfigurationProto* mutable_open_network_configuration();
  void set_allocated_open_network_configuration(::enterprise_management::DeviceOpenNetworkConfigurationProto* open_network_configuration);
  private:
  const ::enterprise_management::DeviceOpenNetworkConfigurationProto& _internal_open_network_configuration() const;
  ::enterprise_management::DeviceOpenNetworkConfigurationProto* _internal_mutable_open_network_configuration();
  public:
  void unsafe_arena_set_allocated_open_network_configuration(
      ::enterprise_management::DeviceOpenNetworkConfigurationProto* open_network_configuration);
  ::enterprise_management::DeviceOpenNetworkConfigurationProto* unsafe_arena_release_open_network_configuration();

  // optional .enterprise_management.DeviceReportingProto device_reporting = 12;
  bool has_device_reporting() const;
  private:
  bool _internal_has_device_reporting() const;
  public:
  void clear_device_reporting();
  const ::enterprise_management::DeviceReportingProto& device_reporting() const;
  ::enterprise_management::DeviceReportingProto* release_device_reporting();
  ::enterprise_management::DeviceReportingProto* mutable_device_reporting();
  void set_allocated_device_reporting(::enterprise_management::DeviceReportingProto* device_reporting);
  private:
  const ::enterprise_management::DeviceReportingProto& _internal_device_reporting() const;
  ::enterprise_management::DeviceReportingProto* _internal_mutable_device_reporting();
  public:
  void unsafe_arena_set_allocated_device_reporting(
      ::enterprise_management::DeviceReportingProto* device_reporting);
  ::enterprise_management::DeviceReportingProto* unsafe_arena_release_device_reporting();

  // optional .enterprise_management.EphemeralUsersEnabledProto ephemeral_users_enabled = 13;
  bool has_ephemeral_users_enabled() const;
  private:
  bool _internal_has_ephemeral_users_enabled() const;
  public:
  void clear_ephemeral_users_enabled();
  const ::enterprise_management::EphemeralUsersEnabledProto& ephemeral_users_enabled() const;
  ::enterprise_management::EphemeralUsersEnabledProto* release_ephemeral_users_enabled();
  ::enterprise_management::EphemeralUsersEnabledProto* mutable_ephemeral_users_enabled();
  void set_allocated_ephemeral_users_enabled(::enterprise_management::EphemeralUsersEnabledProto* ephemeral_users_enabled);
  private:
  const ::enterprise_management::EphemeralUsersEnabledProto& _internal_ephemeral_users_enabled() const;
  ::enterprise_management::EphemeralUsersEnabledProto* _internal_mutable_ephemeral_users_enabled();
  public:
  void unsafe_arena_set_allocated_ephemeral_users_enabled(
      ::enterprise_management::EphemeralUsersEnabledProto* ephemeral_users_enabled);
  ::enterprise_management::EphemeralUsersEnabledProto* unsafe_arena_release_ephemeral_users_enabled();

  // optional .enterprise_management.OBSOLETE_AppPackProto app_pack = 14 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_app_pack() const;
  private:
  bool _internal_has_app_pack() const;
  public:
  PROTOBUF_DEPRECATED void clear_app_pack();
  PROTOBUF_DEPRECATED const ::enterprise_management::OBSOLETE_AppPackProto& app_pack() const;
  PROTOBUF_DEPRECATED ::enterprise_management::OBSOLETE_AppPackProto* release_app_pack();
  PROTOBUF_DEPRECATED ::enterprise_management::OBSOLETE_AppPackProto* mutable_app_pack();
  PROTOBUF_DEPRECATED void set_allocated_app_pack(::enterprise_management::OBSOLETE_AppPackProto* app_pack);
  private:
  const ::enterprise_management::OBSOLETE_AppPackProto& _internal_app_pack() const;
  ::enterprise_management::OBSOLETE_AppPackProto* _internal_mutable_app_pack();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_app_pack(
      ::enterprise_management::OBSOLETE_AppPackProto* app_pack);
  PROTOBUF_DEPRECATED ::enterprise_management::OBSOLETE_AppPackProto* unsafe_arena_release_app_pack();

  // optional .enterprise_management.OBSOLETE_ForcedLogoutTimeoutsProto forced_logout_timeouts = 15 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_forced_logout_timeouts() const;
  private:
  bool _internal_has_forced_logout_timeouts() const;
  public:
  PROTOBUF_DEPRECATED void clear_forced_logout_timeouts();
  PROTOBUF_DEPRECATED const ::enterprise_management::OBSOLETE_ForcedLogoutTimeoutsProto& forced_logout_timeouts() const;
  PROTOBUF_DEPRECATED ::enterprise_management::OBSOLETE_ForcedLogoutTimeoutsProto* release_forced_logout_timeouts();
  PROTOBUF_DEPRECATED ::enterprise_management::OBSOLETE_ForcedLogoutTimeoutsProto* mutable_forced_logout_timeouts();
  PROTOBUF_DEPRECATED void set_allocated_forced_logout_timeouts(::enterprise_management::OBSOLETE_ForcedLogoutTimeoutsProto* forced_logout_timeouts);
  private:
  const ::enterprise_management::OBSOLETE_ForcedLogoutTimeoutsProto& _internal_forced_logout_timeouts() const;
  ::enterprise_management::OBSOLETE_ForcedLogoutTimeoutsProto* _internal_mutable_forced_logout_timeouts();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_forced_logout_timeouts(
      ::enterprise_management::OBSOLETE_ForcedLogoutTimeoutsProto* forced_logout_timeouts);
  PROTOBUF_DEPRECATED ::enterprise_management::OBSOLETE_ForcedLogoutTimeoutsProto* unsafe_arena_release_forced_logout_timeouts();

  // optional .enterprise_management.OBSOLETE_ScreenSaverProto login_screen_saver = 16 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_login_screen_saver() const;
  private:
  bool _internal_has_login_screen_saver() const;
  public:
  PROTOBUF_DEPRECATED void clear_login_screen_saver();
  PROTOBUF_DEPRECATED const ::enterprise_management::OBSOLETE_ScreenSaverProto& login_screen_saver() const;
  PROTOBUF_DEPRECATED ::enterprise_management::OBSOLETE_ScreenSaverProto* release_login_screen_saver();
  PROTOBUF_DEPRECATED ::enterprise_management::OBSOLETE_ScreenSaverProto* mutable_login_screen_saver();
  PROTOBUF_DEPRECATED void set_allocated_login_screen_saver(::enterprise_management::OBSOLETE_ScreenSaverProto* login_screen_saver);
  private:
  const ::enterprise_management::OBSOLETE_ScreenSaverProto& _internal_login_screen_saver() const;
  ::enterprise_management::OBSOLETE_ScreenSaverProto* _internal_mutable_login_screen_saver();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_login_screen_saver(
      ::enterprise_management::OBSOLETE_ScreenSaverProto* login_screen_saver);
  PROTOBUF_DEPRECATED ::enterprise_management::OBSOLETE_ScreenSaverProto* unsafe_arena_release_login_screen_saver();

  // optional .enterprise_management.AutoUpdateSettingsProto auto_update_settings = 17;
  bool has_auto_update_settings() const;
  private:
  bool _internal_has_auto_update_settings() const;
  public:
  void clear_auto_update_settings();
  const ::enterprise_management::AutoUpdateSettingsProto& auto_update_settings() const;
  ::enterprise_management::AutoUpdateSettingsProto* release_auto_update_settings();
  ::enterprise_management::AutoUpdateSettingsProto* mutable_auto_update_settings();
  void set_allocated_auto_update_settings(::enterprise_management::AutoUpdateSettingsProto* auto_update_settings);
  private:
  const ::enterprise_management::AutoUpdateSettingsProto& _internal_auto_update_settings() const;
  ::enterprise_management::AutoUpdateSettingsProto* _internal_mutable_auto_update_settings();
  public:
  void unsafe_arena_set_allocated_auto_update_settings(
      ::enterprise_management::AutoUpdateSettingsProto* auto_update_settings);
  ::enterprise_management::AutoUpdateSettingsProto* unsafe_arena_release_auto_update_settings();

  // optional .enterprise_management.OBSOLETE_StartUpUrlsProto start_up_urls = 18 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_start_up_urls() const;
  private:
  bool _internal_has_start_up_urls() const;
  public:
  PROTOBUF_DEPRECATED void clear_start_up_urls();
  PROTOBUF_DEPRECATED const ::enterprise_management::OBSOLETE_StartUpUrlsProto& start_up_urls() const;
  PROTOBUF_DEPRECATED ::enterprise_management::OBSOLETE_StartUpUrlsProto* release_start_up_urls();
  PROTOBUF_DEPRECATED ::enterprise_management::OBSOLETE_StartUpUrlsProto* mutable_start_up_urls();
  PROTOBUF_DEPRECATED void set_allocated_start_up_urls(::enterprise_management::OBSOLETE_StartUpUrlsProto* start_up_urls);
  private:
  const ::enterprise_management::OBSOLETE_StartUpUrlsProto& _internal_start_up_urls() const;
  ::enterprise_management::OBSOLETE_StartUpUrlsProto* _internal_mutable_start_up_urls();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_start_up_urls(
      ::enterprise_management::OBSOLETE_StartUpUrlsProto* start_up_urls);
  PROTOBUF_DEPRECATED ::enterprise_management::OBSOLETE_StartUpUrlsProto* unsafe_arena_release_start_up_urls();

  // optional .enterprise_management.OBSOLETE_PinnedAppsProto pinned_apps = 19 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_pinned_apps() const;
  private:
  bool _internal_has_pinned_apps() const;
  public:
  PROTOBUF_DEPRECATED void clear_pinned_apps();
  PROTOBUF_DEPRECATED const ::enterprise_management::OBSOLETE_PinnedAppsProto& pinned_apps() const;
  PROTOBUF_DEPRECATED ::enterprise_management::OBSOLETE_PinnedAppsProto* release_pinned_apps();
  PROTOBUF_DEPRECATED ::enterprise_management::OBSOLETE_PinnedAppsProto* mutable_pinned_apps();
  PROTOBUF_DEPRECATED void set_allocated_pinned_apps(::enterprise_management::OBSOLETE_PinnedAppsProto* pinned_apps);
  private:
  const ::enterprise_management::OBSOLETE_PinnedAppsProto& _internal_pinned_apps() const;
  ::enterprise_management::OBSOLETE_PinnedAppsProto* _internal_mutable_pinned_apps();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_pinned_apps(
      ::enterprise_management::OBSOLETE_PinnedAppsProto* pinned_apps);
  PROTOBUF_DEPRECATED ::enterprise_management::OBSOLETE_PinnedAppsProto* unsafe_arena_release_pinned_apps();

  // optional .enterprise_management.SystemTimezoneProto system_timezone = 20;
  bool has_system_timezone() const;
  private:
  bool _internal_has_system_timezone() const;
  public:
  void clear_system_timezone();
  const ::enterprise_management::SystemTimezoneProto& system_timezone() const;
  ::enterprise_management::SystemTimezoneProto* release_system_timezone();
  ::enterprise_management::SystemTimezoneProto* mutable_system_timezone();
  void set_allocated_system_timezone(::enterprise_management::SystemTimezoneProto* system_timezone);
  private:
  const ::enterprise_management::SystemTimezoneProto& _internal_system_timezone() const;
  ::enterprise_management::SystemTimezoneProto* _internal_mutable_system_timezone();
  public:
  void unsafe_arena_set_allocated_system_timezone(
      ::enterprise_management::SystemTimezoneProto* system_timezone);
  ::enterprise_management::SystemTimezoneProto* unsafe_arena_release_system_timezone();

  // optional .enterprise_management.DeviceLocalAccountsProto device_local_accounts = 21;
  bool has_device_local_accounts() const;
  private:
  bool _internal_has_device_local_accounts() const;
  public:
  void clear_device_local_accounts();
  const ::enterprise_management::DeviceLocalAccountsProto& device_local_accounts() const;
  ::enterprise_management::DeviceLocalAccountsProto* release_device_local_accounts();
  ::enterprise_management::DeviceLocalAccountsProto* mutable_device_local_accounts();
  void set_allocated_device_local_accounts(::enterprise_management::DeviceLocalAccountsProto* device_local_accounts);
  private:
  const ::enterprise_management::DeviceLocalAccountsProto& _internal_device_local_accounts() const;
  ::enterprise_management::DeviceLocalAccountsProto* _internal_mutable_device_local_accounts();
  public:
  void unsafe_arena_set_allocated_device_local_accounts(
      ::enterprise_management::DeviceLocalAccountsProto* device_local_accounts);
  ::enterprise_management::DeviceLocalAccountsProto* unsafe_arena_release_device_local_accounts();

  // optional .enterprise_management.AllowRedeemChromeOsRegistrationOffersProto allow_redeem_offers = 22;
  bool has_allow_redeem_offers() const;
  private:
  bool _internal_has_allow_redeem_offers() const;
  public:
  void clear_allow_redeem_offers();
  const ::enterprise_management::AllowRedeemChromeOsRegistrationOffersProto& allow_redeem_offers() const;
  ::enterprise_management::AllowRedeemChromeOsRegistrationOffersProto* release_allow_redeem_offers();
  ::enterprise_management::AllowRedeemChromeOsRegistrationOffersProto* mutable_allow_redeem_offers();
  void set_allocated_allow_redeem_offers(::enterprise_management::AllowRedeemChromeOsRegistrationOffersProto* allow_redeem_offers);
  private:
  const ::enterprise_management::AllowRedeemChromeOsRegistrationOffersProto& _internal_allow_redeem_offers() const;
  ::enterprise_management::AllowRedeemChromeOsRegistrationOffersProto* _internal_mutable_allow_redeem_offers();
  public:
  void unsafe_arena_set_allocated_allow_redeem_offers(
      ::enterprise_management::AllowRedeemChromeOsRegistrationOffersProto* allow_redeem_offers);
  ::enterprise_management::AllowRedeemChromeOsRegistrationOffersProto* unsafe_arena_release_allow_redeem_offers();

  // optional .enterprise_management.StartUpFlagsProto start_up_flags = 23;
  bool has_start_up_flags() const;
  private:
  bool _internal_has_start_up_flags() const;
  public:
  void clear_start_up_flags();
  const ::enterprise_management::StartUpFlagsProto& start_up_flags() const;
  ::enterprise_management::StartUpFlagsProto* release_start_up_flags();
  ::enterprise_management::StartUpFlagsProto* mutable_start_up_flags();
  void set_allocated_start_up_flags(::enterprise_management::StartUpFlagsProto* start_up_flags);
  private:
  const ::enterprise_management::StartUpFlagsProto& _internal_start_up_flags() const;
  ::enterprise_management::StartUpFlagsProto* _internal_mutable_start_up_flags();
  public:
  void unsafe_arena_set_allocated_start_up_flags(
      ::enterprise_management::StartUpFlagsProto* start_up_flags);
  ::enterprise_management::StartUpFlagsProto* unsafe_arena_release_start_up_flags();

  // optional .enterprise_management.UptimeLimitProto uptime_limit = 24;
  bool has_uptime_limit() const;
  private:
  bool _internal_has_uptime_limit() const;
  public:
  void clear_uptime_limit();
  const ::enterprise_management::UptimeLimitProto& uptime_limit() const;
  ::enterprise_management::UptimeLimitProto* release_uptime_limit();
  ::enterprise_management::UptimeLimitProto* mutable_uptime_limit();
  void set_allocated_uptime_limit(::enterprise_management::UptimeLimitProto* uptime_limit);
  private:
  const ::enterprise_management::UptimeLimitProto& _internal_uptime_limit() const;
  ::enterprise_management::UptimeLimitProto* _internal_mutable_uptime_limit();
  public:
  void unsafe_arena_set_allocated_uptime_limit(
      ::enterprise_management::UptimeLimitProto* uptime_limit);
  ::enterprise_management::UptimeLimitProto* unsafe_arena_release_uptime_limit();

  // optional .enterprise_management.VariationsParameterProto variations_parameter = 25;
  bool has_variations_parameter() const;
  private:
  bool _internal_has_variations_parameter() const;
  public:
  void clear_variations_parameter();
  const ::enterprise_management::VariationsParameterProto& variations_parameter() const;
  ::enterprise_management::VariationsParameterProto* release_variations_parameter();
  ::enterprise_management::VariationsParameterProto* mutable_variations_parameter();
  void set_allocated_variations_parameter(::enterprise_management::VariationsParameterProto* variations_parameter);
  private:
  const ::enterprise_management::VariationsParameterProto& _internal_variations_parameter() const;
  ::enterprise_management::VariationsParameterProto* _internal_mutable_variations_parameter();
  public:
  void unsafe_arena_set_allocated_variations_parameter(
      ::enterprise_management::VariationsParameterProto* variations_parameter);
  ::enterprise_management::VariationsParameterProto* unsafe_arena_release_variations_parameter();

  // optional .enterprise_management.AttestationSettingsProto attestation_settings = 26;
  bool has_attestation_settings() const;
  private:
  bool _internal_has_attestation_settings() const;
  public:
  void clear_attestation_settings();
  const ::enterprise_management::AttestationSettingsProto& attestation_settings() const;
  ::enterprise_management::AttestationSettingsProto* release_attestation_settings();
  ::enterprise_management::AttestationSettingsProto* mutable_attestation_settings();
  void set_allocated_attestation_settings(::enterprise_management::AttestationSettingsProto* attestation_settings);
  private:
  const ::enterprise_management::AttestationSettingsProto& _internal_attestation_settings() const;
  ::enterprise_management::AttestationSettingsProto* _internal_mutable_attestation_settings();
  public:
  void unsafe_arena_set_allocated_attestation_settings(
      ::enterprise_management::AttestationSettingsProto* attestation_settings);
  ::enterprise_management::AttestationSettingsProto* unsafe_arena_release_attestation_settings();

  // optional .enterprise_management.AccessibilitySettingsProto accessibility_settings = 27;
  bool has_accessibility_settings() const;
  private:
  bool _internal_has_accessibility_settings() const;
  public:
  void clear_accessibility_settings();
  const ::enterprise_management::AccessibilitySettingsProto& accessibility_settings() const;
  ::enterprise_management::AccessibilitySettingsProto* release_accessibility_settings();
  ::enterprise_management::AccessibilitySettingsProto* mutable_accessibility_settings();
  void set_allocated_accessibility_settings(::enterprise_management::AccessibilitySettingsProto* accessibility_settings);
  private:
  const ::enterprise_management::AccessibilitySettingsProto& _internal_accessibility_settings() const;
  ::enterprise_management::AccessibilitySettingsProto* _internal_mutable_accessibility_settings();
  public:
  void unsafe_arena_set_allocated_accessibility_settings(
      ::enterprise_management::AccessibilitySettingsProto* accessibility_settings);
  ::enterprise_management::AccessibilitySettingsProto* unsafe_arena_release_accessibility_settings();

  // optional .enterprise_management.OBSOLETE_SupervisedUsersSettingsProto supervised_users_settings = 28 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_supervised_users_settings() const;
  private:
  bool _internal_has_supervised_users_settings() const;
  public:
  PROTOBUF_DEPRECATED void clear_supervised_users_settings();
  PROTOBUF_DEPRECATED const ::enterprise_management::OBSOLETE_SupervisedUsersSettingsProto& supervised_users_settings() const;
  PROTOBUF_DEPRECATED ::enterprise_management::OBSOLETE_SupervisedUsersSettingsProto* release_supervised_users_settings();
  PROTOBUF_DEPRECATED ::enterprise_management::OBSOLETE_SupervisedUsersSettingsProto* mutable_supervised_users_settings();
  PROTOBUF_DEPRECATED void set_allocated_supervised_users_settings(::enterprise_management::OBSOLETE_SupervisedUsersSettingsProto* supervised_users_settings);
  private:
  const ::enterprise_management::OBSOLETE_SupervisedUsersSettingsProto& _internal_supervised_users_settings() const;
  ::enterprise_management::OBSOLETE_SupervisedUsersSettingsProto* _internal_mutable_supervised_users_settings();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_supervised_users_settings(
      ::enterprise_management::OBSOLETE_SupervisedUsersSettingsProto* supervised_users_settings);
  PROTOBUF_DEPRECATED ::enterprise_management::OBSOLETE_SupervisedUsersSettingsProto* unsafe_arena_release_supervised_users_settings();

  // optional .enterprise_management.LoginScreenPowerManagementProto login_screen_power_management = 29;
  bool has_login_screen_power_management() const;
  private:
  bool _internal_has_login_screen_power_management() const;
  public:
  void clear_login_screen_power_management();
  const ::enterprise_management::LoginScreenPowerManagementProto& login_screen_power_management() const;
  ::enterprise_management::LoginScreenPowerManagementProto* release_login_screen_power_management();
  ::enterprise_management::LoginScreenPowerManagementProto* mutable_login_screen_power_management();
  void set_allocated_login_screen_power_management(::enterprise_management::LoginScreenPowerManagementProto* login_screen_power_management);
  private:
  const ::enterprise_management::LoginScreenPowerManagementProto& _internal_login_screen_power_management() const;
  ::enterprise_management::LoginScreenPowerManagementProto* _internal_mutable_login_screen_power_management();
  public:
  void unsafe_arena_set_allocated_login_screen_power_management(
      ::enterprise_management::LoginScreenPowerManagementProto* login_screen_power_management);
  ::enterprise_management::LoginScreenPowerManagementProto* unsafe_arena_release_login_screen_power_management();

  // optional .enterprise_management.SystemUse24HourClockProto use_24hour_clock = 30;
  bool has_use_24hour_clock() const;
  private:
  bool _internal_has_use_24hour_clock() const;
  public:
  void clear_use_24hour_clock();
  const ::enterprise_management::SystemUse24HourClockProto& use_24hour_clock() const;
  ::enterprise_management::SystemUse24HourClockProto* release_use_24hour_clock();
  ::enterprise_management::SystemUse24HourClockProto* mutable_use_24hour_clock();
  void set_allocated_use_24hour_clock(::enterprise_management::SystemUse24HourClockProto* use_24hour_clock);
  private:
  const ::enterprise_management::SystemUse24HourClockProto& _internal_use_24hour_clock() const;
  ::enterprise_management::SystemUse24HourClockProto* _internal_mutable_use_24hour_clock();
  public:
  void unsafe_arena_set_allocated_use_24hour_clock(
      ::enterprise_management::SystemUse24HourClockProto* use_24hour_clock);
  ::enterprise_management::SystemUse24HourClockProto* unsafe_arena_release_use_24hour_clock();

  // optional .enterprise_management.AutoCleanupSettigsProto auto_clean_up_settings = 31;
  bool has_auto_clean_up_settings() const;
  private:
  bool _internal_has_auto_clean_up_settings() const;
  public:
  void clear_auto_clean_up_settings();
  const ::enterprise_management::AutoCleanupSettigsProto& auto_clean_up_settings() const;
  ::enterprise_management::AutoCleanupSettigsProto* release_auto_clean_up_settings();
  ::enterprise_management::AutoCleanupSettigsProto* mutable_auto_clean_up_settings();
  void set_allocated_auto_clean_up_settings(::enterprise_management::AutoCleanupSettigsProto* auto_clean_up_settings);
  private:
  const ::enterprise_management::AutoCleanupSettigsProto& _internal_auto_clean_up_settings() const;
  ::enterprise_management::AutoCleanupSettigsProto* _internal_mutable_auto_clean_up_settings();
  public:
  void unsafe_arena_set_allocated_auto_clean_up_settings(
      ::enterprise_management::AutoCleanupSettigsProto* auto_clean_up_settings);
  ::enterprise_management::AutoCleanupSettigsProto* unsafe_arena_release_auto_clean_up_settings();

  // optional .enterprise_management.SystemSettingsProto system_settings = 32;
  bool has_system_settings() const;
  private:
  bool _internal_has_system_settings() const;
  public:
  void clear_system_settings();
  const ::enterprise_management::SystemSettingsProto& system_settings() const;
  ::enterprise_management::SystemSettingsProto* release_system_settings();
  ::enterprise_management::SystemSettingsProto* mutable_system_settings();
  void set_allocated_system_settings(::enterprise_management::SystemSettingsProto* system_settings);
  private:
  const ::enterprise_management::SystemSettingsProto& _internal_system_settings() const;
  ::enterprise_management::SystemSettingsProto* _internal_mutable_system_settings();
  public:
  void unsafe_arena_set_allocated_system_settings(
      ::enterprise_management::SystemSettingsProto* system_settings);
  ::enterprise_management::SystemSettingsProto* unsafe_arena_release_system_settings();

  // optional .enterprise_management.SAMLSettingsProto saml_settings = 33;
  bool has_saml_settings() const;
  private:
  bool _internal_has_saml_settings() const;
  public:
  void clear_saml_settings();
  const ::enterprise_management::SAMLSettingsProto& saml_settings() const;
  ::enterprise_management::SAMLSettingsProto* release_saml_settings();
  ::enterprise_management::SAMLSettingsProto* mutable_saml_settings();
  void set_allocated_saml_settings(::enterprise_management::SAMLSettingsProto* saml_settings);
  private:
  const ::enterprise_management::SAMLSettingsProto& _internal_saml_settings() const;
  ::enterprise_management::SAMLSettingsProto* _internal_mutable_saml_settings();
  public:
  void unsafe_arena_set_allocated_saml_settings(
      ::enterprise_management::SAMLSettingsProto* saml_settings);
  ::enterprise_management::SAMLSettingsProto* unsafe_arena_release_saml_settings();

  // optional .enterprise_management.RebootOnShutdownProto reboot_on_shutdown = 34;
  bool has_reboot_on_shutdown() const;
  private:
  bool _internal_has_reboot_on_shutdown() const;
  public:
  void clear_reboot_on_shutdown();
  const ::enterprise_management::RebootOnShutdownProto& reboot_on_shutdown() const;
  ::enterprise_management::RebootOnShutdownProto* release_reboot_on_shutdown();
  ::enterprise_management::RebootOnShutdownProto* mutable_reboot_on_shutdown();
  void set_allocated_reboot_on_shutdown(::enterprise_management::RebootOnShutdownProto* reboot_on_shutdown);
  private:
  const ::enterprise_management::RebootOnShutdownProto& _internal_reboot_on_shutdown() const;
  ::enterprise_management::RebootOnShutdownProto* _internal_mutable_reboot_on_shutdown();
  public:
  void unsafe_arena_set_allocated_reboot_on_shutdown(
      ::enterprise_management::RebootOnShutdownProto* reboot_on_shutdown);
  ::enterprise_management::RebootOnShutdownProto* unsafe_arena_release_reboot_on_shutdown();

  // optional .enterprise_management.DeviceHeartbeatSettingsProto device_heartbeat_settings = 35;
  bool has_device_heartbeat_settings() const;
  private:
  bool _internal_has_device_heartbeat_settings() const;
  public:
  void clear_device_heartbeat_settings();
  const ::enterprise_management::DeviceHeartbeatSettingsProto& device_heartbeat_settings() const;
  ::enterprise_management::DeviceHeartbeatSettingsProto* release_device_heartbeat_settings();
  ::enterprise_management::DeviceHeartbeatSettingsProto* mutable_device_heartbeat_settings();
  void set_allocated_device_heartbeat_settings(::enterprise_management::DeviceHeartbeatSettingsProto* device_heartbeat_settings);
  private:
  const ::enterprise_management::DeviceHeartbeatSettingsProto& _internal_device_heartbeat_settings() const;
  ::enterprise_management::DeviceHeartbeatSettingsProto* _internal_mutable_device_heartbeat_settings();
  public:
  void unsafe_arena_set_allocated_device_heartbeat_settings(
      ::enterprise_management::DeviceHeartbeatSettingsProto* device_heartbeat_settings);
  ::enterprise_management::DeviceHeartbeatSettingsProto* unsafe_arena_release_device_heartbeat_settings();

  // optional .enterprise_management.ExtensionCacheSizeProto extension_cache_size = 36;
  bool has_extension_cache_size() const;
  private:
  bool _internal_has_extension_cache_size() const;
  public:
  void clear_extension_cache_size();
  const ::enterprise_management::ExtensionCacheSizeProto& extension_cache_size() const;
  ::enterprise_management::ExtensionCacheSizeProto* release_extension_cache_size();
  ::enterprise_management::ExtensionCacheSizeProto* mutable_extension_cache_size();
  void set_allocated_extension_cache_size(::enterprise_management::ExtensionCacheSizeProto* extension_cache_size);
  private:
  const ::enterprise_management::ExtensionCacheSizeProto& _internal_extension_cache_size() const;
  ::enterprise_management::ExtensionCacheSizeProto* _internal_mutable_extension_cache_size();
  public:
  void unsafe_arena_set_allocated_extension_cache_size(
      ::enterprise_management::ExtensionCacheSizeProto* extension_cache_size);
  ::enterprise_management::ExtensionCacheSizeProto* unsafe_arena_release_extension_cache_size();

  // optional .enterprise_management.LoginScreenDomainAutoCompleteProto login_screen_domain_auto_complete = 37;
  bool has_login_screen_domain_auto_complete() const;
  private:
  bool _internal_has_login_screen_domain_auto_complete() const;
  public:
  void clear_login_screen_domain_auto_complete();
  const ::enterprise_management::LoginScreenDomainAutoCompleteProto& login_screen_domain_auto_complete() const;
  ::enterprise_management::LoginScreenDomainAutoCompleteProto* release_login_screen_domain_auto_complete();
  ::enterprise_management::LoginScreenDomainAutoCompleteProto* mutable_login_screen_domain_auto_complete();
  void set_allocated_login_screen_domain_auto_complete(::enterprise_management::LoginScreenDomainAutoCompleteProto* login_screen_domain_auto_complete);
  private:
  const ::enterprise_management::LoginScreenDomainAutoCompleteProto& _internal_login_screen_domain_auto_complete() const;
  ::enterprise_management::LoginScreenDomainAutoCompleteProto* _internal_mutable_login_screen_domain_auto_complete();
  public:
  void unsafe_arena_set_allocated_login_screen_domain_auto_complete(
      ::enterprise_management::LoginScreenDomainAutoCompleteProto* login_screen_domain_auto_complete);
  ::enterprise_management::LoginScreenDomainAutoCompleteProto* unsafe_arena_release_login_screen_domain_auto_complete();

  // optional .enterprise_management.DeviceLogUploadSettingsProto device_log_upload_settings = 38;
  bool has_device_log_upload_settings() const;
  private:
  bool _internal_has_device_log_upload_settings() const;
  public:
  void clear_device_log_upload_settings();
  const ::enterprise_management::DeviceLogUploadSettingsProto& device_log_upload_settings() const;
  ::enterprise_management::DeviceLogUploadSettingsProto* release_device_log_upload_settings();
  ::enterprise_management::DeviceLogUploadSettingsProto* mutable_device_log_upload_settings();
  void set_allocated_device_log_upload_settings(::enterprise_management::DeviceLogUploadSettingsProto* device_log_upload_settings);
  private:
  const ::enterprise_management::DeviceLogUploadSettingsProto& _internal_device_log_upload_settings() const;
  ::enterprise_management::DeviceLogUploadSettingsProto* _internal_mutable_device_log_upload_settings();
  public:
  void unsafe_arena_set_allocated_device_log_upload_settings(
      ::enterprise_management::DeviceLogUploadSettingsProto* device_log_upload_settings);
  ::enterprise_management::DeviceLogUploadSettingsProto* unsafe_arena_release_device_log_upload_settings();

  // optional .enterprise_management.DisplayRotationDefaultProto display_rotation_default = 39;
  bool has_display_rotation_default() const;
  private:
  bool _internal_has_display_rotation_default() const;
  public:
  void clear_display_rotation_default();
  const ::enterprise_management::DisplayRotationDefaultProto& display_rotation_default() const;
  ::enterprise_management::DisplayRotationDefaultProto* release_display_rotation_default();
  ::enterprise_management::DisplayRotationDefaultProto* mutable_display_rotation_default();
  void set_allocated_display_rotation_default(::enterprise_management::DisplayRotationDefaultProto* display_rotation_default);
  private:
  const ::enterprise_management::DisplayRotationDefaultProto& _internal_display_rotation_default() const;
  ::enterprise_management::DisplayRotationDefaultProto* _internal_mutable_display_rotation_default();
  public:
  void unsafe_arena_set_allocated_display_rotation_default(
      ::enterprise_management::DisplayRotationDefaultProto* display_rotation_default);
  ::enterprise_management::DisplayRotationDefaultProto* unsafe_arena_release_display_rotation_default();

  // optional .enterprise_management.AllowKioskAppControlChromeVersionProto allow_kiosk_app_control_chrome_version = 40;
  bool has_allow_kiosk_app_control_chrome_version() const;
  private:
  bool _internal_has_allow_kiosk_app_control_chrome_version() const;
  public:
  void clear_allow_kiosk_app_control_chrome_version();
  const ::enterprise_management::AllowKioskAppControlChromeVersionProto& allow_kiosk_app_control_chrome_version() const;
  ::enterprise_management::AllowKioskAppControlChromeVersionProto* release_allow_kiosk_app_control_chrome_version();
  ::enterprise_management::AllowKioskAppControlChromeVersionProto* mutable_allow_kiosk_app_control_chrome_version();
  void set_allocated_allow_kiosk_app_control_chrome_version(::enterprise_management::AllowKioskAppControlChromeVersionProto* allow_kiosk_app_control_chrome_version);
  private:
  const ::enterprise_management::AllowKioskAppControlChromeVersionProto& _internal_allow_kiosk_app_control_chrome_version() const;
  ::enterprise_management::AllowKioskAppControlChromeVersionProto* _internal_mutable_allow_kiosk_app_control_chrome_version();
  public:
  void unsafe_arena_set_allocated_allow_kiosk_app_control_chrome_version(
      ::enterprise_management::AllowKioskAppControlChromeVersionProto* allow_kiosk_app_control_chrome_version);
  ::enterprise_management::AllowKioskAppControlChromeVersionProto* unsafe_arena_release_allow_kiosk_app_control_chrome_version();

  // optional .enterprise_management.LoginAuthenticationBehaviorProto login_authentication_behavior = 41;
  bool has_login_authentication_behavior() const;
  private:
  bool _internal_has_login_authentication_behavior() const;
  public:
  void clear_login_authentication_behavior();
  const ::enterprise_management::LoginAuthenticationBehaviorProto& login_authentication_behavior() const;
  ::enterprise_management::LoginAuthenticationBehaviorProto* release_login_authentication_behavior();
  ::enterprise_management::LoginAuthenticationBehaviorProto* mutable_login_authentication_behavior();
  void set_allocated_login_authentication_behavior(::enterprise_management::LoginAuthenticationBehaviorProto* login_authentication_behavior);
  private:
  const ::enterprise_management::LoginAuthenticationBehaviorProto& _internal_login_authentication_behavior() const;
  ::enterprise_management::LoginAuthenticationBehaviorProto* _internal_mutable_login_authentication_behavior();
  public:
  void unsafe_arena_set_allocated_login_authentication_behavior(
      ::enterprise_management::LoginAuthenticationBehaviorProto* login_authentication_behavior);
  ::enterprise_management::LoginAuthenticationBehaviorProto* unsafe_arena_release_login_authentication_behavior();

  // optional .enterprise_management.UsbDetachableWhitelistProto usb_detachable_whitelist = 42;
  bool has_usb_detachable_whitelist() const;
  private:
  bool _internal_has_usb_detachable_whitelist() const;
  public:
  void clear_usb_detachable_whitelist();
  const ::enterprise_management::UsbDetachableWhitelistProto& usb_detachable_whitelist() const;
  ::enterprise_management::UsbDetachableWhitelistProto* release_usb_detachable_whitelist();
  ::enterprise_management::UsbDetachableWhitelistProto* mutable_usb_detachable_whitelist();
  void set_allocated_usb_detachable_whitelist(::enterprise_management::UsbDetachableWhitelistProto* usb_detachable_whitelist);
  private:
  const ::enterprise_management::UsbDetachableWhitelistProto& _internal_usb_detachable_whitelist() const;
  ::enterprise_management::UsbDetachableWhitelistProto* _internal_mutable_usb_detachable_whitelist();
  public:
  void unsafe_arena_set_allocated_usb_detachable_whitelist(
      ::enterprise_management::UsbDetachableWhitelistProto* usb_detachable_whitelist);
  ::enterprise_management::UsbDetachableWhitelistProto* unsafe_arena_release_usb_detachable_whitelist();

  // optional .enterprise_management.AllowBluetoothProto allow_bluetooth = 43;
  bool has_allow_bluetooth() const;
  private:
  bool _internal_has_allow_bluetooth() const;
  public:
  void clear_allow_bluetooth();
  const ::enterprise_management::AllowBluetoothProto& allow_bluetooth() const;
  ::enterprise_management::AllowBluetoothProto* release_allow_bluetooth();
  ::enterprise_management::AllowBluetoothProto* mutable_allow_bluetooth();
  void set_allocated_allow_bluetooth(::enterprise_management::AllowBluetoothProto* allow_bluetooth);
  private:
  const ::enterprise_management::AllowBluetoothProto& _internal_allow_bluetooth() const;
  ::enterprise_management::AllowBluetoothProto* _internal_mutable_allow_bluetooth();
  public:
  void unsafe_arena_set_allocated_allow_bluetooth(
      ::enterprise_management::AllowBluetoothProto* allow_bluetooth);
  ::enterprise_management::AllowBluetoothProto* unsafe_arena_release_allow_bluetooth();

  // optional .enterprise_management.DeviceQuirksDownloadEnabledProto quirks_download_enabled = 44;
  bool has_quirks_download_enabled() const;
  private:
  bool _internal_has_quirks_download_enabled() const;
  public:
  void clear_quirks_download_enabled();
  const ::enterprise_management::DeviceQuirksDownloadEnabledProto& quirks_download_enabled() const;
  ::enterprise_management::DeviceQuirksDownloadEnabledProto* release_quirks_download_enabled();
  ::enterprise_management::DeviceQuirksDownloadEnabledProto* mutable_quirks_download_enabled();
  void set_allocated_quirks_download_enabled(::enterprise_management::DeviceQuirksDownloadEnabledProto* quirks_download_enabled);
  private:
  const ::enterprise_management::DeviceQuirksDownloadEnabledProto& _internal_quirks_download_enabled() const;
  ::enterprise_management::DeviceQuirksDownloadEnabledProto* _internal_mutable_quirks_download_enabled();
  public:
  void unsafe_arena_set_allocated_quirks_download_enabled(
      ::enterprise_management::DeviceQuirksDownloadEnabledProto* quirks_download_enabled);
  ::enterprise_management::DeviceQuirksDownloadEnabledProto* unsafe_arena_release_quirks_download_enabled();

  // optional .enterprise_management.LoginVideoCaptureAllowedUrlsProto login_video_capture_allowed_urls = 45;
  bool has_login_video_capture_allowed_urls() const;
  private:
  bool _internal_has_login_video_capture_allowed_urls() const;
  public:
  void clear_login_video_capture_allowed_urls();
  const ::enterprise_management::LoginVideoCaptureAllowedUrlsProto& login_video_capture_allowed_urls() const;
  ::enterprise_management::LoginVideoCaptureAllowedUrlsProto* release_login_video_capture_allowed_urls();
  ::enterprise_management::LoginVideoCaptureAllowedUrlsProto* mutable_login_video_capture_allowed_urls();
  void set_allocated_login_video_capture_allowed_urls(::enterprise_management::LoginVideoCaptureAllowedUrlsProto* login_video_capture_allowed_urls);
  private:
  const ::enterprise_management::LoginVideoCaptureAllowedUrlsProto& _internal_login_video_capture_allowed_urls() const;
  ::enterprise_management::LoginVideoCaptureAllowedUrlsProto* _internal_mutable_login_video_capture_allowed_urls();
  public:
  void unsafe_arena_set_allocated_login_video_capture_allowed_urls(
      ::enterprise_management::LoginVideoCaptureAllowedUrlsProto* login_video_capture_allowed_urls);
  ::enterprise_management::LoginVideoCaptureAllowedUrlsProto* unsafe_arena_release_login_video_capture_allowed_urls();

  // optional .enterprise_management.DeviceLoginScreenExtensionsProto device_login_screen_extensions = 46;
  bool has_device_login_screen_extensions() const;
  private:
  bool _internal_has_device_login_screen_extensions() const;
  public:
  void clear_device_login_screen_extensions();
  const ::enterprise_management::DeviceLoginScreenExtensionsProto& device_login_screen_extensions() const;
  ::enterprise_management::DeviceLoginScreenExtensionsProto* release_device_login_screen_extensions();
  ::enterprise_management::DeviceLoginScreenExtensionsProto* mutable_device_login_screen_extensions();
  void set_allocated_device_login_screen_extensions(::enterprise_management::DeviceLoginScreenExtensionsProto* device_login_screen_extensions);
  private:
  const ::enterprise_management::DeviceLoginScreenExtensionsProto& _internal_device_login_screen_extensions() const;
  ::enterprise_management::DeviceLoginScreenExtensionsProto* _internal_mutable_device_login_screen_extensions();
  public:
  void unsafe_arena_set_allocated_device_login_screen_extensions(
      ::enterprise_management::DeviceLoginScreenExtensionsProto* device_login_screen_extensions);
  ::enterprise_management::DeviceLoginScreenExtensionsProto* unsafe_arena_release_device_login_screen_extensions();

  // optional .enterprise_management.NetworkThrottlingEnabledProto network_throttling = 47;
  bool has_network_throttling() const;
  private:
  bool _internal_has_network_throttling() const;
  public:
  void clear_network_throttling();
  const ::enterprise_management::NetworkThrottlingEnabledProto& network_throttling() const;
  ::enterprise_management::NetworkThrottlingEnabledProto* release_network_throttling();
  ::enterprise_management::NetworkThrottlingEnabledProto* mutable_network_throttling();
  void set_allocated_network_throttling(::enterprise_management::NetworkThrottlingEnabledProto* network_throttling);
  private:
  const ::enterprise_management::NetworkThrottlingEnabledProto& _internal_network_throttling() const;
  ::enterprise_management::NetworkThrottlingEnabledProto* _internal_mutable_network_throttling();
  public:
  void unsafe_arena_set_allocated_network_throttling(
      ::enterprise_management::NetworkThrottlingEnabledProto* network_throttling);
  ::enterprise_management::NetworkThrottlingEnabledProto* unsafe_arena_release_network_throttling();

  // optional .enterprise_management.DeviceWallpaperImageProto device_wallpaper_image = 48;
  bool has_device_wallpaper_image() const;
  private:
  bool _internal_has_device_wallpaper_image() const;
  public:
  void clear_device_wallpaper_image();
  const ::enterprise_management::DeviceWallpaperImageProto& device_wallpaper_image() const;
  ::enterprise_management::DeviceWallpaperImageProto* release_device_wallpaper_image();
  ::enterprise_management::DeviceWallpaperImageProto* mutable_device_wallpaper_image();
  void set_allocated_device_wallpaper_image(::enterprise_management::DeviceWallpaperImageProto* device_wallpaper_image);
  private:
  const ::enterprise_management::DeviceWallpaperImageProto& _internal_device_wallpaper_image() const;
  ::enterprise_management::DeviceWallpaperImageProto* _internal_mutable_device_wallpaper_image();
  public:
  void unsafe_arena_set_allocated_device_wallpaper_image(
      ::enterprise_management::DeviceWallpaperImageProto* device_wallpaper_image);
  ::enterprise_management::DeviceWallpaperImageProto* unsafe_arena_release_device_wallpaper_image();

  // optional .enterprise_management.LoginScreenLocalesProto login_screen_locales = 49;
  bool has_login_screen_locales() const;
  private:
  bool _internal_has_login_screen_locales() const;
  public:
  void clear_login_screen_locales();
  const ::enterprise_management::LoginScreenLocalesProto& login_screen_locales() const;
  ::enterprise_management::LoginScreenLocalesProto* release_login_screen_locales();
  ::enterprise_management::LoginScreenLocalesProto* mutable_login_screen_locales();
  void set_allocated_login_screen_locales(::enterprise_management::LoginScreenLocalesProto* login_screen_locales);
  private:
  const ::enterprise_management::LoginScreenLocalesProto& _internal_login_screen_locales() const;
  ::enterprise_management::LoginScreenLocalesProto* _internal_mutable_login_screen_locales();
  public:
  void unsafe_arena_set_allocated_login_screen_locales(
      ::enterprise_management::LoginScreenLocalesProto* login_screen_locales);
  ::enterprise_management::LoginScreenLocalesProto* unsafe_arena_release_login_screen_locales();

  // optional .enterprise_management.LoginScreenInputMethodsProto login_screen_input_methods = 50;
  bool has_login_screen_input_methods() const;
  private:
  bool _internal_has_login_screen_input_methods() const;
  public:
  void clear_login_screen_input_methods();
  const ::enterprise_management::LoginScreenInputMethodsProto& login_screen_input_methods() const;
  ::enterprise_management::LoginScreenInputMethodsProto* release_login_screen_input_methods();
  ::enterprise_management::LoginScreenInputMethodsProto* mutable_login_screen_input_methods();
  void set_allocated_login_screen_input_methods(::enterprise_management::LoginScreenInputMethodsProto* login_screen_input_methods);
  private:
  const ::enterprise_management::LoginScreenInputMethodsProto& _internal_login_screen_input_methods() const;
  ::enterprise_management::LoginScreenInputMethodsProto* _internal_mutable_login_screen_input_methods();
  public:
  void unsafe_arena_set_allocated_login_screen_input_methods(
      ::enterprise_management::LoginScreenInputMethodsProto* login_screen_input_methods);
  ::enterprise_management::LoginScreenInputMethodsProto* unsafe_arena_release_login_screen_input_methods();

  // optional .enterprise_management.DeviceEcryptfsMigrationStrategyProto device_ecryptfs_migration_strategy = 51 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_device_ecryptfs_migration_strategy() const;
  private:
  bool _internal_has_device_ecryptfs_migration_strategy() const;
  public:
  PROTOBUF_DEPRECATED void clear_device_ecryptfs_migration_strategy();
  PROTOBUF_DEPRECATED const ::enterprise_management::DeviceEcryptfsMigrationStrategyProto& device_ecryptfs_migration_strategy() const;
  PROTOBUF_DEPRECATED ::enterprise_management::DeviceEcryptfsMigrationStrategyProto* release_device_ecryptfs_migration_strategy();
  PROTOBUF_DEPRECATED ::enterprise_management::DeviceEcryptfsMigrationStrategyProto* mutable_device_ecryptfs_migration_strategy();
  PROTOBUF_DEPRECATED void set_allocated_device_ecryptfs_migration_strategy(::enterprise_management::DeviceEcryptfsMigrationStrategyProto* device_ecryptfs_migration_strategy);
  private:
  const ::enterprise_management::DeviceEcryptfsMigrationStrategyProto& _internal_device_ecryptfs_migration_strategy() const;
  ::enterprise_management::DeviceEcryptfsMigrationStrategyProto* _internal_mutable_device_ecryptfs_migration_strategy();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_device_ecryptfs_migration_strategy(
      ::enterprise_management::DeviceEcryptfsMigrationStrategyProto* device_ecryptfs_migration_strategy);
  PROTOBUF_DEPRECATED ::enterprise_management::DeviceEcryptfsMigrationStrategyProto* unsafe_arena_release_device_ecryptfs_migration_strategy();

  // optional .enterprise_management.DeviceSecondFactorAuthenticationProto device_second_factor_authentication = 52;
  bool has_device_second_factor_authentication() const;
  private:
  bool _internal_has_device_second_factor_authentication() const;
  public:
  void clear_device_second_factor_authentication();
  const ::enterprise_management::DeviceSecondFactorAuthenticationProto& device_second_factor_authentication() const;
  ::enterprise_management::DeviceSecondFactorAuthenticationProto* release_device_second_factor_authentication();
  ::enterprise_management::DeviceSecondFactorAuthenticationProto* mutable_device_second_factor_authentication();
  void set_allocated_device_second_factor_authentication(::enterprise_management::DeviceSecondFactorAuthenticationProto* device_second_factor_authentication);
  private:
  const ::enterprise_management::DeviceSecondFactorAuthenticationProto& _internal_device_second_factor_authentication() const;
  ::enterprise_management::DeviceSecondFactorAuthenticationProto* _internal_mutable_device_second_factor_authentication();
  public:
  void unsafe_arena_set_allocated_device_second_factor_authentication(
      ::enterprise_management::DeviceSecondFactorAuthenticationProto* device_second_factor_authentication);
  ::enterprise_management::DeviceSecondFactorAuthenticationProto* unsafe_arena_release_device_second_factor_authentication();

  // optional .enterprise_management.CastReceiverNameProto cast_receiver_name = 53;
  bool has_cast_receiver_name() const;
  private:
  bool _internal_has_cast_receiver_name() const;
  public:
  void clear_cast_receiver_name();
  const ::enterprise_management::CastReceiverNameProto& cast_receiver_name() const;
  ::enterprise_management::CastReceiverNameProto* release_cast_receiver_name();
  ::enterprise_management::CastReceiverNameProto* mutable_cast_receiver_name();
  void set_allocated_cast_receiver_name(::enterprise_management::CastReceiverNameProto* cast_receiver_name);
  private:
  const ::enterprise_management::CastReceiverNameProto& _internal_cast_receiver_name() const;
  ::enterprise_management::CastReceiverNameProto* _internal_mutable_cast_receiver_name();
  public:
  void unsafe_arena_set_allocated_cast_receiver_name(
      ::enterprise_management::CastReceiverNameProto* cast_receiver_name);
  ::enterprise_management::CastReceiverNameProto* unsafe_arena_release_cast_receiver_name();

  // optional .enterprise_management.DeviceOffHoursProto device_off_hours = 54;
  bool has_device_off_hours() const;
  private:
  bool _internal_has_device_off_hours() const;
  public:
  void clear_device_off_hours();
  const ::enterprise_management::DeviceOffHoursProto& device_off_hours() const;
  ::enterprise_management::DeviceOffHoursProto* release_device_off_hours();
  ::enterprise_management::DeviceOffHoursProto* mutable_device_off_hours();
  void set_allocated_device_off_hours(::enterprise_management::DeviceOffHoursProto* device_off_hours);
  private:
  const ::enterprise_management::DeviceOffHoursProto& _internal_device_off_hours() const;
  ::enterprise_management::DeviceOffHoursProto* _internal_mutable_device_off_hours();
  public:
  void unsafe_arena_set_allocated_device_off_hours(
      ::enterprise_management::DeviceOffHoursProto* device_off_hours);
  ::enterprise_management::DeviceOffHoursProto* unsafe_arena_release_device_off_hours();

  // optional .enterprise_management.DeviceNativePrintersProto native_device_printers = 55;
  bool has_native_device_printers() const;
  private:
  bool _internal_has_native_device_printers() const;
  public:
  void clear_native_device_printers();
  const ::enterprise_management::DeviceNativePrintersProto& native_device_printers() const;
  ::enterprise_management::DeviceNativePrintersProto* release_native_device_printers();
  ::enterprise_management::DeviceNativePrintersProto* mutable_native_device_printers();
  void set_allocated_native_device_printers(::enterprise_management::DeviceNativePrintersProto* native_device_printers);
  private:
  const ::enterprise_management::DeviceNativePrintersProto& _internal_native_device_printers() const;
  ::enterprise_management::DeviceNativePrintersProto* _internal_mutable_native_device_printers();
  public:
  void unsafe_arena_set_allocated_native_device_printers(
      ::enterprise_management::DeviceNativePrintersProto* native_device_printers);
  ::enterprise_management::DeviceNativePrintersProto* unsafe_arena_release_native_device_printers();

  // optional .enterprise_management.DeviceNativePrintersAccessModeProto native_device_printers_access_mode = 56;
  bool has_native_device_printers_access_mode() const;
  private:
  bool _internal_has_native_device_printers_access_mode() const;
  public:
  void clear_native_device_printers_access_mode();
  const ::enterprise_management::DeviceNativePrintersAccessModeProto& native_device_printers_access_mode() const;
  ::enterprise_management::DeviceNativePrintersAccessModeProto* release_native_device_printers_access_mode();
  ::enterprise_management::DeviceNativePrintersAccessModeProto* mutable_native_device_printers_access_mode();
  void set_allocated_native_device_printers_access_mode(::enterprise_management::DeviceNativePrintersAccessModeProto* native_device_printers_access_mode);
  private:
  const ::enterprise_management::DeviceNativePrintersAccessModeProto& _internal_native_device_printers_access_mode() const;
  ::enterprise_management::DeviceNativePrintersAccessModeProto* _internal_mutable_native_device_printers_access_mode();
  public:
  void unsafe_arena_set_allocated_native_device_printers_access_mode(
      ::enterprise_management::DeviceNativePrintersAccessModeProto* native_device_printers_access_mode);
  ::enterprise_management::DeviceNativePrintersAccessModeProto* unsafe_arena_release_native_device_printers_access_mode();

  // optional .enterprise_management.DeviceNativePrintersBlacklistProto native_device_printers_blacklist = 57;
  bool has_native_device_printers_blacklist() const;
  private:
  bool _internal_has_native_device_printers_blacklist() const;
  public:
  void clear_native_device_printers_blacklist();
  const ::enterprise_management::DeviceNativePrintersBlacklistProto& native_device_printers_blacklist() const;
  ::enterprise_management::DeviceNativePrintersBlacklistProto* release_native_device_printers_blacklist();
  ::enterprise_management::DeviceNativePrintersBlacklistProto* mutable_native_device_printers_blacklist();
  void set_allocated_native_device_printers_blacklist(::enterprise_management::DeviceNativePrintersBlacklistProto* native_device_printers_blacklist);
  private:
  const ::enterprise_management::DeviceNativePrintersBlacklistProto& _internal_native_device_printers_blacklist() const;
  ::enterprise_management::DeviceNativePrintersBlacklistProto* _internal_mutable_native_device_printers_blacklist();
  public:
  void unsafe_arena_set_allocated_native_device_printers_blacklist(
      ::enterprise_management::DeviceNativePrintersBlacklistProto* native_device_printers_blacklist);
  ::enterprise_management::DeviceNativePrintersBlacklistProto* unsafe_arena_release_native_device_printers_blacklist();

  // optional .enterprise_management.DeviceNativePrintersWhitelistProto native_device_printers_whitelist = 58;
  bool has_native_device_printers_whitelist() const;
  private:
  bool _internal_has_native_device_printers_whitelist() const;
  public:
  void clear_native_device_printers_whitelist();
  const ::enterprise_management::DeviceNativePrintersWhitelistProto& native_device_printers_whitelist() const;
  ::enterprise_management::DeviceNativePrintersWhitelistProto* release_native_device_printers_whitelist();
  ::enterprise_management::DeviceNativePrintersWhitelistProto* mutable_native_device_printers_whitelist();
  void set_allocated_native_device_printers_whitelist(::enterprise_management::DeviceNativePrintersWhitelistProto* native_device_printers_whitelist);
  private:
  const ::enterprise_management::DeviceNativePrintersWhitelistProto& _internal_native_device_printers_whitelist() const;
  ::enterprise_management::DeviceNativePrintersWhitelistProto* _internal_mutable_native_device_printers_whitelist();
  public:
  void unsafe_arena_set_allocated_native_device_printers_whitelist(
      ::enterprise_management::DeviceNativePrintersWhitelistProto* native_device_printers_whitelist);
  ::enterprise_management::DeviceNativePrintersWhitelistProto* unsafe_arena_release_native_device_printers_whitelist();

  // optional .enterprise_management.TPMFirmwareUpdateSettingsProto tpm_firmware_update_settings = 59;
  bool has_tpm_firmware_update_settings() const;
  private:
  bool _internal_has_tpm_firmware_update_settings() const;
  public:
  void clear_tpm_firmware_update_settings();
  const ::enterprise_management::TPMFirmwareUpdateSettingsProto& tpm_firmware_update_settings() const;
  ::enterprise_management::TPMFirmwareUpdateSettingsProto* release_tpm_firmware_update_settings();
  ::enterprise_management::TPMFirmwareUpdateSettingsProto* mutable_tpm_firmware_update_settings();
  void set_allocated_tpm_firmware_update_settings(::enterprise_management::TPMFirmwareUpdateSettingsProto* tpm_firmware_update_settings);
  private:
  const ::enterprise_management::TPMFirmwareUpdateSettingsProto& _internal_tpm_firmware_update_settings() const;
  ::enterprise_management::TPMFirmwareUpdateSettingsProto* _internal_mutable_tpm_firmware_update_settings();
  public:
  void unsafe_arena_set_allocated_tpm_firmware_update_settings(
      ::enterprise_management::TPMFirmwareUpdateSettingsProto* tpm_firmware_update_settings);
  ::enterprise_management::TPMFirmwareUpdateSettingsProto* unsafe_arena_release_tpm_firmware_update_settings();

  // optional .enterprise_management.OBSOLETE_MinimumRequiredVersionProto minimum_required_version = 60 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_minimum_required_version() const;
  private:
  bool _internal_has_minimum_required_version() const;
  public:
  PROTOBUF_DEPRECATED void clear_minimum_required_version();
  PROTOBUF_DEPRECATED const ::enterprise_management::OBSOLETE_MinimumRequiredVersionProto& minimum_required_version() const;
  PROTOBUF_DEPRECATED ::enterprise_management::OBSOLETE_MinimumRequiredVersionProto* release_minimum_required_version();
  PROTOBUF_DEPRECATED ::enterprise_management::OBSOLETE_MinimumRequiredVersionProto* mutable_minimum_required_version();
  PROTOBUF_DEPRECATED void set_allocated_minimum_required_version(::enterprise_management::OBSOLETE_MinimumRequiredVersionProto* minimum_required_version);
  private:
  const ::enterprise_management::OBSOLETE_MinimumRequiredVersionProto& _internal_minimum_required_version() const;
  ::enterprise_management::OBSOLETE_MinimumRequiredVersionProto* _internal_mutable_minimum_required_version();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_minimum_required_version(
      ::enterprise_management::OBSOLETE_MinimumRequiredVersionProto* minimum_required_version);
  PROTOBUF_DEPRECATED ::enterprise_management::OBSOLETE_MinimumRequiredVersionProto* unsafe_arena_release_minimum_required_version();

  // optional .enterprise_management.DeviceLoginScreenAutoSelectCertificateForUrls device_login_screen_auto_select_certificate_for_urls = 62;
  bool has_device_login_screen_auto_select_certificate_for_urls() const;
  private:
  bool _internal_has_device_login_screen_auto_select_certificate_for_urls() const;
  public:
  void clear_device_login_screen_auto_select_certificate_for_urls();
  const ::enterprise_management::DeviceLoginScreenAutoSelectCertificateForUrls& device_login_screen_auto_select_certificate_for_urls() const;
  ::enterprise_management::DeviceLoginScreenAutoSelectCertificateForUrls* release_device_login_screen_auto_select_certificate_for_urls();
  ::enterprise_management::DeviceLoginScreenAutoSelectCertificateForUrls* mutable_device_login_screen_auto_select_certificate_for_urls();
  void set_allocated_device_login_screen_auto_select_certificate_for_urls(::enterprise_management::DeviceLoginScreenAutoSelectCertificateForUrls* device_login_screen_auto_select_certificate_for_urls);
  private:
  const ::enterprise_management::DeviceLoginScreenAutoSelectCertificateForUrls& _internal_device_login_screen_auto_select_certificate_for_urls() const;
  ::enterprise_management::DeviceLoginScreenAutoSelectCertificateForUrls* _internal_mutable_device_login_screen_auto_select_certificate_for_urls();
  public:
  void unsafe_arena_set_allocated_device_login_screen_auto_select_certificate_for_urls(
      ::enterprise_management::DeviceLoginScreenAutoSelectCertificateForUrls* device_login_screen_auto_select_certificate_for_urls);
  ::enterprise_management::DeviceLoginScreenAutoSelectCertificateForUrls* unsafe_arena_release_device_login_screen_auto_select_certificate_for_urls();

  // optional .enterprise_management.UnaffiliatedArcAllowedProto unaffiliated_arc_allowed = 63;
  bool has_unaffiliated_arc_allowed() const;
  private:
  bool _internal_has_unaffiliated_arc_allowed() const;
  public:
  void clear_unaffiliated_arc_allowed();
  const ::enterprise_management::UnaffiliatedArcAllowedProto& unaffiliated_arc_allowed() const;
  ::enterprise_management::UnaffiliatedArcAllowedProto* release_unaffiliated_arc_allowed();
  ::enterprise_management::UnaffiliatedArcAllowedProto* mutable_unaffiliated_arc_allowed();
  void set_allocated_unaffiliated_arc_allowed(::enterprise_management::UnaffiliatedArcAllowedProto* unaffiliated_arc_allowed);
  private:
  const ::enterprise_management::UnaffiliatedArcAllowedProto& _internal_unaffiliated_arc_allowed() const;
  ::enterprise_management::UnaffiliatedArcAllowedProto* _internal_mutable_unaffiliated_arc_allowed();
  public:
  void unsafe_arena_set_allocated_unaffiliated_arc_allowed(
      ::enterprise_management::UnaffiliatedArcAllowedProto* unaffiliated_arc_allowed);
  ::enterprise_management::UnaffiliatedArcAllowedProto* unsafe_arena_release_unaffiliated_arc_allowed();

  // optional .enterprise_management.NetworkHostnameProto network_hostname = 64;
  bool has_network_hostname() const;
  private:
  bool _internal_has_network_hostname() const;
  public:
  void clear_network_hostname();
  const ::enterprise_management::NetworkHostnameProto& network_hostname() const;
  ::enterprise_management::NetworkHostnameProto* release_network_hostname();
  ::enterprise_management::NetworkHostnameProto* mutable_network_hostname();
  void set_allocated_network_hostname(::enterprise_management::NetworkHostnameProto* network_hostname);
  private:
  const ::enterprise_management::NetworkHostnameProto& _internal_network_hostname() const;
  ::enterprise_management::NetworkHostnameProto* _internal_mutable_network_hostname();
  public:
  void unsafe_arena_set_allocated_network_hostname(
      ::enterprise_management::NetworkHostnameProto* network_hostname);
  ::enterprise_management::NetworkHostnameProto* unsafe_arena_release_network_hostname();

  // optional .enterprise_management.DeviceKerberosEncryptionTypesProto device_kerberos_encryption_types = 65;
  bool has_device_kerberos_encryption_types() const;
  private:
  bool _internal_has_device_kerberos_encryption_types() const;
  public:
  void clear_device_kerberos_encryption_types();
  const ::enterprise_management::DeviceKerberosEncryptionTypesProto& device_kerberos_encryption_types() const;
  ::enterprise_management::DeviceKerberosEncryptionTypesProto* release_device_kerberos_encryption_types();
  ::enterprise_management::DeviceKerberosEncryptionTypesProto* mutable_device_kerberos_encryption_types();
  void set_allocated_device_kerberos_encryption_types(::enterprise_management::DeviceKerberosEncryptionTypesProto* device_kerberos_encryption_types);
  private:
  const ::enterprise_management::DeviceKerberosEncryptionTypesProto& _internal_device_kerberos_encryption_types() const;
  ::enterprise_management::DeviceKerberosEncryptionTypesProto* _internal_mutable_device_kerberos_encryption_types();
  public:
  void unsafe_arena_set_allocated_device_kerberos_encryption_types(
      ::enterprise_management::DeviceKerberosEncryptionTypesProto* device_kerberos_encryption_types);
  ::enterprise_management::DeviceKerberosEncryptionTypesProto* unsafe_arena_release_device_kerberos_encryption_types();

  // optional .enterprise_management.DeviceUserPolicyLoopbackProcessingModeProto device_user_policy_loopback_processing_mode = 66;
  bool has_device_user_policy_loopback_processing_mode() const;
  private:
  bool _internal_has_device_user_policy_loopback_processing_mode() const;
  public:
  void clear_device_user_policy_loopback_processing_mode();
  const ::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto& device_user_policy_loopback_processing_mode() const;
  ::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto* release_device_user_policy_loopback_processing_mode();
  ::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto* mutable_device_user_policy_loopback_processing_mode();
  void set_allocated_device_user_policy_loopback_processing_mode(::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto* device_user_policy_loopback_processing_mode);
  private:
  const ::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto& _internal_device_user_policy_loopback_processing_mode() const;
  ::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto* _internal_mutable_device_user_policy_loopback_processing_mode();
  public:
  void unsafe_arena_set_allocated_device_user_policy_loopback_processing_mode(
      ::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto* device_user_policy_loopback_processing_mode);
  ::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto* unsafe_arena_release_device_user_policy_loopback_processing_mode();

  // optional .enterprise_management.DeviceLoginScreenIsolateOriginsProto device_login_screen_isolate_origins = 67;
  bool has_device_login_screen_isolate_origins() const;
  private:
  bool _internal_has_device_login_screen_isolate_origins() const;
  public:
  void clear_device_login_screen_isolate_origins();
  const ::enterprise_management::DeviceLoginScreenIsolateOriginsProto& device_login_screen_isolate_origins() const;
  ::enterprise_management::DeviceLoginScreenIsolateOriginsProto* release_device_login_screen_isolate_origins();
  ::enterprise_management::DeviceLoginScreenIsolateOriginsProto* mutable_device_login_screen_isolate_origins();
  void set_allocated_device_login_screen_isolate_origins(::enterprise_management::DeviceLoginScreenIsolateOriginsProto* device_login_screen_isolate_origins);
  private:
  const ::enterprise_management::DeviceLoginScreenIsolateOriginsProto& _internal_device_login_screen_isolate_origins() const;
  ::enterprise_management::DeviceLoginScreenIsolateOriginsProto* _internal_mutable_device_login_screen_isolate_origins();
  public:
  void unsafe_arena_set_allocated_device_login_screen_isolate_origins(
      ::enterprise_management::DeviceLoginScreenIsolateOriginsProto* device_login_screen_isolate_origins);
  ::enterprise_management::DeviceLoginScreenIsolateOriginsProto* unsafe_arena_release_device_login_screen_isolate_origins();

  // optional .enterprise_management.DeviceLoginScreenSitePerProcessProto device_login_screen_site_per_process = 68;
  bool has_device_login_screen_site_per_process() const;
  private:
  bool _internal_has_device_login_screen_site_per_process() const;
  public:
  void clear_device_login_screen_site_per_process();
  const ::enterprise_management::DeviceLoginScreenSitePerProcessProto& device_login_screen_site_per_process() const;
  ::enterprise_management::DeviceLoginScreenSitePerProcessProto* release_device_login_screen_site_per_process();
  ::enterprise_management::DeviceLoginScreenSitePerProcessProto* mutable_device_login_screen_site_per_process();
  void set_allocated_device_login_screen_site_per_process(::enterprise_management::DeviceLoginScreenSitePerProcessProto* device_login_screen_site_per_process);
  private:
  const ::enterprise_management::DeviceLoginScreenSitePerProcessProto& _internal_device_login_screen_site_per_process() const;
  ::enterprise_management::DeviceLoginScreenSitePerProcessProto* _internal_mutable_device_login_screen_site_per_process();
  public:
  void unsafe_arena_set_allocated_device_login_screen_site_per_process(
      ::enterprise_management::DeviceLoginScreenSitePerProcessProto* device_login_screen_site_per_process);
  ::enterprise_management::DeviceLoginScreenSitePerProcessProto* unsafe_arena_release_device_login_screen_site_per_process();

  // optional .enterprise_management.VirtualMachinesAllowedProto virtual_machines_allowed = 69;
  bool has_virtual_machines_allowed() const;
  private:
  bool _internal_has_virtual_machines_allowed() const;
  public:
  void clear_virtual_machines_allowed();
  const ::enterprise_management::VirtualMachinesAllowedProto& virtual_machines_allowed() const;
  ::enterprise_management::VirtualMachinesAllowedProto* release_virtual_machines_allowed();
  ::enterprise_management::VirtualMachinesAllowedProto* mutable_virtual_machines_allowed();
  void set_allocated_virtual_machines_allowed(::enterprise_management::VirtualMachinesAllowedProto* virtual_machines_allowed);
  private:
  const ::enterprise_management::VirtualMachinesAllowedProto& _internal_virtual_machines_allowed() const;
  ::enterprise_management::VirtualMachinesAllowedProto* _internal_mutable_virtual_machines_allowed();
  public:
  void unsafe_arena_set_allocated_virtual_machines_allowed(
      ::enterprise_management::VirtualMachinesAllowedProto* virtual_machines_allowed);
  ::enterprise_management::VirtualMachinesAllowedProto* unsafe_arena_release_virtual_machines_allowed();

  // optional .enterprise_management.DeviceMachinePasswordChangeRateProto device_machine_password_change_rate = 70;
  bool has_device_machine_password_change_rate() const;
  private:
  bool _internal_has_device_machine_password_change_rate() const;
  public:
  void clear_device_machine_password_change_rate();
  const ::enterprise_management::DeviceMachinePasswordChangeRateProto& device_machine_password_change_rate() const;
  ::enterprise_management::DeviceMachinePasswordChangeRateProto* release_device_machine_password_change_rate();
  ::enterprise_management::DeviceMachinePasswordChangeRateProto* mutable_device_machine_password_change_rate();
  void set_allocated_device_machine_password_change_rate(::enterprise_management::DeviceMachinePasswordChangeRateProto* device_machine_password_change_rate);
  private:
  const ::enterprise_management::DeviceMachinePasswordChangeRateProto& _internal_device_machine_password_change_rate() const;
  ::enterprise_management::DeviceMachinePasswordChangeRateProto* _internal_mutable_device_machine_password_change_rate();
  public:
  void unsafe_arena_set_allocated_device_machine_password_change_rate(
      ::enterprise_management::DeviceMachinePasswordChangeRateProto* device_machine_password_change_rate);
  ::enterprise_management::DeviceMachinePasswordChangeRateProto* unsafe_arena_release_device_machine_password_change_rate();

  // optional .enterprise_management.SamlLoginAuthenticationTypeProto saml_login_authentication_type = 71;
  bool has_saml_login_authentication_type() const;
  private:
  bool _internal_has_saml_login_authentication_type() const;
  public:
  void clear_saml_login_authentication_type();
  const ::enterprise_management::SamlLoginAuthenticationTypeProto& saml_login_authentication_type() const;
  ::enterprise_management::SamlLoginAuthenticationTypeProto* release_saml_login_authentication_type();
  ::enterprise_management::SamlLoginAuthenticationTypeProto* mutable_saml_login_authentication_type();
  void set_allocated_saml_login_authentication_type(::enterprise_management::SamlLoginAuthenticationTypeProto* saml_login_authentication_type);
  private:
  const ::enterprise_management::SamlLoginAuthenticationTypeProto& _internal_saml_login_authentication_type() const;
  ::enterprise_management::SamlLoginAuthenticationTypeProto* _internal_mutable_saml_login_authentication_type();
  public:
  void unsafe_arena_set_allocated_saml_login_authentication_type(
      ::enterprise_management::SamlLoginAuthenticationTypeProto* saml_login_authentication_type);
  ::enterprise_management::SamlLoginAuthenticationTypeProto* unsafe_arena_release_saml_login_authentication_type();

  // optional .enterprise_management.DeviceUnaffiliatedCrostiniAllowedProto device_unaffiliated_crostini_allowed = 72;
  bool has_device_unaffiliated_crostini_allowed() const;
  private:
  bool _internal_has_device_unaffiliated_crostini_allowed() const;
  public:
  void clear_device_unaffiliated_crostini_allowed();
  const ::enterprise_management::DeviceUnaffiliatedCrostiniAllowedProto& device_unaffiliated_crostini_allowed() const;
  ::enterprise_management::DeviceUnaffiliatedCrostiniAllowedProto* release_device_unaffiliated_crostini_allowed();
  ::enterprise_management::DeviceUnaffiliatedCrostiniAllowedProto* mutable_device_unaffiliated_crostini_allowed();
  void set_allocated_device_unaffiliated_crostini_allowed(::enterprise_management::DeviceUnaffiliatedCrostiniAllowedProto* device_unaffiliated_crostini_allowed);
  private:
  const ::enterprise_management::DeviceUnaffiliatedCrostiniAllowedProto& _internal_device_unaffiliated_crostini_allowed() const;
  ::enterprise_management::DeviceUnaffiliatedCrostiniAllowedProto* _internal_mutable_device_unaffiliated_crostini_allowed();
  public:
  void unsafe_arena_set_allocated_device_unaffiliated_crostini_allowed(
      ::enterprise_management::DeviceUnaffiliatedCrostiniAllowedProto* device_unaffiliated_crostini_allowed);
  ::enterprise_management::DeviceUnaffiliatedCrostiniAllowedProto* unsafe_arena_release_device_unaffiliated_crostini_allowed();

  // optional .enterprise_management.DeviceWiFiFastTransitionEnabledProto device_wifi_fast_transition_enabled = 73;
  bool has_device_wifi_fast_transition_enabled() const;
  private:
  bool _internal_has_device_wifi_fast_transition_enabled() const;
  public:
  void clear_device_wifi_fast_transition_enabled();
  const ::enterprise_management::DeviceWiFiFastTransitionEnabledProto& device_wifi_fast_transition_enabled() const;
  ::enterprise_management::DeviceWiFiFastTransitionEnabledProto* release_device_wifi_fast_transition_enabled();
  ::enterprise_management::DeviceWiFiFastTransitionEnabledProto* mutable_device_wifi_fast_transition_enabled();
  void set_allocated_device_wifi_fast_transition_enabled(::enterprise_management::DeviceWiFiFastTransitionEnabledProto* device_wifi_fast_transition_enabled);
  private:
  const ::enterprise_management::DeviceWiFiFastTransitionEnabledProto& _internal_device_wifi_fast_transition_enabled() const;
  ::enterprise_management::DeviceWiFiFastTransitionEnabledProto* _internal_mutable_device_wifi_fast_transition_enabled();
  public:
  void unsafe_arena_set_allocated_device_wifi_fast_transition_enabled(
      ::enterprise_management::DeviceWiFiFastTransitionEnabledProto* device_wifi_fast_transition_enabled);
  ::enterprise_management::DeviceWiFiFastTransitionEnabledProto* unsafe_arena_release_device_wifi_fast_transition_enabled();

  // optional .enterprise_management.DeviceDisplayResolutionProto device_display_resolution = 74;
  bool has_device_display_resolution() const;
  private:
  bool _internal_has_device_display_resolution() const;
  public:
  void clear_device_display_resolution();
  const ::enterprise_management::DeviceDisplayResolutionProto& device_display_resolution() const;
  ::enterprise_management::DeviceDisplayResolutionProto* release_device_display_resolution();
  ::enterprise_management::DeviceDisplayResolutionProto* mutable_device_display_resolution();
  void set_allocated_device_display_resolution(::enterprise_management::DeviceDisplayResolutionProto* device_display_resolution);
  private:
  const ::enterprise_management::DeviceDisplayResolutionProto& _internal_device_display_resolution() const;
  ::enterprise_management::DeviceDisplayResolutionProto* _internal_mutable_device_display_resolution();
  public:
  void unsafe_arena_set_allocated_device_display_resolution(
      ::enterprise_management::DeviceDisplayResolutionProto* device_display_resolution);
  ::enterprise_management::DeviceDisplayResolutionProto* unsafe_arena_release_device_display_resolution();

  // optional .enterprise_management.PluginVmAllowedProto plugin_vm_allowed = 75;
  bool has_plugin_vm_allowed() const;
  private:
  bool _internal_has_plugin_vm_allowed() const;
  public:
  void clear_plugin_vm_allowed();
  const ::enterprise_management::PluginVmAllowedProto& plugin_vm_allowed() const;
  ::enterprise_management::PluginVmAllowedProto* release_plugin_vm_allowed();
  ::enterprise_management::PluginVmAllowedProto* mutable_plugin_vm_allowed();
  void set_allocated_plugin_vm_allowed(::enterprise_management::PluginVmAllowedProto* plugin_vm_allowed);
  private:
  const ::enterprise_management::PluginVmAllowedProto& _internal_plugin_vm_allowed() const;
  ::enterprise_management::PluginVmAllowedProto* _internal_mutable_plugin_vm_allowed();
  public:
  void unsafe_arena_set_allocated_plugin_vm_allowed(
      ::enterprise_management::PluginVmAllowedProto* plugin_vm_allowed);
  ::enterprise_management::PluginVmAllowedProto* unsafe_arena_release_plugin_vm_allowed();

  // optional .enterprise_management.DeviceGpoCacheLifetimeProto device_gpo_cache_lifetime = 76;
  bool has_device_gpo_cache_lifetime() const;
  private:
  bool _internal_has_device_gpo_cache_lifetime() const;
  public:
  void clear_device_gpo_cache_lifetime();
  const ::enterprise_management::DeviceGpoCacheLifetimeProto& device_gpo_cache_lifetime() const;
  ::enterprise_management::DeviceGpoCacheLifetimeProto* release_device_gpo_cache_lifetime();
  ::enterprise_management::DeviceGpoCacheLifetimeProto* mutable_device_gpo_cache_lifetime();
  void set_allocated_device_gpo_cache_lifetime(::enterprise_management::DeviceGpoCacheLifetimeProto* device_gpo_cache_lifetime);
  private:
  const ::enterprise_management::DeviceGpoCacheLifetimeProto& _internal_device_gpo_cache_lifetime() const;
  ::enterprise_management::DeviceGpoCacheLifetimeProto* _internal_mutable_device_gpo_cache_lifetime();
  public:
  void unsafe_arena_set_allocated_device_gpo_cache_lifetime(
      ::enterprise_management::DeviceGpoCacheLifetimeProto* device_gpo_cache_lifetime);
  ::enterprise_management::DeviceGpoCacheLifetimeProto* unsafe_arena_release_device_gpo_cache_lifetime();

  // optional .enterprise_management.DeviceAuthDataCacheLifetimeProto device_auth_data_cache_lifetime = 77;
  bool has_device_auth_data_cache_lifetime() const;
  private:
  bool _internal_has_device_auth_data_cache_lifetime() const;
  public:
  void clear_device_auth_data_cache_lifetime();
  const ::enterprise_management::DeviceAuthDataCacheLifetimeProto& device_auth_data_cache_lifetime() const;
  ::enterprise_management::DeviceAuthDataCacheLifetimeProto* release_device_auth_data_cache_lifetime();
  ::enterprise_management::DeviceAuthDataCacheLifetimeProto* mutable_device_auth_data_cache_lifetime();
  void set_allocated_device_auth_data_cache_lifetime(::enterprise_management::DeviceAuthDataCacheLifetimeProto* device_auth_data_cache_lifetime);
  private:
  const ::enterprise_management::DeviceAuthDataCacheLifetimeProto& _internal_device_auth_data_cache_lifetime() const;
  ::enterprise_management::DeviceAuthDataCacheLifetimeProto* _internal_mutable_device_auth_data_cache_lifetime();
  public:
  void unsafe_arena_set_allocated_device_auth_data_cache_lifetime(
      ::enterprise_management::DeviceAuthDataCacheLifetimeProto* device_auth_data_cache_lifetime);
  ::enterprise_management::DeviceAuthDataCacheLifetimeProto* unsafe_arena_release_device_auth_data_cache_lifetime();

  // optional .enterprise_management.PluginVmLicenseKeyProto plugin_vm_license_key = 78;
  bool has_plugin_vm_license_key() const;
  private:
  bool _internal_has_plugin_vm_license_key() const;
  public:
  void clear_plugin_vm_license_key();
  const ::enterprise_management::PluginVmLicenseKeyProto& plugin_vm_license_key() const;
  ::enterprise_management::PluginVmLicenseKeyProto* release_plugin_vm_license_key();
  ::enterprise_management::PluginVmLicenseKeyProto* mutable_plugin_vm_license_key();
  void set_allocated_plugin_vm_license_key(::enterprise_management::PluginVmLicenseKeyProto* plugin_vm_license_key);
  private:
  const ::enterprise_management::PluginVmLicenseKeyProto& _internal_plugin_vm_license_key() const;
  ::enterprise_management::PluginVmLicenseKeyProto* _internal_mutable_plugin_vm_license_key();
  public:
  void unsafe_arena_set_allocated_plugin_vm_license_key(
      ::enterprise_management::PluginVmLicenseKeyProto* plugin_vm_license_key);
  ::enterprise_management::PluginVmLicenseKeyProto* unsafe_arena_release_plugin_vm_license_key();

  // optional .enterprise_management.DeviceRebootOnUserSignoutProto device_reboot_on_user_signout = 79;
  bool has_device_reboot_on_user_signout() const;
  private:
  bool _internal_has_device_reboot_on_user_signout() const;
  public:
  void clear_device_reboot_on_user_signout();
  const ::enterprise_management::DeviceRebootOnUserSignoutProto& device_reboot_on_user_signout() const;
  ::enterprise_management::DeviceRebootOnUserSignoutProto* release_device_reboot_on_user_signout();
  ::enterprise_management::DeviceRebootOnUserSignoutProto* mutable_device_reboot_on_user_signout();
  void set_allocated_device_reboot_on_user_signout(::enterprise_management::DeviceRebootOnUserSignoutProto* device_reboot_on_user_signout);
  private:
  const ::enterprise_management::DeviceRebootOnUserSignoutProto& _internal_device_reboot_on_user_signout() const;
  ::enterprise_management::DeviceRebootOnUserSignoutProto* _internal_mutable_device_reboot_on_user_signout();
  public:
  void unsafe_arena_set_allocated_device_reboot_on_user_signout(
      ::enterprise_management::DeviceRebootOnUserSignoutProto* device_reboot_on_user_signout);
  ::enterprise_management::DeviceRebootOnUserSignoutProto* unsafe_arena_release_device_reboot_on_user_signout();

  // optional .enterprise_management.DeviceWilcoDtcAllowedProto device_wilco_dtc_allowed = 80;
  bool has_device_wilco_dtc_allowed() const;
  private:
  bool _internal_has_device_wilco_dtc_allowed() const;
  public:
  void clear_device_wilco_dtc_allowed();
  const ::enterprise_management::DeviceWilcoDtcAllowedProto& device_wilco_dtc_allowed() const;
  ::enterprise_management::DeviceWilcoDtcAllowedProto* release_device_wilco_dtc_allowed();
  ::enterprise_management::DeviceWilcoDtcAllowedProto* mutable_device_wilco_dtc_allowed();
  void set_allocated_device_wilco_dtc_allowed(::enterprise_management::DeviceWilcoDtcAllowedProto* device_wilco_dtc_allowed);
  private:
  const ::enterprise_management::DeviceWilcoDtcAllowedProto& _internal_device_wilco_dtc_allowed() const;
  ::enterprise_management::DeviceWilcoDtcAllowedProto* _internal_mutable_device_wilco_dtc_allowed();
  public:
  void unsafe_arena_set_allocated_device_wilco_dtc_allowed(
      ::enterprise_management::DeviceWilcoDtcAllowedProto* device_wilco_dtc_allowed);
  ::enterprise_management::DeviceWilcoDtcAllowedProto* unsafe_arena_release_device_wilco_dtc_allowed();

  // optional .enterprise_management.DeviceWilcoDtcConfigurationProto device_wilco_dtc_configuration = 81;
  bool has_device_wilco_dtc_configuration() const;
  private:
  bool _internal_has_device_wilco_dtc_configuration() const;
  public:
  void clear_device_wilco_dtc_configuration();
  const ::enterprise_management::DeviceWilcoDtcConfigurationProto& device_wilco_dtc_configuration() const;
  ::enterprise_management::DeviceWilcoDtcConfigurationProto* release_device_wilco_dtc_configuration();
  ::enterprise_management::DeviceWilcoDtcConfigurationProto* mutable_device_wilco_dtc_configuration();
  void set_allocated_device_wilco_dtc_configuration(::enterprise_management::DeviceWilcoDtcConfigurationProto* device_wilco_dtc_configuration);
  private:
  const ::enterprise_management::DeviceWilcoDtcConfigurationProto& _internal_device_wilco_dtc_configuration() const;
  ::enterprise_management::DeviceWilcoDtcConfigurationProto* _internal_mutable_device_wilco_dtc_configuration();
  public:
  void unsafe_arena_set_allocated_device_wilco_dtc_configuration(
      ::enterprise_management::DeviceWilcoDtcConfigurationProto* device_wilco_dtc_configuration);
  ::enterprise_management::DeviceWilcoDtcConfigurationProto* unsafe_arena_release_device_wilco_dtc_configuration();

  // optional .enterprise_management.DeviceWiFiAllowedProto device_wifi_allowed = 82;
  bool has_device_wifi_allowed() const;
  private:
  bool _internal_has_device_wifi_allowed() const;
  public:
  void clear_device_wifi_allowed();
  const ::enterprise_management::DeviceWiFiAllowedProto& device_wifi_allowed() const;
  ::enterprise_management::DeviceWiFiAllowedProto* release_device_wifi_allowed();
  ::enterprise_management::DeviceWiFiAllowedProto* mutable_device_wifi_allowed();
  void set_allocated_device_wifi_allowed(::enterprise_management::DeviceWiFiAllowedProto* device_wifi_allowed);
  private:
  const ::enterprise_management::DeviceWiFiAllowedProto& _internal_device_wifi_allowed() const;
  ::enterprise_management::DeviceWiFiAllowedProto* _internal_mutable_device_wifi_allowed();
  public:
  void unsafe_arena_set_allocated_device_wifi_allowed(
      ::enterprise_management::DeviceWiFiAllowedProto* device_wifi_allowed);
  ::enterprise_management::DeviceWiFiAllowedProto* unsafe_arena_release_device_wifi_allowed();

  // optional .enterprise_management.DevicePowerPeakShiftProto device_power_peak_shift = 83;
  bool has_device_power_peak_shift() const;
  private:
  bool _internal_has_device_power_peak_shift() const;
  public:
  void clear_device_power_peak_shift();
  const ::enterprise_management::DevicePowerPeakShiftProto& device_power_peak_shift() const;
  ::enterprise_management::DevicePowerPeakShiftProto* release_device_power_peak_shift();
  ::enterprise_management::DevicePowerPeakShiftProto* mutable_device_power_peak_shift();
  void set_allocated_device_power_peak_shift(::enterprise_management::DevicePowerPeakShiftProto* device_power_peak_shift);
  private:
  const ::enterprise_management::DevicePowerPeakShiftProto& _internal_device_power_peak_shift() const;
  ::enterprise_management::DevicePowerPeakShiftProto* _internal_mutable_device_power_peak_shift();
  public:
  void unsafe_arena_set_allocated_device_power_peak_shift(
      ::enterprise_management::DevicePowerPeakShiftProto* device_power_peak_shift);
  ::enterprise_management::DevicePowerPeakShiftProto* unsafe_arena_release_device_power_peak_shift();

  // optional .enterprise_management.DeviceBootOnAcProto device_boot_on_ac = 84;
  bool has_device_boot_on_ac() const;
  private:
  bool _internal_has_device_boot_on_ac() const;
  public:
  void clear_device_boot_on_ac();
  const ::enterprise_management::DeviceBootOnAcProto& device_boot_on_ac() const;
  ::enterprise_management::DeviceBootOnAcProto* release_device_boot_on_ac();
  ::enterprise_management::DeviceBootOnAcProto* mutable_device_boot_on_ac();
  void set_allocated_device_boot_on_ac(::enterprise_management::DeviceBootOnAcProto* device_boot_on_ac);
  private:
  const ::enterprise_management::DeviceBootOnAcProto& _internal_device_boot_on_ac() const;
  ::enterprise_management::DeviceBootOnAcProto* _internal_mutable_device_boot_on_ac();
  public:
  void unsafe_arena_set_allocated_device_boot_on_ac(
      ::enterprise_management::DeviceBootOnAcProto* device_boot_on_ac);
  ::enterprise_management::DeviceBootOnAcProto* unsafe_arena_release_device_boot_on_ac();

  // optional .enterprise_management.DeviceDockMacAddressSourceProto device_dock_mac_address_source = 85;
  bool has_device_dock_mac_address_source() const;
  private:
  bool _internal_has_device_dock_mac_address_source() const;
  public:
  void clear_device_dock_mac_address_source();
  const ::enterprise_management::DeviceDockMacAddressSourceProto& device_dock_mac_address_source() const;
  ::enterprise_management::DeviceDockMacAddressSourceProto* release_device_dock_mac_address_source();
  ::enterprise_management::DeviceDockMacAddressSourceProto* mutable_device_dock_mac_address_source();
  void set_allocated_device_dock_mac_address_source(::enterprise_management::DeviceDockMacAddressSourceProto* device_dock_mac_address_source);
  private:
  const ::enterprise_management::DeviceDockMacAddressSourceProto& _internal_device_dock_mac_address_source() const;
  ::enterprise_management::DeviceDockMacAddressSourceProto* _internal_mutable_device_dock_mac_address_source();
  public:
  void unsafe_arena_set_allocated_device_dock_mac_address_source(
      ::enterprise_management::DeviceDockMacAddressSourceProto* device_dock_mac_address_source);
  ::enterprise_management::DeviceDockMacAddressSourceProto* unsafe_arena_release_device_dock_mac_address_source();

  // optional .enterprise_management.DeviceAdvancedBatteryChargeModeProto device_advanced_battery_charge_mode = 86;
  bool has_device_advanced_battery_charge_mode() const;
  private:
  bool _internal_has_device_advanced_battery_charge_mode() const;
  public:
  void clear_device_advanced_battery_charge_mode();
  const ::enterprise_management::DeviceAdvancedBatteryChargeModeProto& device_advanced_battery_charge_mode() const;
  ::enterprise_management::DeviceAdvancedBatteryChargeModeProto* release_device_advanced_battery_charge_mode();
  ::enterprise_management::DeviceAdvancedBatteryChargeModeProto* mutable_device_advanced_battery_charge_mode();
  void set_allocated_device_advanced_battery_charge_mode(::enterprise_management::DeviceAdvancedBatteryChargeModeProto* device_advanced_battery_charge_mode);
  private:
  const ::enterprise_management::DeviceAdvancedBatteryChargeModeProto& _internal_device_advanced_battery_charge_mode() const;
  ::enterprise_management::DeviceAdvancedBatteryChargeModeProto* _internal_mutable_device_advanced_battery_charge_mode();
  public:
  void unsafe_arena_set_allocated_device_advanced_battery_charge_mode(
      ::enterprise_management::DeviceAdvancedBatteryChargeModeProto* device_advanced_battery_charge_mode);
  ::enterprise_management::DeviceAdvancedBatteryChargeModeProto* unsafe_arena_release_device_advanced_battery_charge_mode();

  // optional .enterprise_management.DeviceBatteryChargeModeProto device_battery_charge_mode = 87;
  bool has_device_battery_charge_mode() const;
  private:
  bool _internal_has_device_battery_charge_mode() const;
  public:
  void clear_device_battery_charge_mode();
  const ::enterprise_management::DeviceBatteryChargeModeProto& device_battery_charge_mode() const;
  ::enterprise_management::DeviceBatteryChargeModeProto* release_device_battery_charge_mode();
  ::enterprise_management::DeviceBatteryChargeModeProto* mutable_device_battery_charge_mode();
  void set_allocated_device_battery_charge_mode(::enterprise_management::DeviceBatteryChargeModeProto* device_battery_charge_mode);
  private:
  const ::enterprise_management::DeviceBatteryChargeModeProto& _internal_device_battery_charge_mode() const;
  ::enterprise_management::DeviceBatteryChargeModeProto* _internal_mutable_device_battery_charge_mode();
  public:
  void unsafe_arena_set_allocated_device_battery_charge_mode(
      ::enterprise_management::DeviceBatteryChargeModeProto* device_battery_charge_mode);
  ::enterprise_management::DeviceBatteryChargeModeProto* unsafe_arena_release_device_battery_charge_mode();

  // optional .enterprise_management.DeviceUsbPowerShareProto device_usb_power_share = 88;
  bool has_device_usb_power_share() const;
  private:
  bool _internal_has_device_usb_power_share() const;
  public:
  void clear_device_usb_power_share();
  const ::enterprise_management::DeviceUsbPowerShareProto& device_usb_power_share() const;
  ::enterprise_management::DeviceUsbPowerShareProto* release_device_usb_power_share();
  ::enterprise_management::DeviceUsbPowerShareProto* mutable_device_usb_power_share();
  void set_allocated_device_usb_power_share(::enterprise_management::DeviceUsbPowerShareProto* device_usb_power_share);
  private:
  const ::enterprise_management::DeviceUsbPowerShareProto& _internal_device_usb_power_share() const;
  ::enterprise_management::DeviceUsbPowerShareProto* _internal_mutable_device_usb_power_share();
  public:
  void unsafe_arena_set_allocated_device_usb_power_share(
      ::enterprise_management::DeviceUsbPowerShareProto* device_usb_power_share);
  ::enterprise_management::DeviceUsbPowerShareProto* unsafe_arena_release_device_usb_power_share();

  // optional .enterprise_management.DeviceScheduledUpdateCheckProto device_scheduled_update_check = 89;
  bool has_device_scheduled_update_check() const;
  private:
  bool _internal_has_device_scheduled_update_check() const;
  public:
  void clear_device_scheduled_update_check();
  const ::enterprise_management::DeviceScheduledUpdateCheckProto& device_scheduled_update_check() const;
  ::enterprise_management::DeviceScheduledUpdateCheckProto* release_device_scheduled_update_check();
  ::enterprise_management::DeviceScheduledUpdateCheckProto* mutable_device_scheduled_update_check();
  void set_allocated_device_scheduled_update_check(::enterprise_management::DeviceScheduledUpdateCheckProto* device_scheduled_update_check);
  private:
  const ::enterprise_management::DeviceScheduledUpdateCheckProto& _internal_device_scheduled_update_check() const;
  ::enterprise_management::DeviceScheduledUpdateCheckProto* _internal_mutable_device_scheduled_update_check();
  public:
  void unsafe_arena_set_allocated_device_scheduled_update_check(
      ::enterprise_management::DeviceScheduledUpdateCheckProto* device_scheduled_update_check);
  ::enterprise_management::DeviceScheduledUpdateCheckProto* unsafe_arena_release_device_scheduled_update_check();

  // optional .enterprise_management.DevicePowerwashAllowedProto device_powerwash_allowed = 91;
  bool has_device_powerwash_allowed() const;
  private:
  bool _internal_has_device_powerwash_allowed() const;
  public:
  void clear_device_powerwash_allowed();
  const ::enterprise_management::DevicePowerwashAllowedProto& device_powerwash_allowed() const;
  ::enterprise_management::DevicePowerwashAllowedProto* release_device_powerwash_allowed();
  ::enterprise_management::DevicePowerwashAllowedProto* mutable_device_powerwash_allowed();
  void set_allocated_device_powerwash_allowed(::enterprise_management::DevicePowerwashAllowedProto* device_powerwash_allowed);
  private:
  const ::enterprise_management::DevicePowerwashAllowedProto& _internal_device_powerwash_allowed() const;
  ::enterprise_management::DevicePowerwashAllowedProto* _internal_mutable_device_powerwash_allowed();
  public:
  void unsafe_arena_set_allocated_device_powerwash_allowed(
      ::enterprise_management::DevicePowerwashAllowedProto* device_powerwash_allowed);
  ::enterprise_management::DevicePowerwashAllowedProto* unsafe_arena_release_device_powerwash_allowed();

  // optional .enterprise_management.DeviceLoginScreenWebUsbAllowDevicesForUrlsProto device_login_screen_webusb_allow_devices_for_urls = 92;
  bool has_device_login_screen_webusb_allow_devices_for_urls() const;
  private:
  bool _internal_has_device_login_screen_webusb_allow_devices_for_urls() const;
  public:
  void clear_device_login_screen_webusb_allow_devices_for_urls();
  const ::enterprise_management::DeviceLoginScreenWebUsbAllowDevicesForUrlsProto& device_login_screen_webusb_allow_devices_for_urls() const;
  ::enterprise_management::DeviceLoginScreenWebUsbAllowDevicesForUrlsProto* release_device_login_screen_webusb_allow_devices_for_urls();
  ::enterprise_management::DeviceLoginScreenWebUsbAllowDevicesForUrlsProto* mutable_device_login_screen_webusb_allow_devices_for_urls();
  void set_allocated_device_login_screen_webusb_allow_devices_for_urls(::enterprise_management::DeviceLoginScreenWebUsbAllowDevicesForUrlsProto* device_login_screen_webusb_allow_devices_for_urls);
  private:
  const ::enterprise_management::DeviceLoginScreenWebUsbAllowDevicesForUrlsProto& _internal_device_login_screen_webusb_allow_devices_for_urls() const;
  ::enterprise_management::DeviceLoginScreenWebUsbAllowDevicesForUrlsProto* _internal_mutable_device_login_screen_webusb_allow_devices_for_urls();
  public:
  void unsafe_arena_set_allocated_device_login_screen_webusb_allow_devices_for_urls(
      ::enterprise_management::DeviceLoginScreenWebUsbAllowDevicesForUrlsProto* device_login_screen_webusb_allow_devices_for_urls);
  ::enterprise_management::DeviceLoginScreenWebUsbAllowDevicesForUrlsProto* unsafe_arena_release_device_login_screen_webusb_allow_devices_for_urls();

  // optional .enterprise_management.BooleanPolicyProto device_login_screen_system_info_enforced = 93;
  bool has_device_login_screen_system_info_enforced() const;
  private:
  bool _internal_has_device_login_screen_system_info_enforced() const;
  public:
  void clear_device_login_screen_system_info_enforced();
  const ::enterprise_management::BooleanPolicyProto& device_login_screen_system_info_enforced() const;
  ::enterprise_management::BooleanPolicyProto* release_device_login_screen_system_info_enforced();
  ::enterprise_management::BooleanPolicyProto* mutable_device_login_screen_system_info_enforced();
  void set_allocated_device_login_screen_system_info_enforced(::enterprise_management::BooleanPolicyProto* device_login_screen_system_info_enforced);
  private:
  const ::enterprise_management::BooleanPolicyProto& _internal_device_login_screen_system_info_enforced() const;
  ::enterprise_management::BooleanPolicyProto* _internal_mutable_device_login_screen_system_info_enforced();
  public:
  void unsafe_arena_set_allocated_device_login_screen_system_info_enforced(
      ::enterprise_management::BooleanPolicyProto* device_login_screen_system_info_enforced);
  ::enterprise_management::BooleanPolicyProto* unsafe_arena_release_device_login_screen_system_info_enforced();

  // optional .enterprise_management.StringListPolicyProto device_web_based_attestation_allowed_urls = 94;
  bool has_device_web_based_attestation_allowed_urls() const;
  private:
  bool _internal_has_device_web_based_attestation_allowed_urls() const;
  public:
  void clear_device_web_based_attestation_allowed_urls();
  const ::enterprise_management::StringListPolicyProto& device_web_based_attestation_allowed_urls() const;
  ::enterprise_management::StringListPolicyProto* release_device_web_based_attestation_allowed_urls();
  ::enterprise_management::StringListPolicyProto* mutable_device_web_based_attestation_allowed_urls();
  void set_allocated_device_web_based_attestation_allowed_urls(::enterprise_management::StringListPolicyProto* device_web_based_attestation_allowed_urls);
  private:
  const ::enterprise_management::StringListPolicyProto& _internal_device_web_based_attestation_allowed_urls() const;
  ::enterprise_management::StringListPolicyProto* _internal_mutable_device_web_based_attestation_allowed_urls();
  public:
  void unsafe_arena_set_allocated_device_web_based_attestation_allowed_urls(
      ::enterprise_management::StringListPolicyProto* device_web_based_attestation_allowed_urls);
  ::enterprise_management::StringListPolicyProto* unsafe_arena_release_device_web_based_attestation_allowed_urls();

  // optional .enterprise_management.BooleanPolicyProto device_show_numeric_keyboard_for_password = 95;
  bool has_device_show_numeric_keyboard_for_password() const;
  private:
  bool _internal_has_device_show_numeric_keyboard_for_password() const;
  public:
  void clear_device_show_numeric_keyboard_for_password();
  const ::enterprise_management::BooleanPolicyProto& device_show_numeric_keyboard_for_password() const;
  ::enterprise_management::BooleanPolicyProto* release_device_show_numeric_keyboard_for_password();
  ::enterprise_management::BooleanPolicyProto* mutable_device_show_numeric_keyboard_for_password();
  void set_allocated_device_show_numeric_keyboard_for_password(::enterprise_management::BooleanPolicyProto* device_show_numeric_keyboard_for_password);
  private:
  const ::enterprise_management::BooleanPolicyProto& _internal_device_show_numeric_keyboard_for_password() const;
  ::enterprise_management::BooleanPolicyProto* _internal_mutable_device_show_numeric_keyboard_for_password();
  public:
  void unsafe_arena_set_allocated_device_show_numeric_keyboard_for_password(
      ::enterprise_management::BooleanPolicyProto* device_show_numeric_keyboard_for_password);
  ::enterprise_management::BooleanPolicyProto* unsafe_arena_release_device_show_numeric_keyboard_for_password();

  // optional .enterprise_management.BooleanPolicyProto login_screen_primary_mouse_button_switch = 96;
  bool has_login_screen_primary_mouse_button_switch() const;
  private:
  bool _internal_has_login_screen_primary_mouse_button_switch() const;
  public:
  void clear_login_screen_primary_mouse_button_switch();
  const ::enterprise_management::BooleanPolicyProto& login_screen_primary_mouse_button_switch() const;
  ::enterprise_management::BooleanPolicyProto* release_login_screen_primary_mouse_button_switch();
  ::enterprise_management::BooleanPolicyProto* mutable_login_screen_primary_mouse_button_switch();
  void set_allocated_login_screen_primary_mouse_button_switch(::enterprise_management::BooleanPolicyProto* login_screen_primary_mouse_button_switch);
  private:
  const ::enterprise_management::BooleanPolicyProto& _internal_login_screen_primary_mouse_button_switch() const;
  ::enterprise_management::BooleanPolicyProto* _internal_mutable_login_screen_primary_mouse_button_switch();
  public:
  void unsafe_arena_set_allocated_login_screen_primary_mouse_button_switch(
      ::enterprise_management::BooleanPolicyProto* login_screen_primary_mouse_button_switch);
  ::enterprise_management::BooleanPolicyProto* unsafe_arena_release_login_screen_primary_mouse_button_switch();

  // optional .enterprise_management.StringPolicyProto minimum_chrome_version_enforced = 97;
  bool has_minimum_chrome_version_enforced() const;
  private:
  bool _internal_has_minimum_chrome_version_enforced() const;
  public:
  void clear_minimum_chrome_version_enforced();
  const ::enterprise_management::StringPolicyProto& minimum_chrome_version_enforced() const;
  ::enterprise_management::StringPolicyProto* release_minimum_chrome_version_enforced();
  ::enterprise_management::StringPolicyProto* mutable_minimum_chrome_version_enforced();
  void set_allocated_minimum_chrome_version_enforced(::enterprise_management::StringPolicyProto* minimum_chrome_version_enforced);
  private:
  const ::enterprise_management::StringPolicyProto& _internal_minimum_chrome_version_enforced() const;
  ::enterprise_management::StringPolicyProto* _internal_mutable_minimum_chrome_version_enforced();
  public:
  void unsafe_arena_set_allocated_minimum_chrome_version_enforced(
      ::enterprise_management::StringPolicyProto* minimum_chrome_version_enforced);
  ::enterprise_management::StringPolicyProto* unsafe_arena_release_minimum_chrome_version_enforced();

  // optional .enterprise_management.SystemProxySettingsProto system_proxy_settings = 98;
  bool has_system_proxy_settings() const;
  private:
  bool _internal_has_system_proxy_settings() const;
  public:
  void clear_system_proxy_settings();
  const ::enterprise_management::SystemProxySettingsProto& system_proxy_settings() const;
  ::enterprise_management::SystemProxySettingsProto* release_system_proxy_settings();
  ::enterprise_management::SystemProxySettingsProto* mutable_system_proxy_settings();
  void set_allocated_system_proxy_settings(::enterprise_management::SystemProxySettingsProto* system_proxy_settings);
  private:
  const ::enterprise_management::SystemProxySettingsProto& _internal_system_proxy_settings() const;
  ::enterprise_management::SystemProxySettingsProto* _internal_mutable_system_proxy_settings();
  public:
  void unsafe_arena_set_allocated_system_proxy_settings(
      ::enterprise_management::SystemProxySettingsProto* system_proxy_settings);
  ::enterprise_management::SystemProxySettingsProto* unsafe_arena_release_system_proxy_settings();

  // optional .enterprise_management.IntegerPolicyProto device_chrome_variations_type = 99;
  bool has_device_chrome_variations_type() const;
  private:
  bool _internal_has_device_chrome_variations_type() const;
  public:
  void clear_device_chrome_variations_type();
  const ::enterprise_management::IntegerPolicyProto& device_chrome_variations_type() const;
  ::enterprise_management::IntegerPolicyProto* release_device_chrome_variations_type();
  ::enterprise_management::IntegerPolicyProto* mutable_device_chrome_variations_type();
  void set_allocated_device_chrome_variations_type(::enterprise_management::IntegerPolicyProto* device_chrome_variations_type);
  private:
  const ::enterprise_management::IntegerPolicyProto& _internal_device_chrome_variations_type() const;
  ::enterprise_management::IntegerPolicyProto* _internal_mutable_device_chrome_variations_type();
  public:
  void unsafe_arena_set_allocated_device_chrome_variations_type(
      ::enterprise_management::IntegerPolicyProto* device_chrome_variations_type);
  ::enterprise_management::IntegerPolicyProto* unsafe_arena_release_device_chrome_variations_type();

  // optional .enterprise_management.DeviceLoginScreenPrivacyScreenEnabledProto device_login_screen_privacy_screen_enabled = 100;
  bool has_device_login_screen_privacy_screen_enabled() const;
  private:
  bool _internal_has_device_login_screen_privacy_screen_enabled() const;
  public:
  void clear_device_login_screen_privacy_screen_enabled();
  const ::enterprise_management::DeviceLoginScreenPrivacyScreenEnabledProto& device_login_screen_privacy_screen_enabled() const;
  ::enterprise_management::DeviceLoginScreenPrivacyScreenEnabledProto* release_device_login_screen_privacy_screen_enabled();
  ::enterprise_management::DeviceLoginScreenPrivacyScreenEnabledProto* mutable_device_login_screen_privacy_screen_enabled();
  void set_allocated_device_login_screen_privacy_screen_enabled(::enterprise_management::DeviceLoginScreenPrivacyScreenEnabledProto* device_login_screen_privacy_screen_enabled);
  private:
  const ::enterprise_management::DeviceLoginScreenPrivacyScreenEnabledProto& _internal_device_login_screen_privacy_screen_enabled() const;
  ::enterprise_management::DeviceLoginScreenPrivacyScreenEnabledProto* _internal_mutable_device_login_screen_privacy_screen_enabled();
  public:
  void unsafe_arena_set_allocated_device_login_screen_privacy_screen_enabled(
      ::enterprise_management::DeviceLoginScreenPrivacyScreenEnabledProto* device_login_screen_privacy_screen_enabled);
  ::enterprise_management::DeviceLoginScreenPrivacyScreenEnabledProto* unsafe_arena_release_device_login_screen_privacy_screen_enabled();

  // optional .enterprise_management.RequiredClientCertificateForDeviceProto required_client_certificate_for_device = 101;
  bool has_required_client_certificate_for_device() const;
  private:
  bool _internal_has_required_client_certificate_for_device() const;
  public:
  void clear_required_client_certificate_for_device();
  const ::enterprise_management::RequiredClientCertificateForDeviceProto& required_client_certificate_for_device() const;
  ::enterprise_management::RequiredClientCertificateForDeviceProto* release_required_client_certificate_for_device();
  ::enterprise_management::RequiredClientCertificateForDeviceProto* mutable_required_client_certificate_for_device();
  void set_allocated_required_client_certificate_for_device(::enterprise_management::RequiredClientCertificateForDeviceProto* required_client_certificate_for_device);
  private:
  const ::enterprise_management::RequiredClientCertificateForDeviceProto& _internal_required_client_certificate_for_device() const;
  ::enterprise_management::RequiredClientCertificateForDeviceProto* _internal_mutable_required_client_certificate_for_device();
  public:
  void unsafe_arena_set_allocated_required_client_certificate_for_device(
      ::enterprise_management::RequiredClientCertificateForDeviceProto* required_client_certificate_for_device);
  ::enterprise_management::RequiredClientCertificateForDeviceProto* unsafe_arena_release_required_client_certificate_for_device();

  // @@protoc_insertion_point(class_scope:enterprise_management.ChromeDeviceSettingsProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<4> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::enterprise_management::DevicePolicyRefreshRateProto* device_policy_refresh_rate_;
  ::enterprise_management::UserWhitelistProto* user_whitelist_;
  ::enterprise_management::GuestModeEnabledProto* guest_mode_enabled_;
  ::enterprise_management::OBSOLETE_DeviceProxySettingsProto* device_proxy_settings_;
  ::enterprise_management::CameraEnabledProto* camera_enabled_;
  ::enterprise_management::ShowUserNamesOnSigninProto* show_user_names_;
  ::enterprise_management::DataRoamingEnabledProto* data_roaming_enabled_;
  ::enterprise_management::AllowNewUsersProto* allow_new_users_;
  ::enterprise_management::MetricsEnabledProto* metrics_enabled_;
  ::enterprise_management::ReleaseChannelProto* release_channel_;
  ::enterprise_management::DeviceOpenNetworkConfigurationProto* open_network_configuration_;
  ::enterprise_management::DeviceReportingProto* device_reporting_;
  ::enterprise_management::EphemeralUsersEnabledProto* ephemeral_users_enabled_;
  ::enterprise_management::OBSOLETE_AppPackProto* app_pack_;
  ::enterprise_management::OBSOLETE_ForcedLogoutTimeoutsProto* forced_logout_timeouts_;
  ::enterprise_management::OBSOLETE_ScreenSaverProto* login_screen_saver_;
  ::enterprise_management::AutoUpdateSettingsProto* auto_update_settings_;
  ::enterprise_management::OBSOLETE_StartUpUrlsProto* start_up_urls_;
  ::enterprise_management::OBSOLETE_PinnedAppsProto* pinned_apps_;
  ::enterprise_management::SystemTimezoneProto* system_timezone_;
  ::enterprise_management::DeviceLocalAccountsProto* device_local_accounts_;
  ::enterprise_management::AllowRedeemChromeOsRegistrationOffersProto* allow_redeem_offers_;
  ::enterprise_management::StartUpFlagsProto* start_up_flags_;
  ::enterprise_management::UptimeLimitProto* uptime_limit_;
  ::enterprise_management::VariationsParameterProto* variations_parameter_;
  ::enterprise_management::AttestationSettingsProto* attestation_settings_;
  ::enterprise_management::AccessibilitySettingsProto* accessibility_settings_;
  ::enterprise_management::OBSOLETE_SupervisedUsersSettingsProto* supervised_users_settings_;
  ::enterprise_management::LoginScreenPowerManagementProto* login_screen_power_management_;
  ::enterprise_management::SystemUse24HourClockProto* use_24hour_clock_;
  ::enterprise_management::AutoCleanupSettigsProto* auto_clean_up_settings_;
  ::enterprise_management::SystemSettingsProto* system_settings_;
  ::enterprise_management::SAMLSettingsProto* saml_settings_;
  ::enterprise_management::RebootOnShutdownProto* reboot_on_shutdown_;
  ::enterprise_management::DeviceHeartbeatSettingsProto* device_heartbeat_settings_;
  ::enterprise_management::ExtensionCacheSizeProto* extension_cache_size_;
  ::enterprise_management::LoginScreenDomainAutoCompleteProto* login_screen_domain_auto_complete_;
  ::enterprise_management::DeviceLogUploadSettingsProto* device_log_upload_settings_;
  ::enterprise_management::DisplayRotationDefaultProto* display_rotation_default_;
  ::enterprise_management::AllowKioskAppControlChromeVersionProto* allow_kiosk_app_control_chrome_version_;
  ::enterprise_management::LoginAuthenticationBehaviorProto* login_authentication_behavior_;
  ::enterprise_management::UsbDetachableWhitelistProto* usb_detachable_whitelist_;
  ::enterprise_management::AllowBluetoothProto* allow_bluetooth_;
  ::enterprise_management::DeviceQuirksDownloadEnabledProto* quirks_download_enabled_;
  ::enterprise_management::LoginVideoCaptureAllowedUrlsProto* login_video_capture_allowed_urls_;
  ::enterprise_management::DeviceLoginScreenExtensionsProto* device_login_screen_extensions_;
  ::enterprise_management::NetworkThrottlingEnabledProto* network_throttling_;
  ::enterprise_management::DeviceWallpaperImageProto* device_wallpaper_image_;
  ::enterprise_management::LoginScreenLocalesProto* login_screen_locales_;
  ::enterprise_management::LoginScreenInputMethodsProto* login_screen_input_methods_;
  ::enterprise_management::DeviceEcryptfsMigrationStrategyProto* device_ecryptfs_migration_strategy_;
  ::enterprise_management::DeviceSecondFactorAuthenticationProto* device_second_factor_authentication_;
  ::enterprise_management::CastReceiverNameProto* cast_receiver_name_;
  ::enterprise_management::DeviceOffHoursProto* device_off_hours_;
  ::enterprise_management::DeviceNativePrintersProto* native_device_printers_;
  ::enterprise_management::DeviceNativePrintersAccessModeProto* native_device_printers_access_mode_;
  ::enterprise_management::DeviceNativePrintersBlacklistProto* native_device_printers_blacklist_;
  ::enterprise_management::DeviceNativePrintersWhitelistProto* native_device_printers_whitelist_;
  ::enterprise_management::TPMFirmwareUpdateSettingsProto* tpm_firmware_update_settings_;
  ::enterprise_management::OBSOLETE_MinimumRequiredVersionProto* minimum_required_version_;
  ::enterprise_management::DeviceLoginScreenAutoSelectCertificateForUrls* device_login_screen_auto_select_certificate_for_urls_;
  ::enterprise_management::UnaffiliatedArcAllowedProto* unaffiliated_arc_allowed_;
  ::enterprise_management::NetworkHostnameProto* network_hostname_;
  ::enterprise_management::DeviceKerberosEncryptionTypesProto* device_kerberos_encryption_types_;
  ::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto* device_user_policy_loopback_processing_mode_;
  ::enterprise_management::DeviceLoginScreenIsolateOriginsProto* device_login_screen_isolate_origins_;
  ::enterprise_management::DeviceLoginScreenSitePerProcessProto* device_login_screen_site_per_process_;
  ::enterprise_management::VirtualMachinesAllowedProto* virtual_machines_allowed_;
  ::enterprise_management::DeviceMachinePasswordChangeRateProto* device_machine_password_change_rate_;
  ::enterprise_management::SamlLoginAuthenticationTypeProto* saml_login_authentication_type_;
  ::enterprise_management::DeviceUnaffiliatedCrostiniAllowedProto* device_unaffiliated_crostini_allowed_;
  ::enterprise_management::DeviceWiFiFastTransitionEnabledProto* device_wifi_fast_transition_enabled_;
  ::enterprise_management::DeviceDisplayResolutionProto* device_display_resolution_;
  ::enterprise_management::PluginVmAllowedProto* plugin_vm_allowed_;
  ::enterprise_management::DeviceGpoCacheLifetimeProto* device_gpo_cache_lifetime_;
  ::enterprise_management::DeviceAuthDataCacheLifetimeProto* device_auth_data_cache_lifetime_;
  ::enterprise_management::PluginVmLicenseKeyProto* plugin_vm_license_key_;
  ::enterprise_management::DeviceRebootOnUserSignoutProto* device_reboot_on_user_signout_;
  ::enterprise_management::DeviceWilcoDtcAllowedProto* device_wilco_dtc_allowed_;
  ::enterprise_management::DeviceWilcoDtcConfigurationProto* device_wilco_dtc_configuration_;
  ::enterprise_management::DeviceWiFiAllowedProto* device_wifi_allowed_;
  ::enterprise_management::DevicePowerPeakShiftProto* device_power_peak_shift_;
  ::enterprise_management::DeviceBootOnAcProto* device_boot_on_ac_;
  ::enterprise_management::DeviceDockMacAddressSourceProto* device_dock_mac_address_source_;
  ::enterprise_management::DeviceAdvancedBatteryChargeModeProto* device_advanced_battery_charge_mode_;
  ::enterprise_management::DeviceBatteryChargeModeProto* device_battery_charge_mode_;
  ::enterprise_management::DeviceUsbPowerShareProto* device_usb_power_share_;
  ::enterprise_management::DeviceScheduledUpdateCheckProto* device_scheduled_update_check_;
  ::enterprise_management::DevicePowerwashAllowedProto* device_powerwash_allowed_;
  ::enterprise_management::DeviceLoginScreenWebUsbAllowDevicesForUrlsProto* device_login_screen_webusb_allow_devices_for_urls_;
  ::enterprise_management::BooleanPolicyProto* device_login_screen_system_info_enforced_;
  ::enterprise_management::StringListPolicyProto* device_web_based_attestation_allowed_urls_;
  ::enterprise_management::BooleanPolicyProto* device_show_numeric_keyboard_for_password_;
  ::enterprise_management::BooleanPolicyProto* login_screen_primary_mouse_button_switch_;
  ::enterprise_management::StringPolicyProto* minimum_chrome_version_enforced_;
  ::enterprise_management::SystemProxySettingsProto* system_proxy_settings_;
  ::enterprise_management::IntegerPolicyProto* device_chrome_variations_type_;
  ::enterprise_management::DeviceLoginScreenPrivacyScreenEnabledProto* device_login_screen_privacy_screen_enabled_;
  ::enterprise_management::RequiredClientCertificateForDeviceProto* required_client_certificate_for_device_;
  friend struct ::TableStruct_chrome_5fdevice_5fpolicy_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DevicePolicyRefreshRateProto

// optional int64 device_policy_refresh_rate = 1;
inline bool DevicePolicyRefreshRateProto::_internal_has_device_policy_refresh_rate() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DevicePolicyRefreshRateProto::has_device_policy_refresh_rate() const {
  return _internal_has_device_policy_refresh_rate();
}
inline void DevicePolicyRefreshRateProto::clear_device_policy_refresh_rate() {
  device_policy_refresh_rate_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DevicePolicyRefreshRateProto::_internal_device_policy_refresh_rate() const {
  return device_policy_refresh_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DevicePolicyRefreshRateProto::device_policy_refresh_rate() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DevicePolicyRefreshRateProto.device_policy_refresh_rate)
  return _internal_device_policy_refresh_rate();
}
inline void DevicePolicyRefreshRateProto::_internal_set_device_policy_refresh_rate(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  device_policy_refresh_rate_ = value;
}
inline void DevicePolicyRefreshRateProto::set_device_policy_refresh_rate(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_device_policy_refresh_rate(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DevicePolicyRefreshRateProto.device_policy_refresh_rate)
}

// -------------------------------------------------------------------

// UserWhitelistProto

// repeated string user_whitelist = 1;
inline int UserWhitelistProto::_internal_user_whitelist_size() const {
  return user_whitelist_.size();
}
inline int UserWhitelistProto::user_whitelist_size() const {
  return _internal_user_whitelist_size();
}
inline void UserWhitelistProto::clear_user_whitelist() {
  user_whitelist_.Clear();
}
inline std::string* UserWhitelistProto::add_user_whitelist() {
  // @@protoc_insertion_point(field_add_mutable:enterprise_management.UserWhitelistProto.user_whitelist)
  return _internal_add_user_whitelist();
}
inline const std::string& UserWhitelistProto::_internal_user_whitelist(int index) const {
  return user_whitelist_.Get(index);
}
inline const std::string& UserWhitelistProto::user_whitelist(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_management.UserWhitelistProto.user_whitelist)
  return _internal_user_whitelist(index);
}
inline std::string* UserWhitelistProto::mutable_user_whitelist(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_management.UserWhitelistProto.user_whitelist)
  return user_whitelist_.Mutable(index);
}
inline void UserWhitelistProto::set_user_whitelist(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:enterprise_management.UserWhitelistProto.user_whitelist)
  user_whitelist_.Mutable(index)->assign(value);
}
inline void UserWhitelistProto::set_user_whitelist(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:enterprise_management.UserWhitelistProto.user_whitelist)
  user_whitelist_.Mutable(index)->assign(std::move(value));
}
inline void UserWhitelistProto::set_user_whitelist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_whitelist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:enterprise_management.UserWhitelistProto.user_whitelist)
}
inline void UserWhitelistProto::set_user_whitelist(int index, const char* value, size_t size) {
  user_whitelist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.UserWhitelistProto.user_whitelist)
}
inline std::string* UserWhitelistProto::_internal_add_user_whitelist() {
  return user_whitelist_.Add();
}
inline void UserWhitelistProto::add_user_whitelist(const std::string& value) {
  user_whitelist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:enterprise_management.UserWhitelistProto.user_whitelist)
}
inline void UserWhitelistProto::add_user_whitelist(std::string&& value) {
  user_whitelist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:enterprise_management.UserWhitelistProto.user_whitelist)
}
inline void UserWhitelistProto::add_user_whitelist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_whitelist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:enterprise_management.UserWhitelistProto.user_whitelist)
}
inline void UserWhitelistProto::add_user_whitelist(const char* value, size_t size) {
  user_whitelist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:enterprise_management.UserWhitelistProto.user_whitelist)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UserWhitelistProto::user_whitelist() const {
  // @@protoc_insertion_point(field_list:enterprise_management.UserWhitelistProto.user_whitelist)
  return user_whitelist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UserWhitelistProto::mutable_user_whitelist() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_management.UserWhitelistProto.user_whitelist)
  return &user_whitelist_;
}

// -------------------------------------------------------------------

// AllowNewUsersProto

// optional bool allow_new_users = 1 [default = true];
inline bool AllowNewUsersProto::_internal_has_allow_new_users() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AllowNewUsersProto::has_allow_new_users() const {
  return _internal_has_allow_new_users();
}
inline void AllowNewUsersProto::clear_allow_new_users() {
  allow_new_users_ = true;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool AllowNewUsersProto::_internal_allow_new_users() const {
  return allow_new_users_;
}
inline bool AllowNewUsersProto::allow_new_users() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AllowNewUsersProto.allow_new_users)
  return _internal_allow_new_users();
}
inline void AllowNewUsersProto::_internal_set_allow_new_users(bool value) {
  _has_bits_[0] |= 0x00000001u;
  allow_new_users_ = value;
}
inline void AllowNewUsersProto::set_allow_new_users(bool value) {
  _internal_set_allow_new_users(value);
  // @@protoc_insertion_point(field_set:enterprise_management.AllowNewUsersProto.allow_new_users)
}

// -------------------------------------------------------------------

// GuestModeEnabledProto

// optional bool guest_mode_enabled = 1 [default = true];
inline bool GuestModeEnabledProto::_internal_has_guest_mode_enabled() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GuestModeEnabledProto::has_guest_mode_enabled() const {
  return _internal_has_guest_mode_enabled();
}
inline void GuestModeEnabledProto::clear_guest_mode_enabled() {
  guest_mode_enabled_ = true;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool GuestModeEnabledProto::_internal_guest_mode_enabled() const {
  return guest_mode_enabled_;
}
inline bool GuestModeEnabledProto::guest_mode_enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.GuestModeEnabledProto.guest_mode_enabled)
  return _internal_guest_mode_enabled();
}
inline void GuestModeEnabledProto::_internal_set_guest_mode_enabled(bool value) {
  _has_bits_[0] |= 0x00000001u;
  guest_mode_enabled_ = value;
}
inline void GuestModeEnabledProto::set_guest_mode_enabled(bool value) {
  _internal_set_guest_mode_enabled(value);
  // @@protoc_insertion_point(field_set:enterprise_management.GuestModeEnabledProto.guest_mode_enabled)
}

// -------------------------------------------------------------------

// ShowUserNamesOnSigninProto

// optional bool show_user_names = 1 [default = true];
inline bool ShowUserNamesOnSigninProto::_internal_has_show_user_names() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ShowUserNamesOnSigninProto::has_show_user_names() const {
  return _internal_has_show_user_names();
}
inline void ShowUserNamesOnSigninProto::clear_show_user_names() {
  show_user_names_ = true;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ShowUserNamesOnSigninProto::_internal_show_user_names() const {
  return show_user_names_;
}
inline bool ShowUserNamesOnSigninProto::show_user_names() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ShowUserNamesOnSigninProto.show_user_names)
  return _internal_show_user_names();
}
inline void ShowUserNamesOnSigninProto::_internal_set_show_user_names(bool value) {
  _has_bits_[0] |= 0x00000001u;
  show_user_names_ = value;
}
inline void ShowUserNamesOnSigninProto::set_show_user_names(bool value) {
  _internal_set_show_user_names(value);
  // @@protoc_insertion_point(field_set:enterprise_management.ShowUserNamesOnSigninProto.show_user_names)
}

// -------------------------------------------------------------------

// DataRoamingEnabledProto

// optional bool data_roaming_enabled = 1 [default = false];
inline bool DataRoamingEnabledProto::_internal_has_data_roaming_enabled() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DataRoamingEnabledProto::has_data_roaming_enabled() const {
  return _internal_has_data_roaming_enabled();
}
inline void DataRoamingEnabledProto::clear_data_roaming_enabled() {
  data_roaming_enabled_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool DataRoamingEnabledProto::_internal_data_roaming_enabled() const {
  return data_roaming_enabled_;
}
inline bool DataRoamingEnabledProto::data_roaming_enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DataRoamingEnabledProto.data_roaming_enabled)
  return _internal_data_roaming_enabled();
}
inline void DataRoamingEnabledProto::_internal_set_data_roaming_enabled(bool value) {
  _has_bits_[0] |= 0x00000001u;
  data_roaming_enabled_ = value;
}
inline void DataRoamingEnabledProto::set_data_roaming_enabled(bool value) {
  _internal_set_data_roaming_enabled(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DataRoamingEnabledProto.data_roaming_enabled)
}

// -------------------------------------------------------------------

// OBSOLETE_DeviceProxySettingsProto

// optional string OBSOLETE_proxy_mode = 1 [deprecated = true];
inline bool OBSOLETE_DeviceProxySettingsProto::_internal_has_obsolete_proxy_mode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OBSOLETE_DeviceProxySettingsProto::has_obsolete_proxy_mode() const {
  return _internal_has_obsolete_proxy_mode();
}
inline void OBSOLETE_DeviceProxySettingsProto::clear_obsolete_proxy_mode() {
  obsolete_proxy_mode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OBSOLETE_DeviceProxySettingsProto::obsolete_proxy_mode() const {
  // @@protoc_insertion_point(field_get:enterprise_management.OBSOLETE_DeviceProxySettingsProto.OBSOLETE_proxy_mode)
  return _internal_obsolete_proxy_mode();
}
inline void OBSOLETE_DeviceProxySettingsProto::set_obsolete_proxy_mode(const std::string& value) {
  _internal_set_obsolete_proxy_mode(value);
  // @@protoc_insertion_point(field_set:enterprise_management.OBSOLETE_DeviceProxySettingsProto.OBSOLETE_proxy_mode)
}
inline std::string* OBSOLETE_DeviceProxySettingsProto::mutable_obsolete_proxy_mode() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.OBSOLETE_DeviceProxySettingsProto.OBSOLETE_proxy_mode)
  return _internal_mutable_obsolete_proxy_mode();
}
inline const std::string& OBSOLETE_DeviceProxySettingsProto::_internal_obsolete_proxy_mode() const {
  return obsolete_proxy_mode_.Get();
}
inline void OBSOLETE_DeviceProxySettingsProto::_internal_set_obsolete_proxy_mode(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  obsolete_proxy_mode_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OBSOLETE_DeviceProxySettingsProto::set_obsolete_proxy_mode(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  obsolete_proxy_mode_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.OBSOLETE_DeviceProxySettingsProto.OBSOLETE_proxy_mode)
}
inline void OBSOLETE_DeviceProxySettingsProto::set_obsolete_proxy_mode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  obsolete_proxy_mode_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.OBSOLETE_DeviceProxySettingsProto.OBSOLETE_proxy_mode)
}
inline void OBSOLETE_DeviceProxySettingsProto::set_obsolete_proxy_mode(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  obsolete_proxy_mode_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.OBSOLETE_DeviceProxySettingsProto.OBSOLETE_proxy_mode)
}
inline std::string* OBSOLETE_DeviceProxySettingsProto::_internal_mutable_obsolete_proxy_mode() {
  _has_bits_[0] |= 0x00000001u;
  return obsolete_proxy_mode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OBSOLETE_DeviceProxySettingsProto::release_obsolete_proxy_mode() {
  // @@protoc_insertion_point(field_release:enterprise_management.OBSOLETE_DeviceProxySettingsProto.OBSOLETE_proxy_mode)
  if (!_internal_has_obsolete_proxy_mode()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return obsolete_proxy_mode_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OBSOLETE_DeviceProxySettingsProto::set_allocated_obsolete_proxy_mode(std::string* obsolete_proxy_mode) {
  if (obsolete_proxy_mode != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  obsolete_proxy_mode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), obsolete_proxy_mode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.OBSOLETE_DeviceProxySettingsProto.OBSOLETE_proxy_mode)
}
inline std::string* OBSOLETE_DeviceProxySettingsProto::unsafe_arena_release_obsolete_proxy_mode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.OBSOLETE_DeviceProxySettingsProto.OBSOLETE_proxy_mode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return obsolete_proxy_mode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OBSOLETE_DeviceProxySettingsProto::unsafe_arena_set_allocated_obsolete_proxy_mode(
    std::string* obsolete_proxy_mode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (obsolete_proxy_mode != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  obsolete_proxy_mode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      obsolete_proxy_mode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.OBSOLETE_DeviceProxySettingsProto.OBSOLETE_proxy_mode)
}

// optional string OBSOLETE_proxy_server = 2 [deprecated = true];
inline bool OBSOLETE_DeviceProxySettingsProto::_internal_has_obsolete_proxy_server() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OBSOLETE_DeviceProxySettingsProto::has_obsolete_proxy_server() const {
  return _internal_has_obsolete_proxy_server();
}
inline void OBSOLETE_DeviceProxySettingsProto::clear_obsolete_proxy_server() {
  obsolete_proxy_server_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& OBSOLETE_DeviceProxySettingsProto::obsolete_proxy_server() const {
  // @@protoc_insertion_point(field_get:enterprise_management.OBSOLETE_DeviceProxySettingsProto.OBSOLETE_proxy_server)
  return _internal_obsolete_proxy_server();
}
inline void OBSOLETE_DeviceProxySettingsProto::set_obsolete_proxy_server(const std::string& value) {
  _internal_set_obsolete_proxy_server(value);
  // @@protoc_insertion_point(field_set:enterprise_management.OBSOLETE_DeviceProxySettingsProto.OBSOLETE_proxy_server)
}
inline std::string* OBSOLETE_DeviceProxySettingsProto::mutable_obsolete_proxy_server() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.OBSOLETE_DeviceProxySettingsProto.OBSOLETE_proxy_server)
  return _internal_mutable_obsolete_proxy_server();
}
inline const std::string& OBSOLETE_DeviceProxySettingsProto::_internal_obsolete_proxy_server() const {
  return obsolete_proxy_server_.Get();
}
inline void OBSOLETE_DeviceProxySettingsProto::_internal_set_obsolete_proxy_server(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  obsolete_proxy_server_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OBSOLETE_DeviceProxySettingsProto::set_obsolete_proxy_server(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  obsolete_proxy_server_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.OBSOLETE_DeviceProxySettingsProto.OBSOLETE_proxy_server)
}
inline void OBSOLETE_DeviceProxySettingsProto::set_obsolete_proxy_server(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  obsolete_proxy_server_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.OBSOLETE_DeviceProxySettingsProto.OBSOLETE_proxy_server)
}
inline void OBSOLETE_DeviceProxySettingsProto::set_obsolete_proxy_server(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  obsolete_proxy_server_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.OBSOLETE_DeviceProxySettingsProto.OBSOLETE_proxy_server)
}
inline std::string* OBSOLETE_DeviceProxySettingsProto::_internal_mutable_obsolete_proxy_server() {
  _has_bits_[0] |= 0x00000002u;
  return obsolete_proxy_server_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OBSOLETE_DeviceProxySettingsProto::release_obsolete_proxy_server() {
  // @@protoc_insertion_point(field_release:enterprise_management.OBSOLETE_DeviceProxySettingsProto.OBSOLETE_proxy_server)
  if (!_internal_has_obsolete_proxy_server()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return obsolete_proxy_server_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OBSOLETE_DeviceProxySettingsProto::set_allocated_obsolete_proxy_server(std::string* obsolete_proxy_server) {
  if (obsolete_proxy_server != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  obsolete_proxy_server_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), obsolete_proxy_server,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.OBSOLETE_DeviceProxySettingsProto.OBSOLETE_proxy_server)
}
inline std::string* OBSOLETE_DeviceProxySettingsProto::unsafe_arena_release_obsolete_proxy_server() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.OBSOLETE_DeviceProxySettingsProto.OBSOLETE_proxy_server)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return obsolete_proxy_server_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OBSOLETE_DeviceProxySettingsProto::unsafe_arena_set_allocated_obsolete_proxy_server(
    std::string* obsolete_proxy_server) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (obsolete_proxy_server != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  obsolete_proxy_server_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      obsolete_proxy_server, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.OBSOLETE_DeviceProxySettingsProto.OBSOLETE_proxy_server)
}

// optional string OBSOLETE_proxy_pac_url = 3 [deprecated = true];
inline bool OBSOLETE_DeviceProxySettingsProto::_internal_has_obsolete_proxy_pac_url() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OBSOLETE_DeviceProxySettingsProto::has_obsolete_proxy_pac_url() const {
  return _internal_has_obsolete_proxy_pac_url();
}
inline void OBSOLETE_DeviceProxySettingsProto::clear_obsolete_proxy_pac_url() {
  obsolete_proxy_pac_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& OBSOLETE_DeviceProxySettingsProto::obsolete_proxy_pac_url() const {
  // @@protoc_insertion_point(field_get:enterprise_management.OBSOLETE_DeviceProxySettingsProto.OBSOLETE_proxy_pac_url)
  return _internal_obsolete_proxy_pac_url();
}
inline void OBSOLETE_DeviceProxySettingsProto::set_obsolete_proxy_pac_url(const std::string& value) {
  _internal_set_obsolete_proxy_pac_url(value);
  // @@protoc_insertion_point(field_set:enterprise_management.OBSOLETE_DeviceProxySettingsProto.OBSOLETE_proxy_pac_url)
}
inline std::string* OBSOLETE_DeviceProxySettingsProto::mutable_obsolete_proxy_pac_url() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.OBSOLETE_DeviceProxySettingsProto.OBSOLETE_proxy_pac_url)
  return _internal_mutable_obsolete_proxy_pac_url();
}
inline const std::string& OBSOLETE_DeviceProxySettingsProto::_internal_obsolete_proxy_pac_url() const {
  return obsolete_proxy_pac_url_.Get();
}
inline void OBSOLETE_DeviceProxySettingsProto::_internal_set_obsolete_proxy_pac_url(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  obsolete_proxy_pac_url_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OBSOLETE_DeviceProxySettingsProto::set_obsolete_proxy_pac_url(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  obsolete_proxy_pac_url_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.OBSOLETE_DeviceProxySettingsProto.OBSOLETE_proxy_pac_url)
}
inline void OBSOLETE_DeviceProxySettingsProto::set_obsolete_proxy_pac_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  obsolete_proxy_pac_url_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.OBSOLETE_DeviceProxySettingsProto.OBSOLETE_proxy_pac_url)
}
inline void OBSOLETE_DeviceProxySettingsProto::set_obsolete_proxy_pac_url(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  obsolete_proxy_pac_url_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.OBSOLETE_DeviceProxySettingsProto.OBSOLETE_proxy_pac_url)
}
inline std::string* OBSOLETE_DeviceProxySettingsProto::_internal_mutable_obsolete_proxy_pac_url() {
  _has_bits_[0] |= 0x00000004u;
  return obsolete_proxy_pac_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OBSOLETE_DeviceProxySettingsProto::release_obsolete_proxy_pac_url() {
  // @@protoc_insertion_point(field_release:enterprise_management.OBSOLETE_DeviceProxySettingsProto.OBSOLETE_proxy_pac_url)
  if (!_internal_has_obsolete_proxy_pac_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return obsolete_proxy_pac_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OBSOLETE_DeviceProxySettingsProto::set_allocated_obsolete_proxy_pac_url(std::string* obsolete_proxy_pac_url) {
  if (obsolete_proxy_pac_url != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  obsolete_proxy_pac_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), obsolete_proxy_pac_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.OBSOLETE_DeviceProxySettingsProto.OBSOLETE_proxy_pac_url)
}
inline std::string* OBSOLETE_DeviceProxySettingsProto::unsafe_arena_release_obsolete_proxy_pac_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.OBSOLETE_DeviceProxySettingsProto.OBSOLETE_proxy_pac_url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return obsolete_proxy_pac_url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OBSOLETE_DeviceProxySettingsProto::unsafe_arena_set_allocated_obsolete_proxy_pac_url(
    std::string* obsolete_proxy_pac_url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (obsolete_proxy_pac_url != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  obsolete_proxy_pac_url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      obsolete_proxy_pac_url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.OBSOLETE_DeviceProxySettingsProto.OBSOLETE_proxy_pac_url)
}

// optional string OBSOLETE_proxy_bypass_list = 4 [deprecated = true];
inline bool OBSOLETE_DeviceProxySettingsProto::_internal_has_obsolete_proxy_bypass_list() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool OBSOLETE_DeviceProxySettingsProto::has_obsolete_proxy_bypass_list() const {
  return _internal_has_obsolete_proxy_bypass_list();
}
inline void OBSOLETE_DeviceProxySettingsProto::clear_obsolete_proxy_bypass_list() {
  obsolete_proxy_bypass_list_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& OBSOLETE_DeviceProxySettingsProto::obsolete_proxy_bypass_list() const {
  // @@protoc_insertion_point(field_get:enterprise_management.OBSOLETE_DeviceProxySettingsProto.OBSOLETE_proxy_bypass_list)
  return _internal_obsolete_proxy_bypass_list();
}
inline void OBSOLETE_DeviceProxySettingsProto::set_obsolete_proxy_bypass_list(const std::string& value) {
  _internal_set_obsolete_proxy_bypass_list(value);
  // @@protoc_insertion_point(field_set:enterprise_management.OBSOLETE_DeviceProxySettingsProto.OBSOLETE_proxy_bypass_list)
}
inline std::string* OBSOLETE_DeviceProxySettingsProto::mutable_obsolete_proxy_bypass_list() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.OBSOLETE_DeviceProxySettingsProto.OBSOLETE_proxy_bypass_list)
  return _internal_mutable_obsolete_proxy_bypass_list();
}
inline const std::string& OBSOLETE_DeviceProxySettingsProto::_internal_obsolete_proxy_bypass_list() const {
  return obsolete_proxy_bypass_list_.Get();
}
inline void OBSOLETE_DeviceProxySettingsProto::_internal_set_obsolete_proxy_bypass_list(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  obsolete_proxy_bypass_list_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OBSOLETE_DeviceProxySettingsProto::set_obsolete_proxy_bypass_list(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  obsolete_proxy_bypass_list_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.OBSOLETE_DeviceProxySettingsProto.OBSOLETE_proxy_bypass_list)
}
inline void OBSOLETE_DeviceProxySettingsProto::set_obsolete_proxy_bypass_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  obsolete_proxy_bypass_list_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.OBSOLETE_DeviceProxySettingsProto.OBSOLETE_proxy_bypass_list)
}
inline void OBSOLETE_DeviceProxySettingsProto::set_obsolete_proxy_bypass_list(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  obsolete_proxy_bypass_list_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.OBSOLETE_DeviceProxySettingsProto.OBSOLETE_proxy_bypass_list)
}
inline std::string* OBSOLETE_DeviceProxySettingsProto::_internal_mutable_obsolete_proxy_bypass_list() {
  _has_bits_[0] |= 0x00000008u;
  return obsolete_proxy_bypass_list_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OBSOLETE_DeviceProxySettingsProto::release_obsolete_proxy_bypass_list() {
  // @@protoc_insertion_point(field_release:enterprise_management.OBSOLETE_DeviceProxySettingsProto.OBSOLETE_proxy_bypass_list)
  if (!_internal_has_obsolete_proxy_bypass_list()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return obsolete_proxy_bypass_list_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OBSOLETE_DeviceProxySettingsProto::set_allocated_obsolete_proxy_bypass_list(std::string* obsolete_proxy_bypass_list) {
  if (obsolete_proxy_bypass_list != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  obsolete_proxy_bypass_list_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), obsolete_proxy_bypass_list,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.OBSOLETE_DeviceProxySettingsProto.OBSOLETE_proxy_bypass_list)
}
inline std::string* OBSOLETE_DeviceProxySettingsProto::unsafe_arena_release_obsolete_proxy_bypass_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.OBSOLETE_DeviceProxySettingsProto.OBSOLETE_proxy_bypass_list)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return obsolete_proxy_bypass_list_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OBSOLETE_DeviceProxySettingsProto::unsafe_arena_set_allocated_obsolete_proxy_bypass_list(
    std::string* obsolete_proxy_bypass_list) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (obsolete_proxy_bypass_list != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  obsolete_proxy_bypass_list_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      obsolete_proxy_bypass_list, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.OBSOLETE_DeviceProxySettingsProto.OBSOLETE_proxy_bypass_list)
}

// -------------------------------------------------------------------

// CameraEnabledProto

// optional bool camera_enabled = 1;
inline bool CameraEnabledProto::_internal_has_camera_enabled() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CameraEnabledProto::has_camera_enabled() const {
  return _internal_has_camera_enabled();
}
inline void CameraEnabledProto::clear_camera_enabled() {
  camera_enabled_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CameraEnabledProto::_internal_camera_enabled() const {
  return camera_enabled_;
}
inline bool CameraEnabledProto::camera_enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.CameraEnabledProto.camera_enabled)
  return _internal_camera_enabled();
}
inline void CameraEnabledProto::_internal_set_camera_enabled(bool value) {
  _has_bits_[0] |= 0x00000001u;
  camera_enabled_ = value;
}
inline void CameraEnabledProto::set_camera_enabled(bool value) {
  _internal_set_camera_enabled(value);
  // @@protoc_insertion_point(field_set:enterprise_management.CameraEnabledProto.camera_enabled)
}

// -------------------------------------------------------------------

// MetricsEnabledProto

// optional bool metrics_enabled = 1;
inline bool MetricsEnabledProto::_internal_has_metrics_enabled() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MetricsEnabledProto::has_metrics_enabled() const {
  return _internal_has_metrics_enabled();
}
inline void MetricsEnabledProto::clear_metrics_enabled() {
  metrics_enabled_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool MetricsEnabledProto::_internal_metrics_enabled() const {
  return metrics_enabled_;
}
inline bool MetricsEnabledProto::metrics_enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.MetricsEnabledProto.metrics_enabled)
  return _internal_metrics_enabled();
}
inline void MetricsEnabledProto::_internal_set_metrics_enabled(bool value) {
  _has_bits_[0] |= 0x00000001u;
  metrics_enabled_ = value;
}
inline void MetricsEnabledProto::set_metrics_enabled(bool value) {
  _internal_set_metrics_enabled(value);
  // @@protoc_insertion_point(field_set:enterprise_management.MetricsEnabledProto.metrics_enabled)
}

// -------------------------------------------------------------------

// ReleaseChannelProto

// optional string release_channel = 1;
inline bool ReleaseChannelProto::_internal_has_release_channel() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReleaseChannelProto::has_release_channel() const {
  return _internal_has_release_channel();
}
inline void ReleaseChannelProto::clear_release_channel() {
  release_channel_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReleaseChannelProto::release_channel() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ReleaseChannelProto.release_channel)
  return _internal_release_channel();
}
inline void ReleaseChannelProto::set_release_channel(const std::string& value) {
  _internal_set_release_channel(value);
  // @@protoc_insertion_point(field_set:enterprise_management.ReleaseChannelProto.release_channel)
}
inline std::string* ReleaseChannelProto::mutable_release_channel() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ReleaseChannelProto.release_channel)
  return _internal_mutable_release_channel();
}
inline const std::string& ReleaseChannelProto::_internal_release_channel() const {
  return release_channel_.Get();
}
inline void ReleaseChannelProto::_internal_set_release_channel(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  release_channel_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReleaseChannelProto::set_release_channel(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  release_channel_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.ReleaseChannelProto.release_channel)
}
inline void ReleaseChannelProto::set_release_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  release_channel_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.ReleaseChannelProto.release_channel)
}
inline void ReleaseChannelProto::set_release_channel(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  release_channel_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.ReleaseChannelProto.release_channel)
}
inline std::string* ReleaseChannelProto::_internal_mutable_release_channel() {
  _has_bits_[0] |= 0x00000001u;
  return release_channel_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReleaseChannelProto::release_release_channel() {
  // @@protoc_insertion_point(field_release:enterprise_management.ReleaseChannelProto.release_channel)
  if (!_internal_has_release_channel()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return release_channel_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReleaseChannelProto::set_allocated_release_channel(std::string* release_channel) {
  if (release_channel != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  release_channel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), release_channel,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ReleaseChannelProto.release_channel)
}
inline std::string* ReleaseChannelProto::unsafe_arena_release_release_channel() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.ReleaseChannelProto.release_channel)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return release_channel_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ReleaseChannelProto::unsafe_arena_set_allocated_release_channel(
    std::string* release_channel) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (release_channel != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  release_channel_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      release_channel, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ReleaseChannelProto.release_channel)
}

// optional bool release_channel_delegated = 2;
inline bool ReleaseChannelProto::_internal_has_release_channel_delegated() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReleaseChannelProto::has_release_channel_delegated() const {
  return _internal_has_release_channel_delegated();
}
inline void ReleaseChannelProto::clear_release_channel_delegated() {
  release_channel_delegated_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ReleaseChannelProto::_internal_release_channel_delegated() const {
  return release_channel_delegated_;
}
inline bool ReleaseChannelProto::release_channel_delegated() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ReleaseChannelProto.release_channel_delegated)
  return _internal_release_channel_delegated();
}
inline void ReleaseChannelProto::_internal_set_release_channel_delegated(bool value) {
  _has_bits_[0] |= 0x00000002u;
  release_channel_delegated_ = value;
}
inline void ReleaseChannelProto::set_release_channel_delegated(bool value) {
  _internal_set_release_channel_delegated(value);
  // @@protoc_insertion_point(field_set:enterprise_management.ReleaseChannelProto.release_channel_delegated)
}

// -------------------------------------------------------------------

// DeviceOpenNetworkConfigurationProto

// optional string open_network_configuration = 1;
inline bool DeviceOpenNetworkConfigurationProto::_internal_has_open_network_configuration() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceOpenNetworkConfigurationProto::has_open_network_configuration() const {
  return _internal_has_open_network_configuration();
}
inline void DeviceOpenNetworkConfigurationProto::clear_open_network_configuration() {
  open_network_configuration_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeviceOpenNetworkConfigurationProto::open_network_configuration() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceOpenNetworkConfigurationProto.open_network_configuration)
  return _internal_open_network_configuration();
}
inline void DeviceOpenNetworkConfigurationProto::set_open_network_configuration(const std::string& value) {
  _internal_set_open_network_configuration(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceOpenNetworkConfigurationProto.open_network_configuration)
}
inline std::string* DeviceOpenNetworkConfigurationProto::mutable_open_network_configuration() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceOpenNetworkConfigurationProto.open_network_configuration)
  return _internal_mutable_open_network_configuration();
}
inline const std::string& DeviceOpenNetworkConfigurationProto::_internal_open_network_configuration() const {
  return open_network_configuration_.Get();
}
inline void DeviceOpenNetworkConfigurationProto::_internal_set_open_network_configuration(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  open_network_configuration_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceOpenNetworkConfigurationProto::set_open_network_configuration(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  open_network_configuration_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceOpenNetworkConfigurationProto.open_network_configuration)
}
inline void DeviceOpenNetworkConfigurationProto::set_open_network_configuration(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  open_network_configuration_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceOpenNetworkConfigurationProto.open_network_configuration)
}
inline void DeviceOpenNetworkConfigurationProto::set_open_network_configuration(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  open_network_configuration_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceOpenNetworkConfigurationProto.open_network_configuration)
}
inline std::string* DeviceOpenNetworkConfigurationProto::_internal_mutable_open_network_configuration() {
  _has_bits_[0] |= 0x00000001u;
  return open_network_configuration_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceOpenNetworkConfigurationProto::release_open_network_configuration() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceOpenNetworkConfigurationProto.open_network_configuration)
  if (!_internal_has_open_network_configuration()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return open_network_configuration_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceOpenNetworkConfigurationProto::set_allocated_open_network_configuration(std::string* open_network_configuration) {
  if (open_network_configuration != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  open_network_configuration_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), open_network_configuration,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceOpenNetworkConfigurationProto.open_network_configuration)
}
inline std::string* DeviceOpenNetworkConfigurationProto::unsafe_arena_release_open_network_configuration() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.DeviceOpenNetworkConfigurationProto.open_network_configuration)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return open_network_configuration_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceOpenNetworkConfigurationProto::unsafe_arena_set_allocated_open_network_configuration(
    std::string* open_network_configuration) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (open_network_configuration != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  open_network_configuration_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      open_network_configuration, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.DeviceOpenNetworkConfigurationProto.open_network_configuration)
}

// -------------------------------------------------------------------

// NetworkHostnameProto

// optional string device_hostname_template = 1;
inline bool NetworkHostnameProto::_internal_has_device_hostname_template() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NetworkHostnameProto::has_device_hostname_template() const {
  return _internal_has_device_hostname_template();
}
inline void NetworkHostnameProto::clear_device_hostname_template() {
  device_hostname_template_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NetworkHostnameProto::device_hostname_template() const {
  // @@protoc_insertion_point(field_get:enterprise_management.NetworkHostnameProto.device_hostname_template)
  return _internal_device_hostname_template();
}
inline void NetworkHostnameProto::set_device_hostname_template(const std::string& value) {
  _internal_set_device_hostname_template(value);
  // @@protoc_insertion_point(field_set:enterprise_management.NetworkHostnameProto.device_hostname_template)
}
inline std::string* NetworkHostnameProto::mutable_device_hostname_template() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.NetworkHostnameProto.device_hostname_template)
  return _internal_mutable_device_hostname_template();
}
inline const std::string& NetworkHostnameProto::_internal_device_hostname_template() const {
  return device_hostname_template_.Get();
}
inline void NetworkHostnameProto::_internal_set_device_hostname_template(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  device_hostname_template_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NetworkHostnameProto::set_device_hostname_template(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  device_hostname_template_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.NetworkHostnameProto.device_hostname_template)
}
inline void NetworkHostnameProto::set_device_hostname_template(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  device_hostname_template_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.NetworkHostnameProto.device_hostname_template)
}
inline void NetworkHostnameProto::set_device_hostname_template(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  device_hostname_template_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.NetworkHostnameProto.device_hostname_template)
}
inline std::string* NetworkHostnameProto::_internal_mutable_device_hostname_template() {
  _has_bits_[0] |= 0x00000001u;
  return device_hostname_template_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NetworkHostnameProto::release_device_hostname_template() {
  // @@protoc_insertion_point(field_release:enterprise_management.NetworkHostnameProto.device_hostname_template)
  if (!_internal_has_device_hostname_template()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return device_hostname_template_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetworkHostnameProto::set_allocated_device_hostname_template(std::string* device_hostname_template) {
  if (device_hostname_template != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  device_hostname_template_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_hostname_template,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.NetworkHostnameProto.device_hostname_template)
}
inline std::string* NetworkHostnameProto::unsafe_arena_release_device_hostname_template() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.NetworkHostnameProto.device_hostname_template)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return device_hostname_template_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NetworkHostnameProto::unsafe_arena_set_allocated_device_hostname_template(
    std::string* device_hostname_template) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_hostname_template != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  device_hostname_template_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_hostname_template, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.NetworkHostnameProto.device_hostname_template)
}

// -------------------------------------------------------------------

// DeviceReportingProto

// optional bool report_version_info = 1 [default = true];
inline bool DeviceReportingProto::_internal_has_report_version_info() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool DeviceReportingProto::has_report_version_info() const {
  return _internal_has_report_version_info();
}
inline void DeviceReportingProto::clear_report_version_info() {
  report_version_info_ = true;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool DeviceReportingProto::_internal_report_version_info() const {
  return report_version_info_;
}
inline bool DeviceReportingProto::report_version_info() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceReportingProto.report_version_info)
  return _internal_report_version_info();
}
inline void DeviceReportingProto::_internal_set_report_version_info(bool value) {
  _has_bits_[0] |= 0x00001000u;
  report_version_info_ = value;
}
inline void DeviceReportingProto::set_report_version_info(bool value) {
  _internal_set_report_version_info(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceReportingProto.report_version_info)
}

// optional bool report_activity_times = 2 [default = true];
inline bool DeviceReportingProto::_internal_has_report_activity_times() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool DeviceReportingProto::has_report_activity_times() const {
  return _internal_has_report_activity_times();
}
inline void DeviceReportingProto::clear_report_activity_times() {
  report_activity_times_ = true;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool DeviceReportingProto::_internal_report_activity_times() const {
  return report_activity_times_;
}
inline bool DeviceReportingProto::report_activity_times() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceReportingProto.report_activity_times)
  return _internal_report_activity_times();
}
inline void DeviceReportingProto::_internal_set_report_activity_times(bool value) {
  _has_bits_[0] |= 0x00002000u;
  report_activity_times_ = value;
}
inline void DeviceReportingProto::set_report_activity_times(bool value) {
  _internal_set_report_activity_times(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceReportingProto.report_activity_times)
}

// optional bool report_boot_mode = 3 [default = true];
inline bool DeviceReportingProto::_internal_has_report_boot_mode() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool DeviceReportingProto::has_report_boot_mode() const {
  return _internal_has_report_boot_mode();
}
inline void DeviceReportingProto::clear_report_boot_mode() {
  report_boot_mode_ = true;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool DeviceReportingProto::_internal_report_boot_mode() const {
  return report_boot_mode_;
}
inline bool DeviceReportingProto::report_boot_mode() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceReportingProto.report_boot_mode)
  return _internal_report_boot_mode();
}
inline void DeviceReportingProto::_internal_set_report_boot_mode(bool value) {
  _has_bits_[0] |= 0x00004000u;
  report_boot_mode_ = value;
}
inline void DeviceReportingProto::set_report_boot_mode(bool value) {
  _internal_set_report_boot_mode(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceReportingProto.report_boot_mode)
}

// optional bool report_location = 4 [default = false];
inline bool DeviceReportingProto::_internal_has_report_location() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceReportingProto::has_report_location() const {
  return _internal_has_report_location();
}
inline void DeviceReportingProto::clear_report_location() {
  report_location_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool DeviceReportingProto::_internal_report_location() const {
  return report_location_;
}
inline bool DeviceReportingProto::report_location() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceReportingProto.report_location)
  return _internal_report_location();
}
inline void DeviceReportingProto::_internal_set_report_location(bool value) {
  _has_bits_[0] |= 0x00000001u;
  report_location_ = value;
}
inline void DeviceReportingProto::set_report_location(bool value) {
  _internal_set_report_location(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceReportingProto.report_location)
}

// optional bool report_network_interfaces = 5 [default = true];
inline bool DeviceReportingProto::_internal_has_report_network_interfaces() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool DeviceReportingProto::has_report_network_interfaces() const {
  return _internal_has_report_network_interfaces();
}
inline void DeviceReportingProto::clear_report_network_interfaces() {
  report_network_interfaces_ = true;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool DeviceReportingProto::_internal_report_network_interfaces() const {
  return report_network_interfaces_;
}
inline bool DeviceReportingProto::report_network_interfaces() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceReportingProto.report_network_interfaces)
  return _internal_report_network_interfaces();
}
inline void DeviceReportingProto::_internal_set_report_network_interfaces(bool value) {
  _has_bits_[0] |= 0x00008000u;
  report_network_interfaces_ = value;
}
inline void DeviceReportingProto::set_report_network_interfaces(bool value) {
  _internal_set_report_network_interfaces(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceReportingProto.report_network_interfaces)
}

// optional bool report_users = 6 [default = true];
inline bool DeviceReportingProto::_internal_has_report_users() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool DeviceReportingProto::has_report_users() const {
  return _internal_has_report_users();
}
inline void DeviceReportingProto::clear_report_users() {
  report_users_ = true;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool DeviceReportingProto::_internal_report_users() const {
  return report_users_;
}
inline bool DeviceReportingProto::report_users() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceReportingProto.report_users)
  return _internal_report_users();
}
inline void DeviceReportingProto::_internal_set_report_users(bool value) {
  _has_bits_[0] |= 0x00010000u;
  report_users_ = value;
}
inline void DeviceReportingProto::set_report_users(bool value) {
  _internal_set_report_users(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceReportingProto.report_users)
}

// optional bool report_hardware_status = 7 [default = true];
inline bool DeviceReportingProto::_internal_has_report_hardware_status() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool DeviceReportingProto::has_report_hardware_status() const {
  return _internal_has_report_hardware_status();
}
inline void DeviceReportingProto::clear_report_hardware_status() {
  report_hardware_status_ = true;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool DeviceReportingProto::_internal_report_hardware_status() const {
  return report_hardware_status_;
}
inline bool DeviceReportingProto::report_hardware_status() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceReportingProto.report_hardware_status)
  return _internal_report_hardware_status();
}
inline void DeviceReportingProto::_internal_set_report_hardware_status(bool value) {
  _has_bits_[0] |= 0x00020000u;
  report_hardware_status_ = value;
}
inline void DeviceReportingProto::set_report_hardware_status(bool value) {
  _internal_set_report_hardware_status(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceReportingProto.report_hardware_status)
}

// optional bool report_session_status = 8 [default = true];
inline bool DeviceReportingProto::_internal_has_report_session_status() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool DeviceReportingProto::has_report_session_status() const {
  return _internal_has_report_session_status();
}
inline void DeviceReportingProto::clear_report_session_status() {
  report_session_status_ = true;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool DeviceReportingProto::_internal_report_session_status() const {
  return report_session_status_;
}
inline bool DeviceReportingProto::report_session_status() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceReportingProto.report_session_status)
  return _internal_report_session_status();
}
inline void DeviceReportingProto::_internal_set_report_session_status(bool value) {
  _has_bits_[0] |= 0x00040000u;
  report_session_status_ = value;
}
inline void DeviceReportingProto::set_report_session_status(bool value) {
  _internal_set_report_session_status(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceReportingProto.report_session_status)
}

// optional bool report_os_update_status = 10 [default = false];
inline bool DeviceReportingProto::_internal_has_report_os_update_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DeviceReportingProto::has_report_os_update_status() const {
  return _internal_has_report_os_update_status();
}
inline void DeviceReportingProto::clear_report_os_update_status() {
  report_os_update_status_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool DeviceReportingProto::_internal_report_os_update_status() const {
  return report_os_update_status_;
}
inline bool DeviceReportingProto::report_os_update_status() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceReportingProto.report_os_update_status)
  return _internal_report_os_update_status();
}
inline void DeviceReportingProto::_internal_set_report_os_update_status(bool value) {
  _has_bits_[0] |= 0x00000002u;
  report_os_update_status_ = value;
}
inline void DeviceReportingProto::set_report_os_update_status(bool value) {
  _internal_set_report_os_update_status(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceReportingProto.report_os_update_status)
}

// optional bool report_running_kiosk_app = 11 [default = false];
inline bool DeviceReportingProto::_internal_has_report_running_kiosk_app() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DeviceReportingProto::has_report_running_kiosk_app() const {
  return _internal_has_report_running_kiosk_app();
}
inline void DeviceReportingProto::clear_report_running_kiosk_app() {
  report_running_kiosk_app_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool DeviceReportingProto::_internal_report_running_kiosk_app() const {
  return report_running_kiosk_app_;
}
inline bool DeviceReportingProto::report_running_kiosk_app() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceReportingProto.report_running_kiosk_app)
  return _internal_report_running_kiosk_app();
}
inline void DeviceReportingProto::_internal_set_report_running_kiosk_app(bool value) {
  _has_bits_[0] |= 0x00000004u;
  report_running_kiosk_app_ = value;
}
inline void DeviceReportingProto::set_report_running_kiosk_app(bool value) {
  _internal_set_report_running_kiosk_app(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceReportingProto.report_running_kiosk_app)
}

// optional bool report_power_status = 12 [default = false];
inline bool DeviceReportingProto::_internal_has_report_power_status() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DeviceReportingProto::has_report_power_status() const {
  return _internal_has_report_power_status();
}
inline void DeviceReportingProto::clear_report_power_status() {
  report_power_status_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool DeviceReportingProto::_internal_report_power_status() const {
  return report_power_status_;
}
inline bool DeviceReportingProto::report_power_status() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceReportingProto.report_power_status)
  return _internal_report_power_status();
}
inline void DeviceReportingProto::_internal_set_report_power_status(bool value) {
  _has_bits_[0] |= 0x00000008u;
  report_power_status_ = value;
}
inline void DeviceReportingProto::set_report_power_status(bool value) {
  _internal_set_report_power_status(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceReportingProto.report_power_status)
}

// optional bool report_storage_status = 13 [default = false];
inline bool DeviceReportingProto::_internal_has_report_storage_status() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DeviceReportingProto::has_report_storage_status() const {
  return _internal_has_report_storage_status();
}
inline void DeviceReportingProto::clear_report_storage_status() {
  report_storage_status_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool DeviceReportingProto::_internal_report_storage_status() const {
  return report_storage_status_;
}
inline bool DeviceReportingProto::report_storage_status() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceReportingProto.report_storage_status)
  return _internal_report_storage_status();
}
inline void DeviceReportingProto::_internal_set_report_storage_status(bool value) {
  _has_bits_[0] |= 0x00000010u;
  report_storage_status_ = value;
}
inline void DeviceReportingProto::set_report_storage_status(bool value) {
  _internal_set_report_storage_status(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceReportingProto.report_storage_status)
}

// optional bool report_board_status = 14 [default = false];
inline bool DeviceReportingProto::_internal_has_report_board_status() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DeviceReportingProto::has_report_board_status() const {
  return _internal_has_report_board_status();
}
inline void DeviceReportingProto::clear_report_board_status() {
  report_board_status_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool DeviceReportingProto::_internal_report_board_status() const {
  return report_board_status_;
}
inline bool DeviceReportingProto::report_board_status() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceReportingProto.report_board_status)
  return _internal_report_board_status();
}
inline void DeviceReportingProto::_internal_set_report_board_status(bool value) {
  _has_bits_[0] |= 0x00000020u;
  report_board_status_ = value;
}
inline void DeviceReportingProto::set_report_board_status(bool value) {
  _internal_set_report_board_status(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceReportingProto.report_board_status)
}

// optional bool report_cpu_info = 15 [default = false];
inline bool DeviceReportingProto::_internal_has_report_cpu_info() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DeviceReportingProto::has_report_cpu_info() const {
  return _internal_has_report_cpu_info();
}
inline void DeviceReportingProto::clear_report_cpu_info() {
  report_cpu_info_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool DeviceReportingProto::_internal_report_cpu_info() const {
  return report_cpu_info_;
}
inline bool DeviceReportingProto::report_cpu_info() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceReportingProto.report_cpu_info)
  return _internal_report_cpu_info();
}
inline void DeviceReportingProto::_internal_set_report_cpu_info(bool value) {
  _has_bits_[0] |= 0x00000040u;
  report_cpu_info_ = value;
}
inline void DeviceReportingProto::set_report_cpu_info(bool value) {
  _internal_set_report_cpu_info(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceReportingProto.report_cpu_info)
}

// optional bool report_graphics_status = 16 [default = false];
inline bool DeviceReportingProto::_internal_has_report_graphics_status() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DeviceReportingProto::has_report_graphics_status() const {
  return _internal_has_report_graphics_status();
}
inline void DeviceReportingProto::clear_report_graphics_status() {
  report_graphics_status_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool DeviceReportingProto::_internal_report_graphics_status() const {
  return report_graphics_status_;
}
inline bool DeviceReportingProto::report_graphics_status() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceReportingProto.report_graphics_status)
  return _internal_report_graphics_status();
}
inline void DeviceReportingProto::_internal_set_report_graphics_status(bool value) {
  _has_bits_[0] |= 0x00000080u;
  report_graphics_status_ = value;
}
inline void DeviceReportingProto::set_report_graphics_status(bool value) {
  _internal_set_report_graphics_status(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceReportingProto.report_graphics_status)
}

// optional bool report_crash_report_info = 17 [default = false];
inline bool DeviceReportingProto::_internal_has_report_crash_report_info() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool DeviceReportingProto::has_report_crash_report_info() const {
  return _internal_has_report_crash_report_info();
}
inline void DeviceReportingProto::clear_report_crash_report_info() {
  report_crash_report_info_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool DeviceReportingProto::_internal_report_crash_report_info() const {
  return report_crash_report_info_;
}
inline bool DeviceReportingProto::report_crash_report_info() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceReportingProto.report_crash_report_info)
  return _internal_report_crash_report_info();
}
inline void DeviceReportingProto::_internal_set_report_crash_report_info(bool value) {
  _has_bits_[0] |= 0x00000100u;
  report_crash_report_info_ = value;
}
inline void DeviceReportingProto::set_report_crash_report_info(bool value) {
  _internal_set_report_crash_report_info(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceReportingProto.report_crash_report_info)
}

// optional bool report_timezone_info = 18 [default = false];
inline bool DeviceReportingProto::_internal_has_report_timezone_info() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool DeviceReportingProto::has_report_timezone_info() const {
  return _internal_has_report_timezone_info();
}
inline void DeviceReportingProto::clear_report_timezone_info() {
  report_timezone_info_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool DeviceReportingProto::_internal_report_timezone_info() const {
  return report_timezone_info_;
}
inline bool DeviceReportingProto::report_timezone_info() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceReportingProto.report_timezone_info)
  return _internal_report_timezone_info();
}
inline void DeviceReportingProto::_internal_set_report_timezone_info(bool value) {
  _has_bits_[0] |= 0x00000200u;
  report_timezone_info_ = value;
}
inline void DeviceReportingProto::set_report_timezone_info(bool value) {
  _internal_set_report_timezone_info(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceReportingProto.report_timezone_info)
}

// optional bool report_memory_info = 19 [default = false];
inline bool DeviceReportingProto::_internal_has_report_memory_info() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool DeviceReportingProto::has_report_memory_info() const {
  return _internal_has_report_memory_info();
}
inline void DeviceReportingProto::clear_report_memory_info() {
  report_memory_info_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool DeviceReportingProto::_internal_report_memory_info() const {
  return report_memory_info_;
}
inline bool DeviceReportingProto::report_memory_info() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceReportingProto.report_memory_info)
  return _internal_report_memory_info();
}
inline void DeviceReportingProto::_internal_set_report_memory_info(bool value) {
  _has_bits_[0] |= 0x00000400u;
  report_memory_info_ = value;
}
inline void DeviceReportingProto::set_report_memory_info(bool value) {
  _internal_set_report_memory_info(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceReportingProto.report_memory_info)
}

// optional bool report_backlight_info = 20 [default = false];
inline bool DeviceReportingProto::_internal_has_report_backlight_info() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool DeviceReportingProto::has_report_backlight_info() const {
  return _internal_has_report_backlight_info();
}
inline void DeviceReportingProto::clear_report_backlight_info() {
  report_backlight_info_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool DeviceReportingProto::_internal_report_backlight_info() const {
  return report_backlight_info_;
}
inline bool DeviceReportingProto::report_backlight_info() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceReportingProto.report_backlight_info)
  return _internal_report_backlight_info();
}
inline void DeviceReportingProto::_internal_set_report_backlight_info(bool value) {
  _has_bits_[0] |= 0x00000800u;
  report_backlight_info_ = value;
}
inline void DeviceReportingProto::set_report_backlight_info(bool value) {
  _internal_set_report_backlight_info(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceReportingProto.report_backlight_info)
}

// optional int64 device_status_frequency = 9 [default = 10800000];
inline bool DeviceReportingProto::_internal_has_device_status_frequency() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool DeviceReportingProto::has_device_status_frequency() const {
  return _internal_has_device_status_frequency();
}
inline void DeviceReportingProto::clear_device_status_frequency() {
  device_status_frequency_ = PROTOBUF_LONGLONG(10800000);
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeviceReportingProto::_internal_device_status_frequency() const {
  return device_status_frequency_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeviceReportingProto::device_status_frequency() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceReportingProto.device_status_frequency)
  return _internal_device_status_frequency();
}
inline void DeviceReportingProto::_internal_set_device_status_frequency(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00080000u;
  device_status_frequency_ = value;
}
inline void DeviceReportingProto::set_device_status_frequency(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_device_status_frequency(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceReportingProto.device_status_frequency)
}

// -------------------------------------------------------------------

// EphemeralUsersEnabledProto

// optional bool ephemeral_users_enabled = 1;
inline bool EphemeralUsersEnabledProto::_internal_has_ephemeral_users_enabled() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EphemeralUsersEnabledProto::has_ephemeral_users_enabled() const {
  return _internal_has_ephemeral_users_enabled();
}
inline void EphemeralUsersEnabledProto::clear_ephemeral_users_enabled() {
  ephemeral_users_enabled_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool EphemeralUsersEnabledProto::_internal_ephemeral_users_enabled() const {
  return ephemeral_users_enabled_;
}
inline bool EphemeralUsersEnabledProto::ephemeral_users_enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.EphemeralUsersEnabledProto.ephemeral_users_enabled)
  return _internal_ephemeral_users_enabled();
}
inline void EphemeralUsersEnabledProto::_internal_set_ephemeral_users_enabled(bool value) {
  _has_bits_[0] |= 0x00000001u;
  ephemeral_users_enabled_ = value;
}
inline void EphemeralUsersEnabledProto::set_ephemeral_users_enabled(bool value) {
  _internal_set_ephemeral_users_enabled(value);
  // @@protoc_insertion_point(field_set:enterprise_management.EphemeralUsersEnabledProto.ephemeral_users_enabled)
}

// -------------------------------------------------------------------

// OBSOLETE_AppPackEntryProto

// optional string OBSOLETE_extension_id = 1 [deprecated = true];
inline bool OBSOLETE_AppPackEntryProto::_internal_has_obsolete_extension_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OBSOLETE_AppPackEntryProto::has_obsolete_extension_id() const {
  return _internal_has_obsolete_extension_id();
}
inline void OBSOLETE_AppPackEntryProto::clear_obsolete_extension_id() {
  obsolete_extension_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OBSOLETE_AppPackEntryProto::obsolete_extension_id() const {
  // @@protoc_insertion_point(field_get:enterprise_management.OBSOLETE_AppPackEntryProto.OBSOLETE_extension_id)
  return _internal_obsolete_extension_id();
}
inline void OBSOLETE_AppPackEntryProto::set_obsolete_extension_id(const std::string& value) {
  _internal_set_obsolete_extension_id(value);
  // @@protoc_insertion_point(field_set:enterprise_management.OBSOLETE_AppPackEntryProto.OBSOLETE_extension_id)
}
inline std::string* OBSOLETE_AppPackEntryProto::mutable_obsolete_extension_id() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.OBSOLETE_AppPackEntryProto.OBSOLETE_extension_id)
  return _internal_mutable_obsolete_extension_id();
}
inline const std::string& OBSOLETE_AppPackEntryProto::_internal_obsolete_extension_id() const {
  return obsolete_extension_id_.Get();
}
inline void OBSOLETE_AppPackEntryProto::_internal_set_obsolete_extension_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  obsolete_extension_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OBSOLETE_AppPackEntryProto::set_obsolete_extension_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  obsolete_extension_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.OBSOLETE_AppPackEntryProto.OBSOLETE_extension_id)
}
inline void OBSOLETE_AppPackEntryProto::set_obsolete_extension_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  obsolete_extension_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.OBSOLETE_AppPackEntryProto.OBSOLETE_extension_id)
}
inline void OBSOLETE_AppPackEntryProto::set_obsolete_extension_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  obsolete_extension_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.OBSOLETE_AppPackEntryProto.OBSOLETE_extension_id)
}
inline std::string* OBSOLETE_AppPackEntryProto::_internal_mutable_obsolete_extension_id() {
  _has_bits_[0] |= 0x00000001u;
  return obsolete_extension_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OBSOLETE_AppPackEntryProto::release_obsolete_extension_id() {
  // @@protoc_insertion_point(field_release:enterprise_management.OBSOLETE_AppPackEntryProto.OBSOLETE_extension_id)
  if (!_internal_has_obsolete_extension_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return obsolete_extension_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OBSOLETE_AppPackEntryProto::set_allocated_obsolete_extension_id(std::string* obsolete_extension_id) {
  if (obsolete_extension_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  obsolete_extension_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), obsolete_extension_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.OBSOLETE_AppPackEntryProto.OBSOLETE_extension_id)
}
inline std::string* OBSOLETE_AppPackEntryProto::unsafe_arena_release_obsolete_extension_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.OBSOLETE_AppPackEntryProto.OBSOLETE_extension_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return obsolete_extension_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OBSOLETE_AppPackEntryProto::unsafe_arena_set_allocated_obsolete_extension_id(
    std::string* obsolete_extension_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (obsolete_extension_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  obsolete_extension_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      obsolete_extension_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.OBSOLETE_AppPackEntryProto.OBSOLETE_extension_id)
}

// optional string OBSOLETE_update_url = 2 [deprecated = true];
inline bool OBSOLETE_AppPackEntryProto::_internal_has_obsolete_update_url() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OBSOLETE_AppPackEntryProto::has_obsolete_update_url() const {
  return _internal_has_obsolete_update_url();
}
inline void OBSOLETE_AppPackEntryProto::clear_obsolete_update_url() {
  obsolete_update_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& OBSOLETE_AppPackEntryProto::obsolete_update_url() const {
  // @@protoc_insertion_point(field_get:enterprise_management.OBSOLETE_AppPackEntryProto.OBSOLETE_update_url)
  return _internal_obsolete_update_url();
}
inline void OBSOLETE_AppPackEntryProto::set_obsolete_update_url(const std::string& value) {
  _internal_set_obsolete_update_url(value);
  // @@protoc_insertion_point(field_set:enterprise_management.OBSOLETE_AppPackEntryProto.OBSOLETE_update_url)
}
inline std::string* OBSOLETE_AppPackEntryProto::mutable_obsolete_update_url() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.OBSOLETE_AppPackEntryProto.OBSOLETE_update_url)
  return _internal_mutable_obsolete_update_url();
}
inline const std::string& OBSOLETE_AppPackEntryProto::_internal_obsolete_update_url() const {
  return obsolete_update_url_.Get();
}
inline void OBSOLETE_AppPackEntryProto::_internal_set_obsolete_update_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  obsolete_update_url_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OBSOLETE_AppPackEntryProto::set_obsolete_update_url(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  obsolete_update_url_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.OBSOLETE_AppPackEntryProto.OBSOLETE_update_url)
}
inline void OBSOLETE_AppPackEntryProto::set_obsolete_update_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  obsolete_update_url_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.OBSOLETE_AppPackEntryProto.OBSOLETE_update_url)
}
inline void OBSOLETE_AppPackEntryProto::set_obsolete_update_url(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  obsolete_update_url_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.OBSOLETE_AppPackEntryProto.OBSOLETE_update_url)
}
inline std::string* OBSOLETE_AppPackEntryProto::_internal_mutable_obsolete_update_url() {
  _has_bits_[0] |= 0x00000002u;
  return obsolete_update_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OBSOLETE_AppPackEntryProto::release_obsolete_update_url() {
  // @@protoc_insertion_point(field_release:enterprise_management.OBSOLETE_AppPackEntryProto.OBSOLETE_update_url)
  if (!_internal_has_obsolete_update_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return obsolete_update_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OBSOLETE_AppPackEntryProto::set_allocated_obsolete_update_url(std::string* obsolete_update_url) {
  if (obsolete_update_url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  obsolete_update_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), obsolete_update_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.OBSOLETE_AppPackEntryProto.OBSOLETE_update_url)
}
inline std::string* OBSOLETE_AppPackEntryProto::unsafe_arena_release_obsolete_update_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.OBSOLETE_AppPackEntryProto.OBSOLETE_update_url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return obsolete_update_url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OBSOLETE_AppPackEntryProto::unsafe_arena_set_allocated_obsolete_update_url(
    std::string* obsolete_update_url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (obsolete_update_url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  obsolete_update_url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      obsolete_update_url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.OBSOLETE_AppPackEntryProto.OBSOLETE_update_url)
}

// optional bool OBSOLETE_online_only = 3 [deprecated = true];
inline bool OBSOLETE_AppPackEntryProto::_internal_has_obsolete_online_only() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OBSOLETE_AppPackEntryProto::has_obsolete_online_only() const {
  return _internal_has_obsolete_online_only();
}
inline void OBSOLETE_AppPackEntryProto::clear_obsolete_online_only() {
  obsolete_online_only_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool OBSOLETE_AppPackEntryProto::_internal_obsolete_online_only() const {
  return obsolete_online_only_;
}
inline bool OBSOLETE_AppPackEntryProto::obsolete_online_only() const {
  // @@protoc_insertion_point(field_get:enterprise_management.OBSOLETE_AppPackEntryProto.OBSOLETE_online_only)
  return _internal_obsolete_online_only();
}
inline void OBSOLETE_AppPackEntryProto::_internal_set_obsolete_online_only(bool value) {
  _has_bits_[0] |= 0x00000004u;
  obsolete_online_only_ = value;
}
inline void OBSOLETE_AppPackEntryProto::set_obsolete_online_only(bool value) {
  _internal_set_obsolete_online_only(value);
  // @@protoc_insertion_point(field_set:enterprise_management.OBSOLETE_AppPackEntryProto.OBSOLETE_online_only)
}

// -------------------------------------------------------------------

// OBSOLETE_AppPackProto

// repeated .enterprise_management.OBSOLETE_AppPackEntryProto app_pack = 1 [deprecated = true];
inline int OBSOLETE_AppPackProto::_internal_app_pack_size() const {
  return app_pack_.size();
}
inline int OBSOLETE_AppPackProto::app_pack_size() const {
  return _internal_app_pack_size();
}
inline void OBSOLETE_AppPackProto::clear_app_pack() {
  app_pack_.Clear();
}
inline ::enterprise_management::OBSOLETE_AppPackEntryProto* OBSOLETE_AppPackProto::mutable_app_pack(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_management.OBSOLETE_AppPackProto.app_pack)
  return app_pack_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::enterprise_management::OBSOLETE_AppPackEntryProto >*
OBSOLETE_AppPackProto::mutable_app_pack() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_management.OBSOLETE_AppPackProto.app_pack)
  return &app_pack_;
}
inline const ::enterprise_management::OBSOLETE_AppPackEntryProto& OBSOLETE_AppPackProto::_internal_app_pack(int index) const {
  return app_pack_.Get(index);
}
inline const ::enterprise_management::OBSOLETE_AppPackEntryProto& OBSOLETE_AppPackProto::app_pack(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_management.OBSOLETE_AppPackProto.app_pack)
  return _internal_app_pack(index);
}
inline ::enterprise_management::OBSOLETE_AppPackEntryProto* OBSOLETE_AppPackProto::_internal_add_app_pack() {
  return app_pack_.Add();
}
inline ::enterprise_management::OBSOLETE_AppPackEntryProto* OBSOLETE_AppPackProto::add_app_pack() {
  // @@protoc_insertion_point(field_add:enterprise_management.OBSOLETE_AppPackProto.app_pack)
  return _internal_add_app_pack();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::enterprise_management::OBSOLETE_AppPackEntryProto >&
OBSOLETE_AppPackProto::app_pack() const {
  // @@protoc_insertion_point(field_list:enterprise_management.OBSOLETE_AppPackProto.app_pack)
  return app_pack_;
}

// -------------------------------------------------------------------

// OBSOLETE_PinnedAppsProto

// repeated string OBSOLETE_app_id = 1 [deprecated = true];
inline int OBSOLETE_PinnedAppsProto::_internal_obsolete_app_id_size() const {
  return obsolete_app_id_.size();
}
inline int OBSOLETE_PinnedAppsProto::obsolete_app_id_size() const {
  return _internal_obsolete_app_id_size();
}
inline void OBSOLETE_PinnedAppsProto::clear_obsolete_app_id() {
  obsolete_app_id_.Clear();
}
inline std::string* OBSOLETE_PinnedAppsProto::add_obsolete_app_id() {
  // @@protoc_insertion_point(field_add_mutable:enterprise_management.OBSOLETE_PinnedAppsProto.OBSOLETE_app_id)
  return _internal_add_obsolete_app_id();
}
inline const std::string& OBSOLETE_PinnedAppsProto::_internal_obsolete_app_id(int index) const {
  return obsolete_app_id_.Get(index);
}
inline const std::string& OBSOLETE_PinnedAppsProto::obsolete_app_id(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_management.OBSOLETE_PinnedAppsProto.OBSOLETE_app_id)
  return _internal_obsolete_app_id(index);
}
inline std::string* OBSOLETE_PinnedAppsProto::mutable_obsolete_app_id(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_management.OBSOLETE_PinnedAppsProto.OBSOLETE_app_id)
  return obsolete_app_id_.Mutable(index);
}
inline void OBSOLETE_PinnedAppsProto::set_obsolete_app_id(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:enterprise_management.OBSOLETE_PinnedAppsProto.OBSOLETE_app_id)
  obsolete_app_id_.Mutable(index)->assign(value);
}
inline void OBSOLETE_PinnedAppsProto::set_obsolete_app_id(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:enterprise_management.OBSOLETE_PinnedAppsProto.OBSOLETE_app_id)
  obsolete_app_id_.Mutable(index)->assign(std::move(value));
}
inline void OBSOLETE_PinnedAppsProto::set_obsolete_app_id(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  obsolete_app_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:enterprise_management.OBSOLETE_PinnedAppsProto.OBSOLETE_app_id)
}
inline void OBSOLETE_PinnedAppsProto::set_obsolete_app_id(int index, const char* value, size_t size) {
  obsolete_app_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.OBSOLETE_PinnedAppsProto.OBSOLETE_app_id)
}
inline std::string* OBSOLETE_PinnedAppsProto::_internal_add_obsolete_app_id() {
  return obsolete_app_id_.Add();
}
inline void OBSOLETE_PinnedAppsProto::add_obsolete_app_id(const std::string& value) {
  obsolete_app_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:enterprise_management.OBSOLETE_PinnedAppsProto.OBSOLETE_app_id)
}
inline void OBSOLETE_PinnedAppsProto::add_obsolete_app_id(std::string&& value) {
  obsolete_app_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:enterprise_management.OBSOLETE_PinnedAppsProto.OBSOLETE_app_id)
}
inline void OBSOLETE_PinnedAppsProto::add_obsolete_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  obsolete_app_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:enterprise_management.OBSOLETE_PinnedAppsProto.OBSOLETE_app_id)
}
inline void OBSOLETE_PinnedAppsProto::add_obsolete_app_id(const char* value, size_t size) {
  obsolete_app_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:enterprise_management.OBSOLETE_PinnedAppsProto.OBSOLETE_app_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OBSOLETE_PinnedAppsProto::obsolete_app_id() const {
  // @@protoc_insertion_point(field_list:enterprise_management.OBSOLETE_PinnedAppsProto.OBSOLETE_app_id)
  return obsolete_app_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OBSOLETE_PinnedAppsProto::mutable_obsolete_app_id() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_management.OBSOLETE_PinnedAppsProto.OBSOLETE_app_id)
  return &obsolete_app_id_;
}

// -------------------------------------------------------------------

// OBSOLETE_ForcedLogoutTimeoutsProto

// optional int64 OBSOLETE_idle_logout_timeout = 1 [deprecated = true];
inline bool OBSOLETE_ForcedLogoutTimeoutsProto::_internal_has_obsolete_idle_logout_timeout() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OBSOLETE_ForcedLogoutTimeoutsProto::has_obsolete_idle_logout_timeout() const {
  return _internal_has_obsolete_idle_logout_timeout();
}
inline void OBSOLETE_ForcedLogoutTimeoutsProto::clear_obsolete_idle_logout_timeout() {
  obsolete_idle_logout_timeout_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OBSOLETE_ForcedLogoutTimeoutsProto::_internal_obsolete_idle_logout_timeout() const {
  return obsolete_idle_logout_timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OBSOLETE_ForcedLogoutTimeoutsProto::obsolete_idle_logout_timeout() const {
  // @@protoc_insertion_point(field_get:enterprise_management.OBSOLETE_ForcedLogoutTimeoutsProto.OBSOLETE_idle_logout_timeout)
  return _internal_obsolete_idle_logout_timeout();
}
inline void OBSOLETE_ForcedLogoutTimeoutsProto::_internal_set_obsolete_idle_logout_timeout(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  obsolete_idle_logout_timeout_ = value;
}
inline void OBSOLETE_ForcedLogoutTimeoutsProto::set_obsolete_idle_logout_timeout(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_obsolete_idle_logout_timeout(value);
  // @@protoc_insertion_point(field_set:enterprise_management.OBSOLETE_ForcedLogoutTimeoutsProto.OBSOLETE_idle_logout_timeout)
}

// optional int64 OBSOLETE_idle_logout_warning_duration = 2 [deprecated = true];
inline bool OBSOLETE_ForcedLogoutTimeoutsProto::_internal_has_obsolete_idle_logout_warning_duration() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OBSOLETE_ForcedLogoutTimeoutsProto::has_obsolete_idle_logout_warning_duration() const {
  return _internal_has_obsolete_idle_logout_warning_duration();
}
inline void OBSOLETE_ForcedLogoutTimeoutsProto::clear_obsolete_idle_logout_warning_duration() {
  obsolete_idle_logout_warning_duration_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OBSOLETE_ForcedLogoutTimeoutsProto::_internal_obsolete_idle_logout_warning_duration() const {
  return obsolete_idle_logout_warning_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OBSOLETE_ForcedLogoutTimeoutsProto::obsolete_idle_logout_warning_duration() const {
  // @@protoc_insertion_point(field_get:enterprise_management.OBSOLETE_ForcedLogoutTimeoutsProto.OBSOLETE_idle_logout_warning_duration)
  return _internal_obsolete_idle_logout_warning_duration();
}
inline void OBSOLETE_ForcedLogoutTimeoutsProto::_internal_set_obsolete_idle_logout_warning_duration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  obsolete_idle_logout_warning_duration_ = value;
}
inline void OBSOLETE_ForcedLogoutTimeoutsProto::set_obsolete_idle_logout_warning_duration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_obsolete_idle_logout_warning_duration(value);
  // @@protoc_insertion_point(field_set:enterprise_management.OBSOLETE_ForcedLogoutTimeoutsProto.OBSOLETE_idle_logout_warning_duration)
}

// -------------------------------------------------------------------

// OBSOLETE_ScreenSaverProto

// optional string OBSOLETE_screen_saver_extension_id = 1 [deprecated = true];
inline bool OBSOLETE_ScreenSaverProto::_internal_has_obsolete_screen_saver_extension_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OBSOLETE_ScreenSaverProto::has_obsolete_screen_saver_extension_id() const {
  return _internal_has_obsolete_screen_saver_extension_id();
}
inline void OBSOLETE_ScreenSaverProto::clear_obsolete_screen_saver_extension_id() {
  obsolete_screen_saver_extension_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OBSOLETE_ScreenSaverProto::obsolete_screen_saver_extension_id() const {
  // @@protoc_insertion_point(field_get:enterprise_management.OBSOLETE_ScreenSaverProto.OBSOLETE_screen_saver_extension_id)
  return _internal_obsolete_screen_saver_extension_id();
}
inline void OBSOLETE_ScreenSaverProto::set_obsolete_screen_saver_extension_id(const std::string& value) {
  _internal_set_obsolete_screen_saver_extension_id(value);
  // @@protoc_insertion_point(field_set:enterprise_management.OBSOLETE_ScreenSaverProto.OBSOLETE_screen_saver_extension_id)
}
inline std::string* OBSOLETE_ScreenSaverProto::mutable_obsolete_screen_saver_extension_id() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.OBSOLETE_ScreenSaverProto.OBSOLETE_screen_saver_extension_id)
  return _internal_mutable_obsolete_screen_saver_extension_id();
}
inline const std::string& OBSOLETE_ScreenSaverProto::_internal_obsolete_screen_saver_extension_id() const {
  return obsolete_screen_saver_extension_id_.Get();
}
inline void OBSOLETE_ScreenSaverProto::_internal_set_obsolete_screen_saver_extension_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  obsolete_screen_saver_extension_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OBSOLETE_ScreenSaverProto::set_obsolete_screen_saver_extension_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  obsolete_screen_saver_extension_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.OBSOLETE_ScreenSaverProto.OBSOLETE_screen_saver_extension_id)
}
inline void OBSOLETE_ScreenSaverProto::set_obsolete_screen_saver_extension_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  obsolete_screen_saver_extension_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.OBSOLETE_ScreenSaverProto.OBSOLETE_screen_saver_extension_id)
}
inline void OBSOLETE_ScreenSaverProto::set_obsolete_screen_saver_extension_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  obsolete_screen_saver_extension_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.OBSOLETE_ScreenSaverProto.OBSOLETE_screen_saver_extension_id)
}
inline std::string* OBSOLETE_ScreenSaverProto::_internal_mutable_obsolete_screen_saver_extension_id() {
  _has_bits_[0] |= 0x00000001u;
  return obsolete_screen_saver_extension_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OBSOLETE_ScreenSaverProto::release_obsolete_screen_saver_extension_id() {
  // @@protoc_insertion_point(field_release:enterprise_management.OBSOLETE_ScreenSaverProto.OBSOLETE_screen_saver_extension_id)
  if (!_internal_has_obsolete_screen_saver_extension_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return obsolete_screen_saver_extension_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OBSOLETE_ScreenSaverProto::set_allocated_obsolete_screen_saver_extension_id(std::string* obsolete_screen_saver_extension_id) {
  if (obsolete_screen_saver_extension_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  obsolete_screen_saver_extension_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), obsolete_screen_saver_extension_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.OBSOLETE_ScreenSaverProto.OBSOLETE_screen_saver_extension_id)
}
inline std::string* OBSOLETE_ScreenSaverProto::unsafe_arena_release_obsolete_screen_saver_extension_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.OBSOLETE_ScreenSaverProto.OBSOLETE_screen_saver_extension_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return obsolete_screen_saver_extension_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OBSOLETE_ScreenSaverProto::unsafe_arena_set_allocated_obsolete_screen_saver_extension_id(
    std::string* obsolete_screen_saver_extension_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (obsolete_screen_saver_extension_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  obsolete_screen_saver_extension_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      obsolete_screen_saver_extension_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.OBSOLETE_ScreenSaverProto.OBSOLETE_screen_saver_extension_id)
}

// optional int64 OBSOLETE_screen_saver_timeout = 2 [deprecated = true];
inline bool OBSOLETE_ScreenSaverProto::_internal_has_obsolete_screen_saver_timeout() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OBSOLETE_ScreenSaverProto::has_obsolete_screen_saver_timeout() const {
  return _internal_has_obsolete_screen_saver_timeout();
}
inline void OBSOLETE_ScreenSaverProto::clear_obsolete_screen_saver_timeout() {
  obsolete_screen_saver_timeout_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OBSOLETE_ScreenSaverProto::_internal_obsolete_screen_saver_timeout() const {
  return obsolete_screen_saver_timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OBSOLETE_ScreenSaverProto::obsolete_screen_saver_timeout() const {
  // @@protoc_insertion_point(field_get:enterprise_management.OBSOLETE_ScreenSaverProto.OBSOLETE_screen_saver_timeout)
  return _internal_obsolete_screen_saver_timeout();
}
inline void OBSOLETE_ScreenSaverProto::_internal_set_obsolete_screen_saver_timeout(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  obsolete_screen_saver_timeout_ = value;
}
inline void OBSOLETE_ScreenSaverProto::set_obsolete_screen_saver_timeout(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_obsolete_screen_saver_timeout(value);
  // @@protoc_insertion_point(field_set:enterprise_management.OBSOLETE_ScreenSaverProto.OBSOLETE_screen_saver_timeout)
}

// -------------------------------------------------------------------

// AutoUpdateSettingsProto

// optional bool update_disabled = 1;
inline bool AutoUpdateSettingsProto::_internal_has_update_disabled() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AutoUpdateSettingsProto::has_update_disabled() const {
  return _internal_has_update_disabled();
}
inline void AutoUpdateSettingsProto::clear_update_disabled() {
  update_disabled_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool AutoUpdateSettingsProto::_internal_update_disabled() const {
  return update_disabled_;
}
inline bool AutoUpdateSettingsProto::update_disabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AutoUpdateSettingsProto.update_disabled)
  return _internal_update_disabled();
}
inline void AutoUpdateSettingsProto::_internal_set_update_disabled(bool value) {
  _has_bits_[0] |= 0x00000040u;
  update_disabled_ = value;
}
inline void AutoUpdateSettingsProto::set_update_disabled(bool value) {
  _internal_set_update_disabled(value);
  // @@protoc_insertion_point(field_set:enterprise_management.AutoUpdateSettingsProto.update_disabled)
}

// optional string target_version_prefix = 2;
inline bool AutoUpdateSettingsProto::_internal_has_target_version_prefix() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AutoUpdateSettingsProto::has_target_version_prefix() const {
  return _internal_has_target_version_prefix();
}
inline void AutoUpdateSettingsProto::clear_target_version_prefix() {
  target_version_prefix_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AutoUpdateSettingsProto::target_version_prefix() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AutoUpdateSettingsProto.target_version_prefix)
  return _internal_target_version_prefix();
}
inline void AutoUpdateSettingsProto::set_target_version_prefix(const std::string& value) {
  _internal_set_target_version_prefix(value);
  // @@protoc_insertion_point(field_set:enterprise_management.AutoUpdateSettingsProto.target_version_prefix)
}
inline std::string* AutoUpdateSettingsProto::mutable_target_version_prefix() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.AutoUpdateSettingsProto.target_version_prefix)
  return _internal_mutable_target_version_prefix();
}
inline const std::string& AutoUpdateSettingsProto::_internal_target_version_prefix() const {
  return target_version_prefix_.Get();
}
inline void AutoUpdateSettingsProto::_internal_set_target_version_prefix(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  target_version_prefix_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AutoUpdateSettingsProto::set_target_version_prefix(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  target_version_prefix_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.AutoUpdateSettingsProto.target_version_prefix)
}
inline void AutoUpdateSettingsProto::set_target_version_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  target_version_prefix_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.AutoUpdateSettingsProto.target_version_prefix)
}
inline void AutoUpdateSettingsProto::set_target_version_prefix(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  target_version_prefix_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.AutoUpdateSettingsProto.target_version_prefix)
}
inline std::string* AutoUpdateSettingsProto::_internal_mutable_target_version_prefix() {
  _has_bits_[0] |= 0x00000001u;
  return target_version_prefix_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AutoUpdateSettingsProto::release_target_version_prefix() {
  // @@protoc_insertion_point(field_release:enterprise_management.AutoUpdateSettingsProto.target_version_prefix)
  if (!_internal_has_target_version_prefix()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return target_version_prefix_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AutoUpdateSettingsProto::set_allocated_target_version_prefix(std::string* target_version_prefix) {
  if (target_version_prefix != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  target_version_prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_version_prefix,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.AutoUpdateSettingsProto.target_version_prefix)
}
inline std::string* AutoUpdateSettingsProto::unsafe_arena_release_target_version_prefix() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.AutoUpdateSettingsProto.target_version_prefix)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return target_version_prefix_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AutoUpdateSettingsProto::unsafe_arena_set_allocated_target_version_prefix(
    std::string* target_version_prefix) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (target_version_prefix != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  target_version_prefix_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      target_version_prefix, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.AutoUpdateSettingsProto.target_version_prefix)
}

// optional string target_version_display_name = 3;
inline bool AutoUpdateSettingsProto::_internal_has_target_version_display_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AutoUpdateSettingsProto::has_target_version_display_name() const {
  return _internal_has_target_version_display_name();
}
inline void AutoUpdateSettingsProto::clear_target_version_display_name() {
  target_version_display_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AutoUpdateSettingsProto::target_version_display_name() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AutoUpdateSettingsProto.target_version_display_name)
  return _internal_target_version_display_name();
}
inline void AutoUpdateSettingsProto::set_target_version_display_name(const std::string& value) {
  _internal_set_target_version_display_name(value);
  // @@protoc_insertion_point(field_set:enterprise_management.AutoUpdateSettingsProto.target_version_display_name)
}
inline std::string* AutoUpdateSettingsProto::mutable_target_version_display_name() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.AutoUpdateSettingsProto.target_version_display_name)
  return _internal_mutable_target_version_display_name();
}
inline const std::string& AutoUpdateSettingsProto::_internal_target_version_display_name() const {
  return target_version_display_name_.Get();
}
inline void AutoUpdateSettingsProto::_internal_set_target_version_display_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  target_version_display_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AutoUpdateSettingsProto::set_target_version_display_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  target_version_display_name_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.AutoUpdateSettingsProto.target_version_display_name)
}
inline void AutoUpdateSettingsProto::set_target_version_display_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  target_version_display_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.AutoUpdateSettingsProto.target_version_display_name)
}
inline void AutoUpdateSettingsProto::set_target_version_display_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  target_version_display_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.AutoUpdateSettingsProto.target_version_display_name)
}
inline std::string* AutoUpdateSettingsProto::_internal_mutable_target_version_display_name() {
  _has_bits_[0] |= 0x00000002u;
  return target_version_display_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AutoUpdateSettingsProto::release_target_version_display_name() {
  // @@protoc_insertion_point(field_release:enterprise_management.AutoUpdateSettingsProto.target_version_display_name)
  if (!_internal_has_target_version_display_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return target_version_display_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AutoUpdateSettingsProto::set_allocated_target_version_display_name(std::string* target_version_display_name) {
  if (target_version_display_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  target_version_display_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_version_display_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.AutoUpdateSettingsProto.target_version_display_name)
}
inline std::string* AutoUpdateSettingsProto::unsafe_arena_release_target_version_display_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.AutoUpdateSettingsProto.target_version_display_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return target_version_display_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AutoUpdateSettingsProto::unsafe_arena_set_allocated_target_version_display_name(
    std::string* target_version_display_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (target_version_display_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  target_version_display_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      target_version_display_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.AutoUpdateSettingsProto.target_version_display_name)
}

// optional int64 scatter_factor_in_seconds = 4;
inline bool AutoUpdateSettingsProto::_internal_has_scatter_factor_in_seconds() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AutoUpdateSettingsProto::has_scatter_factor_in_seconds() const {
  return _internal_has_scatter_factor_in_seconds();
}
inline void AutoUpdateSettingsProto::clear_scatter_factor_in_seconds() {
  scatter_factor_in_seconds_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AutoUpdateSettingsProto::_internal_scatter_factor_in_seconds() const {
  return scatter_factor_in_seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AutoUpdateSettingsProto::scatter_factor_in_seconds() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AutoUpdateSettingsProto.scatter_factor_in_seconds)
  return _internal_scatter_factor_in_seconds();
}
inline void AutoUpdateSettingsProto::_internal_set_scatter_factor_in_seconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  scatter_factor_in_seconds_ = value;
}
inline void AutoUpdateSettingsProto::set_scatter_factor_in_seconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_scatter_factor_in_seconds(value);
  // @@protoc_insertion_point(field_set:enterprise_management.AutoUpdateSettingsProto.scatter_factor_in_seconds)
}

// repeated .enterprise_management.AutoUpdateSettingsProto.ConnectionType allowed_connection_types = 5;
inline int AutoUpdateSettingsProto::_internal_allowed_connection_types_size() const {
  return allowed_connection_types_.size();
}
inline int AutoUpdateSettingsProto::allowed_connection_types_size() const {
  return _internal_allowed_connection_types_size();
}
inline void AutoUpdateSettingsProto::clear_allowed_connection_types() {
  allowed_connection_types_.Clear();
}
inline ::enterprise_management::AutoUpdateSettingsProto_ConnectionType AutoUpdateSettingsProto::_internal_allowed_connection_types(int index) const {
  return static_cast< ::enterprise_management::AutoUpdateSettingsProto_ConnectionType >(allowed_connection_types_.Get(index));
}
inline ::enterprise_management::AutoUpdateSettingsProto_ConnectionType AutoUpdateSettingsProto::allowed_connection_types(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_management.AutoUpdateSettingsProto.allowed_connection_types)
  return _internal_allowed_connection_types(index);
}
inline void AutoUpdateSettingsProto::set_allowed_connection_types(int index, ::enterprise_management::AutoUpdateSettingsProto_ConnectionType value) {
  assert(::enterprise_management::AutoUpdateSettingsProto_ConnectionType_IsValid(value));
  allowed_connection_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:enterprise_management.AutoUpdateSettingsProto.allowed_connection_types)
}
inline void AutoUpdateSettingsProto::_internal_add_allowed_connection_types(::enterprise_management::AutoUpdateSettingsProto_ConnectionType value) {
  assert(::enterprise_management::AutoUpdateSettingsProto_ConnectionType_IsValid(value));
  allowed_connection_types_.Add(value);
}
inline void AutoUpdateSettingsProto::add_allowed_connection_types(::enterprise_management::AutoUpdateSettingsProto_ConnectionType value) {
  // @@protoc_insertion_point(field_add:enterprise_management.AutoUpdateSettingsProto.allowed_connection_types)
  _internal_add_allowed_connection_types(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
AutoUpdateSettingsProto::allowed_connection_types() const {
  // @@protoc_insertion_point(field_list:enterprise_management.AutoUpdateSettingsProto.allowed_connection_types)
  return allowed_connection_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
AutoUpdateSettingsProto::_internal_mutable_allowed_connection_types() {
  return &allowed_connection_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
AutoUpdateSettingsProto::mutable_allowed_connection_types() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_management.AutoUpdateSettingsProto.allowed_connection_types)
  return _internal_mutable_allowed_connection_types();
}

// optional bool OBSOLETE_reboot_after_update = 6 [deprecated = true];
inline bool AutoUpdateSettingsProto::_internal_has_obsolete_reboot_after_update() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AutoUpdateSettingsProto::has_obsolete_reboot_after_update() const {
  return _internal_has_obsolete_reboot_after_update();
}
inline void AutoUpdateSettingsProto::clear_obsolete_reboot_after_update() {
  obsolete_reboot_after_update_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool AutoUpdateSettingsProto::_internal_obsolete_reboot_after_update() const {
  return obsolete_reboot_after_update_;
}
inline bool AutoUpdateSettingsProto::obsolete_reboot_after_update() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AutoUpdateSettingsProto.OBSOLETE_reboot_after_update)
  return _internal_obsolete_reboot_after_update();
}
inline void AutoUpdateSettingsProto::_internal_set_obsolete_reboot_after_update(bool value) {
  _has_bits_[0] |= 0x00000080u;
  obsolete_reboot_after_update_ = value;
}
inline void AutoUpdateSettingsProto::set_obsolete_reboot_after_update(bool value) {
  _internal_set_obsolete_reboot_after_update(value);
  // @@protoc_insertion_point(field_set:enterprise_management.AutoUpdateSettingsProto.OBSOLETE_reboot_after_update)
}

// optional bool http_downloads_enabled = 7 [default = false];
inline bool AutoUpdateSettingsProto::_internal_has_http_downloads_enabled() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool AutoUpdateSettingsProto::has_http_downloads_enabled() const {
  return _internal_has_http_downloads_enabled();
}
inline void AutoUpdateSettingsProto::clear_http_downloads_enabled() {
  http_downloads_enabled_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool AutoUpdateSettingsProto::_internal_http_downloads_enabled() const {
  return http_downloads_enabled_;
}
inline bool AutoUpdateSettingsProto::http_downloads_enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AutoUpdateSettingsProto.http_downloads_enabled)
  return _internal_http_downloads_enabled();
}
inline void AutoUpdateSettingsProto::_internal_set_http_downloads_enabled(bool value) {
  _has_bits_[0] |= 0x00000100u;
  http_downloads_enabled_ = value;
}
inline void AutoUpdateSettingsProto::set_http_downloads_enabled(bool value) {
  _internal_set_http_downloads_enabled(value);
  // @@protoc_insertion_point(field_set:enterprise_management.AutoUpdateSettingsProto.http_downloads_enabled)
}

// optional bool reboot_after_update = 8;
inline bool AutoUpdateSettingsProto::_internal_has_reboot_after_update() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool AutoUpdateSettingsProto::has_reboot_after_update() const {
  return _internal_has_reboot_after_update();
}
inline void AutoUpdateSettingsProto::clear_reboot_after_update() {
  reboot_after_update_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool AutoUpdateSettingsProto::_internal_reboot_after_update() const {
  return reboot_after_update_;
}
inline bool AutoUpdateSettingsProto::reboot_after_update() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AutoUpdateSettingsProto.reboot_after_update)
  return _internal_reboot_after_update();
}
inline void AutoUpdateSettingsProto::_internal_set_reboot_after_update(bool value) {
  _has_bits_[0] |= 0x00000200u;
  reboot_after_update_ = value;
}
inline void AutoUpdateSettingsProto::set_reboot_after_update(bool value) {
  _internal_set_reboot_after_update(value);
  // @@protoc_insertion_point(field_set:enterprise_management.AutoUpdateSettingsProto.reboot_after_update)
}

// optional bool p2p_enabled = 9 [default = false];
inline bool AutoUpdateSettingsProto::_internal_has_p2p_enabled() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool AutoUpdateSettingsProto::has_p2p_enabled() const {
  return _internal_has_p2p_enabled();
}
inline void AutoUpdateSettingsProto::clear_p2p_enabled() {
  p2p_enabled_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool AutoUpdateSettingsProto::_internal_p2p_enabled() const {
  return p2p_enabled_;
}
inline bool AutoUpdateSettingsProto::p2p_enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AutoUpdateSettingsProto.p2p_enabled)
  return _internal_p2p_enabled();
}
inline void AutoUpdateSettingsProto::_internal_set_p2p_enabled(bool value) {
  _has_bits_[0] |= 0x00000400u;
  p2p_enabled_ = value;
}
inline void AutoUpdateSettingsProto::set_p2p_enabled(bool value) {
  _internal_set_p2p_enabled(value);
  // @@protoc_insertion_point(field_set:enterprise_management.AutoUpdateSettingsProto.p2p_enabled)
}

// optional .enterprise_management.AutoUpdateSettingsProto.RollbackToTargetVersion rollback_to_target_version = 10 [default = ROLLBACK_DISABLED];
inline bool AutoUpdateSettingsProto::_internal_has_rollback_to_target_version() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool AutoUpdateSettingsProto::has_rollback_to_target_version() const {
  return _internal_has_rollback_to_target_version();
}
inline void AutoUpdateSettingsProto::clear_rollback_to_target_version() {
  rollback_to_target_version_ = 1;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::enterprise_management::AutoUpdateSettingsProto_RollbackToTargetVersion AutoUpdateSettingsProto::_internal_rollback_to_target_version() const {
  return static_cast< ::enterprise_management::AutoUpdateSettingsProto_RollbackToTargetVersion >(rollback_to_target_version_);
}
inline ::enterprise_management::AutoUpdateSettingsProto_RollbackToTargetVersion AutoUpdateSettingsProto::rollback_to_target_version() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AutoUpdateSettingsProto.rollback_to_target_version)
  return _internal_rollback_to_target_version();
}
inline void AutoUpdateSettingsProto::_internal_set_rollback_to_target_version(::enterprise_management::AutoUpdateSettingsProto_RollbackToTargetVersion value) {
  assert(::enterprise_management::AutoUpdateSettingsProto_RollbackToTargetVersion_IsValid(value));
  _has_bits_[0] |= 0x00001000u;
  rollback_to_target_version_ = value;
}
inline void AutoUpdateSettingsProto::set_rollback_to_target_version(::enterprise_management::AutoUpdateSettingsProto_RollbackToTargetVersion value) {
  _internal_set_rollback_to_target_version(value);
  // @@protoc_insertion_point(field_set:enterprise_management.AutoUpdateSettingsProto.rollback_to_target_version)
}

// optional int32 rollback_allowed_milestones = 11 [default = 0];
inline bool AutoUpdateSettingsProto::_internal_has_rollback_allowed_milestones() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool AutoUpdateSettingsProto::has_rollback_allowed_milestones() const {
  return _internal_has_rollback_allowed_milestones();
}
inline void AutoUpdateSettingsProto::clear_rollback_allowed_milestones() {
  rollback_allowed_milestones_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutoUpdateSettingsProto::_internal_rollback_allowed_milestones() const {
  return rollback_allowed_milestones_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutoUpdateSettingsProto::rollback_allowed_milestones() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AutoUpdateSettingsProto.rollback_allowed_milestones)
  return _internal_rollback_allowed_milestones();
}
inline void AutoUpdateSettingsProto::_internal_set_rollback_allowed_milestones(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  rollback_allowed_milestones_ = value;
}
inline void AutoUpdateSettingsProto::set_rollback_allowed_milestones(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rollback_allowed_milestones(value);
  // @@protoc_insertion_point(field_set:enterprise_management.AutoUpdateSettingsProto.rollback_allowed_milestones)
}

// optional string disallowed_time_intervals = 12;
inline bool AutoUpdateSettingsProto::_internal_has_disallowed_time_intervals() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AutoUpdateSettingsProto::has_disallowed_time_intervals() const {
  return _internal_has_disallowed_time_intervals();
}
inline void AutoUpdateSettingsProto::clear_disallowed_time_intervals() {
  disallowed_time_intervals_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AutoUpdateSettingsProto::disallowed_time_intervals() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AutoUpdateSettingsProto.disallowed_time_intervals)
  return _internal_disallowed_time_intervals();
}
inline void AutoUpdateSettingsProto::set_disallowed_time_intervals(const std::string& value) {
  _internal_set_disallowed_time_intervals(value);
  // @@protoc_insertion_point(field_set:enterprise_management.AutoUpdateSettingsProto.disallowed_time_intervals)
}
inline std::string* AutoUpdateSettingsProto::mutable_disallowed_time_intervals() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.AutoUpdateSettingsProto.disallowed_time_intervals)
  return _internal_mutable_disallowed_time_intervals();
}
inline const std::string& AutoUpdateSettingsProto::_internal_disallowed_time_intervals() const {
  return disallowed_time_intervals_.Get();
}
inline void AutoUpdateSettingsProto::_internal_set_disallowed_time_intervals(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  disallowed_time_intervals_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AutoUpdateSettingsProto::set_disallowed_time_intervals(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  disallowed_time_intervals_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.AutoUpdateSettingsProto.disallowed_time_intervals)
}
inline void AutoUpdateSettingsProto::set_disallowed_time_intervals(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  disallowed_time_intervals_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.AutoUpdateSettingsProto.disallowed_time_intervals)
}
inline void AutoUpdateSettingsProto::set_disallowed_time_intervals(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  disallowed_time_intervals_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.AutoUpdateSettingsProto.disallowed_time_intervals)
}
inline std::string* AutoUpdateSettingsProto::_internal_mutable_disallowed_time_intervals() {
  _has_bits_[0] |= 0x00000004u;
  return disallowed_time_intervals_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AutoUpdateSettingsProto::release_disallowed_time_intervals() {
  // @@protoc_insertion_point(field_release:enterprise_management.AutoUpdateSettingsProto.disallowed_time_intervals)
  if (!_internal_has_disallowed_time_intervals()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return disallowed_time_intervals_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AutoUpdateSettingsProto::set_allocated_disallowed_time_intervals(std::string* disallowed_time_intervals) {
  if (disallowed_time_intervals != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  disallowed_time_intervals_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), disallowed_time_intervals,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.AutoUpdateSettingsProto.disallowed_time_intervals)
}
inline std::string* AutoUpdateSettingsProto::unsafe_arena_release_disallowed_time_intervals() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.AutoUpdateSettingsProto.disallowed_time_intervals)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return disallowed_time_intervals_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AutoUpdateSettingsProto::unsafe_arena_set_allocated_disallowed_time_intervals(
    std::string* disallowed_time_intervals) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (disallowed_time_intervals != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  disallowed_time_intervals_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      disallowed_time_intervals, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.AutoUpdateSettingsProto.disallowed_time_intervals)
}

// optional string staging_schedule = 14;
inline bool AutoUpdateSettingsProto::_internal_has_staging_schedule() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AutoUpdateSettingsProto::has_staging_schedule() const {
  return _internal_has_staging_schedule();
}
inline void AutoUpdateSettingsProto::clear_staging_schedule() {
  staging_schedule_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AutoUpdateSettingsProto::staging_schedule() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AutoUpdateSettingsProto.staging_schedule)
  return _internal_staging_schedule();
}
inline void AutoUpdateSettingsProto::set_staging_schedule(const std::string& value) {
  _internal_set_staging_schedule(value);
  // @@protoc_insertion_point(field_set:enterprise_management.AutoUpdateSettingsProto.staging_schedule)
}
inline std::string* AutoUpdateSettingsProto::mutable_staging_schedule() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.AutoUpdateSettingsProto.staging_schedule)
  return _internal_mutable_staging_schedule();
}
inline const std::string& AutoUpdateSettingsProto::_internal_staging_schedule() const {
  return staging_schedule_.Get();
}
inline void AutoUpdateSettingsProto::_internal_set_staging_schedule(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  staging_schedule_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AutoUpdateSettingsProto::set_staging_schedule(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  staging_schedule_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.AutoUpdateSettingsProto.staging_schedule)
}
inline void AutoUpdateSettingsProto::set_staging_schedule(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  staging_schedule_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.AutoUpdateSettingsProto.staging_schedule)
}
inline void AutoUpdateSettingsProto::set_staging_schedule(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  staging_schedule_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.AutoUpdateSettingsProto.staging_schedule)
}
inline std::string* AutoUpdateSettingsProto::_internal_mutable_staging_schedule() {
  _has_bits_[0] |= 0x00000008u;
  return staging_schedule_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AutoUpdateSettingsProto::release_staging_schedule() {
  // @@protoc_insertion_point(field_release:enterprise_management.AutoUpdateSettingsProto.staging_schedule)
  if (!_internal_has_staging_schedule()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return staging_schedule_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AutoUpdateSettingsProto::set_allocated_staging_schedule(std::string* staging_schedule) {
  if (staging_schedule != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  staging_schedule_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), staging_schedule,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.AutoUpdateSettingsProto.staging_schedule)
}
inline std::string* AutoUpdateSettingsProto::unsafe_arena_release_staging_schedule() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.AutoUpdateSettingsProto.staging_schedule)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return staging_schedule_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AutoUpdateSettingsProto::unsafe_arena_set_allocated_staging_schedule(
    std::string* staging_schedule) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (staging_schedule != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  staging_schedule_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      staging_schedule, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.AutoUpdateSettingsProto.staging_schedule)
}

// optional string device_quick_fix_build_token = 15;
inline bool AutoUpdateSettingsProto::_internal_has_device_quick_fix_build_token() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AutoUpdateSettingsProto::has_device_quick_fix_build_token() const {
  return _internal_has_device_quick_fix_build_token();
}
inline void AutoUpdateSettingsProto::clear_device_quick_fix_build_token() {
  device_quick_fix_build_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& AutoUpdateSettingsProto::device_quick_fix_build_token() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AutoUpdateSettingsProto.device_quick_fix_build_token)
  return _internal_device_quick_fix_build_token();
}
inline void AutoUpdateSettingsProto::set_device_quick_fix_build_token(const std::string& value) {
  _internal_set_device_quick_fix_build_token(value);
  // @@protoc_insertion_point(field_set:enterprise_management.AutoUpdateSettingsProto.device_quick_fix_build_token)
}
inline std::string* AutoUpdateSettingsProto::mutable_device_quick_fix_build_token() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.AutoUpdateSettingsProto.device_quick_fix_build_token)
  return _internal_mutable_device_quick_fix_build_token();
}
inline const std::string& AutoUpdateSettingsProto::_internal_device_quick_fix_build_token() const {
  return device_quick_fix_build_token_.Get();
}
inline void AutoUpdateSettingsProto::_internal_set_device_quick_fix_build_token(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  device_quick_fix_build_token_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AutoUpdateSettingsProto::set_device_quick_fix_build_token(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  device_quick_fix_build_token_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.AutoUpdateSettingsProto.device_quick_fix_build_token)
}
inline void AutoUpdateSettingsProto::set_device_quick_fix_build_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  device_quick_fix_build_token_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.AutoUpdateSettingsProto.device_quick_fix_build_token)
}
inline void AutoUpdateSettingsProto::set_device_quick_fix_build_token(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  device_quick_fix_build_token_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.AutoUpdateSettingsProto.device_quick_fix_build_token)
}
inline std::string* AutoUpdateSettingsProto::_internal_mutable_device_quick_fix_build_token() {
  _has_bits_[0] |= 0x00000010u;
  return device_quick_fix_build_token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AutoUpdateSettingsProto::release_device_quick_fix_build_token() {
  // @@protoc_insertion_point(field_release:enterprise_management.AutoUpdateSettingsProto.device_quick_fix_build_token)
  if (!_internal_has_device_quick_fix_build_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return device_quick_fix_build_token_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AutoUpdateSettingsProto::set_allocated_device_quick_fix_build_token(std::string* device_quick_fix_build_token) {
  if (device_quick_fix_build_token != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  device_quick_fix_build_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_quick_fix_build_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.AutoUpdateSettingsProto.device_quick_fix_build_token)
}
inline std::string* AutoUpdateSettingsProto::unsafe_arena_release_device_quick_fix_build_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.AutoUpdateSettingsProto.device_quick_fix_build_token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return device_quick_fix_build_token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AutoUpdateSettingsProto::unsafe_arena_set_allocated_device_quick_fix_build_token(
    std::string* device_quick_fix_build_token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_quick_fix_build_token != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  device_quick_fix_build_token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_quick_fix_build_token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.AutoUpdateSettingsProto.device_quick_fix_build_token)
}

// -------------------------------------------------------------------

// OBSOLETE_StartUpUrlsProto

// repeated string OBSOLETE_start_up_urls = 1 [deprecated = true];
inline int OBSOLETE_StartUpUrlsProto::_internal_obsolete_start_up_urls_size() const {
  return obsolete_start_up_urls_.size();
}
inline int OBSOLETE_StartUpUrlsProto::obsolete_start_up_urls_size() const {
  return _internal_obsolete_start_up_urls_size();
}
inline void OBSOLETE_StartUpUrlsProto::clear_obsolete_start_up_urls() {
  obsolete_start_up_urls_.Clear();
}
inline std::string* OBSOLETE_StartUpUrlsProto::add_obsolete_start_up_urls() {
  // @@protoc_insertion_point(field_add_mutable:enterprise_management.OBSOLETE_StartUpUrlsProto.OBSOLETE_start_up_urls)
  return _internal_add_obsolete_start_up_urls();
}
inline const std::string& OBSOLETE_StartUpUrlsProto::_internal_obsolete_start_up_urls(int index) const {
  return obsolete_start_up_urls_.Get(index);
}
inline const std::string& OBSOLETE_StartUpUrlsProto::obsolete_start_up_urls(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_management.OBSOLETE_StartUpUrlsProto.OBSOLETE_start_up_urls)
  return _internal_obsolete_start_up_urls(index);
}
inline std::string* OBSOLETE_StartUpUrlsProto::mutable_obsolete_start_up_urls(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_management.OBSOLETE_StartUpUrlsProto.OBSOLETE_start_up_urls)
  return obsolete_start_up_urls_.Mutable(index);
}
inline void OBSOLETE_StartUpUrlsProto::set_obsolete_start_up_urls(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:enterprise_management.OBSOLETE_StartUpUrlsProto.OBSOLETE_start_up_urls)
  obsolete_start_up_urls_.Mutable(index)->assign(value);
}
inline void OBSOLETE_StartUpUrlsProto::set_obsolete_start_up_urls(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:enterprise_management.OBSOLETE_StartUpUrlsProto.OBSOLETE_start_up_urls)
  obsolete_start_up_urls_.Mutable(index)->assign(std::move(value));
}
inline void OBSOLETE_StartUpUrlsProto::set_obsolete_start_up_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  obsolete_start_up_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:enterprise_management.OBSOLETE_StartUpUrlsProto.OBSOLETE_start_up_urls)
}
inline void OBSOLETE_StartUpUrlsProto::set_obsolete_start_up_urls(int index, const char* value, size_t size) {
  obsolete_start_up_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.OBSOLETE_StartUpUrlsProto.OBSOLETE_start_up_urls)
}
inline std::string* OBSOLETE_StartUpUrlsProto::_internal_add_obsolete_start_up_urls() {
  return obsolete_start_up_urls_.Add();
}
inline void OBSOLETE_StartUpUrlsProto::add_obsolete_start_up_urls(const std::string& value) {
  obsolete_start_up_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:enterprise_management.OBSOLETE_StartUpUrlsProto.OBSOLETE_start_up_urls)
}
inline void OBSOLETE_StartUpUrlsProto::add_obsolete_start_up_urls(std::string&& value) {
  obsolete_start_up_urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:enterprise_management.OBSOLETE_StartUpUrlsProto.OBSOLETE_start_up_urls)
}
inline void OBSOLETE_StartUpUrlsProto::add_obsolete_start_up_urls(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  obsolete_start_up_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:enterprise_management.OBSOLETE_StartUpUrlsProto.OBSOLETE_start_up_urls)
}
inline void OBSOLETE_StartUpUrlsProto::add_obsolete_start_up_urls(const char* value, size_t size) {
  obsolete_start_up_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:enterprise_management.OBSOLETE_StartUpUrlsProto.OBSOLETE_start_up_urls)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OBSOLETE_StartUpUrlsProto::obsolete_start_up_urls() const {
  // @@protoc_insertion_point(field_list:enterprise_management.OBSOLETE_StartUpUrlsProto.OBSOLETE_start_up_urls)
  return obsolete_start_up_urls_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OBSOLETE_StartUpUrlsProto::mutable_obsolete_start_up_urls() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_management.OBSOLETE_StartUpUrlsProto.OBSOLETE_start_up_urls)
  return &obsolete_start_up_urls_;
}

// -------------------------------------------------------------------

// SystemTimezoneProto

// optional string timezone = 1;
inline bool SystemTimezoneProto::_internal_has_timezone() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SystemTimezoneProto::has_timezone() const {
  return _internal_has_timezone();
}
inline void SystemTimezoneProto::clear_timezone() {
  timezone_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SystemTimezoneProto::timezone() const {
  // @@protoc_insertion_point(field_get:enterprise_management.SystemTimezoneProto.timezone)
  return _internal_timezone();
}
inline void SystemTimezoneProto::set_timezone(const std::string& value) {
  _internal_set_timezone(value);
  // @@protoc_insertion_point(field_set:enterprise_management.SystemTimezoneProto.timezone)
}
inline std::string* SystemTimezoneProto::mutable_timezone() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.SystemTimezoneProto.timezone)
  return _internal_mutable_timezone();
}
inline const std::string& SystemTimezoneProto::_internal_timezone() const {
  return timezone_.Get();
}
inline void SystemTimezoneProto::_internal_set_timezone(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  timezone_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SystemTimezoneProto::set_timezone(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  timezone_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.SystemTimezoneProto.timezone)
}
inline void SystemTimezoneProto::set_timezone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  timezone_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.SystemTimezoneProto.timezone)
}
inline void SystemTimezoneProto::set_timezone(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  timezone_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.SystemTimezoneProto.timezone)
}
inline std::string* SystemTimezoneProto::_internal_mutable_timezone() {
  _has_bits_[0] |= 0x00000001u;
  return timezone_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SystemTimezoneProto::release_timezone() {
  // @@protoc_insertion_point(field_release:enterprise_management.SystemTimezoneProto.timezone)
  if (!_internal_has_timezone()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return timezone_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemTimezoneProto::set_allocated_timezone(std::string* timezone) {
  if (timezone != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  timezone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timezone,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.SystemTimezoneProto.timezone)
}
inline std::string* SystemTimezoneProto::unsafe_arena_release_timezone() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.SystemTimezoneProto.timezone)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return timezone_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SystemTimezoneProto::unsafe_arena_set_allocated_timezone(
    std::string* timezone) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (timezone != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  timezone_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      timezone, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.SystemTimezoneProto.timezone)
}

// optional .enterprise_management.SystemTimezoneProto.AutomaticTimezoneDetectionType timezone_detection_type = 2;
inline bool SystemTimezoneProto::_internal_has_timezone_detection_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SystemTimezoneProto::has_timezone_detection_type() const {
  return _internal_has_timezone_detection_type();
}
inline void SystemTimezoneProto::clear_timezone_detection_type() {
  timezone_detection_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::enterprise_management::SystemTimezoneProto_AutomaticTimezoneDetectionType SystemTimezoneProto::_internal_timezone_detection_type() const {
  return static_cast< ::enterprise_management::SystemTimezoneProto_AutomaticTimezoneDetectionType >(timezone_detection_type_);
}
inline ::enterprise_management::SystemTimezoneProto_AutomaticTimezoneDetectionType SystemTimezoneProto::timezone_detection_type() const {
  // @@protoc_insertion_point(field_get:enterprise_management.SystemTimezoneProto.timezone_detection_type)
  return _internal_timezone_detection_type();
}
inline void SystemTimezoneProto::_internal_set_timezone_detection_type(::enterprise_management::SystemTimezoneProto_AutomaticTimezoneDetectionType value) {
  assert(::enterprise_management::SystemTimezoneProto_AutomaticTimezoneDetectionType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  timezone_detection_type_ = value;
}
inline void SystemTimezoneProto::set_timezone_detection_type(::enterprise_management::SystemTimezoneProto_AutomaticTimezoneDetectionType value) {
  _internal_set_timezone_detection_type(value);
  // @@protoc_insertion_point(field_set:enterprise_management.SystemTimezoneProto.timezone_detection_type)
}

// -------------------------------------------------------------------

// SystemUse24HourClockProto

// optional bool use_24hour_clock = 1;
inline bool SystemUse24HourClockProto::_internal_has_use_24hour_clock() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SystemUse24HourClockProto::has_use_24hour_clock() const {
  return _internal_has_use_24hour_clock();
}
inline void SystemUse24HourClockProto::clear_use_24hour_clock() {
  use_24hour_clock_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool SystemUse24HourClockProto::_internal_use_24hour_clock() const {
  return use_24hour_clock_;
}
inline bool SystemUse24HourClockProto::use_24hour_clock() const {
  // @@protoc_insertion_point(field_get:enterprise_management.SystemUse24HourClockProto.use_24hour_clock)
  return _internal_use_24hour_clock();
}
inline void SystemUse24HourClockProto::_internal_set_use_24hour_clock(bool value) {
  _has_bits_[0] |= 0x00000001u;
  use_24hour_clock_ = value;
}
inline void SystemUse24HourClockProto::set_use_24hour_clock(bool value) {
  _internal_set_use_24hour_clock(value);
  // @@protoc_insertion_point(field_set:enterprise_management.SystemUse24HourClockProto.use_24hour_clock)
}

// -------------------------------------------------------------------

// KioskAppInfoProto

// optional string app_id = 1;
inline bool KioskAppInfoProto::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KioskAppInfoProto::has_app_id() const {
  return _internal_has_app_id();
}
inline void KioskAppInfoProto::clear_app_id() {
  app_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KioskAppInfoProto::app_id() const {
  // @@protoc_insertion_point(field_get:enterprise_management.KioskAppInfoProto.app_id)
  return _internal_app_id();
}
inline void KioskAppInfoProto::set_app_id(const std::string& value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:enterprise_management.KioskAppInfoProto.app_id)
}
inline std::string* KioskAppInfoProto::mutable_app_id() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.KioskAppInfoProto.app_id)
  return _internal_mutable_app_id();
}
inline const std::string& KioskAppInfoProto::_internal_app_id() const {
  return app_id_.Get();
}
inline void KioskAppInfoProto::_internal_set_app_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  app_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KioskAppInfoProto::set_app_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  app_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.KioskAppInfoProto.app_id)
}
inline void KioskAppInfoProto::set_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  app_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.KioskAppInfoProto.app_id)
}
inline void KioskAppInfoProto::set_app_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  app_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.KioskAppInfoProto.app_id)
}
inline std::string* KioskAppInfoProto::_internal_mutable_app_id() {
  _has_bits_[0] |= 0x00000001u;
  return app_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KioskAppInfoProto::release_app_id() {
  // @@protoc_insertion_point(field_release:enterprise_management.KioskAppInfoProto.app_id)
  if (!_internal_has_app_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return app_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KioskAppInfoProto::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  app_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.KioskAppInfoProto.app_id)
}
inline std::string* KioskAppInfoProto::unsafe_arena_release_app_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.KioskAppInfoProto.app_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return app_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void KioskAppInfoProto::unsafe_arena_set_allocated_app_id(
    std::string* app_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (app_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  app_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      app_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.KioskAppInfoProto.app_id)
}

// optional string update_url = 2;
inline bool KioskAppInfoProto::_internal_has_update_url() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KioskAppInfoProto::has_update_url() const {
  return _internal_has_update_url();
}
inline void KioskAppInfoProto::clear_update_url() {
  update_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& KioskAppInfoProto::update_url() const {
  // @@protoc_insertion_point(field_get:enterprise_management.KioskAppInfoProto.update_url)
  return _internal_update_url();
}
inline void KioskAppInfoProto::set_update_url(const std::string& value) {
  _internal_set_update_url(value);
  // @@protoc_insertion_point(field_set:enterprise_management.KioskAppInfoProto.update_url)
}
inline std::string* KioskAppInfoProto::mutable_update_url() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.KioskAppInfoProto.update_url)
  return _internal_mutable_update_url();
}
inline const std::string& KioskAppInfoProto::_internal_update_url() const {
  return update_url_.Get();
}
inline void KioskAppInfoProto::_internal_set_update_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  update_url_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KioskAppInfoProto::set_update_url(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  update_url_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.KioskAppInfoProto.update_url)
}
inline void KioskAppInfoProto::set_update_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  update_url_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.KioskAppInfoProto.update_url)
}
inline void KioskAppInfoProto::set_update_url(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  update_url_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.KioskAppInfoProto.update_url)
}
inline std::string* KioskAppInfoProto::_internal_mutable_update_url() {
  _has_bits_[0] |= 0x00000002u;
  return update_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KioskAppInfoProto::release_update_url() {
  // @@protoc_insertion_point(field_release:enterprise_management.KioskAppInfoProto.update_url)
  if (!_internal_has_update_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return update_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KioskAppInfoProto::set_allocated_update_url(std::string* update_url) {
  if (update_url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  update_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), update_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.KioskAppInfoProto.update_url)
}
inline std::string* KioskAppInfoProto::unsafe_arena_release_update_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.KioskAppInfoProto.update_url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return update_url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void KioskAppInfoProto::unsafe_arena_set_allocated_update_url(
    std::string* update_url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (update_url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  update_url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      update_url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.KioskAppInfoProto.update_url)
}

// -------------------------------------------------------------------

// AndroidKioskAppInfoProto

// optional string package_name = 1;
inline bool AndroidKioskAppInfoProto::_internal_has_package_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AndroidKioskAppInfoProto::has_package_name() const {
  return _internal_has_package_name();
}
inline void AndroidKioskAppInfoProto::clear_package_name() {
  package_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AndroidKioskAppInfoProto::package_name() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AndroidKioskAppInfoProto.package_name)
  return _internal_package_name();
}
inline void AndroidKioskAppInfoProto::set_package_name(const std::string& value) {
  _internal_set_package_name(value);
  // @@protoc_insertion_point(field_set:enterprise_management.AndroidKioskAppInfoProto.package_name)
}
inline std::string* AndroidKioskAppInfoProto::mutable_package_name() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.AndroidKioskAppInfoProto.package_name)
  return _internal_mutable_package_name();
}
inline const std::string& AndroidKioskAppInfoProto::_internal_package_name() const {
  return package_name_.Get();
}
inline void AndroidKioskAppInfoProto::_internal_set_package_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AndroidKioskAppInfoProto::set_package_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.AndroidKioskAppInfoProto.package_name)
}
inline void AndroidKioskAppInfoProto::set_package_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.AndroidKioskAppInfoProto.package_name)
}
inline void AndroidKioskAppInfoProto::set_package_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.AndroidKioskAppInfoProto.package_name)
}
inline std::string* AndroidKioskAppInfoProto::_internal_mutable_package_name() {
  _has_bits_[0] |= 0x00000001u;
  return package_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AndroidKioskAppInfoProto::release_package_name() {
  // @@protoc_insertion_point(field_release:enterprise_management.AndroidKioskAppInfoProto.package_name)
  if (!_internal_has_package_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return package_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AndroidKioskAppInfoProto::set_allocated_package_name(std::string* package_name) {
  if (package_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  package_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), package_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.AndroidKioskAppInfoProto.package_name)
}
inline std::string* AndroidKioskAppInfoProto::unsafe_arena_release_package_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.AndroidKioskAppInfoProto.package_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return package_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AndroidKioskAppInfoProto::unsafe_arena_set_allocated_package_name(
    std::string* package_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (package_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  package_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      package_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.AndroidKioskAppInfoProto.package_name)
}

// optional string class_name = 2;
inline bool AndroidKioskAppInfoProto::_internal_has_class_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AndroidKioskAppInfoProto::has_class_name() const {
  return _internal_has_class_name();
}
inline void AndroidKioskAppInfoProto::clear_class_name() {
  class_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AndroidKioskAppInfoProto::class_name() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AndroidKioskAppInfoProto.class_name)
  return _internal_class_name();
}
inline void AndroidKioskAppInfoProto::set_class_name(const std::string& value) {
  _internal_set_class_name(value);
  // @@protoc_insertion_point(field_set:enterprise_management.AndroidKioskAppInfoProto.class_name)
}
inline std::string* AndroidKioskAppInfoProto::mutable_class_name() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.AndroidKioskAppInfoProto.class_name)
  return _internal_mutable_class_name();
}
inline const std::string& AndroidKioskAppInfoProto::_internal_class_name() const {
  return class_name_.Get();
}
inline void AndroidKioskAppInfoProto::_internal_set_class_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  class_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AndroidKioskAppInfoProto::set_class_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  class_name_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.AndroidKioskAppInfoProto.class_name)
}
inline void AndroidKioskAppInfoProto::set_class_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  class_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.AndroidKioskAppInfoProto.class_name)
}
inline void AndroidKioskAppInfoProto::set_class_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  class_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.AndroidKioskAppInfoProto.class_name)
}
inline std::string* AndroidKioskAppInfoProto::_internal_mutable_class_name() {
  _has_bits_[0] |= 0x00000002u;
  return class_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AndroidKioskAppInfoProto::release_class_name() {
  // @@protoc_insertion_point(field_release:enterprise_management.AndroidKioskAppInfoProto.class_name)
  if (!_internal_has_class_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return class_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AndroidKioskAppInfoProto::set_allocated_class_name(std::string* class_name) {
  if (class_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  class_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), class_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.AndroidKioskAppInfoProto.class_name)
}
inline std::string* AndroidKioskAppInfoProto::unsafe_arena_release_class_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.AndroidKioskAppInfoProto.class_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return class_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AndroidKioskAppInfoProto::unsafe_arena_set_allocated_class_name(
    std::string* class_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (class_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  class_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      class_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.AndroidKioskAppInfoProto.class_name)
}

// optional string action = 3;
inline bool AndroidKioskAppInfoProto::_internal_has_action() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AndroidKioskAppInfoProto::has_action() const {
  return _internal_has_action();
}
inline void AndroidKioskAppInfoProto::clear_action() {
  action_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AndroidKioskAppInfoProto::action() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AndroidKioskAppInfoProto.action)
  return _internal_action();
}
inline void AndroidKioskAppInfoProto::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:enterprise_management.AndroidKioskAppInfoProto.action)
}
inline std::string* AndroidKioskAppInfoProto::mutable_action() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.AndroidKioskAppInfoProto.action)
  return _internal_mutable_action();
}
inline const std::string& AndroidKioskAppInfoProto::_internal_action() const {
  return action_.Get();
}
inline void AndroidKioskAppInfoProto::_internal_set_action(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  action_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AndroidKioskAppInfoProto::set_action(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  action_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.AndroidKioskAppInfoProto.action)
}
inline void AndroidKioskAppInfoProto::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  action_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.AndroidKioskAppInfoProto.action)
}
inline void AndroidKioskAppInfoProto::set_action(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  action_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.AndroidKioskAppInfoProto.action)
}
inline std::string* AndroidKioskAppInfoProto::_internal_mutable_action() {
  _has_bits_[0] |= 0x00000004u;
  return action_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AndroidKioskAppInfoProto::release_action() {
  // @@protoc_insertion_point(field_release:enterprise_management.AndroidKioskAppInfoProto.action)
  if (!_internal_has_action()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return action_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AndroidKioskAppInfoProto::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.AndroidKioskAppInfoProto.action)
}
inline std::string* AndroidKioskAppInfoProto::unsafe_arena_release_action() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.AndroidKioskAppInfoProto.action)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return action_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AndroidKioskAppInfoProto::unsafe_arena_set_allocated_action(
    std::string* action) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (action != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  action_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      action, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.AndroidKioskAppInfoProto.action)
}

// optional string display_name = 4;
inline bool AndroidKioskAppInfoProto::_internal_has_display_name() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AndroidKioskAppInfoProto::has_display_name() const {
  return _internal_has_display_name();
}
inline void AndroidKioskAppInfoProto::clear_display_name() {
  display_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AndroidKioskAppInfoProto::display_name() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AndroidKioskAppInfoProto.display_name)
  return _internal_display_name();
}
inline void AndroidKioskAppInfoProto::set_display_name(const std::string& value) {
  _internal_set_display_name(value);
  // @@protoc_insertion_point(field_set:enterprise_management.AndroidKioskAppInfoProto.display_name)
}
inline std::string* AndroidKioskAppInfoProto::mutable_display_name() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.AndroidKioskAppInfoProto.display_name)
  return _internal_mutable_display_name();
}
inline const std::string& AndroidKioskAppInfoProto::_internal_display_name() const {
  return display_name_.Get();
}
inline void AndroidKioskAppInfoProto::_internal_set_display_name(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  display_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AndroidKioskAppInfoProto::set_display_name(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  display_name_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.AndroidKioskAppInfoProto.display_name)
}
inline void AndroidKioskAppInfoProto::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  display_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.AndroidKioskAppInfoProto.display_name)
}
inline void AndroidKioskAppInfoProto::set_display_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  display_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.AndroidKioskAppInfoProto.display_name)
}
inline std::string* AndroidKioskAppInfoProto::_internal_mutable_display_name() {
  _has_bits_[0] |= 0x00000008u;
  return display_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AndroidKioskAppInfoProto::release_display_name() {
  // @@protoc_insertion_point(field_release:enterprise_management.AndroidKioskAppInfoProto.display_name)
  if (!_internal_has_display_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return display_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AndroidKioskAppInfoProto::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  display_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), display_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.AndroidKioskAppInfoProto.display_name)
}
inline std::string* AndroidKioskAppInfoProto::unsafe_arena_release_display_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.AndroidKioskAppInfoProto.display_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return display_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AndroidKioskAppInfoProto::unsafe_arena_set_allocated_display_name(
    std::string* display_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (display_name != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  display_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      display_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.AndroidKioskAppInfoProto.display_name)
}

// -------------------------------------------------------------------

// WebKioskAppInfoProto

// optional string url = 1;
inline bool WebKioskAppInfoProto::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WebKioskAppInfoProto::has_url() const {
  return _internal_has_url();
}
inline void WebKioskAppInfoProto::clear_url() {
  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WebKioskAppInfoProto::url() const {
  // @@protoc_insertion_point(field_get:enterprise_management.WebKioskAppInfoProto.url)
  return _internal_url();
}
inline void WebKioskAppInfoProto::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:enterprise_management.WebKioskAppInfoProto.url)
}
inline std::string* WebKioskAppInfoProto::mutable_url() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.WebKioskAppInfoProto.url)
  return _internal_mutable_url();
}
inline const std::string& WebKioskAppInfoProto::_internal_url() const {
  return url_.Get();
}
inline void WebKioskAppInfoProto::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WebKioskAppInfoProto::set_url(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.WebKioskAppInfoProto.url)
}
inline void WebKioskAppInfoProto::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  url_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.WebKioskAppInfoProto.url)
}
inline void WebKioskAppInfoProto::set_url(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.WebKioskAppInfoProto.url)
}
inline std::string* WebKioskAppInfoProto::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WebKioskAppInfoProto::release_url() {
  // @@protoc_insertion_point(field_release:enterprise_management.WebKioskAppInfoProto.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WebKioskAppInfoProto::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.WebKioskAppInfoProto.url)
}
inline std::string* WebKioskAppInfoProto::unsafe_arena_release_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.WebKioskAppInfoProto.url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void WebKioskAppInfoProto::unsafe_arena_set_allocated_url(
    std::string* url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.WebKioskAppInfoProto.url)
}

// -------------------------------------------------------------------

// DeviceLocalAccountInfoProto

// optional string deprecated_public_session_id = 1;
inline bool DeviceLocalAccountInfoProto::_internal_has_deprecated_public_session_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceLocalAccountInfoProto::has_deprecated_public_session_id() const {
  return _internal_has_deprecated_public_session_id();
}
inline void DeviceLocalAccountInfoProto::clear_deprecated_public_session_id() {
  deprecated_public_session_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeviceLocalAccountInfoProto::deprecated_public_session_id() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceLocalAccountInfoProto.deprecated_public_session_id)
  return _internal_deprecated_public_session_id();
}
inline void DeviceLocalAccountInfoProto::set_deprecated_public_session_id(const std::string& value) {
  _internal_set_deprecated_public_session_id(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceLocalAccountInfoProto.deprecated_public_session_id)
}
inline std::string* DeviceLocalAccountInfoProto::mutable_deprecated_public_session_id() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceLocalAccountInfoProto.deprecated_public_session_id)
  return _internal_mutable_deprecated_public_session_id();
}
inline const std::string& DeviceLocalAccountInfoProto::_internal_deprecated_public_session_id() const {
  return deprecated_public_session_id_.Get();
}
inline void DeviceLocalAccountInfoProto::_internal_set_deprecated_public_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  deprecated_public_session_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceLocalAccountInfoProto::set_deprecated_public_session_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  deprecated_public_session_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceLocalAccountInfoProto.deprecated_public_session_id)
}
inline void DeviceLocalAccountInfoProto::set_deprecated_public_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  deprecated_public_session_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceLocalAccountInfoProto.deprecated_public_session_id)
}
inline void DeviceLocalAccountInfoProto::set_deprecated_public_session_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  deprecated_public_session_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceLocalAccountInfoProto.deprecated_public_session_id)
}
inline std::string* DeviceLocalAccountInfoProto::_internal_mutable_deprecated_public_session_id() {
  _has_bits_[0] |= 0x00000001u;
  return deprecated_public_session_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceLocalAccountInfoProto::release_deprecated_public_session_id() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceLocalAccountInfoProto.deprecated_public_session_id)
  if (!_internal_has_deprecated_public_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return deprecated_public_session_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceLocalAccountInfoProto::set_allocated_deprecated_public_session_id(std::string* deprecated_public_session_id) {
  if (deprecated_public_session_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  deprecated_public_session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deprecated_public_session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceLocalAccountInfoProto.deprecated_public_session_id)
}
inline std::string* DeviceLocalAccountInfoProto::unsafe_arena_release_deprecated_public_session_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.DeviceLocalAccountInfoProto.deprecated_public_session_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return deprecated_public_session_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceLocalAccountInfoProto::unsafe_arena_set_allocated_deprecated_public_session_id(
    std::string* deprecated_public_session_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (deprecated_public_session_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  deprecated_public_session_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      deprecated_public_session_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.DeviceLocalAccountInfoProto.deprecated_public_session_id)
}

// optional string account_id = 2;
inline bool DeviceLocalAccountInfoProto::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DeviceLocalAccountInfoProto::has_account_id() const {
  return _internal_has_account_id();
}
inline void DeviceLocalAccountInfoProto::clear_account_id() {
  account_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DeviceLocalAccountInfoProto::account_id() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceLocalAccountInfoProto.account_id)
  return _internal_account_id();
}
inline void DeviceLocalAccountInfoProto::set_account_id(const std::string& value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceLocalAccountInfoProto.account_id)
}
inline std::string* DeviceLocalAccountInfoProto::mutable_account_id() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceLocalAccountInfoProto.account_id)
  return _internal_mutable_account_id();
}
inline const std::string& DeviceLocalAccountInfoProto::_internal_account_id() const {
  return account_id_.Get();
}
inline void DeviceLocalAccountInfoProto::_internal_set_account_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  account_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceLocalAccountInfoProto::set_account_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  account_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceLocalAccountInfoProto.account_id)
}
inline void DeviceLocalAccountInfoProto::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  account_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceLocalAccountInfoProto.account_id)
}
inline void DeviceLocalAccountInfoProto::set_account_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  account_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceLocalAccountInfoProto.account_id)
}
inline std::string* DeviceLocalAccountInfoProto::_internal_mutable_account_id() {
  _has_bits_[0] |= 0x00000002u;
  return account_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceLocalAccountInfoProto::release_account_id() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceLocalAccountInfoProto.account_id)
  if (!_internal_has_account_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return account_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceLocalAccountInfoProto::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  account_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceLocalAccountInfoProto.account_id)
}
inline std::string* DeviceLocalAccountInfoProto::unsafe_arena_release_account_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.DeviceLocalAccountInfoProto.account_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return account_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceLocalAccountInfoProto::unsafe_arena_set_allocated_account_id(
    std::string* account_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (account_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  account_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      account_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.DeviceLocalAccountInfoProto.account_id)
}

// optional .enterprise_management.DeviceLocalAccountInfoProto.AccountType type = 3;
inline bool DeviceLocalAccountInfoProto::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DeviceLocalAccountInfoProto::has_type() const {
  return _internal_has_type();
}
inline void DeviceLocalAccountInfoProto::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::enterprise_management::DeviceLocalAccountInfoProto_AccountType DeviceLocalAccountInfoProto::_internal_type() const {
  return static_cast< ::enterprise_management::DeviceLocalAccountInfoProto_AccountType >(type_);
}
inline ::enterprise_management::DeviceLocalAccountInfoProto_AccountType DeviceLocalAccountInfoProto::type() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceLocalAccountInfoProto.type)
  return _internal_type();
}
inline void DeviceLocalAccountInfoProto::_internal_set_type(::enterprise_management::DeviceLocalAccountInfoProto_AccountType value) {
  assert(::enterprise_management::DeviceLocalAccountInfoProto_AccountType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  type_ = value;
}
inline void DeviceLocalAccountInfoProto::set_type(::enterprise_management::DeviceLocalAccountInfoProto_AccountType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceLocalAccountInfoProto.type)
}

// optional .enterprise_management.KioskAppInfoProto kiosk_app = 4;
inline bool DeviceLocalAccountInfoProto::_internal_has_kiosk_app() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || kiosk_app_ != nullptr);
  return value;
}
inline bool DeviceLocalAccountInfoProto::has_kiosk_app() const {
  return _internal_has_kiosk_app();
}
inline void DeviceLocalAccountInfoProto::clear_kiosk_app() {
  if (kiosk_app_ != nullptr) kiosk_app_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::enterprise_management::KioskAppInfoProto& DeviceLocalAccountInfoProto::_internal_kiosk_app() const {
  const ::enterprise_management::KioskAppInfoProto* p = kiosk_app_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::KioskAppInfoProto*>(
      &::enterprise_management::_KioskAppInfoProto_default_instance_);
}
inline const ::enterprise_management::KioskAppInfoProto& DeviceLocalAccountInfoProto::kiosk_app() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceLocalAccountInfoProto.kiosk_app)
  return _internal_kiosk_app();
}
inline void DeviceLocalAccountInfoProto::unsafe_arena_set_allocated_kiosk_app(
    ::enterprise_management::KioskAppInfoProto* kiosk_app) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kiosk_app_);
  }
  kiosk_app_ = kiosk_app;
  if (kiosk_app) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.DeviceLocalAccountInfoProto.kiosk_app)
}
inline ::enterprise_management::KioskAppInfoProto* DeviceLocalAccountInfoProto::release_kiosk_app() {
  auto temp = unsafe_arena_release_kiosk_app();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::KioskAppInfoProto* DeviceLocalAccountInfoProto::unsafe_arena_release_kiosk_app() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceLocalAccountInfoProto.kiosk_app)
  _has_bits_[0] &= ~0x00000004u;
  ::enterprise_management::KioskAppInfoProto* temp = kiosk_app_;
  kiosk_app_ = nullptr;
  return temp;
}
inline ::enterprise_management::KioskAppInfoProto* DeviceLocalAccountInfoProto::_internal_mutable_kiosk_app() {
  _has_bits_[0] |= 0x00000004u;
  if (kiosk_app_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::KioskAppInfoProto>(GetArena());
    kiosk_app_ = p;
  }
  return kiosk_app_;
}
inline ::enterprise_management::KioskAppInfoProto* DeviceLocalAccountInfoProto::mutable_kiosk_app() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceLocalAccountInfoProto.kiosk_app)
  return _internal_mutable_kiosk_app();
}
inline void DeviceLocalAccountInfoProto::set_allocated_kiosk_app(::enterprise_management::KioskAppInfoProto* kiosk_app) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete kiosk_app_;
  }
  if (kiosk_app) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(kiosk_app);
    if (message_arena != submessage_arena) {
      kiosk_app = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kiosk_app, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  kiosk_app_ = kiosk_app;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceLocalAccountInfoProto.kiosk_app)
}

// optional .enterprise_management.AndroidKioskAppInfoProto android_kiosk_app = 5;
inline bool DeviceLocalAccountInfoProto::_internal_has_android_kiosk_app() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || android_kiosk_app_ != nullptr);
  return value;
}
inline bool DeviceLocalAccountInfoProto::has_android_kiosk_app() const {
  return _internal_has_android_kiosk_app();
}
inline void DeviceLocalAccountInfoProto::clear_android_kiosk_app() {
  if (android_kiosk_app_ != nullptr) android_kiosk_app_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::enterprise_management::AndroidKioskAppInfoProto& DeviceLocalAccountInfoProto::_internal_android_kiosk_app() const {
  const ::enterprise_management::AndroidKioskAppInfoProto* p = android_kiosk_app_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::AndroidKioskAppInfoProto*>(
      &::enterprise_management::_AndroidKioskAppInfoProto_default_instance_);
}
inline const ::enterprise_management::AndroidKioskAppInfoProto& DeviceLocalAccountInfoProto::android_kiosk_app() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceLocalAccountInfoProto.android_kiosk_app)
  return _internal_android_kiosk_app();
}
inline void DeviceLocalAccountInfoProto::unsafe_arena_set_allocated_android_kiosk_app(
    ::enterprise_management::AndroidKioskAppInfoProto* android_kiosk_app) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(android_kiosk_app_);
  }
  android_kiosk_app_ = android_kiosk_app;
  if (android_kiosk_app) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.DeviceLocalAccountInfoProto.android_kiosk_app)
}
inline ::enterprise_management::AndroidKioskAppInfoProto* DeviceLocalAccountInfoProto::release_android_kiosk_app() {
  auto temp = unsafe_arena_release_android_kiosk_app();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::AndroidKioskAppInfoProto* DeviceLocalAccountInfoProto::unsafe_arena_release_android_kiosk_app() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceLocalAccountInfoProto.android_kiosk_app)
  _has_bits_[0] &= ~0x00000008u;
  ::enterprise_management::AndroidKioskAppInfoProto* temp = android_kiosk_app_;
  android_kiosk_app_ = nullptr;
  return temp;
}
inline ::enterprise_management::AndroidKioskAppInfoProto* DeviceLocalAccountInfoProto::_internal_mutable_android_kiosk_app() {
  _has_bits_[0] |= 0x00000008u;
  if (android_kiosk_app_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::AndroidKioskAppInfoProto>(GetArena());
    android_kiosk_app_ = p;
  }
  return android_kiosk_app_;
}
inline ::enterprise_management::AndroidKioskAppInfoProto* DeviceLocalAccountInfoProto::mutable_android_kiosk_app() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceLocalAccountInfoProto.android_kiosk_app)
  return _internal_mutable_android_kiosk_app();
}
inline void DeviceLocalAccountInfoProto::set_allocated_android_kiosk_app(::enterprise_management::AndroidKioskAppInfoProto* android_kiosk_app) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete android_kiosk_app_;
  }
  if (android_kiosk_app) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(android_kiosk_app);
    if (message_arena != submessage_arena) {
      android_kiosk_app = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, android_kiosk_app, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  android_kiosk_app_ = android_kiosk_app;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceLocalAccountInfoProto.android_kiosk_app)
}

// optional .enterprise_management.WebKioskAppInfoProto web_kiosk_app = 6;
inline bool DeviceLocalAccountInfoProto::_internal_has_web_kiosk_app() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || web_kiosk_app_ != nullptr);
  return value;
}
inline bool DeviceLocalAccountInfoProto::has_web_kiosk_app() const {
  return _internal_has_web_kiosk_app();
}
inline void DeviceLocalAccountInfoProto::clear_web_kiosk_app() {
  if (web_kiosk_app_ != nullptr) web_kiosk_app_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::enterprise_management::WebKioskAppInfoProto& DeviceLocalAccountInfoProto::_internal_web_kiosk_app() const {
  const ::enterprise_management::WebKioskAppInfoProto* p = web_kiosk_app_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::WebKioskAppInfoProto*>(
      &::enterprise_management::_WebKioskAppInfoProto_default_instance_);
}
inline const ::enterprise_management::WebKioskAppInfoProto& DeviceLocalAccountInfoProto::web_kiosk_app() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceLocalAccountInfoProto.web_kiosk_app)
  return _internal_web_kiosk_app();
}
inline void DeviceLocalAccountInfoProto::unsafe_arena_set_allocated_web_kiosk_app(
    ::enterprise_management::WebKioskAppInfoProto* web_kiosk_app) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(web_kiosk_app_);
  }
  web_kiosk_app_ = web_kiosk_app;
  if (web_kiosk_app) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.DeviceLocalAccountInfoProto.web_kiosk_app)
}
inline ::enterprise_management::WebKioskAppInfoProto* DeviceLocalAccountInfoProto::release_web_kiosk_app() {
  auto temp = unsafe_arena_release_web_kiosk_app();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::WebKioskAppInfoProto* DeviceLocalAccountInfoProto::unsafe_arena_release_web_kiosk_app() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceLocalAccountInfoProto.web_kiosk_app)
  _has_bits_[0] &= ~0x00000010u;
  ::enterprise_management::WebKioskAppInfoProto* temp = web_kiosk_app_;
  web_kiosk_app_ = nullptr;
  return temp;
}
inline ::enterprise_management::WebKioskAppInfoProto* DeviceLocalAccountInfoProto::_internal_mutable_web_kiosk_app() {
  _has_bits_[0] |= 0x00000010u;
  if (web_kiosk_app_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::WebKioskAppInfoProto>(GetArena());
    web_kiosk_app_ = p;
  }
  return web_kiosk_app_;
}
inline ::enterprise_management::WebKioskAppInfoProto* DeviceLocalAccountInfoProto::mutable_web_kiosk_app() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceLocalAccountInfoProto.web_kiosk_app)
  return _internal_mutable_web_kiosk_app();
}
inline void DeviceLocalAccountInfoProto::set_allocated_web_kiosk_app(::enterprise_management::WebKioskAppInfoProto* web_kiosk_app) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete web_kiosk_app_;
  }
  if (web_kiosk_app) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(web_kiosk_app);
    if (message_arena != submessage_arena) {
      web_kiosk_app = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, web_kiosk_app, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  web_kiosk_app_ = web_kiosk_app;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceLocalAccountInfoProto.web_kiosk_app)
}

// -------------------------------------------------------------------

// DeviceLocalAccountsProto

// repeated .enterprise_management.DeviceLocalAccountInfoProto account = 1;
inline int DeviceLocalAccountsProto::_internal_account_size() const {
  return account_.size();
}
inline int DeviceLocalAccountsProto::account_size() const {
  return _internal_account_size();
}
inline void DeviceLocalAccountsProto::clear_account() {
  account_.Clear();
}
inline ::enterprise_management::DeviceLocalAccountInfoProto* DeviceLocalAccountsProto::mutable_account(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceLocalAccountsProto.account)
  return account_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::enterprise_management::DeviceLocalAccountInfoProto >*
DeviceLocalAccountsProto::mutable_account() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceLocalAccountsProto.account)
  return &account_;
}
inline const ::enterprise_management::DeviceLocalAccountInfoProto& DeviceLocalAccountsProto::_internal_account(int index) const {
  return account_.Get(index);
}
inline const ::enterprise_management::DeviceLocalAccountInfoProto& DeviceLocalAccountsProto::account(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceLocalAccountsProto.account)
  return _internal_account(index);
}
inline ::enterprise_management::DeviceLocalAccountInfoProto* DeviceLocalAccountsProto::_internal_add_account() {
  return account_.Add();
}
inline ::enterprise_management::DeviceLocalAccountInfoProto* DeviceLocalAccountsProto::add_account() {
  // @@protoc_insertion_point(field_add:enterprise_management.DeviceLocalAccountsProto.account)
  return _internal_add_account();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::enterprise_management::DeviceLocalAccountInfoProto >&
DeviceLocalAccountsProto::account() const {
  // @@protoc_insertion_point(field_list:enterprise_management.DeviceLocalAccountsProto.account)
  return account_;
}

// optional string auto_login_id = 2;
inline bool DeviceLocalAccountsProto::_internal_has_auto_login_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceLocalAccountsProto::has_auto_login_id() const {
  return _internal_has_auto_login_id();
}
inline void DeviceLocalAccountsProto::clear_auto_login_id() {
  auto_login_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeviceLocalAccountsProto::auto_login_id() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceLocalAccountsProto.auto_login_id)
  return _internal_auto_login_id();
}
inline void DeviceLocalAccountsProto::set_auto_login_id(const std::string& value) {
  _internal_set_auto_login_id(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceLocalAccountsProto.auto_login_id)
}
inline std::string* DeviceLocalAccountsProto::mutable_auto_login_id() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceLocalAccountsProto.auto_login_id)
  return _internal_mutable_auto_login_id();
}
inline const std::string& DeviceLocalAccountsProto::_internal_auto_login_id() const {
  return auto_login_id_.Get();
}
inline void DeviceLocalAccountsProto::_internal_set_auto_login_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  auto_login_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceLocalAccountsProto::set_auto_login_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  auto_login_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceLocalAccountsProto.auto_login_id)
}
inline void DeviceLocalAccountsProto::set_auto_login_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  auto_login_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceLocalAccountsProto.auto_login_id)
}
inline void DeviceLocalAccountsProto::set_auto_login_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  auto_login_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceLocalAccountsProto.auto_login_id)
}
inline std::string* DeviceLocalAccountsProto::_internal_mutable_auto_login_id() {
  _has_bits_[0] |= 0x00000001u;
  return auto_login_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceLocalAccountsProto::release_auto_login_id() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceLocalAccountsProto.auto_login_id)
  if (!_internal_has_auto_login_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return auto_login_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceLocalAccountsProto::set_allocated_auto_login_id(std::string* auto_login_id) {
  if (auto_login_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  auto_login_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auto_login_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceLocalAccountsProto.auto_login_id)
}
inline std::string* DeviceLocalAccountsProto::unsafe_arena_release_auto_login_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.DeviceLocalAccountsProto.auto_login_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return auto_login_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceLocalAccountsProto::unsafe_arena_set_allocated_auto_login_id(
    std::string* auto_login_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (auto_login_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  auto_login_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      auto_login_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.DeviceLocalAccountsProto.auto_login_id)
}

// optional int64 auto_login_delay = 3;
inline bool DeviceLocalAccountsProto::_internal_has_auto_login_delay() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DeviceLocalAccountsProto::has_auto_login_delay() const {
  return _internal_has_auto_login_delay();
}
inline void DeviceLocalAccountsProto::clear_auto_login_delay() {
  auto_login_delay_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeviceLocalAccountsProto::_internal_auto_login_delay() const {
  return auto_login_delay_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeviceLocalAccountsProto::auto_login_delay() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceLocalAccountsProto.auto_login_delay)
  return _internal_auto_login_delay();
}
inline void DeviceLocalAccountsProto::_internal_set_auto_login_delay(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  auto_login_delay_ = value;
}
inline void DeviceLocalAccountsProto::set_auto_login_delay(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_auto_login_delay(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceLocalAccountsProto.auto_login_delay)
}

// optional bool enable_auto_login_bailout = 4 [default = true];
inline bool DeviceLocalAccountsProto::_internal_has_enable_auto_login_bailout() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DeviceLocalAccountsProto::has_enable_auto_login_bailout() const {
  return _internal_has_enable_auto_login_bailout();
}
inline void DeviceLocalAccountsProto::clear_enable_auto_login_bailout() {
  enable_auto_login_bailout_ = true;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool DeviceLocalAccountsProto::_internal_enable_auto_login_bailout() const {
  return enable_auto_login_bailout_;
}
inline bool DeviceLocalAccountsProto::enable_auto_login_bailout() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceLocalAccountsProto.enable_auto_login_bailout)
  return _internal_enable_auto_login_bailout();
}
inline void DeviceLocalAccountsProto::_internal_set_enable_auto_login_bailout(bool value) {
  _has_bits_[0] |= 0x00000004u;
  enable_auto_login_bailout_ = value;
}
inline void DeviceLocalAccountsProto::set_enable_auto_login_bailout(bool value) {
  _internal_set_enable_auto_login_bailout(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceLocalAccountsProto.enable_auto_login_bailout)
}

// optional bool prompt_for_network_when_offline = 5 [default = true];
inline bool DeviceLocalAccountsProto::_internal_has_prompt_for_network_when_offline() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DeviceLocalAccountsProto::has_prompt_for_network_when_offline() const {
  return _internal_has_prompt_for_network_when_offline();
}
inline void DeviceLocalAccountsProto::clear_prompt_for_network_when_offline() {
  prompt_for_network_when_offline_ = true;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool DeviceLocalAccountsProto::_internal_prompt_for_network_when_offline() const {
  return prompt_for_network_when_offline_;
}
inline bool DeviceLocalAccountsProto::prompt_for_network_when_offline() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceLocalAccountsProto.prompt_for_network_when_offline)
  return _internal_prompt_for_network_when_offline();
}
inline void DeviceLocalAccountsProto::_internal_set_prompt_for_network_when_offline(bool value) {
  _has_bits_[0] |= 0x00000008u;
  prompt_for_network_when_offline_ = value;
}
inline void DeviceLocalAccountsProto::set_prompt_for_network_when_offline(bool value) {
  _internal_set_prompt_for_network_when_offline(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceLocalAccountsProto.prompt_for_network_when_offline)
}

// -------------------------------------------------------------------

// AllowRedeemChromeOsRegistrationOffersProto

// optional bool allow_redeem_offers = 1 [default = true];
inline bool AllowRedeemChromeOsRegistrationOffersProto::_internal_has_allow_redeem_offers() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AllowRedeemChromeOsRegistrationOffersProto::has_allow_redeem_offers() const {
  return _internal_has_allow_redeem_offers();
}
inline void AllowRedeemChromeOsRegistrationOffersProto::clear_allow_redeem_offers() {
  allow_redeem_offers_ = true;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool AllowRedeemChromeOsRegistrationOffersProto::_internal_allow_redeem_offers() const {
  return allow_redeem_offers_;
}
inline bool AllowRedeemChromeOsRegistrationOffersProto::allow_redeem_offers() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AllowRedeemChromeOsRegistrationOffersProto.allow_redeem_offers)
  return _internal_allow_redeem_offers();
}
inline void AllowRedeemChromeOsRegistrationOffersProto::_internal_set_allow_redeem_offers(bool value) {
  _has_bits_[0] |= 0x00000001u;
  allow_redeem_offers_ = value;
}
inline void AllowRedeemChromeOsRegistrationOffersProto::set_allow_redeem_offers(bool value) {
  _internal_set_allow_redeem_offers(value);
  // @@protoc_insertion_point(field_set:enterprise_management.AllowRedeemChromeOsRegistrationOffersProto.allow_redeem_offers)
}

// -------------------------------------------------------------------

// StartUpFlagsProto

// repeated string flags = 1;
inline int StartUpFlagsProto::_internal_flags_size() const {
  return flags_.size();
}
inline int StartUpFlagsProto::flags_size() const {
  return _internal_flags_size();
}
inline void StartUpFlagsProto::clear_flags() {
  flags_.Clear();
}
inline std::string* StartUpFlagsProto::add_flags() {
  // @@protoc_insertion_point(field_add_mutable:enterprise_management.StartUpFlagsProto.flags)
  return _internal_add_flags();
}
inline const std::string& StartUpFlagsProto::_internal_flags(int index) const {
  return flags_.Get(index);
}
inline const std::string& StartUpFlagsProto::flags(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_management.StartUpFlagsProto.flags)
  return _internal_flags(index);
}
inline std::string* StartUpFlagsProto::mutable_flags(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_management.StartUpFlagsProto.flags)
  return flags_.Mutable(index);
}
inline void StartUpFlagsProto::set_flags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:enterprise_management.StartUpFlagsProto.flags)
  flags_.Mutable(index)->assign(value);
}
inline void StartUpFlagsProto::set_flags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:enterprise_management.StartUpFlagsProto.flags)
  flags_.Mutable(index)->assign(std::move(value));
}
inline void StartUpFlagsProto::set_flags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  flags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:enterprise_management.StartUpFlagsProto.flags)
}
inline void StartUpFlagsProto::set_flags(int index, const char* value, size_t size) {
  flags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.StartUpFlagsProto.flags)
}
inline std::string* StartUpFlagsProto::_internal_add_flags() {
  return flags_.Add();
}
inline void StartUpFlagsProto::add_flags(const std::string& value) {
  flags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:enterprise_management.StartUpFlagsProto.flags)
}
inline void StartUpFlagsProto::add_flags(std::string&& value) {
  flags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:enterprise_management.StartUpFlagsProto.flags)
}
inline void StartUpFlagsProto::add_flags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  flags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:enterprise_management.StartUpFlagsProto.flags)
}
inline void StartUpFlagsProto::add_flags(const char* value, size_t size) {
  flags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:enterprise_management.StartUpFlagsProto.flags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StartUpFlagsProto::flags() const {
  // @@protoc_insertion_point(field_list:enterprise_management.StartUpFlagsProto.flags)
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StartUpFlagsProto::mutable_flags() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_management.StartUpFlagsProto.flags)
  return &flags_;
}

// -------------------------------------------------------------------

// UptimeLimitProto

// optional int64 OBSOLETE_uptime_limit = 1 [deprecated = true];
inline bool UptimeLimitProto::_internal_has_obsolete_uptime_limit() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UptimeLimitProto::has_obsolete_uptime_limit() const {
  return _internal_has_obsolete_uptime_limit();
}
inline void UptimeLimitProto::clear_obsolete_uptime_limit() {
  obsolete_uptime_limit_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UptimeLimitProto::_internal_obsolete_uptime_limit() const {
  return obsolete_uptime_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UptimeLimitProto::obsolete_uptime_limit() const {
  // @@protoc_insertion_point(field_get:enterprise_management.UptimeLimitProto.OBSOLETE_uptime_limit)
  return _internal_obsolete_uptime_limit();
}
inline void UptimeLimitProto::_internal_set_obsolete_uptime_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  obsolete_uptime_limit_ = value;
}
inline void UptimeLimitProto::set_obsolete_uptime_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_obsolete_uptime_limit(value);
  // @@protoc_insertion_point(field_set:enterprise_management.UptimeLimitProto.OBSOLETE_uptime_limit)
}

// optional int64 uptime_limit = 2;
inline bool UptimeLimitProto::_internal_has_uptime_limit() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UptimeLimitProto::has_uptime_limit() const {
  return _internal_has_uptime_limit();
}
inline void UptimeLimitProto::clear_uptime_limit() {
  uptime_limit_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UptimeLimitProto::_internal_uptime_limit() const {
  return uptime_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UptimeLimitProto::uptime_limit() const {
  // @@protoc_insertion_point(field_get:enterprise_management.UptimeLimitProto.uptime_limit)
  return _internal_uptime_limit();
}
inline void UptimeLimitProto::_internal_set_uptime_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  uptime_limit_ = value;
}
inline void UptimeLimitProto::set_uptime_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_uptime_limit(value);
  // @@protoc_insertion_point(field_set:enterprise_management.UptimeLimitProto.uptime_limit)
}

// -------------------------------------------------------------------

// VariationsParameterProto

// optional string parameter = 1;
inline bool VariationsParameterProto::_internal_has_parameter() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VariationsParameterProto::has_parameter() const {
  return _internal_has_parameter();
}
inline void VariationsParameterProto::clear_parameter() {
  parameter_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VariationsParameterProto::parameter() const {
  // @@protoc_insertion_point(field_get:enterprise_management.VariationsParameterProto.parameter)
  return _internal_parameter();
}
inline void VariationsParameterProto::set_parameter(const std::string& value) {
  _internal_set_parameter(value);
  // @@protoc_insertion_point(field_set:enterprise_management.VariationsParameterProto.parameter)
}
inline std::string* VariationsParameterProto::mutable_parameter() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.VariationsParameterProto.parameter)
  return _internal_mutable_parameter();
}
inline const std::string& VariationsParameterProto::_internal_parameter() const {
  return parameter_.Get();
}
inline void VariationsParameterProto::_internal_set_parameter(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  parameter_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VariationsParameterProto::set_parameter(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  parameter_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.VariationsParameterProto.parameter)
}
inline void VariationsParameterProto::set_parameter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  parameter_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.VariationsParameterProto.parameter)
}
inline void VariationsParameterProto::set_parameter(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  parameter_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.VariationsParameterProto.parameter)
}
inline std::string* VariationsParameterProto::_internal_mutable_parameter() {
  _has_bits_[0] |= 0x00000001u;
  return parameter_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VariationsParameterProto::release_parameter() {
  // @@protoc_insertion_point(field_release:enterprise_management.VariationsParameterProto.parameter)
  if (!_internal_has_parameter()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return parameter_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VariationsParameterProto::set_allocated_parameter(std::string* parameter) {
  if (parameter != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  parameter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parameter,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.VariationsParameterProto.parameter)
}
inline std::string* VariationsParameterProto::unsafe_arena_release_parameter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.VariationsParameterProto.parameter)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return parameter_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VariationsParameterProto::unsafe_arena_set_allocated_parameter(
    std::string* parameter) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (parameter != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  parameter_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      parameter, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.VariationsParameterProto.parameter)
}

// -------------------------------------------------------------------

// AttestationSettingsProto

// optional bool attestation_enabled = 1 [default = false];
inline bool AttestationSettingsProto::_internal_has_attestation_enabled() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AttestationSettingsProto::has_attestation_enabled() const {
  return _internal_has_attestation_enabled();
}
inline void AttestationSettingsProto::clear_attestation_enabled() {
  attestation_enabled_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool AttestationSettingsProto::_internal_attestation_enabled() const {
  return attestation_enabled_;
}
inline bool AttestationSettingsProto::attestation_enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AttestationSettingsProto.attestation_enabled)
  return _internal_attestation_enabled();
}
inline void AttestationSettingsProto::_internal_set_attestation_enabled(bool value) {
  _has_bits_[0] |= 0x00000001u;
  attestation_enabled_ = value;
}
inline void AttestationSettingsProto::set_attestation_enabled(bool value) {
  _internal_set_attestation_enabled(value);
  // @@protoc_insertion_point(field_set:enterprise_management.AttestationSettingsProto.attestation_enabled)
}

// optional bool content_protection_enabled = 2 [default = true];
inline bool AttestationSettingsProto::_internal_has_content_protection_enabled() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AttestationSettingsProto::has_content_protection_enabled() const {
  return _internal_has_content_protection_enabled();
}
inline void AttestationSettingsProto::clear_content_protection_enabled() {
  content_protection_enabled_ = true;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool AttestationSettingsProto::_internal_content_protection_enabled() const {
  return content_protection_enabled_;
}
inline bool AttestationSettingsProto::content_protection_enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AttestationSettingsProto.content_protection_enabled)
  return _internal_content_protection_enabled();
}
inline void AttestationSettingsProto::_internal_set_content_protection_enabled(bool value) {
  _has_bits_[0] |= 0x00000002u;
  content_protection_enabled_ = value;
}
inline void AttestationSettingsProto::set_content_protection_enabled(bool value) {
  _internal_set_content_protection_enabled(value);
  // @@protoc_insertion_point(field_set:enterprise_management.AttestationSettingsProto.content_protection_enabled)
}

// -------------------------------------------------------------------

// AccessibilitySettingsProto

// optional bool login_screen_default_large_cursor_enabled = 1;
inline bool AccessibilitySettingsProto::_internal_has_login_screen_default_large_cursor_enabled() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool AccessibilitySettingsProto::has_login_screen_default_large_cursor_enabled() const {
  return _internal_has_login_screen_default_large_cursor_enabled();
}
inline void AccessibilitySettingsProto::clear_login_screen_default_large_cursor_enabled() {
  login_screen_default_large_cursor_enabled_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool AccessibilitySettingsProto::_internal_login_screen_default_large_cursor_enabled() const {
  return login_screen_default_large_cursor_enabled_;
}
inline bool AccessibilitySettingsProto::login_screen_default_large_cursor_enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AccessibilitySettingsProto.login_screen_default_large_cursor_enabled)
  return _internal_login_screen_default_large_cursor_enabled();
}
inline void AccessibilitySettingsProto::_internal_set_login_screen_default_large_cursor_enabled(bool value) {
  _has_bits_[0] |= 0x00008000u;
  login_screen_default_large_cursor_enabled_ = value;
}
inline void AccessibilitySettingsProto::set_login_screen_default_large_cursor_enabled(bool value) {
  _internal_set_login_screen_default_large_cursor_enabled(value);
  // @@protoc_insertion_point(field_set:enterprise_management.AccessibilitySettingsProto.login_screen_default_large_cursor_enabled)
}

// optional bool login_screen_default_spoken_feedback_enabled = 2;
inline bool AccessibilitySettingsProto::_internal_has_login_screen_default_spoken_feedback_enabled() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool AccessibilitySettingsProto::has_login_screen_default_spoken_feedback_enabled() const {
  return _internal_has_login_screen_default_spoken_feedback_enabled();
}
inline void AccessibilitySettingsProto::clear_login_screen_default_spoken_feedback_enabled() {
  login_screen_default_spoken_feedback_enabled_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool AccessibilitySettingsProto::_internal_login_screen_default_spoken_feedback_enabled() const {
  return login_screen_default_spoken_feedback_enabled_;
}
inline bool AccessibilitySettingsProto::login_screen_default_spoken_feedback_enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AccessibilitySettingsProto.login_screen_default_spoken_feedback_enabled)
  return _internal_login_screen_default_spoken_feedback_enabled();
}
inline void AccessibilitySettingsProto::_internal_set_login_screen_default_spoken_feedback_enabled(bool value) {
  _has_bits_[0] |= 0x00010000u;
  login_screen_default_spoken_feedback_enabled_ = value;
}
inline void AccessibilitySettingsProto::set_login_screen_default_spoken_feedback_enabled(bool value) {
  _internal_set_login_screen_default_spoken_feedback_enabled(value);
  // @@protoc_insertion_point(field_set:enterprise_management.AccessibilitySettingsProto.login_screen_default_spoken_feedback_enabled)
}

// optional bool login_screen_default_high_contrast_enabled = 3;
inline bool AccessibilitySettingsProto::_internal_has_login_screen_default_high_contrast_enabled() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool AccessibilitySettingsProto::has_login_screen_default_high_contrast_enabled() const {
  return _internal_has_login_screen_default_high_contrast_enabled();
}
inline void AccessibilitySettingsProto::clear_login_screen_default_high_contrast_enabled() {
  login_screen_default_high_contrast_enabled_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool AccessibilitySettingsProto::_internal_login_screen_default_high_contrast_enabled() const {
  return login_screen_default_high_contrast_enabled_;
}
inline bool AccessibilitySettingsProto::login_screen_default_high_contrast_enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AccessibilitySettingsProto.login_screen_default_high_contrast_enabled)
  return _internal_login_screen_default_high_contrast_enabled();
}
inline void AccessibilitySettingsProto::_internal_set_login_screen_default_high_contrast_enabled(bool value) {
  _has_bits_[0] |= 0x00020000u;
  login_screen_default_high_contrast_enabled_ = value;
}
inline void AccessibilitySettingsProto::set_login_screen_default_high_contrast_enabled(bool value) {
  _internal_set_login_screen_default_high_contrast_enabled(value);
  // @@protoc_insertion_point(field_set:enterprise_management.AccessibilitySettingsProto.login_screen_default_high_contrast_enabled)
}

// optional .enterprise_management.AccessibilitySettingsProto.ScreenMagnifierType login_screen_default_screen_magnifier_type = 4;
inline bool AccessibilitySettingsProto::_internal_has_login_screen_default_screen_magnifier_type() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool AccessibilitySettingsProto::has_login_screen_default_screen_magnifier_type() const {
  return _internal_has_login_screen_default_screen_magnifier_type();
}
inline void AccessibilitySettingsProto::clear_login_screen_default_screen_magnifier_type() {
  login_screen_default_screen_magnifier_type_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::enterprise_management::AccessibilitySettingsProto_ScreenMagnifierType AccessibilitySettingsProto::_internal_login_screen_default_screen_magnifier_type() const {
  return static_cast< ::enterprise_management::AccessibilitySettingsProto_ScreenMagnifierType >(login_screen_default_screen_magnifier_type_);
}
inline ::enterprise_management::AccessibilitySettingsProto_ScreenMagnifierType AccessibilitySettingsProto::login_screen_default_screen_magnifier_type() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AccessibilitySettingsProto.login_screen_default_screen_magnifier_type)
  return _internal_login_screen_default_screen_magnifier_type();
}
inline void AccessibilitySettingsProto::_internal_set_login_screen_default_screen_magnifier_type(::enterprise_management::AccessibilitySettingsProto_ScreenMagnifierType value) {
  assert(::enterprise_management::AccessibilitySettingsProto_ScreenMagnifierType_IsValid(value));
  _has_bits_[0] |= 0x00080000u;
  login_screen_default_screen_magnifier_type_ = value;
}
inline void AccessibilitySettingsProto::set_login_screen_default_screen_magnifier_type(::enterprise_management::AccessibilitySettingsProto_ScreenMagnifierType value) {
  _internal_set_login_screen_default_screen_magnifier_type(value);
  // @@protoc_insertion_point(field_set:enterprise_management.AccessibilitySettingsProto.login_screen_default_screen_magnifier_type)
}

// optional bool login_screen_default_virtual_keyboard_enabled = 5;
inline bool AccessibilitySettingsProto::_internal_has_login_screen_default_virtual_keyboard_enabled() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool AccessibilitySettingsProto::has_login_screen_default_virtual_keyboard_enabled() const {
  return _internal_has_login_screen_default_virtual_keyboard_enabled();
}
inline void AccessibilitySettingsProto::clear_login_screen_default_virtual_keyboard_enabled() {
  login_screen_default_virtual_keyboard_enabled_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool AccessibilitySettingsProto::_internal_login_screen_default_virtual_keyboard_enabled() const {
  return login_screen_default_virtual_keyboard_enabled_;
}
inline bool AccessibilitySettingsProto::login_screen_default_virtual_keyboard_enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AccessibilitySettingsProto.login_screen_default_virtual_keyboard_enabled)
  return _internal_login_screen_default_virtual_keyboard_enabled();
}
inline void AccessibilitySettingsProto::_internal_set_login_screen_default_virtual_keyboard_enabled(bool value) {
  _has_bits_[0] |= 0x00040000u;
  login_screen_default_virtual_keyboard_enabled_ = value;
}
inline void AccessibilitySettingsProto::set_login_screen_default_virtual_keyboard_enabled(bool value) {
  _internal_set_login_screen_default_virtual_keyboard_enabled(value);
  // @@protoc_insertion_point(field_set:enterprise_management.AccessibilitySettingsProto.login_screen_default_virtual_keyboard_enabled)
}

// optional bool login_screen_large_cursor_enabled = 6;
inline bool AccessibilitySettingsProto::_internal_has_login_screen_large_cursor_enabled() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool AccessibilitySettingsProto::has_login_screen_large_cursor_enabled() const {
  return _internal_has_login_screen_large_cursor_enabled();
}
inline void AccessibilitySettingsProto::clear_login_screen_large_cursor_enabled() {
  login_screen_large_cursor_enabled_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool AccessibilitySettingsProto::_internal_login_screen_large_cursor_enabled() const {
  return login_screen_large_cursor_enabled_;
}
inline bool AccessibilitySettingsProto::login_screen_large_cursor_enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AccessibilitySettingsProto.login_screen_large_cursor_enabled)
  return _internal_login_screen_large_cursor_enabled();
}
inline void AccessibilitySettingsProto::_internal_set_login_screen_large_cursor_enabled(bool value) {
  _has_bits_[0] |= 0x00100000u;
  login_screen_large_cursor_enabled_ = value;
}
inline void AccessibilitySettingsProto::set_login_screen_large_cursor_enabled(bool value) {
  _internal_set_login_screen_large_cursor_enabled(value);
  // @@protoc_insertion_point(field_set:enterprise_management.AccessibilitySettingsProto.login_screen_large_cursor_enabled)
}

// optional .enterprise_management.PolicyOptions login_screen_large_cursor_enabled_options = 7;
inline bool AccessibilitySettingsProto::_internal_has_login_screen_large_cursor_enabled_options() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || login_screen_large_cursor_enabled_options_ != nullptr);
  return value;
}
inline bool AccessibilitySettingsProto::has_login_screen_large_cursor_enabled_options() const {
  return _internal_has_login_screen_large_cursor_enabled_options();
}
inline const ::enterprise_management::PolicyOptions& AccessibilitySettingsProto::_internal_login_screen_large_cursor_enabled_options() const {
  const ::enterprise_management::PolicyOptions* p = login_screen_large_cursor_enabled_options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::PolicyOptions*>(
      &::enterprise_management::_PolicyOptions_default_instance_);
}
inline const ::enterprise_management::PolicyOptions& AccessibilitySettingsProto::login_screen_large_cursor_enabled_options() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AccessibilitySettingsProto.login_screen_large_cursor_enabled_options)
  return _internal_login_screen_large_cursor_enabled_options();
}
inline void AccessibilitySettingsProto::unsafe_arena_set_allocated_login_screen_large_cursor_enabled_options(
    ::enterprise_management::PolicyOptions* login_screen_large_cursor_enabled_options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_large_cursor_enabled_options_);
  }
  login_screen_large_cursor_enabled_options_ = login_screen_large_cursor_enabled_options;
  if (login_screen_large_cursor_enabled_options) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.AccessibilitySettingsProto.login_screen_large_cursor_enabled_options)
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::release_login_screen_large_cursor_enabled_options() {
  auto temp = unsafe_arena_release_login_screen_large_cursor_enabled_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::unsafe_arena_release_login_screen_large_cursor_enabled_options() {
  // @@protoc_insertion_point(field_release:enterprise_management.AccessibilitySettingsProto.login_screen_large_cursor_enabled_options)
  _has_bits_[0] &= ~0x00000001u;
  ::enterprise_management::PolicyOptions* temp = login_screen_large_cursor_enabled_options_;
  login_screen_large_cursor_enabled_options_ = nullptr;
  return temp;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::_internal_mutable_login_screen_large_cursor_enabled_options() {
  _has_bits_[0] |= 0x00000001u;
  if (login_screen_large_cursor_enabled_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::PolicyOptions>(GetArena());
    login_screen_large_cursor_enabled_options_ = p;
  }
  return login_screen_large_cursor_enabled_options_;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::mutable_login_screen_large_cursor_enabled_options() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.AccessibilitySettingsProto.login_screen_large_cursor_enabled_options)
  return _internal_mutable_login_screen_large_cursor_enabled_options();
}
inline void AccessibilitySettingsProto::set_allocated_login_screen_large_cursor_enabled_options(::enterprise_management::PolicyOptions* login_screen_large_cursor_enabled_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_large_cursor_enabled_options_);
  }
  if (login_screen_large_cursor_enabled_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_large_cursor_enabled_options)->GetArena();
    if (message_arena != submessage_arena) {
      login_screen_large_cursor_enabled_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_screen_large_cursor_enabled_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  login_screen_large_cursor_enabled_options_ = login_screen_large_cursor_enabled_options;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.AccessibilitySettingsProto.login_screen_large_cursor_enabled_options)
}

// optional bool login_screen_spoken_feedback_enabled = 8;
inline bool AccessibilitySettingsProto::_internal_has_login_screen_spoken_feedback_enabled() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool AccessibilitySettingsProto::has_login_screen_spoken_feedback_enabled() const {
  return _internal_has_login_screen_spoken_feedback_enabled();
}
inline void AccessibilitySettingsProto::clear_login_screen_spoken_feedback_enabled() {
  login_screen_spoken_feedback_enabled_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool AccessibilitySettingsProto::_internal_login_screen_spoken_feedback_enabled() const {
  return login_screen_spoken_feedback_enabled_;
}
inline bool AccessibilitySettingsProto::login_screen_spoken_feedback_enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AccessibilitySettingsProto.login_screen_spoken_feedback_enabled)
  return _internal_login_screen_spoken_feedback_enabled();
}
inline void AccessibilitySettingsProto::_internal_set_login_screen_spoken_feedback_enabled(bool value) {
  _has_bits_[0] |= 0x00200000u;
  login_screen_spoken_feedback_enabled_ = value;
}
inline void AccessibilitySettingsProto::set_login_screen_spoken_feedback_enabled(bool value) {
  _internal_set_login_screen_spoken_feedback_enabled(value);
  // @@protoc_insertion_point(field_set:enterprise_management.AccessibilitySettingsProto.login_screen_spoken_feedback_enabled)
}

// optional .enterprise_management.PolicyOptions login_screen_spoken_feedback_enabled_options = 9;
inline bool AccessibilitySettingsProto::_internal_has_login_screen_spoken_feedback_enabled_options() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || login_screen_spoken_feedback_enabled_options_ != nullptr);
  return value;
}
inline bool AccessibilitySettingsProto::has_login_screen_spoken_feedback_enabled_options() const {
  return _internal_has_login_screen_spoken_feedback_enabled_options();
}
inline const ::enterprise_management::PolicyOptions& AccessibilitySettingsProto::_internal_login_screen_spoken_feedback_enabled_options() const {
  const ::enterprise_management::PolicyOptions* p = login_screen_spoken_feedback_enabled_options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::PolicyOptions*>(
      &::enterprise_management::_PolicyOptions_default_instance_);
}
inline const ::enterprise_management::PolicyOptions& AccessibilitySettingsProto::login_screen_spoken_feedback_enabled_options() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AccessibilitySettingsProto.login_screen_spoken_feedback_enabled_options)
  return _internal_login_screen_spoken_feedback_enabled_options();
}
inline void AccessibilitySettingsProto::unsafe_arena_set_allocated_login_screen_spoken_feedback_enabled_options(
    ::enterprise_management::PolicyOptions* login_screen_spoken_feedback_enabled_options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_spoken_feedback_enabled_options_);
  }
  login_screen_spoken_feedback_enabled_options_ = login_screen_spoken_feedback_enabled_options;
  if (login_screen_spoken_feedback_enabled_options) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.AccessibilitySettingsProto.login_screen_spoken_feedback_enabled_options)
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::release_login_screen_spoken_feedback_enabled_options() {
  auto temp = unsafe_arena_release_login_screen_spoken_feedback_enabled_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::unsafe_arena_release_login_screen_spoken_feedback_enabled_options() {
  // @@protoc_insertion_point(field_release:enterprise_management.AccessibilitySettingsProto.login_screen_spoken_feedback_enabled_options)
  _has_bits_[0] &= ~0x00000002u;
  ::enterprise_management::PolicyOptions* temp = login_screen_spoken_feedback_enabled_options_;
  login_screen_spoken_feedback_enabled_options_ = nullptr;
  return temp;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::_internal_mutable_login_screen_spoken_feedback_enabled_options() {
  _has_bits_[0] |= 0x00000002u;
  if (login_screen_spoken_feedback_enabled_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::PolicyOptions>(GetArena());
    login_screen_spoken_feedback_enabled_options_ = p;
  }
  return login_screen_spoken_feedback_enabled_options_;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::mutable_login_screen_spoken_feedback_enabled_options() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.AccessibilitySettingsProto.login_screen_spoken_feedback_enabled_options)
  return _internal_mutable_login_screen_spoken_feedback_enabled_options();
}
inline void AccessibilitySettingsProto::set_allocated_login_screen_spoken_feedback_enabled_options(::enterprise_management::PolicyOptions* login_screen_spoken_feedback_enabled_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_spoken_feedback_enabled_options_);
  }
  if (login_screen_spoken_feedback_enabled_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_spoken_feedback_enabled_options)->GetArena();
    if (message_arena != submessage_arena) {
      login_screen_spoken_feedback_enabled_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_screen_spoken_feedback_enabled_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  login_screen_spoken_feedback_enabled_options_ = login_screen_spoken_feedback_enabled_options;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.AccessibilitySettingsProto.login_screen_spoken_feedback_enabled_options)
}

// optional bool login_screen_high_contrast_enabled = 10;
inline bool AccessibilitySettingsProto::_internal_has_login_screen_high_contrast_enabled() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool AccessibilitySettingsProto::has_login_screen_high_contrast_enabled() const {
  return _internal_has_login_screen_high_contrast_enabled();
}
inline void AccessibilitySettingsProto::clear_login_screen_high_contrast_enabled() {
  login_screen_high_contrast_enabled_ = false;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool AccessibilitySettingsProto::_internal_login_screen_high_contrast_enabled() const {
  return login_screen_high_contrast_enabled_;
}
inline bool AccessibilitySettingsProto::login_screen_high_contrast_enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AccessibilitySettingsProto.login_screen_high_contrast_enabled)
  return _internal_login_screen_high_contrast_enabled();
}
inline void AccessibilitySettingsProto::_internal_set_login_screen_high_contrast_enabled(bool value) {
  _has_bits_[0] |= 0x00400000u;
  login_screen_high_contrast_enabled_ = value;
}
inline void AccessibilitySettingsProto::set_login_screen_high_contrast_enabled(bool value) {
  _internal_set_login_screen_high_contrast_enabled(value);
  // @@protoc_insertion_point(field_set:enterprise_management.AccessibilitySettingsProto.login_screen_high_contrast_enabled)
}

// optional .enterprise_management.PolicyOptions login_screen_high_contrast_enabled_options = 11;
inline bool AccessibilitySettingsProto::_internal_has_login_screen_high_contrast_enabled_options() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || login_screen_high_contrast_enabled_options_ != nullptr);
  return value;
}
inline bool AccessibilitySettingsProto::has_login_screen_high_contrast_enabled_options() const {
  return _internal_has_login_screen_high_contrast_enabled_options();
}
inline const ::enterprise_management::PolicyOptions& AccessibilitySettingsProto::_internal_login_screen_high_contrast_enabled_options() const {
  const ::enterprise_management::PolicyOptions* p = login_screen_high_contrast_enabled_options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::PolicyOptions*>(
      &::enterprise_management::_PolicyOptions_default_instance_);
}
inline const ::enterprise_management::PolicyOptions& AccessibilitySettingsProto::login_screen_high_contrast_enabled_options() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AccessibilitySettingsProto.login_screen_high_contrast_enabled_options)
  return _internal_login_screen_high_contrast_enabled_options();
}
inline void AccessibilitySettingsProto::unsafe_arena_set_allocated_login_screen_high_contrast_enabled_options(
    ::enterprise_management::PolicyOptions* login_screen_high_contrast_enabled_options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_high_contrast_enabled_options_);
  }
  login_screen_high_contrast_enabled_options_ = login_screen_high_contrast_enabled_options;
  if (login_screen_high_contrast_enabled_options) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.AccessibilitySettingsProto.login_screen_high_contrast_enabled_options)
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::release_login_screen_high_contrast_enabled_options() {
  auto temp = unsafe_arena_release_login_screen_high_contrast_enabled_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::unsafe_arena_release_login_screen_high_contrast_enabled_options() {
  // @@protoc_insertion_point(field_release:enterprise_management.AccessibilitySettingsProto.login_screen_high_contrast_enabled_options)
  _has_bits_[0] &= ~0x00000004u;
  ::enterprise_management::PolicyOptions* temp = login_screen_high_contrast_enabled_options_;
  login_screen_high_contrast_enabled_options_ = nullptr;
  return temp;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::_internal_mutable_login_screen_high_contrast_enabled_options() {
  _has_bits_[0] |= 0x00000004u;
  if (login_screen_high_contrast_enabled_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::PolicyOptions>(GetArena());
    login_screen_high_contrast_enabled_options_ = p;
  }
  return login_screen_high_contrast_enabled_options_;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::mutable_login_screen_high_contrast_enabled_options() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.AccessibilitySettingsProto.login_screen_high_contrast_enabled_options)
  return _internal_mutable_login_screen_high_contrast_enabled_options();
}
inline void AccessibilitySettingsProto::set_allocated_login_screen_high_contrast_enabled_options(::enterprise_management::PolicyOptions* login_screen_high_contrast_enabled_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_high_contrast_enabled_options_);
  }
  if (login_screen_high_contrast_enabled_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_high_contrast_enabled_options)->GetArena();
    if (message_arena != submessage_arena) {
      login_screen_high_contrast_enabled_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_screen_high_contrast_enabled_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  login_screen_high_contrast_enabled_options_ = login_screen_high_contrast_enabled_options;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.AccessibilitySettingsProto.login_screen_high_contrast_enabled_options)
}

// optional bool login_screen_virtual_keyboard_enabled = 12;
inline bool AccessibilitySettingsProto::_internal_has_login_screen_virtual_keyboard_enabled() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool AccessibilitySettingsProto::has_login_screen_virtual_keyboard_enabled() const {
  return _internal_has_login_screen_virtual_keyboard_enabled();
}
inline void AccessibilitySettingsProto::clear_login_screen_virtual_keyboard_enabled() {
  login_screen_virtual_keyboard_enabled_ = false;
  _has_bits_[0] &= ~0x00800000u;
}
inline bool AccessibilitySettingsProto::_internal_login_screen_virtual_keyboard_enabled() const {
  return login_screen_virtual_keyboard_enabled_;
}
inline bool AccessibilitySettingsProto::login_screen_virtual_keyboard_enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AccessibilitySettingsProto.login_screen_virtual_keyboard_enabled)
  return _internal_login_screen_virtual_keyboard_enabled();
}
inline void AccessibilitySettingsProto::_internal_set_login_screen_virtual_keyboard_enabled(bool value) {
  _has_bits_[0] |= 0x00800000u;
  login_screen_virtual_keyboard_enabled_ = value;
}
inline void AccessibilitySettingsProto::set_login_screen_virtual_keyboard_enabled(bool value) {
  _internal_set_login_screen_virtual_keyboard_enabled(value);
  // @@protoc_insertion_point(field_set:enterprise_management.AccessibilitySettingsProto.login_screen_virtual_keyboard_enabled)
}

// optional .enterprise_management.PolicyOptions login_screen_virtual_keyboard_enabled_options = 13;
inline bool AccessibilitySettingsProto::_internal_has_login_screen_virtual_keyboard_enabled_options() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || login_screen_virtual_keyboard_enabled_options_ != nullptr);
  return value;
}
inline bool AccessibilitySettingsProto::has_login_screen_virtual_keyboard_enabled_options() const {
  return _internal_has_login_screen_virtual_keyboard_enabled_options();
}
inline const ::enterprise_management::PolicyOptions& AccessibilitySettingsProto::_internal_login_screen_virtual_keyboard_enabled_options() const {
  const ::enterprise_management::PolicyOptions* p = login_screen_virtual_keyboard_enabled_options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::PolicyOptions*>(
      &::enterprise_management::_PolicyOptions_default_instance_);
}
inline const ::enterprise_management::PolicyOptions& AccessibilitySettingsProto::login_screen_virtual_keyboard_enabled_options() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AccessibilitySettingsProto.login_screen_virtual_keyboard_enabled_options)
  return _internal_login_screen_virtual_keyboard_enabled_options();
}
inline void AccessibilitySettingsProto::unsafe_arena_set_allocated_login_screen_virtual_keyboard_enabled_options(
    ::enterprise_management::PolicyOptions* login_screen_virtual_keyboard_enabled_options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_virtual_keyboard_enabled_options_);
  }
  login_screen_virtual_keyboard_enabled_options_ = login_screen_virtual_keyboard_enabled_options;
  if (login_screen_virtual_keyboard_enabled_options) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.AccessibilitySettingsProto.login_screen_virtual_keyboard_enabled_options)
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::release_login_screen_virtual_keyboard_enabled_options() {
  auto temp = unsafe_arena_release_login_screen_virtual_keyboard_enabled_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::unsafe_arena_release_login_screen_virtual_keyboard_enabled_options() {
  // @@protoc_insertion_point(field_release:enterprise_management.AccessibilitySettingsProto.login_screen_virtual_keyboard_enabled_options)
  _has_bits_[0] &= ~0x00000008u;
  ::enterprise_management::PolicyOptions* temp = login_screen_virtual_keyboard_enabled_options_;
  login_screen_virtual_keyboard_enabled_options_ = nullptr;
  return temp;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::_internal_mutable_login_screen_virtual_keyboard_enabled_options() {
  _has_bits_[0] |= 0x00000008u;
  if (login_screen_virtual_keyboard_enabled_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::PolicyOptions>(GetArena());
    login_screen_virtual_keyboard_enabled_options_ = p;
  }
  return login_screen_virtual_keyboard_enabled_options_;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::mutable_login_screen_virtual_keyboard_enabled_options() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.AccessibilitySettingsProto.login_screen_virtual_keyboard_enabled_options)
  return _internal_mutable_login_screen_virtual_keyboard_enabled_options();
}
inline void AccessibilitySettingsProto::set_allocated_login_screen_virtual_keyboard_enabled_options(::enterprise_management::PolicyOptions* login_screen_virtual_keyboard_enabled_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_virtual_keyboard_enabled_options_);
  }
  if (login_screen_virtual_keyboard_enabled_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_virtual_keyboard_enabled_options)->GetArena();
    if (message_arena != submessage_arena) {
      login_screen_virtual_keyboard_enabled_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_screen_virtual_keyboard_enabled_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  login_screen_virtual_keyboard_enabled_options_ = login_screen_virtual_keyboard_enabled_options;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.AccessibilitySettingsProto.login_screen_virtual_keyboard_enabled_options)
}

// optional bool login_screen_dictation_enabled = 14;
inline bool AccessibilitySettingsProto::_internal_has_login_screen_dictation_enabled() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool AccessibilitySettingsProto::has_login_screen_dictation_enabled() const {
  return _internal_has_login_screen_dictation_enabled();
}
inline void AccessibilitySettingsProto::clear_login_screen_dictation_enabled() {
  login_screen_dictation_enabled_ = false;
  _has_bits_[0] &= ~0x01000000u;
}
inline bool AccessibilitySettingsProto::_internal_login_screen_dictation_enabled() const {
  return login_screen_dictation_enabled_;
}
inline bool AccessibilitySettingsProto::login_screen_dictation_enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AccessibilitySettingsProto.login_screen_dictation_enabled)
  return _internal_login_screen_dictation_enabled();
}
inline void AccessibilitySettingsProto::_internal_set_login_screen_dictation_enabled(bool value) {
  _has_bits_[0] |= 0x01000000u;
  login_screen_dictation_enabled_ = value;
}
inline void AccessibilitySettingsProto::set_login_screen_dictation_enabled(bool value) {
  _internal_set_login_screen_dictation_enabled(value);
  // @@protoc_insertion_point(field_set:enterprise_management.AccessibilitySettingsProto.login_screen_dictation_enabled)
}

// optional .enterprise_management.PolicyOptions login_screen_dictation_enabled_options = 15;
inline bool AccessibilitySettingsProto::_internal_has_login_screen_dictation_enabled_options() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || login_screen_dictation_enabled_options_ != nullptr);
  return value;
}
inline bool AccessibilitySettingsProto::has_login_screen_dictation_enabled_options() const {
  return _internal_has_login_screen_dictation_enabled_options();
}
inline const ::enterprise_management::PolicyOptions& AccessibilitySettingsProto::_internal_login_screen_dictation_enabled_options() const {
  const ::enterprise_management::PolicyOptions* p = login_screen_dictation_enabled_options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::PolicyOptions*>(
      &::enterprise_management::_PolicyOptions_default_instance_);
}
inline const ::enterprise_management::PolicyOptions& AccessibilitySettingsProto::login_screen_dictation_enabled_options() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AccessibilitySettingsProto.login_screen_dictation_enabled_options)
  return _internal_login_screen_dictation_enabled_options();
}
inline void AccessibilitySettingsProto::unsafe_arena_set_allocated_login_screen_dictation_enabled_options(
    ::enterprise_management::PolicyOptions* login_screen_dictation_enabled_options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_dictation_enabled_options_);
  }
  login_screen_dictation_enabled_options_ = login_screen_dictation_enabled_options;
  if (login_screen_dictation_enabled_options) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.AccessibilitySettingsProto.login_screen_dictation_enabled_options)
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::release_login_screen_dictation_enabled_options() {
  auto temp = unsafe_arena_release_login_screen_dictation_enabled_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::unsafe_arena_release_login_screen_dictation_enabled_options() {
  // @@protoc_insertion_point(field_release:enterprise_management.AccessibilitySettingsProto.login_screen_dictation_enabled_options)
  _has_bits_[0] &= ~0x00000010u;
  ::enterprise_management::PolicyOptions* temp = login_screen_dictation_enabled_options_;
  login_screen_dictation_enabled_options_ = nullptr;
  return temp;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::_internal_mutable_login_screen_dictation_enabled_options() {
  _has_bits_[0] |= 0x00000010u;
  if (login_screen_dictation_enabled_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::PolicyOptions>(GetArena());
    login_screen_dictation_enabled_options_ = p;
  }
  return login_screen_dictation_enabled_options_;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::mutable_login_screen_dictation_enabled_options() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.AccessibilitySettingsProto.login_screen_dictation_enabled_options)
  return _internal_mutable_login_screen_dictation_enabled_options();
}
inline void AccessibilitySettingsProto::set_allocated_login_screen_dictation_enabled_options(::enterprise_management::PolicyOptions* login_screen_dictation_enabled_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_dictation_enabled_options_);
  }
  if (login_screen_dictation_enabled_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_dictation_enabled_options)->GetArena();
    if (message_arena != submessage_arena) {
      login_screen_dictation_enabled_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_screen_dictation_enabled_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  login_screen_dictation_enabled_options_ = login_screen_dictation_enabled_options;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.AccessibilitySettingsProto.login_screen_dictation_enabled_options)
}

// optional bool login_screen_select_to_speak_enabled = 16;
inline bool AccessibilitySettingsProto::_internal_has_login_screen_select_to_speak_enabled() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool AccessibilitySettingsProto::has_login_screen_select_to_speak_enabled() const {
  return _internal_has_login_screen_select_to_speak_enabled();
}
inline void AccessibilitySettingsProto::clear_login_screen_select_to_speak_enabled() {
  login_screen_select_to_speak_enabled_ = false;
  _has_bits_[0] &= ~0x02000000u;
}
inline bool AccessibilitySettingsProto::_internal_login_screen_select_to_speak_enabled() const {
  return login_screen_select_to_speak_enabled_;
}
inline bool AccessibilitySettingsProto::login_screen_select_to_speak_enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AccessibilitySettingsProto.login_screen_select_to_speak_enabled)
  return _internal_login_screen_select_to_speak_enabled();
}
inline void AccessibilitySettingsProto::_internal_set_login_screen_select_to_speak_enabled(bool value) {
  _has_bits_[0] |= 0x02000000u;
  login_screen_select_to_speak_enabled_ = value;
}
inline void AccessibilitySettingsProto::set_login_screen_select_to_speak_enabled(bool value) {
  _internal_set_login_screen_select_to_speak_enabled(value);
  // @@protoc_insertion_point(field_set:enterprise_management.AccessibilitySettingsProto.login_screen_select_to_speak_enabled)
}

// optional .enterprise_management.PolicyOptions login_screen_select_to_speak_enabled_options = 17;
inline bool AccessibilitySettingsProto::_internal_has_login_screen_select_to_speak_enabled_options() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || login_screen_select_to_speak_enabled_options_ != nullptr);
  return value;
}
inline bool AccessibilitySettingsProto::has_login_screen_select_to_speak_enabled_options() const {
  return _internal_has_login_screen_select_to_speak_enabled_options();
}
inline const ::enterprise_management::PolicyOptions& AccessibilitySettingsProto::_internal_login_screen_select_to_speak_enabled_options() const {
  const ::enterprise_management::PolicyOptions* p = login_screen_select_to_speak_enabled_options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::PolicyOptions*>(
      &::enterprise_management::_PolicyOptions_default_instance_);
}
inline const ::enterprise_management::PolicyOptions& AccessibilitySettingsProto::login_screen_select_to_speak_enabled_options() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AccessibilitySettingsProto.login_screen_select_to_speak_enabled_options)
  return _internal_login_screen_select_to_speak_enabled_options();
}
inline void AccessibilitySettingsProto::unsafe_arena_set_allocated_login_screen_select_to_speak_enabled_options(
    ::enterprise_management::PolicyOptions* login_screen_select_to_speak_enabled_options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_select_to_speak_enabled_options_);
  }
  login_screen_select_to_speak_enabled_options_ = login_screen_select_to_speak_enabled_options;
  if (login_screen_select_to_speak_enabled_options) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.AccessibilitySettingsProto.login_screen_select_to_speak_enabled_options)
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::release_login_screen_select_to_speak_enabled_options() {
  auto temp = unsafe_arena_release_login_screen_select_to_speak_enabled_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::unsafe_arena_release_login_screen_select_to_speak_enabled_options() {
  // @@protoc_insertion_point(field_release:enterprise_management.AccessibilitySettingsProto.login_screen_select_to_speak_enabled_options)
  _has_bits_[0] &= ~0x00000020u;
  ::enterprise_management::PolicyOptions* temp = login_screen_select_to_speak_enabled_options_;
  login_screen_select_to_speak_enabled_options_ = nullptr;
  return temp;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::_internal_mutable_login_screen_select_to_speak_enabled_options() {
  _has_bits_[0] |= 0x00000020u;
  if (login_screen_select_to_speak_enabled_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::PolicyOptions>(GetArena());
    login_screen_select_to_speak_enabled_options_ = p;
  }
  return login_screen_select_to_speak_enabled_options_;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::mutable_login_screen_select_to_speak_enabled_options() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.AccessibilitySettingsProto.login_screen_select_to_speak_enabled_options)
  return _internal_mutable_login_screen_select_to_speak_enabled_options();
}
inline void AccessibilitySettingsProto::set_allocated_login_screen_select_to_speak_enabled_options(::enterprise_management::PolicyOptions* login_screen_select_to_speak_enabled_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_select_to_speak_enabled_options_);
  }
  if (login_screen_select_to_speak_enabled_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_select_to_speak_enabled_options)->GetArena();
    if (message_arena != submessage_arena) {
      login_screen_select_to_speak_enabled_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_screen_select_to_speak_enabled_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  login_screen_select_to_speak_enabled_options_ = login_screen_select_to_speak_enabled_options;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.AccessibilitySettingsProto.login_screen_select_to_speak_enabled_options)
}

// optional bool login_screen_cursor_highlight_enabled = 18;
inline bool AccessibilitySettingsProto::_internal_has_login_screen_cursor_highlight_enabled() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool AccessibilitySettingsProto::has_login_screen_cursor_highlight_enabled() const {
  return _internal_has_login_screen_cursor_highlight_enabled();
}
inline void AccessibilitySettingsProto::clear_login_screen_cursor_highlight_enabled() {
  login_screen_cursor_highlight_enabled_ = false;
  _has_bits_[0] &= ~0x04000000u;
}
inline bool AccessibilitySettingsProto::_internal_login_screen_cursor_highlight_enabled() const {
  return login_screen_cursor_highlight_enabled_;
}
inline bool AccessibilitySettingsProto::login_screen_cursor_highlight_enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AccessibilitySettingsProto.login_screen_cursor_highlight_enabled)
  return _internal_login_screen_cursor_highlight_enabled();
}
inline void AccessibilitySettingsProto::_internal_set_login_screen_cursor_highlight_enabled(bool value) {
  _has_bits_[0] |= 0x04000000u;
  login_screen_cursor_highlight_enabled_ = value;
}
inline void AccessibilitySettingsProto::set_login_screen_cursor_highlight_enabled(bool value) {
  _internal_set_login_screen_cursor_highlight_enabled(value);
  // @@protoc_insertion_point(field_set:enterprise_management.AccessibilitySettingsProto.login_screen_cursor_highlight_enabled)
}

// optional .enterprise_management.PolicyOptions login_screen_cursor_highlight_enabled_options = 19;
inline bool AccessibilitySettingsProto::_internal_has_login_screen_cursor_highlight_enabled_options() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || login_screen_cursor_highlight_enabled_options_ != nullptr);
  return value;
}
inline bool AccessibilitySettingsProto::has_login_screen_cursor_highlight_enabled_options() const {
  return _internal_has_login_screen_cursor_highlight_enabled_options();
}
inline const ::enterprise_management::PolicyOptions& AccessibilitySettingsProto::_internal_login_screen_cursor_highlight_enabled_options() const {
  const ::enterprise_management::PolicyOptions* p = login_screen_cursor_highlight_enabled_options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::PolicyOptions*>(
      &::enterprise_management::_PolicyOptions_default_instance_);
}
inline const ::enterprise_management::PolicyOptions& AccessibilitySettingsProto::login_screen_cursor_highlight_enabled_options() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AccessibilitySettingsProto.login_screen_cursor_highlight_enabled_options)
  return _internal_login_screen_cursor_highlight_enabled_options();
}
inline void AccessibilitySettingsProto::unsafe_arena_set_allocated_login_screen_cursor_highlight_enabled_options(
    ::enterprise_management::PolicyOptions* login_screen_cursor_highlight_enabled_options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_cursor_highlight_enabled_options_);
  }
  login_screen_cursor_highlight_enabled_options_ = login_screen_cursor_highlight_enabled_options;
  if (login_screen_cursor_highlight_enabled_options) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.AccessibilitySettingsProto.login_screen_cursor_highlight_enabled_options)
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::release_login_screen_cursor_highlight_enabled_options() {
  auto temp = unsafe_arena_release_login_screen_cursor_highlight_enabled_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::unsafe_arena_release_login_screen_cursor_highlight_enabled_options() {
  // @@protoc_insertion_point(field_release:enterprise_management.AccessibilitySettingsProto.login_screen_cursor_highlight_enabled_options)
  _has_bits_[0] &= ~0x00000040u;
  ::enterprise_management::PolicyOptions* temp = login_screen_cursor_highlight_enabled_options_;
  login_screen_cursor_highlight_enabled_options_ = nullptr;
  return temp;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::_internal_mutable_login_screen_cursor_highlight_enabled_options() {
  _has_bits_[0] |= 0x00000040u;
  if (login_screen_cursor_highlight_enabled_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::PolicyOptions>(GetArena());
    login_screen_cursor_highlight_enabled_options_ = p;
  }
  return login_screen_cursor_highlight_enabled_options_;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::mutable_login_screen_cursor_highlight_enabled_options() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.AccessibilitySettingsProto.login_screen_cursor_highlight_enabled_options)
  return _internal_mutable_login_screen_cursor_highlight_enabled_options();
}
inline void AccessibilitySettingsProto::set_allocated_login_screen_cursor_highlight_enabled_options(::enterprise_management::PolicyOptions* login_screen_cursor_highlight_enabled_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_cursor_highlight_enabled_options_);
  }
  if (login_screen_cursor_highlight_enabled_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_cursor_highlight_enabled_options)->GetArena();
    if (message_arena != submessage_arena) {
      login_screen_cursor_highlight_enabled_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_screen_cursor_highlight_enabled_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  login_screen_cursor_highlight_enabled_options_ = login_screen_cursor_highlight_enabled_options;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.AccessibilitySettingsProto.login_screen_cursor_highlight_enabled_options)
}

// optional bool login_screen_caret_highlight_enabled = 20;
inline bool AccessibilitySettingsProto::_internal_has_login_screen_caret_highlight_enabled() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool AccessibilitySettingsProto::has_login_screen_caret_highlight_enabled() const {
  return _internal_has_login_screen_caret_highlight_enabled();
}
inline void AccessibilitySettingsProto::clear_login_screen_caret_highlight_enabled() {
  login_screen_caret_highlight_enabled_ = false;
  _has_bits_[0] &= ~0x08000000u;
}
inline bool AccessibilitySettingsProto::_internal_login_screen_caret_highlight_enabled() const {
  return login_screen_caret_highlight_enabled_;
}
inline bool AccessibilitySettingsProto::login_screen_caret_highlight_enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AccessibilitySettingsProto.login_screen_caret_highlight_enabled)
  return _internal_login_screen_caret_highlight_enabled();
}
inline void AccessibilitySettingsProto::_internal_set_login_screen_caret_highlight_enabled(bool value) {
  _has_bits_[0] |= 0x08000000u;
  login_screen_caret_highlight_enabled_ = value;
}
inline void AccessibilitySettingsProto::set_login_screen_caret_highlight_enabled(bool value) {
  _internal_set_login_screen_caret_highlight_enabled(value);
  // @@protoc_insertion_point(field_set:enterprise_management.AccessibilitySettingsProto.login_screen_caret_highlight_enabled)
}

// optional .enterprise_management.PolicyOptions login_screen_caret_highlight_enabled_options = 21;
inline bool AccessibilitySettingsProto::_internal_has_login_screen_caret_highlight_enabled_options() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || login_screen_caret_highlight_enabled_options_ != nullptr);
  return value;
}
inline bool AccessibilitySettingsProto::has_login_screen_caret_highlight_enabled_options() const {
  return _internal_has_login_screen_caret_highlight_enabled_options();
}
inline const ::enterprise_management::PolicyOptions& AccessibilitySettingsProto::_internal_login_screen_caret_highlight_enabled_options() const {
  const ::enterprise_management::PolicyOptions* p = login_screen_caret_highlight_enabled_options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::PolicyOptions*>(
      &::enterprise_management::_PolicyOptions_default_instance_);
}
inline const ::enterprise_management::PolicyOptions& AccessibilitySettingsProto::login_screen_caret_highlight_enabled_options() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AccessibilitySettingsProto.login_screen_caret_highlight_enabled_options)
  return _internal_login_screen_caret_highlight_enabled_options();
}
inline void AccessibilitySettingsProto::unsafe_arena_set_allocated_login_screen_caret_highlight_enabled_options(
    ::enterprise_management::PolicyOptions* login_screen_caret_highlight_enabled_options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_caret_highlight_enabled_options_);
  }
  login_screen_caret_highlight_enabled_options_ = login_screen_caret_highlight_enabled_options;
  if (login_screen_caret_highlight_enabled_options) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.AccessibilitySettingsProto.login_screen_caret_highlight_enabled_options)
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::release_login_screen_caret_highlight_enabled_options() {
  auto temp = unsafe_arena_release_login_screen_caret_highlight_enabled_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::unsafe_arena_release_login_screen_caret_highlight_enabled_options() {
  // @@protoc_insertion_point(field_release:enterprise_management.AccessibilitySettingsProto.login_screen_caret_highlight_enabled_options)
  _has_bits_[0] &= ~0x00000080u;
  ::enterprise_management::PolicyOptions* temp = login_screen_caret_highlight_enabled_options_;
  login_screen_caret_highlight_enabled_options_ = nullptr;
  return temp;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::_internal_mutable_login_screen_caret_highlight_enabled_options() {
  _has_bits_[0] |= 0x00000080u;
  if (login_screen_caret_highlight_enabled_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::PolicyOptions>(GetArena());
    login_screen_caret_highlight_enabled_options_ = p;
  }
  return login_screen_caret_highlight_enabled_options_;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::mutable_login_screen_caret_highlight_enabled_options() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.AccessibilitySettingsProto.login_screen_caret_highlight_enabled_options)
  return _internal_mutable_login_screen_caret_highlight_enabled_options();
}
inline void AccessibilitySettingsProto::set_allocated_login_screen_caret_highlight_enabled_options(::enterprise_management::PolicyOptions* login_screen_caret_highlight_enabled_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_caret_highlight_enabled_options_);
  }
  if (login_screen_caret_highlight_enabled_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_caret_highlight_enabled_options)->GetArena();
    if (message_arena != submessage_arena) {
      login_screen_caret_highlight_enabled_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_screen_caret_highlight_enabled_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  login_screen_caret_highlight_enabled_options_ = login_screen_caret_highlight_enabled_options;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.AccessibilitySettingsProto.login_screen_caret_highlight_enabled_options)
}

// optional bool login_screen_mono_audio_enabled = 22;
inline bool AccessibilitySettingsProto::_internal_has_login_screen_mono_audio_enabled() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool AccessibilitySettingsProto::has_login_screen_mono_audio_enabled() const {
  return _internal_has_login_screen_mono_audio_enabled();
}
inline void AccessibilitySettingsProto::clear_login_screen_mono_audio_enabled() {
  login_screen_mono_audio_enabled_ = false;
  _has_bits_[0] &= ~0x10000000u;
}
inline bool AccessibilitySettingsProto::_internal_login_screen_mono_audio_enabled() const {
  return login_screen_mono_audio_enabled_;
}
inline bool AccessibilitySettingsProto::login_screen_mono_audio_enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AccessibilitySettingsProto.login_screen_mono_audio_enabled)
  return _internal_login_screen_mono_audio_enabled();
}
inline void AccessibilitySettingsProto::_internal_set_login_screen_mono_audio_enabled(bool value) {
  _has_bits_[0] |= 0x10000000u;
  login_screen_mono_audio_enabled_ = value;
}
inline void AccessibilitySettingsProto::set_login_screen_mono_audio_enabled(bool value) {
  _internal_set_login_screen_mono_audio_enabled(value);
  // @@protoc_insertion_point(field_set:enterprise_management.AccessibilitySettingsProto.login_screen_mono_audio_enabled)
}

// optional .enterprise_management.PolicyOptions login_screen_mono_audio_enabled_options = 23;
inline bool AccessibilitySettingsProto::_internal_has_login_screen_mono_audio_enabled_options() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || login_screen_mono_audio_enabled_options_ != nullptr);
  return value;
}
inline bool AccessibilitySettingsProto::has_login_screen_mono_audio_enabled_options() const {
  return _internal_has_login_screen_mono_audio_enabled_options();
}
inline const ::enterprise_management::PolicyOptions& AccessibilitySettingsProto::_internal_login_screen_mono_audio_enabled_options() const {
  const ::enterprise_management::PolicyOptions* p = login_screen_mono_audio_enabled_options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::PolicyOptions*>(
      &::enterprise_management::_PolicyOptions_default_instance_);
}
inline const ::enterprise_management::PolicyOptions& AccessibilitySettingsProto::login_screen_mono_audio_enabled_options() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AccessibilitySettingsProto.login_screen_mono_audio_enabled_options)
  return _internal_login_screen_mono_audio_enabled_options();
}
inline void AccessibilitySettingsProto::unsafe_arena_set_allocated_login_screen_mono_audio_enabled_options(
    ::enterprise_management::PolicyOptions* login_screen_mono_audio_enabled_options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_mono_audio_enabled_options_);
  }
  login_screen_mono_audio_enabled_options_ = login_screen_mono_audio_enabled_options;
  if (login_screen_mono_audio_enabled_options) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.AccessibilitySettingsProto.login_screen_mono_audio_enabled_options)
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::release_login_screen_mono_audio_enabled_options() {
  auto temp = unsafe_arena_release_login_screen_mono_audio_enabled_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::unsafe_arena_release_login_screen_mono_audio_enabled_options() {
  // @@protoc_insertion_point(field_release:enterprise_management.AccessibilitySettingsProto.login_screen_mono_audio_enabled_options)
  _has_bits_[0] &= ~0x00000100u;
  ::enterprise_management::PolicyOptions* temp = login_screen_mono_audio_enabled_options_;
  login_screen_mono_audio_enabled_options_ = nullptr;
  return temp;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::_internal_mutable_login_screen_mono_audio_enabled_options() {
  _has_bits_[0] |= 0x00000100u;
  if (login_screen_mono_audio_enabled_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::PolicyOptions>(GetArena());
    login_screen_mono_audio_enabled_options_ = p;
  }
  return login_screen_mono_audio_enabled_options_;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::mutable_login_screen_mono_audio_enabled_options() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.AccessibilitySettingsProto.login_screen_mono_audio_enabled_options)
  return _internal_mutable_login_screen_mono_audio_enabled_options();
}
inline void AccessibilitySettingsProto::set_allocated_login_screen_mono_audio_enabled_options(::enterprise_management::PolicyOptions* login_screen_mono_audio_enabled_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_mono_audio_enabled_options_);
  }
  if (login_screen_mono_audio_enabled_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_mono_audio_enabled_options)->GetArena();
    if (message_arena != submessage_arena) {
      login_screen_mono_audio_enabled_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_screen_mono_audio_enabled_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  login_screen_mono_audio_enabled_options_ = login_screen_mono_audio_enabled_options;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.AccessibilitySettingsProto.login_screen_mono_audio_enabled_options)
}

// optional bool login_screen_autoclick_enabled = 24;
inline bool AccessibilitySettingsProto::_internal_has_login_screen_autoclick_enabled() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool AccessibilitySettingsProto::has_login_screen_autoclick_enabled() const {
  return _internal_has_login_screen_autoclick_enabled();
}
inline void AccessibilitySettingsProto::clear_login_screen_autoclick_enabled() {
  login_screen_autoclick_enabled_ = false;
  _has_bits_[0] &= ~0x20000000u;
}
inline bool AccessibilitySettingsProto::_internal_login_screen_autoclick_enabled() const {
  return login_screen_autoclick_enabled_;
}
inline bool AccessibilitySettingsProto::login_screen_autoclick_enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AccessibilitySettingsProto.login_screen_autoclick_enabled)
  return _internal_login_screen_autoclick_enabled();
}
inline void AccessibilitySettingsProto::_internal_set_login_screen_autoclick_enabled(bool value) {
  _has_bits_[0] |= 0x20000000u;
  login_screen_autoclick_enabled_ = value;
}
inline void AccessibilitySettingsProto::set_login_screen_autoclick_enabled(bool value) {
  _internal_set_login_screen_autoclick_enabled(value);
  // @@protoc_insertion_point(field_set:enterprise_management.AccessibilitySettingsProto.login_screen_autoclick_enabled)
}

// optional .enterprise_management.PolicyOptions login_screen_autoclick_enabled_options = 25;
inline bool AccessibilitySettingsProto::_internal_has_login_screen_autoclick_enabled_options() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || login_screen_autoclick_enabled_options_ != nullptr);
  return value;
}
inline bool AccessibilitySettingsProto::has_login_screen_autoclick_enabled_options() const {
  return _internal_has_login_screen_autoclick_enabled_options();
}
inline const ::enterprise_management::PolicyOptions& AccessibilitySettingsProto::_internal_login_screen_autoclick_enabled_options() const {
  const ::enterprise_management::PolicyOptions* p = login_screen_autoclick_enabled_options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::PolicyOptions*>(
      &::enterprise_management::_PolicyOptions_default_instance_);
}
inline const ::enterprise_management::PolicyOptions& AccessibilitySettingsProto::login_screen_autoclick_enabled_options() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AccessibilitySettingsProto.login_screen_autoclick_enabled_options)
  return _internal_login_screen_autoclick_enabled_options();
}
inline void AccessibilitySettingsProto::unsafe_arena_set_allocated_login_screen_autoclick_enabled_options(
    ::enterprise_management::PolicyOptions* login_screen_autoclick_enabled_options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_autoclick_enabled_options_);
  }
  login_screen_autoclick_enabled_options_ = login_screen_autoclick_enabled_options;
  if (login_screen_autoclick_enabled_options) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.AccessibilitySettingsProto.login_screen_autoclick_enabled_options)
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::release_login_screen_autoclick_enabled_options() {
  auto temp = unsafe_arena_release_login_screen_autoclick_enabled_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::unsafe_arena_release_login_screen_autoclick_enabled_options() {
  // @@protoc_insertion_point(field_release:enterprise_management.AccessibilitySettingsProto.login_screen_autoclick_enabled_options)
  _has_bits_[0] &= ~0x00000200u;
  ::enterprise_management::PolicyOptions* temp = login_screen_autoclick_enabled_options_;
  login_screen_autoclick_enabled_options_ = nullptr;
  return temp;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::_internal_mutable_login_screen_autoclick_enabled_options() {
  _has_bits_[0] |= 0x00000200u;
  if (login_screen_autoclick_enabled_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::PolicyOptions>(GetArena());
    login_screen_autoclick_enabled_options_ = p;
  }
  return login_screen_autoclick_enabled_options_;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::mutable_login_screen_autoclick_enabled_options() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.AccessibilitySettingsProto.login_screen_autoclick_enabled_options)
  return _internal_mutable_login_screen_autoclick_enabled_options();
}
inline void AccessibilitySettingsProto::set_allocated_login_screen_autoclick_enabled_options(::enterprise_management::PolicyOptions* login_screen_autoclick_enabled_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_autoclick_enabled_options_);
  }
  if (login_screen_autoclick_enabled_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_autoclick_enabled_options)->GetArena();
    if (message_arena != submessage_arena) {
      login_screen_autoclick_enabled_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_screen_autoclick_enabled_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  login_screen_autoclick_enabled_options_ = login_screen_autoclick_enabled_options;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.AccessibilitySettingsProto.login_screen_autoclick_enabled_options)
}

// optional bool login_screen_sticky_keys_enabled = 26;
inline bool AccessibilitySettingsProto::_internal_has_login_screen_sticky_keys_enabled() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool AccessibilitySettingsProto::has_login_screen_sticky_keys_enabled() const {
  return _internal_has_login_screen_sticky_keys_enabled();
}
inline void AccessibilitySettingsProto::clear_login_screen_sticky_keys_enabled() {
  login_screen_sticky_keys_enabled_ = false;
  _has_bits_[0] &= ~0x40000000u;
}
inline bool AccessibilitySettingsProto::_internal_login_screen_sticky_keys_enabled() const {
  return login_screen_sticky_keys_enabled_;
}
inline bool AccessibilitySettingsProto::login_screen_sticky_keys_enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AccessibilitySettingsProto.login_screen_sticky_keys_enabled)
  return _internal_login_screen_sticky_keys_enabled();
}
inline void AccessibilitySettingsProto::_internal_set_login_screen_sticky_keys_enabled(bool value) {
  _has_bits_[0] |= 0x40000000u;
  login_screen_sticky_keys_enabled_ = value;
}
inline void AccessibilitySettingsProto::set_login_screen_sticky_keys_enabled(bool value) {
  _internal_set_login_screen_sticky_keys_enabled(value);
  // @@protoc_insertion_point(field_set:enterprise_management.AccessibilitySettingsProto.login_screen_sticky_keys_enabled)
}

// optional .enterprise_management.PolicyOptions login_screen_sticky_keys_enabled_options = 27;
inline bool AccessibilitySettingsProto::_internal_has_login_screen_sticky_keys_enabled_options() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || login_screen_sticky_keys_enabled_options_ != nullptr);
  return value;
}
inline bool AccessibilitySettingsProto::has_login_screen_sticky_keys_enabled_options() const {
  return _internal_has_login_screen_sticky_keys_enabled_options();
}
inline const ::enterprise_management::PolicyOptions& AccessibilitySettingsProto::_internal_login_screen_sticky_keys_enabled_options() const {
  const ::enterprise_management::PolicyOptions* p = login_screen_sticky_keys_enabled_options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::PolicyOptions*>(
      &::enterprise_management::_PolicyOptions_default_instance_);
}
inline const ::enterprise_management::PolicyOptions& AccessibilitySettingsProto::login_screen_sticky_keys_enabled_options() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AccessibilitySettingsProto.login_screen_sticky_keys_enabled_options)
  return _internal_login_screen_sticky_keys_enabled_options();
}
inline void AccessibilitySettingsProto::unsafe_arena_set_allocated_login_screen_sticky_keys_enabled_options(
    ::enterprise_management::PolicyOptions* login_screen_sticky_keys_enabled_options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_sticky_keys_enabled_options_);
  }
  login_screen_sticky_keys_enabled_options_ = login_screen_sticky_keys_enabled_options;
  if (login_screen_sticky_keys_enabled_options) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.AccessibilitySettingsProto.login_screen_sticky_keys_enabled_options)
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::release_login_screen_sticky_keys_enabled_options() {
  auto temp = unsafe_arena_release_login_screen_sticky_keys_enabled_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::unsafe_arena_release_login_screen_sticky_keys_enabled_options() {
  // @@protoc_insertion_point(field_release:enterprise_management.AccessibilitySettingsProto.login_screen_sticky_keys_enabled_options)
  _has_bits_[0] &= ~0x00000400u;
  ::enterprise_management::PolicyOptions* temp = login_screen_sticky_keys_enabled_options_;
  login_screen_sticky_keys_enabled_options_ = nullptr;
  return temp;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::_internal_mutable_login_screen_sticky_keys_enabled_options() {
  _has_bits_[0] |= 0x00000400u;
  if (login_screen_sticky_keys_enabled_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::PolicyOptions>(GetArena());
    login_screen_sticky_keys_enabled_options_ = p;
  }
  return login_screen_sticky_keys_enabled_options_;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::mutable_login_screen_sticky_keys_enabled_options() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.AccessibilitySettingsProto.login_screen_sticky_keys_enabled_options)
  return _internal_mutable_login_screen_sticky_keys_enabled_options();
}
inline void AccessibilitySettingsProto::set_allocated_login_screen_sticky_keys_enabled_options(::enterprise_management::PolicyOptions* login_screen_sticky_keys_enabled_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_sticky_keys_enabled_options_);
  }
  if (login_screen_sticky_keys_enabled_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_sticky_keys_enabled_options)->GetArena();
    if (message_arena != submessage_arena) {
      login_screen_sticky_keys_enabled_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_screen_sticky_keys_enabled_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  login_screen_sticky_keys_enabled_options_ = login_screen_sticky_keys_enabled_options;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.AccessibilitySettingsProto.login_screen_sticky_keys_enabled_options)
}

// optional bool login_screen_keyboard_focus_highlight_enabled = 28;
inline bool AccessibilitySettingsProto::_internal_has_login_screen_keyboard_focus_highlight_enabled() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool AccessibilitySettingsProto::has_login_screen_keyboard_focus_highlight_enabled() const {
  return _internal_has_login_screen_keyboard_focus_highlight_enabled();
}
inline void AccessibilitySettingsProto::clear_login_screen_keyboard_focus_highlight_enabled() {
  login_screen_keyboard_focus_highlight_enabled_ = false;
  _has_bits_[0] &= ~0x80000000u;
}
inline bool AccessibilitySettingsProto::_internal_login_screen_keyboard_focus_highlight_enabled() const {
  return login_screen_keyboard_focus_highlight_enabled_;
}
inline bool AccessibilitySettingsProto::login_screen_keyboard_focus_highlight_enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AccessibilitySettingsProto.login_screen_keyboard_focus_highlight_enabled)
  return _internal_login_screen_keyboard_focus_highlight_enabled();
}
inline void AccessibilitySettingsProto::_internal_set_login_screen_keyboard_focus_highlight_enabled(bool value) {
  _has_bits_[0] |= 0x80000000u;
  login_screen_keyboard_focus_highlight_enabled_ = value;
}
inline void AccessibilitySettingsProto::set_login_screen_keyboard_focus_highlight_enabled(bool value) {
  _internal_set_login_screen_keyboard_focus_highlight_enabled(value);
  // @@protoc_insertion_point(field_set:enterprise_management.AccessibilitySettingsProto.login_screen_keyboard_focus_highlight_enabled)
}

// optional .enterprise_management.PolicyOptions login_screen_keyboard_focus_highlight_enabled_options = 29;
inline bool AccessibilitySettingsProto::_internal_has_login_screen_keyboard_focus_highlight_enabled_options() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || login_screen_keyboard_focus_highlight_enabled_options_ != nullptr);
  return value;
}
inline bool AccessibilitySettingsProto::has_login_screen_keyboard_focus_highlight_enabled_options() const {
  return _internal_has_login_screen_keyboard_focus_highlight_enabled_options();
}
inline const ::enterprise_management::PolicyOptions& AccessibilitySettingsProto::_internal_login_screen_keyboard_focus_highlight_enabled_options() const {
  const ::enterprise_management::PolicyOptions* p = login_screen_keyboard_focus_highlight_enabled_options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::PolicyOptions*>(
      &::enterprise_management::_PolicyOptions_default_instance_);
}
inline const ::enterprise_management::PolicyOptions& AccessibilitySettingsProto::login_screen_keyboard_focus_highlight_enabled_options() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AccessibilitySettingsProto.login_screen_keyboard_focus_highlight_enabled_options)
  return _internal_login_screen_keyboard_focus_highlight_enabled_options();
}
inline void AccessibilitySettingsProto::unsafe_arena_set_allocated_login_screen_keyboard_focus_highlight_enabled_options(
    ::enterprise_management::PolicyOptions* login_screen_keyboard_focus_highlight_enabled_options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_keyboard_focus_highlight_enabled_options_);
  }
  login_screen_keyboard_focus_highlight_enabled_options_ = login_screen_keyboard_focus_highlight_enabled_options;
  if (login_screen_keyboard_focus_highlight_enabled_options) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.AccessibilitySettingsProto.login_screen_keyboard_focus_highlight_enabled_options)
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::release_login_screen_keyboard_focus_highlight_enabled_options() {
  auto temp = unsafe_arena_release_login_screen_keyboard_focus_highlight_enabled_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::unsafe_arena_release_login_screen_keyboard_focus_highlight_enabled_options() {
  // @@protoc_insertion_point(field_release:enterprise_management.AccessibilitySettingsProto.login_screen_keyboard_focus_highlight_enabled_options)
  _has_bits_[0] &= ~0x00000800u;
  ::enterprise_management::PolicyOptions* temp = login_screen_keyboard_focus_highlight_enabled_options_;
  login_screen_keyboard_focus_highlight_enabled_options_ = nullptr;
  return temp;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::_internal_mutable_login_screen_keyboard_focus_highlight_enabled_options() {
  _has_bits_[0] |= 0x00000800u;
  if (login_screen_keyboard_focus_highlight_enabled_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::PolicyOptions>(GetArena());
    login_screen_keyboard_focus_highlight_enabled_options_ = p;
  }
  return login_screen_keyboard_focus_highlight_enabled_options_;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::mutable_login_screen_keyboard_focus_highlight_enabled_options() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.AccessibilitySettingsProto.login_screen_keyboard_focus_highlight_enabled_options)
  return _internal_mutable_login_screen_keyboard_focus_highlight_enabled_options();
}
inline void AccessibilitySettingsProto::set_allocated_login_screen_keyboard_focus_highlight_enabled_options(::enterprise_management::PolicyOptions* login_screen_keyboard_focus_highlight_enabled_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_keyboard_focus_highlight_enabled_options_);
  }
  if (login_screen_keyboard_focus_highlight_enabled_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_keyboard_focus_highlight_enabled_options)->GetArena();
    if (message_arena != submessage_arena) {
      login_screen_keyboard_focus_highlight_enabled_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_screen_keyboard_focus_highlight_enabled_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  login_screen_keyboard_focus_highlight_enabled_options_ = login_screen_keyboard_focus_highlight_enabled_options;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.AccessibilitySettingsProto.login_screen_keyboard_focus_highlight_enabled_options)
}

// optional int64 login_screen_screen_magnifier_type = 30;
inline bool AccessibilitySettingsProto::_internal_has_login_screen_screen_magnifier_type() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool AccessibilitySettingsProto::has_login_screen_screen_magnifier_type() const {
  return _internal_has_login_screen_screen_magnifier_type();
}
inline void AccessibilitySettingsProto::clear_login_screen_screen_magnifier_type() {
  login_screen_screen_magnifier_type_ = PROTOBUF_LONGLONG(0);
  _has_bits_[1] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AccessibilitySettingsProto::_internal_login_screen_screen_magnifier_type() const {
  return login_screen_screen_magnifier_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AccessibilitySettingsProto::login_screen_screen_magnifier_type() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AccessibilitySettingsProto.login_screen_screen_magnifier_type)
  return _internal_login_screen_screen_magnifier_type();
}
inline void AccessibilitySettingsProto::_internal_set_login_screen_screen_magnifier_type(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[1] |= 0x00000004u;
  login_screen_screen_magnifier_type_ = value;
}
inline void AccessibilitySettingsProto::set_login_screen_screen_magnifier_type(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_login_screen_screen_magnifier_type(value);
  // @@protoc_insertion_point(field_set:enterprise_management.AccessibilitySettingsProto.login_screen_screen_magnifier_type)
}

// optional .enterprise_management.PolicyOptions login_screen_screen_magnifier_type_options = 31;
inline bool AccessibilitySettingsProto::_internal_has_login_screen_screen_magnifier_type_options() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || login_screen_screen_magnifier_type_options_ != nullptr);
  return value;
}
inline bool AccessibilitySettingsProto::has_login_screen_screen_magnifier_type_options() const {
  return _internal_has_login_screen_screen_magnifier_type_options();
}
inline const ::enterprise_management::PolicyOptions& AccessibilitySettingsProto::_internal_login_screen_screen_magnifier_type_options() const {
  const ::enterprise_management::PolicyOptions* p = login_screen_screen_magnifier_type_options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::PolicyOptions*>(
      &::enterprise_management::_PolicyOptions_default_instance_);
}
inline const ::enterprise_management::PolicyOptions& AccessibilitySettingsProto::login_screen_screen_magnifier_type_options() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AccessibilitySettingsProto.login_screen_screen_magnifier_type_options)
  return _internal_login_screen_screen_magnifier_type_options();
}
inline void AccessibilitySettingsProto::unsafe_arena_set_allocated_login_screen_screen_magnifier_type_options(
    ::enterprise_management::PolicyOptions* login_screen_screen_magnifier_type_options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_screen_magnifier_type_options_);
  }
  login_screen_screen_magnifier_type_options_ = login_screen_screen_magnifier_type_options;
  if (login_screen_screen_magnifier_type_options) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.AccessibilitySettingsProto.login_screen_screen_magnifier_type_options)
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::release_login_screen_screen_magnifier_type_options() {
  auto temp = unsafe_arena_release_login_screen_screen_magnifier_type_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::unsafe_arena_release_login_screen_screen_magnifier_type_options() {
  // @@protoc_insertion_point(field_release:enterprise_management.AccessibilitySettingsProto.login_screen_screen_magnifier_type_options)
  _has_bits_[0] &= ~0x00001000u;
  ::enterprise_management::PolicyOptions* temp = login_screen_screen_magnifier_type_options_;
  login_screen_screen_magnifier_type_options_ = nullptr;
  return temp;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::_internal_mutable_login_screen_screen_magnifier_type_options() {
  _has_bits_[0] |= 0x00001000u;
  if (login_screen_screen_magnifier_type_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::PolicyOptions>(GetArena());
    login_screen_screen_magnifier_type_options_ = p;
  }
  return login_screen_screen_magnifier_type_options_;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::mutable_login_screen_screen_magnifier_type_options() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.AccessibilitySettingsProto.login_screen_screen_magnifier_type_options)
  return _internal_mutable_login_screen_screen_magnifier_type_options();
}
inline void AccessibilitySettingsProto::set_allocated_login_screen_screen_magnifier_type_options(::enterprise_management::PolicyOptions* login_screen_screen_magnifier_type_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_screen_magnifier_type_options_);
  }
  if (login_screen_screen_magnifier_type_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_screen_magnifier_type_options)->GetArena();
    if (message_arena != submessage_arena) {
      login_screen_screen_magnifier_type_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_screen_screen_magnifier_type_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  login_screen_screen_magnifier_type_options_ = login_screen_screen_magnifier_type_options;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.AccessibilitySettingsProto.login_screen_screen_magnifier_type_options)
}

// optional bool login_screen_show_options_in_system_tray_menu_enabled = 32;
inline bool AccessibilitySettingsProto::_internal_has_login_screen_show_options_in_system_tray_menu_enabled() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool AccessibilitySettingsProto::has_login_screen_show_options_in_system_tray_menu_enabled() const {
  return _internal_has_login_screen_show_options_in_system_tray_menu_enabled();
}
inline void AccessibilitySettingsProto::clear_login_screen_show_options_in_system_tray_menu_enabled() {
  login_screen_show_options_in_system_tray_menu_enabled_ = false;
  _has_bits_[1] &= ~0x00000001u;
}
inline bool AccessibilitySettingsProto::_internal_login_screen_show_options_in_system_tray_menu_enabled() const {
  return login_screen_show_options_in_system_tray_menu_enabled_;
}
inline bool AccessibilitySettingsProto::login_screen_show_options_in_system_tray_menu_enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AccessibilitySettingsProto.login_screen_show_options_in_system_tray_menu_enabled)
  return _internal_login_screen_show_options_in_system_tray_menu_enabled();
}
inline void AccessibilitySettingsProto::_internal_set_login_screen_show_options_in_system_tray_menu_enabled(bool value) {
  _has_bits_[1] |= 0x00000001u;
  login_screen_show_options_in_system_tray_menu_enabled_ = value;
}
inline void AccessibilitySettingsProto::set_login_screen_show_options_in_system_tray_menu_enabled(bool value) {
  _internal_set_login_screen_show_options_in_system_tray_menu_enabled(value);
  // @@protoc_insertion_point(field_set:enterprise_management.AccessibilitySettingsProto.login_screen_show_options_in_system_tray_menu_enabled)
}

// optional .enterprise_management.PolicyOptions login_screen_show_options_in_system_tray_menu_enabled_options = 33;
inline bool AccessibilitySettingsProto::_internal_has_login_screen_show_options_in_system_tray_menu_enabled_options() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || login_screen_show_options_in_system_tray_menu_enabled_options_ != nullptr);
  return value;
}
inline bool AccessibilitySettingsProto::has_login_screen_show_options_in_system_tray_menu_enabled_options() const {
  return _internal_has_login_screen_show_options_in_system_tray_menu_enabled_options();
}
inline const ::enterprise_management::PolicyOptions& AccessibilitySettingsProto::_internal_login_screen_show_options_in_system_tray_menu_enabled_options() const {
  const ::enterprise_management::PolicyOptions* p = login_screen_show_options_in_system_tray_menu_enabled_options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::PolicyOptions*>(
      &::enterprise_management::_PolicyOptions_default_instance_);
}
inline const ::enterprise_management::PolicyOptions& AccessibilitySettingsProto::login_screen_show_options_in_system_tray_menu_enabled_options() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AccessibilitySettingsProto.login_screen_show_options_in_system_tray_menu_enabled_options)
  return _internal_login_screen_show_options_in_system_tray_menu_enabled_options();
}
inline void AccessibilitySettingsProto::unsafe_arena_set_allocated_login_screen_show_options_in_system_tray_menu_enabled_options(
    ::enterprise_management::PolicyOptions* login_screen_show_options_in_system_tray_menu_enabled_options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_show_options_in_system_tray_menu_enabled_options_);
  }
  login_screen_show_options_in_system_tray_menu_enabled_options_ = login_screen_show_options_in_system_tray_menu_enabled_options;
  if (login_screen_show_options_in_system_tray_menu_enabled_options) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.AccessibilitySettingsProto.login_screen_show_options_in_system_tray_menu_enabled_options)
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::release_login_screen_show_options_in_system_tray_menu_enabled_options() {
  auto temp = unsafe_arena_release_login_screen_show_options_in_system_tray_menu_enabled_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::unsafe_arena_release_login_screen_show_options_in_system_tray_menu_enabled_options() {
  // @@protoc_insertion_point(field_release:enterprise_management.AccessibilitySettingsProto.login_screen_show_options_in_system_tray_menu_enabled_options)
  _has_bits_[0] &= ~0x00002000u;
  ::enterprise_management::PolicyOptions* temp = login_screen_show_options_in_system_tray_menu_enabled_options_;
  login_screen_show_options_in_system_tray_menu_enabled_options_ = nullptr;
  return temp;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::_internal_mutable_login_screen_show_options_in_system_tray_menu_enabled_options() {
  _has_bits_[0] |= 0x00002000u;
  if (login_screen_show_options_in_system_tray_menu_enabled_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::PolicyOptions>(GetArena());
    login_screen_show_options_in_system_tray_menu_enabled_options_ = p;
  }
  return login_screen_show_options_in_system_tray_menu_enabled_options_;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::mutable_login_screen_show_options_in_system_tray_menu_enabled_options() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.AccessibilitySettingsProto.login_screen_show_options_in_system_tray_menu_enabled_options)
  return _internal_mutable_login_screen_show_options_in_system_tray_menu_enabled_options();
}
inline void AccessibilitySettingsProto::set_allocated_login_screen_show_options_in_system_tray_menu_enabled_options(::enterprise_management::PolicyOptions* login_screen_show_options_in_system_tray_menu_enabled_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_show_options_in_system_tray_menu_enabled_options_);
  }
  if (login_screen_show_options_in_system_tray_menu_enabled_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_show_options_in_system_tray_menu_enabled_options)->GetArena();
    if (message_arena != submessage_arena) {
      login_screen_show_options_in_system_tray_menu_enabled_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_screen_show_options_in_system_tray_menu_enabled_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  login_screen_show_options_in_system_tray_menu_enabled_options_ = login_screen_show_options_in_system_tray_menu_enabled_options;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.AccessibilitySettingsProto.login_screen_show_options_in_system_tray_menu_enabled_options)
}

// optional bool login_screen_shortcuts_enabled = 34;
inline bool AccessibilitySettingsProto::_internal_has_login_screen_shortcuts_enabled() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool AccessibilitySettingsProto::has_login_screen_shortcuts_enabled() const {
  return _internal_has_login_screen_shortcuts_enabled();
}
inline void AccessibilitySettingsProto::clear_login_screen_shortcuts_enabled() {
  login_screen_shortcuts_enabled_ = false;
  _has_bits_[1] &= ~0x00000002u;
}
inline bool AccessibilitySettingsProto::_internal_login_screen_shortcuts_enabled() const {
  return login_screen_shortcuts_enabled_;
}
inline bool AccessibilitySettingsProto::login_screen_shortcuts_enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AccessibilitySettingsProto.login_screen_shortcuts_enabled)
  return _internal_login_screen_shortcuts_enabled();
}
inline void AccessibilitySettingsProto::_internal_set_login_screen_shortcuts_enabled(bool value) {
  _has_bits_[1] |= 0x00000002u;
  login_screen_shortcuts_enabled_ = value;
}
inline void AccessibilitySettingsProto::set_login_screen_shortcuts_enabled(bool value) {
  _internal_set_login_screen_shortcuts_enabled(value);
  // @@protoc_insertion_point(field_set:enterprise_management.AccessibilitySettingsProto.login_screen_shortcuts_enabled)
}

// optional .enterprise_management.PolicyOptions login_screen_shortcuts_enabled_options = 35;
inline bool AccessibilitySettingsProto::_internal_has_login_screen_shortcuts_enabled_options() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || login_screen_shortcuts_enabled_options_ != nullptr);
  return value;
}
inline bool AccessibilitySettingsProto::has_login_screen_shortcuts_enabled_options() const {
  return _internal_has_login_screen_shortcuts_enabled_options();
}
inline const ::enterprise_management::PolicyOptions& AccessibilitySettingsProto::_internal_login_screen_shortcuts_enabled_options() const {
  const ::enterprise_management::PolicyOptions* p = login_screen_shortcuts_enabled_options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::PolicyOptions*>(
      &::enterprise_management::_PolicyOptions_default_instance_);
}
inline const ::enterprise_management::PolicyOptions& AccessibilitySettingsProto::login_screen_shortcuts_enabled_options() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AccessibilitySettingsProto.login_screen_shortcuts_enabled_options)
  return _internal_login_screen_shortcuts_enabled_options();
}
inline void AccessibilitySettingsProto::unsafe_arena_set_allocated_login_screen_shortcuts_enabled_options(
    ::enterprise_management::PolicyOptions* login_screen_shortcuts_enabled_options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_shortcuts_enabled_options_);
  }
  login_screen_shortcuts_enabled_options_ = login_screen_shortcuts_enabled_options;
  if (login_screen_shortcuts_enabled_options) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.AccessibilitySettingsProto.login_screen_shortcuts_enabled_options)
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::release_login_screen_shortcuts_enabled_options() {
  auto temp = unsafe_arena_release_login_screen_shortcuts_enabled_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::unsafe_arena_release_login_screen_shortcuts_enabled_options() {
  // @@protoc_insertion_point(field_release:enterprise_management.AccessibilitySettingsProto.login_screen_shortcuts_enabled_options)
  _has_bits_[0] &= ~0x00004000u;
  ::enterprise_management::PolicyOptions* temp = login_screen_shortcuts_enabled_options_;
  login_screen_shortcuts_enabled_options_ = nullptr;
  return temp;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::_internal_mutable_login_screen_shortcuts_enabled_options() {
  _has_bits_[0] |= 0x00004000u;
  if (login_screen_shortcuts_enabled_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::PolicyOptions>(GetArena());
    login_screen_shortcuts_enabled_options_ = p;
  }
  return login_screen_shortcuts_enabled_options_;
}
inline ::enterprise_management::PolicyOptions* AccessibilitySettingsProto::mutable_login_screen_shortcuts_enabled_options() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.AccessibilitySettingsProto.login_screen_shortcuts_enabled_options)
  return _internal_mutable_login_screen_shortcuts_enabled_options();
}
inline void AccessibilitySettingsProto::set_allocated_login_screen_shortcuts_enabled_options(::enterprise_management::PolicyOptions* login_screen_shortcuts_enabled_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_shortcuts_enabled_options_);
  }
  if (login_screen_shortcuts_enabled_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_shortcuts_enabled_options)->GetArena();
    if (message_arena != submessage_arena) {
      login_screen_shortcuts_enabled_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_screen_shortcuts_enabled_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  login_screen_shortcuts_enabled_options_ = login_screen_shortcuts_enabled_options;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.AccessibilitySettingsProto.login_screen_shortcuts_enabled_options)
}

// -------------------------------------------------------------------

// OBSOLETE_SupervisedUsersSettingsProto

// optional bool OBSOLETE_supervised_users_enabled = 1 [deprecated = true];
inline bool OBSOLETE_SupervisedUsersSettingsProto::_internal_has_obsolete_supervised_users_enabled() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OBSOLETE_SupervisedUsersSettingsProto::has_obsolete_supervised_users_enabled() const {
  return _internal_has_obsolete_supervised_users_enabled();
}
inline void OBSOLETE_SupervisedUsersSettingsProto::clear_obsolete_supervised_users_enabled() {
  obsolete_supervised_users_enabled_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool OBSOLETE_SupervisedUsersSettingsProto::_internal_obsolete_supervised_users_enabled() const {
  return obsolete_supervised_users_enabled_;
}
inline bool OBSOLETE_SupervisedUsersSettingsProto::obsolete_supervised_users_enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.OBSOLETE_SupervisedUsersSettingsProto.OBSOLETE_supervised_users_enabled)
  return _internal_obsolete_supervised_users_enabled();
}
inline void OBSOLETE_SupervisedUsersSettingsProto::_internal_set_obsolete_supervised_users_enabled(bool value) {
  _has_bits_[0] |= 0x00000001u;
  obsolete_supervised_users_enabled_ = value;
}
inline void OBSOLETE_SupervisedUsersSettingsProto::set_obsolete_supervised_users_enabled(bool value) {
  _internal_set_obsolete_supervised_users_enabled(value);
  // @@protoc_insertion_point(field_set:enterprise_management.OBSOLETE_SupervisedUsersSettingsProto.OBSOLETE_supervised_users_enabled)
}

// -------------------------------------------------------------------

// LoginScreenPowerManagementProto

// optional string login_screen_power_management = 1;
inline bool LoginScreenPowerManagementProto::_internal_has_login_screen_power_management() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LoginScreenPowerManagementProto::has_login_screen_power_management() const {
  return _internal_has_login_screen_power_management();
}
inline void LoginScreenPowerManagementProto::clear_login_screen_power_management() {
  login_screen_power_management_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LoginScreenPowerManagementProto::login_screen_power_management() const {
  // @@protoc_insertion_point(field_get:enterprise_management.LoginScreenPowerManagementProto.login_screen_power_management)
  return _internal_login_screen_power_management();
}
inline void LoginScreenPowerManagementProto::set_login_screen_power_management(const std::string& value) {
  _internal_set_login_screen_power_management(value);
  // @@protoc_insertion_point(field_set:enterprise_management.LoginScreenPowerManagementProto.login_screen_power_management)
}
inline std::string* LoginScreenPowerManagementProto::mutable_login_screen_power_management() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.LoginScreenPowerManagementProto.login_screen_power_management)
  return _internal_mutable_login_screen_power_management();
}
inline const std::string& LoginScreenPowerManagementProto::_internal_login_screen_power_management() const {
  return login_screen_power_management_.Get();
}
inline void LoginScreenPowerManagementProto::_internal_set_login_screen_power_management(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  login_screen_power_management_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoginScreenPowerManagementProto::set_login_screen_power_management(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  login_screen_power_management_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.LoginScreenPowerManagementProto.login_screen_power_management)
}
inline void LoginScreenPowerManagementProto::set_login_screen_power_management(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  login_screen_power_management_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.LoginScreenPowerManagementProto.login_screen_power_management)
}
inline void LoginScreenPowerManagementProto::set_login_screen_power_management(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  login_screen_power_management_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.LoginScreenPowerManagementProto.login_screen_power_management)
}
inline std::string* LoginScreenPowerManagementProto::_internal_mutable_login_screen_power_management() {
  _has_bits_[0] |= 0x00000001u;
  return login_screen_power_management_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoginScreenPowerManagementProto::release_login_screen_power_management() {
  // @@protoc_insertion_point(field_release:enterprise_management.LoginScreenPowerManagementProto.login_screen_power_management)
  if (!_internal_has_login_screen_power_management()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return login_screen_power_management_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginScreenPowerManagementProto::set_allocated_login_screen_power_management(std::string* login_screen_power_management) {
  if (login_screen_power_management != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  login_screen_power_management_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), login_screen_power_management,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.LoginScreenPowerManagementProto.login_screen_power_management)
}
inline std::string* LoginScreenPowerManagementProto::unsafe_arena_release_login_screen_power_management() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.LoginScreenPowerManagementProto.login_screen_power_management)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return login_screen_power_management_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LoginScreenPowerManagementProto::unsafe_arena_set_allocated_login_screen_power_management(
    std::string* login_screen_power_management) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (login_screen_power_management != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  login_screen_power_management_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      login_screen_power_management, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.LoginScreenPowerManagementProto.login_screen_power_management)
}

// -------------------------------------------------------------------

// AutoCleanupSettigsProto

// optional string clean_up_strategy = 1;
inline bool AutoCleanupSettigsProto::_internal_has_clean_up_strategy() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AutoCleanupSettigsProto::has_clean_up_strategy() const {
  return _internal_has_clean_up_strategy();
}
inline void AutoCleanupSettigsProto::clear_clean_up_strategy() {
  clean_up_strategy_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AutoCleanupSettigsProto::clean_up_strategy() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AutoCleanupSettigsProto.clean_up_strategy)
  return _internal_clean_up_strategy();
}
inline void AutoCleanupSettigsProto::set_clean_up_strategy(const std::string& value) {
  _internal_set_clean_up_strategy(value);
  // @@protoc_insertion_point(field_set:enterprise_management.AutoCleanupSettigsProto.clean_up_strategy)
}
inline std::string* AutoCleanupSettigsProto::mutable_clean_up_strategy() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.AutoCleanupSettigsProto.clean_up_strategy)
  return _internal_mutable_clean_up_strategy();
}
inline const std::string& AutoCleanupSettigsProto::_internal_clean_up_strategy() const {
  return clean_up_strategy_.Get();
}
inline void AutoCleanupSettigsProto::_internal_set_clean_up_strategy(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  clean_up_strategy_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AutoCleanupSettigsProto::set_clean_up_strategy(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  clean_up_strategy_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.AutoCleanupSettigsProto.clean_up_strategy)
}
inline void AutoCleanupSettigsProto::set_clean_up_strategy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  clean_up_strategy_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.AutoCleanupSettigsProto.clean_up_strategy)
}
inline void AutoCleanupSettigsProto::set_clean_up_strategy(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  clean_up_strategy_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.AutoCleanupSettigsProto.clean_up_strategy)
}
inline std::string* AutoCleanupSettigsProto::_internal_mutable_clean_up_strategy() {
  _has_bits_[0] |= 0x00000001u;
  return clean_up_strategy_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AutoCleanupSettigsProto::release_clean_up_strategy() {
  // @@protoc_insertion_point(field_release:enterprise_management.AutoCleanupSettigsProto.clean_up_strategy)
  if (!_internal_has_clean_up_strategy()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return clean_up_strategy_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AutoCleanupSettigsProto::set_allocated_clean_up_strategy(std::string* clean_up_strategy) {
  if (clean_up_strategy != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  clean_up_strategy_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clean_up_strategy,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.AutoCleanupSettigsProto.clean_up_strategy)
}
inline std::string* AutoCleanupSettigsProto::unsafe_arena_release_clean_up_strategy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.AutoCleanupSettigsProto.clean_up_strategy)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return clean_up_strategy_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AutoCleanupSettigsProto::unsafe_arena_set_allocated_clean_up_strategy(
    std::string* clean_up_strategy) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (clean_up_strategy != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  clean_up_strategy_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      clean_up_strategy, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.AutoCleanupSettigsProto.clean_up_strategy)
}

// -------------------------------------------------------------------

// SystemSettingsProto

// optional bool block_devmode = 1;
inline bool SystemSettingsProto::_internal_has_block_devmode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SystemSettingsProto::has_block_devmode() const {
  return _internal_has_block_devmode();
}
inline void SystemSettingsProto::clear_block_devmode() {
  block_devmode_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool SystemSettingsProto::_internal_block_devmode() const {
  return block_devmode_;
}
inline bool SystemSettingsProto::block_devmode() const {
  // @@protoc_insertion_point(field_get:enterprise_management.SystemSettingsProto.block_devmode)
  return _internal_block_devmode();
}
inline void SystemSettingsProto::_internal_set_block_devmode(bool value) {
  _has_bits_[0] |= 0x00000001u;
  block_devmode_ = value;
}
inline void SystemSettingsProto::set_block_devmode(bool value) {
  _internal_set_block_devmode(value);
  // @@protoc_insertion_point(field_set:enterprise_management.SystemSettingsProto.block_devmode)
}

// -------------------------------------------------------------------

// SAMLSettingsProto

// optional bool transfer_saml_cookies = 1;
inline bool SAMLSettingsProto::_internal_has_transfer_saml_cookies() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SAMLSettingsProto::has_transfer_saml_cookies() const {
  return _internal_has_transfer_saml_cookies();
}
inline void SAMLSettingsProto::clear_transfer_saml_cookies() {
  transfer_saml_cookies_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool SAMLSettingsProto::_internal_transfer_saml_cookies() const {
  return transfer_saml_cookies_;
}
inline bool SAMLSettingsProto::transfer_saml_cookies() const {
  // @@protoc_insertion_point(field_get:enterprise_management.SAMLSettingsProto.transfer_saml_cookies)
  return _internal_transfer_saml_cookies();
}
inline void SAMLSettingsProto::_internal_set_transfer_saml_cookies(bool value) {
  _has_bits_[0] |= 0x00000001u;
  transfer_saml_cookies_ = value;
}
inline void SAMLSettingsProto::set_transfer_saml_cookies(bool value) {
  _internal_set_transfer_saml_cookies(value);
  // @@protoc_insertion_point(field_set:enterprise_management.SAMLSettingsProto.transfer_saml_cookies)
}

// -------------------------------------------------------------------

// RebootOnShutdownProto

// optional bool reboot_on_shutdown = 1 [default = false];
inline bool RebootOnShutdownProto::_internal_has_reboot_on_shutdown() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RebootOnShutdownProto::has_reboot_on_shutdown() const {
  return _internal_has_reboot_on_shutdown();
}
inline void RebootOnShutdownProto::clear_reboot_on_shutdown() {
  reboot_on_shutdown_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool RebootOnShutdownProto::_internal_reboot_on_shutdown() const {
  return reboot_on_shutdown_;
}
inline bool RebootOnShutdownProto::reboot_on_shutdown() const {
  // @@protoc_insertion_point(field_get:enterprise_management.RebootOnShutdownProto.reboot_on_shutdown)
  return _internal_reboot_on_shutdown();
}
inline void RebootOnShutdownProto::_internal_set_reboot_on_shutdown(bool value) {
  _has_bits_[0] |= 0x00000001u;
  reboot_on_shutdown_ = value;
}
inline void RebootOnShutdownProto::set_reboot_on_shutdown(bool value) {
  _internal_set_reboot_on_shutdown(value);
  // @@protoc_insertion_point(field_set:enterprise_management.RebootOnShutdownProto.reboot_on_shutdown)
}

// -------------------------------------------------------------------

// DeviceHeartbeatSettingsProto

// optional bool heartbeat_enabled = 1 [default = false];
inline bool DeviceHeartbeatSettingsProto::_internal_has_heartbeat_enabled() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceHeartbeatSettingsProto::has_heartbeat_enabled() const {
  return _internal_has_heartbeat_enabled();
}
inline void DeviceHeartbeatSettingsProto::clear_heartbeat_enabled() {
  heartbeat_enabled_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool DeviceHeartbeatSettingsProto::_internal_heartbeat_enabled() const {
  return heartbeat_enabled_;
}
inline bool DeviceHeartbeatSettingsProto::heartbeat_enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceHeartbeatSettingsProto.heartbeat_enabled)
  return _internal_heartbeat_enabled();
}
inline void DeviceHeartbeatSettingsProto::_internal_set_heartbeat_enabled(bool value) {
  _has_bits_[0] |= 0x00000001u;
  heartbeat_enabled_ = value;
}
inline void DeviceHeartbeatSettingsProto::set_heartbeat_enabled(bool value) {
  _internal_set_heartbeat_enabled(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceHeartbeatSettingsProto.heartbeat_enabled)
}

// optional int64 heartbeat_frequency = 2 [default = 120000];
inline bool DeviceHeartbeatSettingsProto::_internal_has_heartbeat_frequency() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DeviceHeartbeatSettingsProto::has_heartbeat_frequency() const {
  return _internal_has_heartbeat_frequency();
}
inline void DeviceHeartbeatSettingsProto::clear_heartbeat_frequency() {
  heartbeat_frequency_ = PROTOBUF_LONGLONG(120000);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeviceHeartbeatSettingsProto::_internal_heartbeat_frequency() const {
  return heartbeat_frequency_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeviceHeartbeatSettingsProto::heartbeat_frequency() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceHeartbeatSettingsProto.heartbeat_frequency)
  return _internal_heartbeat_frequency();
}
inline void DeviceHeartbeatSettingsProto::_internal_set_heartbeat_frequency(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  heartbeat_frequency_ = value;
}
inline void DeviceHeartbeatSettingsProto::set_heartbeat_frequency(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_heartbeat_frequency(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceHeartbeatSettingsProto.heartbeat_frequency)
}

// -------------------------------------------------------------------

// ExtensionCacheSizeProto

// optional int64 extension_cache_size = 1;
inline bool ExtensionCacheSizeProto::_internal_has_extension_cache_size() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ExtensionCacheSizeProto::has_extension_cache_size() const {
  return _internal_has_extension_cache_size();
}
inline void ExtensionCacheSizeProto::clear_extension_cache_size() {
  extension_cache_size_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExtensionCacheSizeProto::_internal_extension_cache_size() const {
  return extension_cache_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExtensionCacheSizeProto::extension_cache_size() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ExtensionCacheSizeProto.extension_cache_size)
  return _internal_extension_cache_size();
}
inline void ExtensionCacheSizeProto::_internal_set_extension_cache_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  extension_cache_size_ = value;
}
inline void ExtensionCacheSizeProto::set_extension_cache_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_extension_cache_size(value);
  // @@protoc_insertion_point(field_set:enterprise_management.ExtensionCacheSizeProto.extension_cache_size)
}

// -------------------------------------------------------------------

// LoginScreenDomainAutoCompleteProto

// optional string login_screen_domain_auto_complete = 1;
inline bool LoginScreenDomainAutoCompleteProto::_internal_has_login_screen_domain_auto_complete() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LoginScreenDomainAutoCompleteProto::has_login_screen_domain_auto_complete() const {
  return _internal_has_login_screen_domain_auto_complete();
}
inline void LoginScreenDomainAutoCompleteProto::clear_login_screen_domain_auto_complete() {
  login_screen_domain_auto_complete_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LoginScreenDomainAutoCompleteProto::login_screen_domain_auto_complete() const {
  // @@protoc_insertion_point(field_get:enterprise_management.LoginScreenDomainAutoCompleteProto.login_screen_domain_auto_complete)
  return _internal_login_screen_domain_auto_complete();
}
inline void LoginScreenDomainAutoCompleteProto::set_login_screen_domain_auto_complete(const std::string& value) {
  _internal_set_login_screen_domain_auto_complete(value);
  // @@protoc_insertion_point(field_set:enterprise_management.LoginScreenDomainAutoCompleteProto.login_screen_domain_auto_complete)
}
inline std::string* LoginScreenDomainAutoCompleteProto::mutable_login_screen_domain_auto_complete() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.LoginScreenDomainAutoCompleteProto.login_screen_domain_auto_complete)
  return _internal_mutable_login_screen_domain_auto_complete();
}
inline const std::string& LoginScreenDomainAutoCompleteProto::_internal_login_screen_domain_auto_complete() const {
  return login_screen_domain_auto_complete_.Get();
}
inline void LoginScreenDomainAutoCompleteProto::_internal_set_login_screen_domain_auto_complete(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  login_screen_domain_auto_complete_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoginScreenDomainAutoCompleteProto::set_login_screen_domain_auto_complete(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  login_screen_domain_auto_complete_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.LoginScreenDomainAutoCompleteProto.login_screen_domain_auto_complete)
}
inline void LoginScreenDomainAutoCompleteProto::set_login_screen_domain_auto_complete(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  login_screen_domain_auto_complete_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.LoginScreenDomainAutoCompleteProto.login_screen_domain_auto_complete)
}
inline void LoginScreenDomainAutoCompleteProto::set_login_screen_domain_auto_complete(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  login_screen_domain_auto_complete_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.LoginScreenDomainAutoCompleteProto.login_screen_domain_auto_complete)
}
inline std::string* LoginScreenDomainAutoCompleteProto::_internal_mutable_login_screen_domain_auto_complete() {
  _has_bits_[0] |= 0x00000001u;
  return login_screen_domain_auto_complete_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoginScreenDomainAutoCompleteProto::release_login_screen_domain_auto_complete() {
  // @@protoc_insertion_point(field_release:enterprise_management.LoginScreenDomainAutoCompleteProto.login_screen_domain_auto_complete)
  if (!_internal_has_login_screen_domain_auto_complete()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return login_screen_domain_auto_complete_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginScreenDomainAutoCompleteProto::set_allocated_login_screen_domain_auto_complete(std::string* login_screen_domain_auto_complete) {
  if (login_screen_domain_auto_complete != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  login_screen_domain_auto_complete_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), login_screen_domain_auto_complete,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.LoginScreenDomainAutoCompleteProto.login_screen_domain_auto_complete)
}
inline std::string* LoginScreenDomainAutoCompleteProto::unsafe_arena_release_login_screen_domain_auto_complete() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.LoginScreenDomainAutoCompleteProto.login_screen_domain_auto_complete)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return login_screen_domain_auto_complete_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LoginScreenDomainAutoCompleteProto::unsafe_arena_set_allocated_login_screen_domain_auto_complete(
    std::string* login_screen_domain_auto_complete) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (login_screen_domain_auto_complete != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  login_screen_domain_auto_complete_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      login_screen_domain_auto_complete, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.LoginScreenDomainAutoCompleteProto.login_screen_domain_auto_complete)
}

// -------------------------------------------------------------------

// DeviceLogUploadSettingsProto

// optional bool system_log_upload_enabled = 1 [default = false];
inline bool DeviceLogUploadSettingsProto::_internal_has_system_log_upload_enabled() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceLogUploadSettingsProto::has_system_log_upload_enabled() const {
  return _internal_has_system_log_upload_enabled();
}
inline void DeviceLogUploadSettingsProto::clear_system_log_upload_enabled() {
  system_log_upload_enabled_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool DeviceLogUploadSettingsProto::_internal_system_log_upload_enabled() const {
  return system_log_upload_enabled_;
}
inline bool DeviceLogUploadSettingsProto::system_log_upload_enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceLogUploadSettingsProto.system_log_upload_enabled)
  return _internal_system_log_upload_enabled();
}
inline void DeviceLogUploadSettingsProto::_internal_set_system_log_upload_enabled(bool value) {
  _has_bits_[0] |= 0x00000001u;
  system_log_upload_enabled_ = value;
}
inline void DeviceLogUploadSettingsProto::set_system_log_upload_enabled(bool value) {
  _internal_set_system_log_upload_enabled(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceLogUploadSettingsProto.system_log_upload_enabled)
}

// -------------------------------------------------------------------

// DisplayRotationDefaultProto

// optional .enterprise_management.DisplayRotationDefaultProto.Rotation display_rotation_default = 1;
inline bool DisplayRotationDefaultProto::_internal_has_display_rotation_default() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DisplayRotationDefaultProto::has_display_rotation_default() const {
  return _internal_has_display_rotation_default();
}
inline void DisplayRotationDefaultProto::clear_display_rotation_default() {
  display_rotation_default_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::enterprise_management::DisplayRotationDefaultProto_Rotation DisplayRotationDefaultProto::_internal_display_rotation_default() const {
  return static_cast< ::enterprise_management::DisplayRotationDefaultProto_Rotation >(display_rotation_default_);
}
inline ::enterprise_management::DisplayRotationDefaultProto_Rotation DisplayRotationDefaultProto::display_rotation_default() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DisplayRotationDefaultProto.display_rotation_default)
  return _internal_display_rotation_default();
}
inline void DisplayRotationDefaultProto::_internal_set_display_rotation_default(::enterprise_management::DisplayRotationDefaultProto_Rotation value) {
  assert(::enterprise_management::DisplayRotationDefaultProto_Rotation_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  display_rotation_default_ = value;
}
inline void DisplayRotationDefaultProto::set_display_rotation_default(::enterprise_management::DisplayRotationDefaultProto_Rotation value) {
  _internal_set_display_rotation_default(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DisplayRotationDefaultProto.display_rotation_default)
}

// -------------------------------------------------------------------

// DeviceLoginScreenPrivacyScreenEnabledProto

// optional bool enabled = 1 [default = false];
inline bool DeviceLoginScreenPrivacyScreenEnabledProto::_internal_has_enabled() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceLoginScreenPrivacyScreenEnabledProto::has_enabled() const {
  return _internal_has_enabled();
}
inline void DeviceLoginScreenPrivacyScreenEnabledProto::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool DeviceLoginScreenPrivacyScreenEnabledProto::_internal_enabled() const {
  return enabled_;
}
inline bool DeviceLoginScreenPrivacyScreenEnabledProto::enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceLoginScreenPrivacyScreenEnabledProto.enabled)
  return _internal_enabled();
}
inline void DeviceLoginScreenPrivacyScreenEnabledProto::_internal_set_enabled(bool value) {
  _has_bits_[0] |= 0x00000001u;
  enabled_ = value;
}
inline void DeviceLoginScreenPrivacyScreenEnabledProto::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceLoginScreenPrivacyScreenEnabledProto.enabled)
}

// -------------------------------------------------------------------

// DeviceDisplayResolutionProto

// optional string device_display_resolution = 1;
inline bool DeviceDisplayResolutionProto::_internal_has_device_display_resolution() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceDisplayResolutionProto::has_device_display_resolution() const {
  return _internal_has_device_display_resolution();
}
inline void DeviceDisplayResolutionProto::clear_device_display_resolution() {
  device_display_resolution_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeviceDisplayResolutionProto::device_display_resolution() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceDisplayResolutionProto.device_display_resolution)
  return _internal_device_display_resolution();
}
inline void DeviceDisplayResolutionProto::set_device_display_resolution(const std::string& value) {
  _internal_set_device_display_resolution(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceDisplayResolutionProto.device_display_resolution)
}
inline std::string* DeviceDisplayResolutionProto::mutable_device_display_resolution() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceDisplayResolutionProto.device_display_resolution)
  return _internal_mutable_device_display_resolution();
}
inline const std::string& DeviceDisplayResolutionProto::_internal_device_display_resolution() const {
  return device_display_resolution_.Get();
}
inline void DeviceDisplayResolutionProto::_internal_set_device_display_resolution(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  device_display_resolution_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceDisplayResolutionProto::set_device_display_resolution(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  device_display_resolution_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceDisplayResolutionProto.device_display_resolution)
}
inline void DeviceDisplayResolutionProto::set_device_display_resolution(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  device_display_resolution_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceDisplayResolutionProto.device_display_resolution)
}
inline void DeviceDisplayResolutionProto::set_device_display_resolution(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  device_display_resolution_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceDisplayResolutionProto.device_display_resolution)
}
inline std::string* DeviceDisplayResolutionProto::_internal_mutable_device_display_resolution() {
  _has_bits_[0] |= 0x00000001u;
  return device_display_resolution_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceDisplayResolutionProto::release_device_display_resolution() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceDisplayResolutionProto.device_display_resolution)
  if (!_internal_has_device_display_resolution()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return device_display_resolution_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceDisplayResolutionProto::set_allocated_device_display_resolution(std::string* device_display_resolution) {
  if (device_display_resolution != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  device_display_resolution_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_display_resolution,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceDisplayResolutionProto.device_display_resolution)
}
inline std::string* DeviceDisplayResolutionProto::unsafe_arena_release_device_display_resolution() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.DeviceDisplayResolutionProto.device_display_resolution)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return device_display_resolution_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceDisplayResolutionProto::unsafe_arena_set_allocated_device_display_resolution(
    std::string* device_display_resolution) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_display_resolution != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  device_display_resolution_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_display_resolution, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.DeviceDisplayResolutionProto.device_display_resolution)
}

// -------------------------------------------------------------------

// AllowKioskAppControlChromeVersionProto

// optional bool allow_kiosk_app_control_chrome_version = 1 [default = false];
inline bool AllowKioskAppControlChromeVersionProto::_internal_has_allow_kiosk_app_control_chrome_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AllowKioskAppControlChromeVersionProto::has_allow_kiosk_app_control_chrome_version() const {
  return _internal_has_allow_kiosk_app_control_chrome_version();
}
inline void AllowKioskAppControlChromeVersionProto::clear_allow_kiosk_app_control_chrome_version() {
  allow_kiosk_app_control_chrome_version_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool AllowKioskAppControlChromeVersionProto::_internal_allow_kiosk_app_control_chrome_version() const {
  return allow_kiosk_app_control_chrome_version_;
}
inline bool AllowKioskAppControlChromeVersionProto::allow_kiosk_app_control_chrome_version() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AllowKioskAppControlChromeVersionProto.allow_kiosk_app_control_chrome_version)
  return _internal_allow_kiosk_app_control_chrome_version();
}
inline void AllowKioskAppControlChromeVersionProto::_internal_set_allow_kiosk_app_control_chrome_version(bool value) {
  _has_bits_[0] |= 0x00000001u;
  allow_kiosk_app_control_chrome_version_ = value;
}
inline void AllowKioskAppControlChromeVersionProto::set_allow_kiosk_app_control_chrome_version(bool value) {
  _internal_set_allow_kiosk_app_control_chrome_version(value);
  // @@protoc_insertion_point(field_set:enterprise_management.AllowKioskAppControlChromeVersionProto.allow_kiosk_app_control_chrome_version)
}

// -------------------------------------------------------------------

// LoginAuthenticationBehaviorProto

// optional .enterprise_management.LoginAuthenticationBehaviorProto.LoginBehavior login_authentication_behavior = 1 [default = GAIA];
inline bool LoginAuthenticationBehaviorProto::_internal_has_login_authentication_behavior() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LoginAuthenticationBehaviorProto::has_login_authentication_behavior() const {
  return _internal_has_login_authentication_behavior();
}
inline void LoginAuthenticationBehaviorProto::clear_login_authentication_behavior() {
  login_authentication_behavior_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::enterprise_management::LoginAuthenticationBehaviorProto_LoginBehavior LoginAuthenticationBehaviorProto::_internal_login_authentication_behavior() const {
  return static_cast< ::enterprise_management::LoginAuthenticationBehaviorProto_LoginBehavior >(login_authentication_behavior_);
}
inline ::enterprise_management::LoginAuthenticationBehaviorProto_LoginBehavior LoginAuthenticationBehaviorProto::login_authentication_behavior() const {
  // @@protoc_insertion_point(field_get:enterprise_management.LoginAuthenticationBehaviorProto.login_authentication_behavior)
  return _internal_login_authentication_behavior();
}
inline void LoginAuthenticationBehaviorProto::_internal_set_login_authentication_behavior(::enterprise_management::LoginAuthenticationBehaviorProto_LoginBehavior value) {
  assert(::enterprise_management::LoginAuthenticationBehaviorProto_LoginBehavior_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  login_authentication_behavior_ = value;
}
inline void LoginAuthenticationBehaviorProto::set_login_authentication_behavior(::enterprise_management::LoginAuthenticationBehaviorProto_LoginBehavior value) {
  _internal_set_login_authentication_behavior(value);
  // @@protoc_insertion_point(field_set:enterprise_management.LoginAuthenticationBehaviorProto.login_authentication_behavior)
}

// -------------------------------------------------------------------

// UsbDeviceIdProto

// optional int32 vendor_id = 1;
inline bool UsbDeviceIdProto::_internal_has_vendor_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UsbDeviceIdProto::has_vendor_id() const {
  return _internal_has_vendor_id();
}
inline void UsbDeviceIdProto::clear_vendor_id() {
  vendor_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UsbDeviceIdProto::_internal_vendor_id() const {
  return vendor_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UsbDeviceIdProto::vendor_id() const {
  // @@protoc_insertion_point(field_get:enterprise_management.UsbDeviceIdProto.vendor_id)
  return _internal_vendor_id();
}
inline void UsbDeviceIdProto::_internal_set_vendor_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  vendor_id_ = value;
}
inline void UsbDeviceIdProto::set_vendor_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vendor_id(value);
  // @@protoc_insertion_point(field_set:enterprise_management.UsbDeviceIdProto.vendor_id)
}

// optional int32 product_id = 2;
inline bool UsbDeviceIdProto::_internal_has_product_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UsbDeviceIdProto::has_product_id() const {
  return _internal_has_product_id();
}
inline void UsbDeviceIdProto::clear_product_id() {
  product_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UsbDeviceIdProto::_internal_product_id() const {
  return product_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UsbDeviceIdProto::product_id() const {
  // @@protoc_insertion_point(field_get:enterprise_management.UsbDeviceIdProto.product_id)
  return _internal_product_id();
}
inline void UsbDeviceIdProto::_internal_set_product_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  product_id_ = value;
}
inline void UsbDeviceIdProto::set_product_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_product_id(value);
  // @@protoc_insertion_point(field_set:enterprise_management.UsbDeviceIdProto.product_id)
}

// -------------------------------------------------------------------

// UsbDetachableWhitelistProto

// repeated .enterprise_management.UsbDeviceIdProto id = 1;
inline int UsbDetachableWhitelistProto::_internal_id_size() const {
  return id_.size();
}
inline int UsbDetachableWhitelistProto::id_size() const {
  return _internal_id_size();
}
inline void UsbDetachableWhitelistProto::clear_id() {
  id_.Clear();
}
inline ::enterprise_management::UsbDeviceIdProto* UsbDetachableWhitelistProto::mutable_id(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_management.UsbDetachableWhitelistProto.id)
  return id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::enterprise_management::UsbDeviceIdProto >*
UsbDetachableWhitelistProto::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_management.UsbDetachableWhitelistProto.id)
  return &id_;
}
inline const ::enterprise_management::UsbDeviceIdProto& UsbDetachableWhitelistProto::_internal_id(int index) const {
  return id_.Get(index);
}
inline const ::enterprise_management::UsbDeviceIdProto& UsbDetachableWhitelistProto::id(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_management.UsbDetachableWhitelistProto.id)
  return _internal_id(index);
}
inline ::enterprise_management::UsbDeviceIdProto* UsbDetachableWhitelistProto::_internal_add_id() {
  return id_.Add();
}
inline ::enterprise_management::UsbDeviceIdProto* UsbDetachableWhitelistProto::add_id() {
  // @@protoc_insertion_point(field_add:enterprise_management.UsbDetachableWhitelistProto.id)
  return _internal_add_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::enterprise_management::UsbDeviceIdProto >&
UsbDetachableWhitelistProto::id() const {
  // @@protoc_insertion_point(field_list:enterprise_management.UsbDetachableWhitelistProto.id)
  return id_;
}

// -------------------------------------------------------------------

// AllowBluetoothProto

// optional bool allow_bluetooth = 1 [default = true];
inline bool AllowBluetoothProto::_internal_has_allow_bluetooth() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AllowBluetoothProto::has_allow_bluetooth() const {
  return _internal_has_allow_bluetooth();
}
inline void AllowBluetoothProto::clear_allow_bluetooth() {
  allow_bluetooth_ = true;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool AllowBluetoothProto::_internal_allow_bluetooth() const {
  return allow_bluetooth_;
}
inline bool AllowBluetoothProto::allow_bluetooth() const {
  // @@protoc_insertion_point(field_get:enterprise_management.AllowBluetoothProto.allow_bluetooth)
  return _internal_allow_bluetooth();
}
inline void AllowBluetoothProto::_internal_set_allow_bluetooth(bool value) {
  _has_bits_[0] |= 0x00000001u;
  allow_bluetooth_ = value;
}
inline void AllowBluetoothProto::set_allow_bluetooth(bool value) {
  _internal_set_allow_bluetooth(value);
  // @@protoc_insertion_point(field_set:enterprise_management.AllowBluetoothProto.allow_bluetooth)
}

// -------------------------------------------------------------------

// DeviceWiFiAllowedProto

// optional bool device_wifi_allowed = 1 [default = true];
inline bool DeviceWiFiAllowedProto::_internal_has_device_wifi_allowed() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceWiFiAllowedProto::has_device_wifi_allowed() const {
  return _internal_has_device_wifi_allowed();
}
inline void DeviceWiFiAllowedProto::clear_device_wifi_allowed() {
  device_wifi_allowed_ = true;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool DeviceWiFiAllowedProto::_internal_device_wifi_allowed() const {
  return device_wifi_allowed_;
}
inline bool DeviceWiFiAllowedProto::device_wifi_allowed() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceWiFiAllowedProto.device_wifi_allowed)
  return _internal_device_wifi_allowed();
}
inline void DeviceWiFiAllowedProto::_internal_set_device_wifi_allowed(bool value) {
  _has_bits_[0] |= 0x00000001u;
  device_wifi_allowed_ = value;
}
inline void DeviceWiFiAllowedProto::set_device_wifi_allowed(bool value) {
  _internal_set_device_wifi_allowed(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceWiFiAllowedProto.device_wifi_allowed)
}

// -------------------------------------------------------------------

// DeviceQuirksDownloadEnabledProto

// optional bool quirks_download_enabled = 1;
inline bool DeviceQuirksDownloadEnabledProto::_internal_has_quirks_download_enabled() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceQuirksDownloadEnabledProto::has_quirks_download_enabled() const {
  return _internal_has_quirks_download_enabled();
}
inline void DeviceQuirksDownloadEnabledProto::clear_quirks_download_enabled() {
  quirks_download_enabled_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool DeviceQuirksDownloadEnabledProto::_internal_quirks_download_enabled() const {
  return quirks_download_enabled_;
}
inline bool DeviceQuirksDownloadEnabledProto::quirks_download_enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceQuirksDownloadEnabledProto.quirks_download_enabled)
  return _internal_quirks_download_enabled();
}
inline void DeviceQuirksDownloadEnabledProto::_internal_set_quirks_download_enabled(bool value) {
  _has_bits_[0] |= 0x00000001u;
  quirks_download_enabled_ = value;
}
inline void DeviceQuirksDownloadEnabledProto::set_quirks_download_enabled(bool value) {
  _internal_set_quirks_download_enabled(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceQuirksDownloadEnabledProto.quirks_download_enabled)
}

// -------------------------------------------------------------------

// LoginVideoCaptureAllowedUrlsProto

// repeated string urls = 1;
inline int LoginVideoCaptureAllowedUrlsProto::_internal_urls_size() const {
  return urls_.size();
}
inline int LoginVideoCaptureAllowedUrlsProto::urls_size() const {
  return _internal_urls_size();
}
inline void LoginVideoCaptureAllowedUrlsProto::clear_urls() {
  urls_.Clear();
}
inline std::string* LoginVideoCaptureAllowedUrlsProto::add_urls() {
  // @@protoc_insertion_point(field_add_mutable:enterprise_management.LoginVideoCaptureAllowedUrlsProto.urls)
  return _internal_add_urls();
}
inline const std::string& LoginVideoCaptureAllowedUrlsProto::_internal_urls(int index) const {
  return urls_.Get(index);
}
inline const std::string& LoginVideoCaptureAllowedUrlsProto::urls(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_management.LoginVideoCaptureAllowedUrlsProto.urls)
  return _internal_urls(index);
}
inline std::string* LoginVideoCaptureAllowedUrlsProto::mutable_urls(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_management.LoginVideoCaptureAllowedUrlsProto.urls)
  return urls_.Mutable(index);
}
inline void LoginVideoCaptureAllowedUrlsProto::set_urls(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:enterprise_management.LoginVideoCaptureAllowedUrlsProto.urls)
  urls_.Mutable(index)->assign(value);
}
inline void LoginVideoCaptureAllowedUrlsProto::set_urls(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:enterprise_management.LoginVideoCaptureAllowedUrlsProto.urls)
  urls_.Mutable(index)->assign(std::move(value));
}
inline void LoginVideoCaptureAllowedUrlsProto::set_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:enterprise_management.LoginVideoCaptureAllowedUrlsProto.urls)
}
inline void LoginVideoCaptureAllowedUrlsProto::set_urls(int index, const char* value, size_t size) {
  urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.LoginVideoCaptureAllowedUrlsProto.urls)
}
inline std::string* LoginVideoCaptureAllowedUrlsProto::_internal_add_urls() {
  return urls_.Add();
}
inline void LoginVideoCaptureAllowedUrlsProto::add_urls(const std::string& value) {
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:enterprise_management.LoginVideoCaptureAllowedUrlsProto.urls)
}
inline void LoginVideoCaptureAllowedUrlsProto::add_urls(std::string&& value) {
  urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:enterprise_management.LoginVideoCaptureAllowedUrlsProto.urls)
}
inline void LoginVideoCaptureAllowedUrlsProto::add_urls(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:enterprise_management.LoginVideoCaptureAllowedUrlsProto.urls)
}
inline void LoginVideoCaptureAllowedUrlsProto::add_urls(const char* value, size_t size) {
  urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:enterprise_management.LoginVideoCaptureAllowedUrlsProto.urls)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LoginVideoCaptureAllowedUrlsProto::urls() const {
  // @@protoc_insertion_point(field_list:enterprise_management.LoginVideoCaptureAllowedUrlsProto.urls)
  return urls_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LoginVideoCaptureAllowedUrlsProto::mutable_urls() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_management.LoginVideoCaptureAllowedUrlsProto.urls)
  return &urls_;
}

// -------------------------------------------------------------------

// DeviceWiFiFastTransitionEnabledProto

// optional bool device_wifi_fast_transition_enabled = 1;
inline bool DeviceWiFiFastTransitionEnabledProto::_internal_has_device_wifi_fast_transition_enabled() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceWiFiFastTransitionEnabledProto::has_device_wifi_fast_transition_enabled() const {
  return _internal_has_device_wifi_fast_transition_enabled();
}
inline void DeviceWiFiFastTransitionEnabledProto::clear_device_wifi_fast_transition_enabled() {
  device_wifi_fast_transition_enabled_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool DeviceWiFiFastTransitionEnabledProto::_internal_device_wifi_fast_transition_enabled() const {
  return device_wifi_fast_transition_enabled_;
}
inline bool DeviceWiFiFastTransitionEnabledProto::device_wifi_fast_transition_enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceWiFiFastTransitionEnabledProto.device_wifi_fast_transition_enabled)
  return _internal_device_wifi_fast_transition_enabled();
}
inline void DeviceWiFiFastTransitionEnabledProto::_internal_set_device_wifi_fast_transition_enabled(bool value) {
  _has_bits_[0] |= 0x00000001u;
  device_wifi_fast_transition_enabled_ = value;
}
inline void DeviceWiFiFastTransitionEnabledProto::set_device_wifi_fast_transition_enabled(bool value) {
  _internal_set_device_wifi_fast_transition_enabled(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceWiFiFastTransitionEnabledProto.device_wifi_fast_transition_enabled)
}

// -------------------------------------------------------------------

// NetworkThrottlingEnabledProto

// optional bool enabled = 1 [default = false];
inline bool NetworkThrottlingEnabledProto::_internal_has_enabled() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NetworkThrottlingEnabledProto::has_enabled() const {
  return _internal_has_enabled();
}
inline void NetworkThrottlingEnabledProto::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool NetworkThrottlingEnabledProto::_internal_enabled() const {
  return enabled_;
}
inline bool NetworkThrottlingEnabledProto::enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.NetworkThrottlingEnabledProto.enabled)
  return _internal_enabled();
}
inline void NetworkThrottlingEnabledProto::_internal_set_enabled(bool value) {
  _has_bits_[0] |= 0x00000001u;
  enabled_ = value;
}
inline void NetworkThrottlingEnabledProto::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:enterprise_management.NetworkThrottlingEnabledProto.enabled)
}

// optional int32 upload_rate_kbits = 2 [default = 0];
inline bool NetworkThrottlingEnabledProto::_internal_has_upload_rate_kbits() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NetworkThrottlingEnabledProto::has_upload_rate_kbits() const {
  return _internal_has_upload_rate_kbits();
}
inline void NetworkThrottlingEnabledProto::clear_upload_rate_kbits() {
  upload_rate_kbits_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkThrottlingEnabledProto::_internal_upload_rate_kbits() const {
  return upload_rate_kbits_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkThrottlingEnabledProto::upload_rate_kbits() const {
  // @@protoc_insertion_point(field_get:enterprise_management.NetworkThrottlingEnabledProto.upload_rate_kbits)
  return _internal_upload_rate_kbits();
}
inline void NetworkThrottlingEnabledProto::_internal_set_upload_rate_kbits(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  upload_rate_kbits_ = value;
}
inline void NetworkThrottlingEnabledProto::set_upload_rate_kbits(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_upload_rate_kbits(value);
  // @@protoc_insertion_point(field_set:enterprise_management.NetworkThrottlingEnabledProto.upload_rate_kbits)
}

// optional int32 download_rate_kbits = 3 [default = 0];
inline bool NetworkThrottlingEnabledProto::_internal_has_download_rate_kbits() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NetworkThrottlingEnabledProto::has_download_rate_kbits() const {
  return _internal_has_download_rate_kbits();
}
inline void NetworkThrottlingEnabledProto::clear_download_rate_kbits() {
  download_rate_kbits_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkThrottlingEnabledProto::_internal_download_rate_kbits() const {
  return download_rate_kbits_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkThrottlingEnabledProto::download_rate_kbits() const {
  // @@protoc_insertion_point(field_get:enterprise_management.NetworkThrottlingEnabledProto.download_rate_kbits)
  return _internal_download_rate_kbits();
}
inline void NetworkThrottlingEnabledProto::_internal_set_download_rate_kbits(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  download_rate_kbits_ = value;
}
inline void NetworkThrottlingEnabledProto::set_download_rate_kbits(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_download_rate_kbits(value);
  // @@protoc_insertion_point(field_set:enterprise_management.NetworkThrottlingEnabledProto.download_rate_kbits)
}

// -------------------------------------------------------------------

// DeviceLoginScreenExtensionsProto

// repeated string device_login_screen_extensions = 1;
inline int DeviceLoginScreenExtensionsProto::_internal_device_login_screen_extensions_size() const {
  return device_login_screen_extensions_.size();
}
inline int DeviceLoginScreenExtensionsProto::device_login_screen_extensions_size() const {
  return _internal_device_login_screen_extensions_size();
}
inline void DeviceLoginScreenExtensionsProto::clear_device_login_screen_extensions() {
  device_login_screen_extensions_.Clear();
}
inline std::string* DeviceLoginScreenExtensionsProto::add_device_login_screen_extensions() {
  // @@protoc_insertion_point(field_add_mutable:enterprise_management.DeviceLoginScreenExtensionsProto.device_login_screen_extensions)
  return _internal_add_device_login_screen_extensions();
}
inline const std::string& DeviceLoginScreenExtensionsProto::_internal_device_login_screen_extensions(int index) const {
  return device_login_screen_extensions_.Get(index);
}
inline const std::string& DeviceLoginScreenExtensionsProto::device_login_screen_extensions(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceLoginScreenExtensionsProto.device_login_screen_extensions)
  return _internal_device_login_screen_extensions(index);
}
inline std::string* DeviceLoginScreenExtensionsProto::mutable_device_login_screen_extensions(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceLoginScreenExtensionsProto.device_login_screen_extensions)
  return device_login_screen_extensions_.Mutable(index);
}
inline void DeviceLoginScreenExtensionsProto::set_device_login_screen_extensions(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceLoginScreenExtensionsProto.device_login_screen_extensions)
  device_login_screen_extensions_.Mutable(index)->assign(value);
}
inline void DeviceLoginScreenExtensionsProto::set_device_login_screen_extensions(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceLoginScreenExtensionsProto.device_login_screen_extensions)
  device_login_screen_extensions_.Mutable(index)->assign(std::move(value));
}
inline void DeviceLoginScreenExtensionsProto::set_device_login_screen_extensions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  device_login_screen_extensions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceLoginScreenExtensionsProto.device_login_screen_extensions)
}
inline void DeviceLoginScreenExtensionsProto::set_device_login_screen_extensions(int index, const char* value, size_t size) {
  device_login_screen_extensions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceLoginScreenExtensionsProto.device_login_screen_extensions)
}
inline std::string* DeviceLoginScreenExtensionsProto::_internal_add_device_login_screen_extensions() {
  return device_login_screen_extensions_.Add();
}
inline void DeviceLoginScreenExtensionsProto::add_device_login_screen_extensions(const std::string& value) {
  device_login_screen_extensions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:enterprise_management.DeviceLoginScreenExtensionsProto.device_login_screen_extensions)
}
inline void DeviceLoginScreenExtensionsProto::add_device_login_screen_extensions(std::string&& value) {
  device_login_screen_extensions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:enterprise_management.DeviceLoginScreenExtensionsProto.device_login_screen_extensions)
}
inline void DeviceLoginScreenExtensionsProto::add_device_login_screen_extensions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  device_login_screen_extensions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:enterprise_management.DeviceLoginScreenExtensionsProto.device_login_screen_extensions)
}
inline void DeviceLoginScreenExtensionsProto::add_device_login_screen_extensions(const char* value, size_t size) {
  device_login_screen_extensions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:enterprise_management.DeviceLoginScreenExtensionsProto.device_login_screen_extensions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeviceLoginScreenExtensionsProto::device_login_screen_extensions() const {
  // @@protoc_insertion_point(field_list:enterprise_management.DeviceLoginScreenExtensionsProto.device_login_screen_extensions)
  return device_login_screen_extensions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeviceLoginScreenExtensionsProto::mutable_device_login_screen_extensions() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceLoginScreenExtensionsProto.device_login_screen_extensions)
  return &device_login_screen_extensions_;
}

// -------------------------------------------------------------------

// LoginScreenLocalesProto

// repeated string login_screen_locales = 1;
inline int LoginScreenLocalesProto::_internal_login_screen_locales_size() const {
  return login_screen_locales_.size();
}
inline int LoginScreenLocalesProto::login_screen_locales_size() const {
  return _internal_login_screen_locales_size();
}
inline void LoginScreenLocalesProto::clear_login_screen_locales() {
  login_screen_locales_.Clear();
}
inline std::string* LoginScreenLocalesProto::add_login_screen_locales() {
  // @@protoc_insertion_point(field_add_mutable:enterprise_management.LoginScreenLocalesProto.login_screen_locales)
  return _internal_add_login_screen_locales();
}
inline const std::string& LoginScreenLocalesProto::_internal_login_screen_locales(int index) const {
  return login_screen_locales_.Get(index);
}
inline const std::string& LoginScreenLocalesProto::login_screen_locales(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_management.LoginScreenLocalesProto.login_screen_locales)
  return _internal_login_screen_locales(index);
}
inline std::string* LoginScreenLocalesProto::mutable_login_screen_locales(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_management.LoginScreenLocalesProto.login_screen_locales)
  return login_screen_locales_.Mutable(index);
}
inline void LoginScreenLocalesProto::set_login_screen_locales(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:enterprise_management.LoginScreenLocalesProto.login_screen_locales)
  login_screen_locales_.Mutable(index)->assign(value);
}
inline void LoginScreenLocalesProto::set_login_screen_locales(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:enterprise_management.LoginScreenLocalesProto.login_screen_locales)
  login_screen_locales_.Mutable(index)->assign(std::move(value));
}
inline void LoginScreenLocalesProto::set_login_screen_locales(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  login_screen_locales_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:enterprise_management.LoginScreenLocalesProto.login_screen_locales)
}
inline void LoginScreenLocalesProto::set_login_screen_locales(int index, const char* value, size_t size) {
  login_screen_locales_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.LoginScreenLocalesProto.login_screen_locales)
}
inline std::string* LoginScreenLocalesProto::_internal_add_login_screen_locales() {
  return login_screen_locales_.Add();
}
inline void LoginScreenLocalesProto::add_login_screen_locales(const std::string& value) {
  login_screen_locales_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:enterprise_management.LoginScreenLocalesProto.login_screen_locales)
}
inline void LoginScreenLocalesProto::add_login_screen_locales(std::string&& value) {
  login_screen_locales_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:enterprise_management.LoginScreenLocalesProto.login_screen_locales)
}
inline void LoginScreenLocalesProto::add_login_screen_locales(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  login_screen_locales_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:enterprise_management.LoginScreenLocalesProto.login_screen_locales)
}
inline void LoginScreenLocalesProto::add_login_screen_locales(const char* value, size_t size) {
  login_screen_locales_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:enterprise_management.LoginScreenLocalesProto.login_screen_locales)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LoginScreenLocalesProto::login_screen_locales() const {
  // @@protoc_insertion_point(field_list:enterprise_management.LoginScreenLocalesProto.login_screen_locales)
  return login_screen_locales_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LoginScreenLocalesProto::mutable_login_screen_locales() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_management.LoginScreenLocalesProto.login_screen_locales)
  return &login_screen_locales_;
}

// -------------------------------------------------------------------

// LoginScreenInputMethodsProto

// repeated string login_screen_input_methods = 1;
inline int LoginScreenInputMethodsProto::_internal_login_screen_input_methods_size() const {
  return login_screen_input_methods_.size();
}
inline int LoginScreenInputMethodsProto::login_screen_input_methods_size() const {
  return _internal_login_screen_input_methods_size();
}
inline void LoginScreenInputMethodsProto::clear_login_screen_input_methods() {
  login_screen_input_methods_.Clear();
}
inline std::string* LoginScreenInputMethodsProto::add_login_screen_input_methods() {
  // @@protoc_insertion_point(field_add_mutable:enterprise_management.LoginScreenInputMethodsProto.login_screen_input_methods)
  return _internal_add_login_screen_input_methods();
}
inline const std::string& LoginScreenInputMethodsProto::_internal_login_screen_input_methods(int index) const {
  return login_screen_input_methods_.Get(index);
}
inline const std::string& LoginScreenInputMethodsProto::login_screen_input_methods(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_management.LoginScreenInputMethodsProto.login_screen_input_methods)
  return _internal_login_screen_input_methods(index);
}
inline std::string* LoginScreenInputMethodsProto::mutable_login_screen_input_methods(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_management.LoginScreenInputMethodsProto.login_screen_input_methods)
  return login_screen_input_methods_.Mutable(index);
}
inline void LoginScreenInputMethodsProto::set_login_screen_input_methods(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:enterprise_management.LoginScreenInputMethodsProto.login_screen_input_methods)
  login_screen_input_methods_.Mutable(index)->assign(value);
}
inline void LoginScreenInputMethodsProto::set_login_screen_input_methods(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:enterprise_management.LoginScreenInputMethodsProto.login_screen_input_methods)
  login_screen_input_methods_.Mutable(index)->assign(std::move(value));
}
inline void LoginScreenInputMethodsProto::set_login_screen_input_methods(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  login_screen_input_methods_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:enterprise_management.LoginScreenInputMethodsProto.login_screen_input_methods)
}
inline void LoginScreenInputMethodsProto::set_login_screen_input_methods(int index, const char* value, size_t size) {
  login_screen_input_methods_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.LoginScreenInputMethodsProto.login_screen_input_methods)
}
inline std::string* LoginScreenInputMethodsProto::_internal_add_login_screen_input_methods() {
  return login_screen_input_methods_.Add();
}
inline void LoginScreenInputMethodsProto::add_login_screen_input_methods(const std::string& value) {
  login_screen_input_methods_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:enterprise_management.LoginScreenInputMethodsProto.login_screen_input_methods)
}
inline void LoginScreenInputMethodsProto::add_login_screen_input_methods(std::string&& value) {
  login_screen_input_methods_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:enterprise_management.LoginScreenInputMethodsProto.login_screen_input_methods)
}
inline void LoginScreenInputMethodsProto::add_login_screen_input_methods(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  login_screen_input_methods_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:enterprise_management.LoginScreenInputMethodsProto.login_screen_input_methods)
}
inline void LoginScreenInputMethodsProto::add_login_screen_input_methods(const char* value, size_t size) {
  login_screen_input_methods_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:enterprise_management.LoginScreenInputMethodsProto.login_screen_input_methods)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LoginScreenInputMethodsProto::login_screen_input_methods() const {
  // @@protoc_insertion_point(field_list:enterprise_management.LoginScreenInputMethodsProto.login_screen_input_methods)
  return login_screen_input_methods_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LoginScreenInputMethodsProto::mutable_login_screen_input_methods() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_management.LoginScreenInputMethodsProto.login_screen_input_methods)
  return &login_screen_input_methods_;
}

// -------------------------------------------------------------------

// DeviceWallpaperImageProto

// optional string device_wallpaper_image = 1;
inline bool DeviceWallpaperImageProto::_internal_has_device_wallpaper_image() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceWallpaperImageProto::has_device_wallpaper_image() const {
  return _internal_has_device_wallpaper_image();
}
inline void DeviceWallpaperImageProto::clear_device_wallpaper_image() {
  device_wallpaper_image_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeviceWallpaperImageProto::device_wallpaper_image() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceWallpaperImageProto.device_wallpaper_image)
  return _internal_device_wallpaper_image();
}
inline void DeviceWallpaperImageProto::set_device_wallpaper_image(const std::string& value) {
  _internal_set_device_wallpaper_image(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceWallpaperImageProto.device_wallpaper_image)
}
inline std::string* DeviceWallpaperImageProto::mutable_device_wallpaper_image() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceWallpaperImageProto.device_wallpaper_image)
  return _internal_mutable_device_wallpaper_image();
}
inline const std::string& DeviceWallpaperImageProto::_internal_device_wallpaper_image() const {
  return device_wallpaper_image_.Get();
}
inline void DeviceWallpaperImageProto::_internal_set_device_wallpaper_image(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  device_wallpaper_image_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceWallpaperImageProto::set_device_wallpaper_image(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  device_wallpaper_image_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceWallpaperImageProto.device_wallpaper_image)
}
inline void DeviceWallpaperImageProto::set_device_wallpaper_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  device_wallpaper_image_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceWallpaperImageProto.device_wallpaper_image)
}
inline void DeviceWallpaperImageProto::set_device_wallpaper_image(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  device_wallpaper_image_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceWallpaperImageProto.device_wallpaper_image)
}
inline std::string* DeviceWallpaperImageProto::_internal_mutable_device_wallpaper_image() {
  _has_bits_[0] |= 0x00000001u;
  return device_wallpaper_image_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceWallpaperImageProto::release_device_wallpaper_image() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceWallpaperImageProto.device_wallpaper_image)
  if (!_internal_has_device_wallpaper_image()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return device_wallpaper_image_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceWallpaperImageProto::set_allocated_device_wallpaper_image(std::string* device_wallpaper_image) {
  if (device_wallpaper_image != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  device_wallpaper_image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_wallpaper_image,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceWallpaperImageProto.device_wallpaper_image)
}
inline std::string* DeviceWallpaperImageProto::unsafe_arena_release_device_wallpaper_image() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.DeviceWallpaperImageProto.device_wallpaper_image)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return device_wallpaper_image_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceWallpaperImageProto::unsafe_arena_set_allocated_device_wallpaper_image(
    std::string* device_wallpaper_image) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_wallpaper_image != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  device_wallpaper_image_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_wallpaper_image, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.DeviceWallpaperImageProto.device_wallpaper_image)
}

// -------------------------------------------------------------------

// DeviceEcryptfsMigrationStrategyProto

// optional .enterprise_management.DeviceEcryptfsMigrationStrategyProto.MigrationStrategy migration_strategy = 1;
inline bool DeviceEcryptfsMigrationStrategyProto::_internal_has_migration_strategy() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceEcryptfsMigrationStrategyProto::has_migration_strategy() const {
  return _internal_has_migration_strategy();
}
inline void DeviceEcryptfsMigrationStrategyProto::clear_migration_strategy() {
  migration_strategy_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::enterprise_management::DeviceEcryptfsMigrationStrategyProto_MigrationStrategy DeviceEcryptfsMigrationStrategyProto::_internal_migration_strategy() const {
  return static_cast< ::enterprise_management::DeviceEcryptfsMigrationStrategyProto_MigrationStrategy >(migration_strategy_);
}
inline ::enterprise_management::DeviceEcryptfsMigrationStrategyProto_MigrationStrategy DeviceEcryptfsMigrationStrategyProto::migration_strategy() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceEcryptfsMigrationStrategyProto.migration_strategy)
  return _internal_migration_strategy();
}
inline void DeviceEcryptfsMigrationStrategyProto::_internal_set_migration_strategy(::enterprise_management::DeviceEcryptfsMigrationStrategyProto_MigrationStrategy value) {
  assert(::enterprise_management::DeviceEcryptfsMigrationStrategyProto_MigrationStrategy_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  migration_strategy_ = value;
}
inline void DeviceEcryptfsMigrationStrategyProto::set_migration_strategy(::enterprise_management::DeviceEcryptfsMigrationStrategyProto_MigrationStrategy value) {
  _internal_set_migration_strategy(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceEcryptfsMigrationStrategyProto.migration_strategy)
}

// -------------------------------------------------------------------

// DeviceSecondFactorAuthenticationProto

// optional .enterprise_management.DeviceSecondFactorAuthenticationProto.U2fMode mode = 1;
inline bool DeviceSecondFactorAuthenticationProto::_internal_has_mode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceSecondFactorAuthenticationProto::has_mode() const {
  return _internal_has_mode();
}
inline void DeviceSecondFactorAuthenticationProto::clear_mode() {
  mode_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::enterprise_management::DeviceSecondFactorAuthenticationProto_U2fMode DeviceSecondFactorAuthenticationProto::_internal_mode() const {
  return static_cast< ::enterprise_management::DeviceSecondFactorAuthenticationProto_U2fMode >(mode_);
}
inline ::enterprise_management::DeviceSecondFactorAuthenticationProto_U2fMode DeviceSecondFactorAuthenticationProto::mode() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceSecondFactorAuthenticationProto.mode)
  return _internal_mode();
}
inline void DeviceSecondFactorAuthenticationProto::_internal_set_mode(::enterprise_management::DeviceSecondFactorAuthenticationProto_U2fMode value) {
  assert(::enterprise_management::DeviceSecondFactorAuthenticationProto_U2fMode_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  mode_ = value;
}
inline void DeviceSecondFactorAuthenticationProto::set_mode(::enterprise_management::DeviceSecondFactorAuthenticationProto_U2fMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceSecondFactorAuthenticationProto.mode)
}

// -------------------------------------------------------------------

// CastReceiverNameProto

// optional string name = 1;
inline bool CastReceiverNameProto::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CastReceiverNameProto::has_name() const {
  return _internal_has_name();
}
inline void CastReceiverNameProto::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CastReceiverNameProto::name() const {
  // @@protoc_insertion_point(field_get:enterprise_management.CastReceiverNameProto.name)
  return _internal_name();
}
inline void CastReceiverNameProto::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:enterprise_management.CastReceiverNameProto.name)
}
inline std::string* CastReceiverNameProto::mutable_name() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.CastReceiverNameProto.name)
  return _internal_mutable_name();
}
inline const std::string& CastReceiverNameProto::_internal_name() const {
  return name_.Get();
}
inline void CastReceiverNameProto::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CastReceiverNameProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.CastReceiverNameProto.name)
}
inline void CastReceiverNameProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.CastReceiverNameProto.name)
}
inline void CastReceiverNameProto::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.CastReceiverNameProto.name)
}
inline std::string* CastReceiverNameProto::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CastReceiverNameProto::release_name() {
  // @@protoc_insertion_point(field_release:enterprise_management.CastReceiverNameProto.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CastReceiverNameProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.CastReceiverNameProto.name)
}
inline std::string* CastReceiverNameProto::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.CastReceiverNameProto.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CastReceiverNameProto::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.CastReceiverNameProto.name)
}

// -------------------------------------------------------------------

// WeeklyTimeProto

// optional .enterprise_management.WeeklyTimeProto.DayOfWeek day_of_week = 1;
inline bool WeeklyTimeProto::_internal_has_day_of_week() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WeeklyTimeProto::has_day_of_week() const {
  return _internal_has_day_of_week();
}
inline void WeeklyTimeProto::clear_day_of_week() {
  day_of_week_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::enterprise_management::WeeklyTimeProto_DayOfWeek WeeklyTimeProto::_internal_day_of_week() const {
  return static_cast< ::enterprise_management::WeeklyTimeProto_DayOfWeek >(day_of_week_);
}
inline ::enterprise_management::WeeklyTimeProto_DayOfWeek WeeklyTimeProto::day_of_week() const {
  // @@protoc_insertion_point(field_get:enterprise_management.WeeklyTimeProto.day_of_week)
  return _internal_day_of_week();
}
inline void WeeklyTimeProto::_internal_set_day_of_week(::enterprise_management::WeeklyTimeProto_DayOfWeek value) {
  assert(::enterprise_management::WeeklyTimeProto_DayOfWeek_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  day_of_week_ = value;
}
inline void WeeklyTimeProto::set_day_of_week(::enterprise_management::WeeklyTimeProto_DayOfWeek value) {
  _internal_set_day_of_week(value);
  // @@protoc_insertion_point(field_set:enterprise_management.WeeklyTimeProto.day_of_week)
}

// optional int32 time = 2;
inline bool WeeklyTimeProto::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WeeklyTimeProto::has_time() const {
  return _internal_has_time();
}
inline void WeeklyTimeProto::clear_time() {
  time_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeeklyTimeProto::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WeeklyTimeProto::time() const {
  // @@protoc_insertion_point(field_get:enterprise_management.WeeklyTimeProto.time)
  return _internal_time();
}
inline void WeeklyTimeProto::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  time_ = value;
}
inline void WeeklyTimeProto::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:enterprise_management.WeeklyTimeProto.time)
}

// -------------------------------------------------------------------

// WeeklyTimeIntervalProto

// optional .enterprise_management.WeeklyTimeProto start = 1;
inline bool WeeklyTimeIntervalProto::_internal_has_start() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || start_ != nullptr);
  return value;
}
inline bool WeeklyTimeIntervalProto::has_start() const {
  return _internal_has_start();
}
inline void WeeklyTimeIntervalProto::clear_start() {
  if (start_ != nullptr) start_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::enterprise_management::WeeklyTimeProto& WeeklyTimeIntervalProto::_internal_start() const {
  const ::enterprise_management::WeeklyTimeProto* p = start_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::WeeklyTimeProto*>(
      &::enterprise_management::_WeeklyTimeProto_default_instance_);
}
inline const ::enterprise_management::WeeklyTimeProto& WeeklyTimeIntervalProto::start() const {
  // @@protoc_insertion_point(field_get:enterprise_management.WeeklyTimeIntervalProto.start)
  return _internal_start();
}
inline void WeeklyTimeIntervalProto::unsafe_arena_set_allocated_start(
    ::enterprise_management::WeeklyTimeProto* start) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_);
  }
  start_ = start;
  if (start) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.WeeklyTimeIntervalProto.start)
}
inline ::enterprise_management::WeeklyTimeProto* WeeklyTimeIntervalProto::release_start() {
  auto temp = unsafe_arena_release_start();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::WeeklyTimeProto* WeeklyTimeIntervalProto::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_release:enterprise_management.WeeklyTimeIntervalProto.start)
  _has_bits_[0] &= ~0x00000001u;
  ::enterprise_management::WeeklyTimeProto* temp = start_;
  start_ = nullptr;
  return temp;
}
inline ::enterprise_management::WeeklyTimeProto* WeeklyTimeIntervalProto::_internal_mutable_start() {
  _has_bits_[0] |= 0x00000001u;
  if (start_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::WeeklyTimeProto>(GetArena());
    start_ = p;
  }
  return start_;
}
inline ::enterprise_management::WeeklyTimeProto* WeeklyTimeIntervalProto::mutable_start() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.WeeklyTimeIntervalProto.start)
  return _internal_mutable_start();
}
inline void WeeklyTimeIntervalProto::set_allocated_start(::enterprise_management::WeeklyTimeProto* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete start_;
  }
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(start);
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.WeeklyTimeIntervalProto.start)
}

// optional .enterprise_management.WeeklyTimeProto end = 2;
inline bool WeeklyTimeIntervalProto::_internal_has_end() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || end_ != nullptr);
  return value;
}
inline bool WeeklyTimeIntervalProto::has_end() const {
  return _internal_has_end();
}
inline void WeeklyTimeIntervalProto::clear_end() {
  if (end_ != nullptr) end_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::enterprise_management::WeeklyTimeProto& WeeklyTimeIntervalProto::_internal_end() const {
  const ::enterprise_management::WeeklyTimeProto* p = end_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::WeeklyTimeProto*>(
      &::enterprise_management::_WeeklyTimeProto_default_instance_);
}
inline const ::enterprise_management::WeeklyTimeProto& WeeklyTimeIntervalProto::end() const {
  // @@protoc_insertion_point(field_get:enterprise_management.WeeklyTimeIntervalProto.end)
  return _internal_end();
}
inline void WeeklyTimeIntervalProto::unsafe_arena_set_allocated_end(
    ::enterprise_management::WeeklyTimeProto* end) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_);
  }
  end_ = end;
  if (end) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.WeeklyTimeIntervalProto.end)
}
inline ::enterprise_management::WeeklyTimeProto* WeeklyTimeIntervalProto::release_end() {
  auto temp = unsafe_arena_release_end();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::WeeklyTimeProto* WeeklyTimeIntervalProto::unsafe_arena_release_end() {
  // @@protoc_insertion_point(field_release:enterprise_management.WeeklyTimeIntervalProto.end)
  _has_bits_[0] &= ~0x00000002u;
  ::enterprise_management::WeeklyTimeProto* temp = end_;
  end_ = nullptr;
  return temp;
}
inline ::enterprise_management::WeeklyTimeProto* WeeklyTimeIntervalProto::_internal_mutable_end() {
  _has_bits_[0] |= 0x00000002u;
  if (end_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::WeeklyTimeProto>(GetArena());
    end_ = p;
  }
  return end_;
}
inline ::enterprise_management::WeeklyTimeProto* WeeklyTimeIntervalProto::mutable_end() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.WeeklyTimeIntervalProto.end)
  return _internal_mutable_end();
}
inline void WeeklyTimeIntervalProto::set_allocated_end(::enterprise_management::WeeklyTimeProto* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete end_;
  }
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(end);
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  end_ = end;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.WeeklyTimeIntervalProto.end)
}

// -------------------------------------------------------------------

// DeviceOffHoursProto

// repeated .enterprise_management.WeeklyTimeIntervalProto intervals = 1;
inline int DeviceOffHoursProto::_internal_intervals_size() const {
  return intervals_.size();
}
inline int DeviceOffHoursProto::intervals_size() const {
  return _internal_intervals_size();
}
inline void DeviceOffHoursProto::clear_intervals() {
  intervals_.Clear();
}
inline ::enterprise_management::WeeklyTimeIntervalProto* DeviceOffHoursProto::mutable_intervals(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceOffHoursProto.intervals)
  return intervals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::enterprise_management::WeeklyTimeIntervalProto >*
DeviceOffHoursProto::mutable_intervals() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceOffHoursProto.intervals)
  return &intervals_;
}
inline const ::enterprise_management::WeeklyTimeIntervalProto& DeviceOffHoursProto::_internal_intervals(int index) const {
  return intervals_.Get(index);
}
inline const ::enterprise_management::WeeklyTimeIntervalProto& DeviceOffHoursProto::intervals(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceOffHoursProto.intervals)
  return _internal_intervals(index);
}
inline ::enterprise_management::WeeklyTimeIntervalProto* DeviceOffHoursProto::_internal_add_intervals() {
  return intervals_.Add();
}
inline ::enterprise_management::WeeklyTimeIntervalProto* DeviceOffHoursProto::add_intervals() {
  // @@protoc_insertion_point(field_add:enterprise_management.DeviceOffHoursProto.intervals)
  return _internal_add_intervals();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::enterprise_management::WeeklyTimeIntervalProto >&
DeviceOffHoursProto::intervals() const {
  // @@protoc_insertion_point(field_list:enterprise_management.DeviceOffHoursProto.intervals)
  return intervals_;
}

// optional string timezone = 2;
inline bool DeviceOffHoursProto::_internal_has_timezone() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceOffHoursProto::has_timezone() const {
  return _internal_has_timezone();
}
inline void DeviceOffHoursProto::clear_timezone() {
  timezone_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeviceOffHoursProto::timezone() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceOffHoursProto.timezone)
  return _internal_timezone();
}
inline void DeviceOffHoursProto::set_timezone(const std::string& value) {
  _internal_set_timezone(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceOffHoursProto.timezone)
}
inline std::string* DeviceOffHoursProto::mutable_timezone() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceOffHoursProto.timezone)
  return _internal_mutable_timezone();
}
inline const std::string& DeviceOffHoursProto::_internal_timezone() const {
  return timezone_.Get();
}
inline void DeviceOffHoursProto::_internal_set_timezone(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  timezone_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceOffHoursProto::set_timezone(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  timezone_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceOffHoursProto.timezone)
}
inline void DeviceOffHoursProto::set_timezone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  timezone_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceOffHoursProto.timezone)
}
inline void DeviceOffHoursProto::set_timezone(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  timezone_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceOffHoursProto.timezone)
}
inline std::string* DeviceOffHoursProto::_internal_mutable_timezone() {
  _has_bits_[0] |= 0x00000001u;
  return timezone_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceOffHoursProto::release_timezone() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceOffHoursProto.timezone)
  if (!_internal_has_timezone()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return timezone_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceOffHoursProto::set_allocated_timezone(std::string* timezone) {
  if (timezone != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  timezone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timezone,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceOffHoursProto.timezone)
}
inline std::string* DeviceOffHoursProto::unsafe_arena_release_timezone() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.DeviceOffHoursProto.timezone)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return timezone_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceOffHoursProto::unsafe_arena_set_allocated_timezone(
    std::string* timezone) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (timezone != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  timezone_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      timezone, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.DeviceOffHoursProto.timezone)
}

// repeated int32 ignored_policy_proto_tags = 3;
inline int DeviceOffHoursProto::_internal_ignored_policy_proto_tags_size() const {
  return ignored_policy_proto_tags_.size();
}
inline int DeviceOffHoursProto::ignored_policy_proto_tags_size() const {
  return _internal_ignored_policy_proto_tags_size();
}
inline void DeviceOffHoursProto::clear_ignored_policy_proto_tags() {
  ignored_policy_proto_tags_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceOffHoursProto::_internal_ignored_policy_proto_tags(int index) const {
  return ignored_policy_proto_tags_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceOffHoursProto::ignored_policy_proto_tags(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceOffHoursProto.ignored_policy_proto_tags)
  return _internal_ignored_policy_proto_tags(index);
}
inline void DeviceOffHoursProto::set_ignored_policy_proto_tags(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  ignored_policy_proto_tags_.Set(index, value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceOffHoursProto.ignored_policy_proto_tags)
}
inline void DeviceOffHoursProto::_internal_add_ignored_policy_proto_tags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  ignored_policy_proto_tags_.Add(value);
}
inline void DeviceOffHoursProto::add_ignored_policy_proto_tags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_ignored_policy_proto_tags(value);
  // @@protoc_insertion_point(field_add:enterprise_management.DeviceOffHoursProto.ignored_policy_proto_tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
DeviceOffHoursProto::_internal_ignored_policy_proto_tags() const {
  return ignored_policy_proto_tags_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
DeviceOffHoursProto::ignored_policy_proto_tags() const {
  // @@protoc_insertion_point(field_list:enterprise_management.DeviceOffHoursProto.ignored_policy_proto_tags)
  return _internal_ignored_policy_proto_tags();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
DeviceOffHoursProto::_internal_mutable_ignored_policy_proto_tags() {
  return &ignored_policy_proto_tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
DeviceOffHoursProto::mutable_ignored_policy_proto_tags() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceOffHoursProto.ignored_policy_proto_tags)
  return _internal_mutable_ignored_policy_proto_tags();
}

// -------------------------------------------------------------------

// DeviceNativePrintersProto

// optional string external_policy = 1;
inline bool DeviceNativePrintersProto::_internal_has_external_policy() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceNativePrintersProto::has_external_policy() const {
  return _internal_has_external_policy();
}
inline void DeviceNativePrintersProto::clear_external_policy() {
  external_policy_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeviceNativePrintersProto::external_policy() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceNativePrintersProto.external_policy)
  return _internal_external_policy();
}
inline void DeviceNativePrintersProto::set_external_policy(const std::string& value) {
  _internal_set_external_policy(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceNativePrintersProto.external_policy)
}
inline std::string* DeviceNativePrintersProto::mutable_external_policy() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceNativePrintersProto.external_policy)
  return _internal_mutable_external_policy();
}
inline const std::string& DeviceNativePrintersProto::_internal_external_policy() const {
  return external_policy_.Get();
}
inline void DeviceNativePrintersProto::_internal_set_external_policy(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  external_policy_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceNativePrintersProto::set_external_policy(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  external_policy_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceNativePrintersProto.external_policy)
}
inline void DeviceNativePrintersProto::set_external_policy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  external_policy_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceNativePrintersProto.external_policy)
}
inline void DeviceNativePrintersProto::set_external_policy(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  external_policy_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceNativePrintersProto.external_policy)
}
inline std::string* DeviceNativePrintersProto::_internal_mutable_external_policy() {
  _has_bits_[0] |= 0x00000001u;
  return external_policy_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceNativePrintersProto::release_external_policy() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceNativePrintersProto.external_policy)
  if (!_internal_has_external_policy()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return external_policy_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceNativePrintersProto::set_allocated_external_policy(std::string* external_policy) {
  if (external_policy != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  external_policy_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), external_policy,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceNativePrintersProto.external_policy)
}
inline std::string* DeviceNativePrintersProto::unsafe_arena_release_external_policy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.DeviceNativePrintersProto.external_policy)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return external_policy_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceNativePrintersProto::unsafe_arena_set_allocated_external_policy(
    std::string* external_policy) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (external_policy != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  external_policy_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      external_policy, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.DeviceNativePrintersProto.external_policy)
}

// -------------------------------------------------------------------

// DeviceNativePrintersAccessModeProto

// optional .enterprise_management.DeviceNativePrintersAccessModeProto.AccessMode access_mode = 1;
inline bool DeviceNativePrintersAccessModeProto::_internal_has_access_mode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceNativePrintersAccessModeProto::has_access_mode() const {
  return _internal_has_access_mode();
}
inline void DeviceNativePrintersAccessModeProto::clear_access_mode() {
  access_mode_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::enterprise_management::DeviceNativePrintersAccessModeProto_AccessMode DeviceNativePrintersAccessModeProto::_internal_access_mode() const {
  return static_cast< ::enterprise_management::DeviceNativePrintersAccessModeProto_AccessMode >(access_mode_);
}
inline ::enterprise_management::DeviceNativePrintersAccessModeProto_AccessMode DeviceNativePrintersAccessModeProto::access_mode() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceNativePrintersAccessModeProto.access_mode)
  return _internal_access_mode();
}
inline void DeviceNativePrintersAccessModeProto::_internal_set_access_mode(::enterprise_management::DeviceNativePrintersAccessModeProto_AccessMode value) {
  assert(::enterprise_management::DeviceNativePrintersAccessModeProto_AccessMode_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  access_mode_ = value;
}
inline void DeviceNativePrintersAccessModeProto::set_access_mode(::enterprise_management::DeviceNativePrintersAccessModeProto_AccessMode value) {
  _internal_set_access_mode(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceNativePrintersAccessModeProto.access_mode)
}

// -------------------------------------------------------------------

// DeviceNativePrintersBlacklistProto

// repeated string blacklist = 1;
inline int DeviceNativePrintersBlacklistProto::_internal_blacklist_size() const {
  return blacklist_.size();
}
inline int DeviceNativePrintersBlacklistProto::blacklist_size() const {
  return _internal_blacklist_size();
}
inline void DeviceNativePrintersBlacklistProto::clear_blacklist() {
  blacklist_.Clear();
}
inline std::string* DeviceNativePrintersBlacklistProto::add_blacklist() {
  // @@protoc_insertion_point(field_add_mutable:enterprise_management.DeviceNativePrintersBlacklistProto.blacklist)
  return _internal_add_blacklist();
}
inline const std::string& DeviceNativePrintersBlacklistProto::_internal_blacklist(int index) const {
  return blacklist_.Get(index);
}
inline const std::string& DeviceNativePrintersBlacklistProto::blacklist(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceNativePrintersBlacklistProto.blacklist)
  return _internal_blacklist(index);
}
inline std::string* DeviceNativePrintersBlacklistProto::mutable_blacklist(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceNativePrintersBlacklistProto.blacklist)
  return blacklist_.Mutable(index);
}
inline void DeviceNativePrintersBlacklistProto::set_blacklist(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceNativePrintersBlacklistProto.blacklist)
  blacklist_.Mutable(index)->assign(value);
}
inline void DeviceNativePrintersBlacklistProto::set_blacklist(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceNativePrintersBlacklistProto.blacklist)
  blacklist_.Mutable(index)->assign(std::move(value));
}
inline void DeviceNativePrintersBlacklistProto::set_blacklist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  blacklist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceNativePrintersBlacklistProto.blacklist)
}
inline void DeviceNativePrintersBlacklistProto::set_blacklist(int index, const char* value, size_t size) {
  blacklist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceNativePrintersBlacklistProto.blacklist)
}
inline std::string* DeviceNativePrintersBlacklistProto::_internal_add_blacklist() {
  return blacklist_.Add();
}
inline void DeviceNativePrintersBlacklistProto::add_blacklist(const std::string& value) {
  blacklist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:enterprise_management.DeviceNativePrintersBlacklistProto.blacklist)
}
inline void DeviceNativePrintersBlacklistProto::add_blacklist(std::string&& value) {
  blacklist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:enterprise_management.DeviceNativePrintersBlacklistProto.blacklist)
}
inline void DeviceNativePrintersBlacklistProto::add_blacklist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  blacklist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:enterprise_management.DeviceNativePrintersBlacklistProto.blacklist)
}
inline void DeviceNativePrintersBlacklistProto::add_blacklist(const char* value, size_t size) {
  blacklist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:enterprise_management.DeviceNativePrintersBlacklistProto.blacklist)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeviceNativePrintersBlacklistProto::blacklist() const {
  // @@protoc_insertion_point(field_list:enterprise_management.DeviceNativePrintersBlacklistProto.blacklist)
  return blacklist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeviceNativePrintersBlacklistProto::mutable_blacklist() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceNativePrintersBlacklistProto.blacklist)
  return &blacklist_;
}

// -------------------------------------------------------------------

// DeviceNativePrintersWhitelistProto

// repeated string whitelist = 1;
inline int DeviceNativePrintersWhitelistProto::_internal_whitelist_size() const {
  return whitelist_.size();
}
inline int DeviceNativePrintersWhitelistProto::whitelist_size() const {
  return _internal_whitelist_size();
}
inline void DeviceNativePrintersWhitelistProto::clear_whitelist() {
  whitelist_.Clear();
}
inline std::string* DeviceNativePrintersWhitelistProto::add_whitelist() {
  // @@protoc_insertion_point(field_add_mutable:enterprise_management.DeviceNativePrintersWhitelistProto.whitelist)
  return _internal_add_whitelist();
}
inline const std::string& DeviceNativePrintersWhitelistProto::_internal_whitelist(int index) const {
  return whitelist_.Get(index);
}
inline const std::string& DeviceNativePrintersWhitelistProto::whitelist(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceNativePrintersWhitelistProto.whitelist)
  return _internal_whitelist(index);
}
inline std::string* DeviceNativePrintersWhitelistProto::mutable_whitelist(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceNativePrintersWhitelistProto.whitelist)
  return whitelist_.Mutable(index);
}
inline void DeviceNativePrintersWhitelistProto::set_whitelist(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceNativePrintersWhitelistProto.whitelist)
  whitelist_.Mutable(index)->assign(value);
}
inline void DeviceNativePrintersWhitelistProto::set_whitelist(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceNativePrintersWhitelistProto.whitelist)
  whitelist_.Mutable(index)->assign(std::move(value));
}
inline void DeviceNativePrintersWhitelistProto::set_whitelist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  whitelist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceNativePrintersWhitelistProto.whitelist)
}
inline void DeviceNativePrintersWhitelistProto::set_whitelist(int index, const char* value, size_t size) {
  whitelist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceNativePrintersWhitelistProto.whitelist)
}
inline std::string* DeviceNativePrintersWhitelistProto::_internal_add_whitelist() {
  return whitelist_.Add();
}
inline void DeviceNativePrintersWhitelistProto::add_whitelist(const std::string& value) {
  whitelist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:enterprise_management.DeviceNativePrintersWhitelistProto.whitelist)
}
inline void DeviceNativePrintersWhitelistProto::add_whitelist(std::string&& value) {
  whitelist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:enterprise_management.DeviceNativePrintersWhitelistProto.whitelist)
}
inline void DeviceNativePrintersWhitelistProto::add_whitelist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  whitelist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:enterprise_management.DeviceNativePrintersWhitelistProto.whitelist)
}
inline void DeviceNativePrintersWhitelistProto::add_whitelist(const char* value, size_t size) {
  whitelist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:enterprise_management.DeviceNativePrintersWhitelistProto.whitelist)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeviceNativePrintersWhitelistProto::whitelist() const {
  // @@protoc_insertion_point(field_list:enterprise_management.DeviceNativePrintersWhitelistProto.whitelist)
  return whitelist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeviceNativePrintersWhitelistProto::mutable_whitelist() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceNativePrintersWhitelistProto.whitelist)
  return &whitelist_;
}

// -------------------------------------------------------------------

// TPMFirmwareUpdateSettingsProto

// optional bool allow_user_initiated_powerwash = 1;
inline bool TPMFirmwareUpdateSettingsProto::_internal_has_allow_user_initiated_powerwash() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TPMFirmwareUpdateSettingsProto::has_allow_user_initiated_powerwash() const {
  return _internal_has_allow_user_initiated_powerwash();
}
inline void TPMFirmwareUpdateSettingsProto::clear_allow_user_initiated_powerwash() {
  allow_user_initiated_powerwash_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool TPMFirmwareUpdateSettingsProto::_internal_allow_user_initiated_powerwash() const {
  return allow_user_initiated_powerwash_;
}
inline bool TPMFirmwareUpdateSettingsProto::allow_user_initiated_powerwash() const {
  // @@protoc_insertion_point(field_get:enterprise_management.TPMFirmwareUpdateSettingsProto.allow_user_initiated_powerwash)
  return _internal_allow_user_initiated_powerwash();
}
inline void TPMFirmwareUpdateSettingsProto::_internal_set_allow_user_initiated_powerwash(bool value) {
  _has_bits_[0] |= 0x00000001u;
  allow_user_initiated_powerwash_ = value;
}
inline void TPMFirmwareUpdateSettingsProto::set_allow_user_initiated_powerwash(bool value) {
  _internal_set_allow_user_initiated_powerwash(value);
  // @@protoc_insertion_point(field_set:enterprise_management.TPMFirmwareUpdateSettingsProto.allow_user_initiated_powerwash)
}

// optional bool allow_user_initiated_preserve_device_state = 2;
inline bool TPMFirmwareUpdateSettingsProto::_internal_has_allow_user_initiated_preserve_device_state() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TPMFirmwareUpdateSettingsProto::has_allow_user_initiated_preserve_device_state() const {
  return _internal_has_allow_user_initiated_preserve_device_state();
}
inline void TPMFirmwareUpdateSettingsProto::clear_allow_user_initiated_preserve_device_state() {
  allow_user_initiated_preserve_device_state_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool TPMFirmwareUpdateSettingsProto::_internal_allow_user_initiated_preserve_device_state() const {
  return allow_user_initiated_preserve_device_state_;
}
inline bool TPMFirmwareUpdateSettingsProto::allow_user_initiated_preserve_device_state() const {
  // @@protoc_insertion_point(field_get:enterprise_management.TPMFirmwareUpdateSettingsProto.allow_user_initiated_preserve_device_state)
  return _internal_allow_user_initiated_preserve_device_state();
}
inline void TPMFirmwareUpdateSettingsProto::_internal_set_allow_user_initiated_preserve_device_state(bool value) {
  _has_bits_[0] |= 0x00000002u;
  allow_user_initiated_preserve_device_state_ = value;
}
inline void TPMFirmwareUpdateSettingsProto::set_allow_user_initiated_preserve_device_state(bool value) {
  _internal_set_allow_user_initiated_preserve_device_state(value);
  // @@protoc_insertion_point(field_set:enterprise_management.TPMFirmwareUpdateSettingsProto.allow_user_initiated_preserve_device_state)
}

// optional .enterprise_management.TPMFirmwareUpdateSettingsProto.AutoUpdateMode auto_update_mode = 3 [default = NEVER];
inline bool TPMFirmwareUpdateSettingsProto::_internal_has_auto_update_mode() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TPMFirmwareUpdateSettingsProto::has_auto_update_mode() const {
  return _internal_has_auto_update_mode();
}
inline void TPMFirmwareUpdateSettingsProto::clear_auto_update_mode() {
  auto_update_mode_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::enterprise_management::TPMFirmwareUpdateSettingsProto_AutoUpdateMode TPMFirmwareUpdateSettingsProto::_internal_auto_update_mode() const {
  return static_cast< ::enterprise_management::TPMFirmwareUpdateSettingsProto_AutoUpdateMode >(auto_update_mode_);
}
inline ::enterprise_management::TPMFirmwareUpdateSettingsProto_AutoUpdateMode TPMFirmwareUpdateSettingsProto::auto_update_mode() const {
  // @@protoc_insertion_point(field_get:enterprise_management.TPMFirmwareUpdateSettingsProto.auto_update_mode)
  return _internal_auto_update_mode();
}
inline void TPMFirmwareUpdateSettingsProto::_internal_set_auto_update_mode(::enterprise_management::TPMFirmwareUpdateSettingsProto_AutoUpdateMode value) {
  assert(::enterprise_management::TPMFirmwareUpdateSettingsProto_AutoUpdateMode_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  auto_update_mode_ = value;
}
inline void TPMFirmwareUpdateSettingsProto::set_auto_update_mode(::enterprise_management::TPMFirmwareUpdateSettingsProto_AutoUpdateMode value) {
  _internal_set_auto_update_mode(value);
  // @@protoc_insertion_point(field_set:enterprise_management.TPMFirmwareUpdateSettingsProto.auto_update_mode)
}

// -------------------------------------------------------------------

// OBSOLETE_MinimumRequiredVersionProto

// optional string OBSOLETE_chrome_version = 1 [deprecated = true];
inline bool OBSOLETE_MinimumRequiredVersionProto::_internal_has_obsolete_chrome_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OBSOLETE_MinimumRequiredVersionProto::has_obsolete_chrome_version() const {
  return _internal_has_obsolete_chrome_version();
}
inline void OBSOLETE_MinimumRequiredVersionProto::clear_obsolete_chrome_version() {
  obsolete_chrome_version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OBSOLETE_MinimumRequiredVersionProto::obsolete_chrome_version() const {
  // @@protoc_insertion_point(field_get:enterprise_management.OBSOLETE_MinimumRequiredVersionProto.OBSOLETE_chrome_version)
  return _internal_obsolete_chrome_version();
}
inline void OBSOLETE_MinimumRequiredVersionProto::set_obsolete_chrome_version(const std::string& value) {
  _internal_set_obsolete_chrome_version(value);
  // @@protoc_insertion_point(field_set:enterprise_management.OBSOLETE_MinimumRequiredVersionProto.OBSOLETE_chrome_version)
}
inline std::string* OBSOLETE_MinimumRequiredVersionProto::mutable_obsolete_chrome_version() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.OBSOLETE_MinimumRequiredVersionProto.OBSOLETE_chrome_version)
  return _internal_mutable_obsolete_chrome_version();
}
inline const std::string& OBSOLETE_MinimumRequiredVersionProto::_internal_obsolete_chrome_version() const {
  return obsolete_chrome_version_.Get();
}
inline void OBSOLETE_MinimumRequiredVersionProto::_internal_set_obsolete_chrome_version(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  obsolete_chrome_version_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OBSOLETE_MinimumRequiredVersionProto::set_obsolete_chrome_version(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  obsolete_chrome_version_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.OBSOLETE_MinimumRequiredVersionProto.OBSOLETE_chrome_version)
}
inline void OBSOLETE_MinimumRequiredVersionProto::set_obsolete_chrome_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  obsolete_chrome_version_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.OBSOLETE_MinimumRequiredVersionProto.OBSOLETE_chrome_version)
}
inline void OBSOLETE_MinimumRequiredVersionProto::set_obsolete_chrome_version(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  obsolete_chrome_version_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.OBSOLETE_MinimumRequiredVersionProto.OBSOLETE_chrome_version)
}
inline std::string* OBSOLETE_MinimumRequiredVersionProto::_internal_mutable_obsolete_chrome_version() {
  _has_bits_[0] |= 0x00000001u;
  return obsolete_chrome_version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OBSOLETE_MinimumRequiredVersionProto::release_obsolete_chrome_version() {
  // @@protoc_insertion_point(field_release:enterprise_management.OBSOLETE_MinimumRequiredVersionProto.OBSOLETE_chrome_version)
  if (!_internal_has_obsolete_chrome_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return obsolete_chrome_version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OBSOLETE_MinimumRequiredVersionProto::set_allocated_obsolete_chrome_version(std::string* obsolete_chrome_version) {
  if (obsolete_chrome_version != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  obsolete_chrome_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), obsolete_chrome_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.OBSOLETE_MinimumRequiredVersionProto.OBSOLETE_chrome_version)
}
inline std::string* OBSOLETE_MinimumRequiredVersionProto::unsafe_arena_release_obsolete_chrome_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.OBSOLETE_MinimumRequiredVersionProto.OBSOLETE_chrome_version)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return obsolete_chrome_version_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OBSOLETE_MinimumRequiredVersionProto::unsafe_arena_set_allocated_obsolete_chrome_version(
    std::string* obsolete_chrome_version) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (obsolete_chrome_version != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  obsolete_chrome_version_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      obsolete_chrome_version, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.OBSOLETE_MinimumRequiredVersionProto.OBSOLETE_chrome_version)
}

// -------------------------------------------------------------------

// DeviceLoginScreenAutoSelectCertificateForUrls

// repeated string login_screen_auto_select_certificate_rules = 1;
inline int DeviceLoginScreenAutoSelectCertificateForUrls::_internal_login_screen_auto_select_certificate_rules_size() const {
  return login_screen_auto_select_certificate_rules_.size();
}
inline int DeviceLoginScreenAutoSelectCertificateForUrls::login_screen_auto_select_certificate_rules_size() const {
  return _internal_login_screen_auto_select_certificate_rules_size();
}
inline void DeviceLoginScreenAutoSelectCertificateForUrls::clear_login_screen_auto_select_certificate_rules() {
  login_screen_auto_select_certificate_rules_.Clear();
}
inline std::string* DeviceLoginScreenAutoSelectCertificateForUrls::add_login_screen_auto_select_certificate_rules() {
  // @@protoc_insertion_point(field_add_mutable:enterprise_management.DeviceLoginScreenAutoSelectCertificateForUrls.login_screen_auto_select_certificate_rules)
  return _internal_add_login_screen_auto_select_certificate_rules();
}
inline const std::string& DeviceLoginScreenAutoSelectCertificateForUrls::_internal_login_screen_auto_select_certificate_rules(int index) const {
  return login_screen_auto_select_certificate_rules_.Get(index);
}
inline const std::string& DeviceLoginScreenAutoSelectCertificateForUrls::login_screen_auto_select_certificate_rules(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceLoginScreenAutoSelectCertificateForUrls.login_screen_auto_select_certificate_rules)
  return _internal_login_screen_auto_select_certificate_rules(index);
}
inline std::string* DeviceLoginScreenAutoSelectCertificateForUrls::mutable_login_screen_auto_select_certificate_rules(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceLoginScreenAutoSelectCertificateForUrls.login_screen_auto_select_certificate_rules)
  return login_screen_auto_select_certificate_rules_.Mutable(index);
}
inline void DeviceLoginScreenAutoSelectCertificateForUrls::set_login_screen_auto_select_certificate_rules(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceLoginScreenAutoSelectCertificateForUrls.login_screen_auto_select_certificate_rules)
  login_screen_auto_select_certificate_rules_.Mutable(index)->assign(value);
}
inline void DeviceLoginScreenAutoSelectCertificateForUrls::set_login_screen_auto_select_certificate_rules(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceLoginScreenAutoSelectCertificateForUrls.login_screen_auto_select_certificate_rules)
  login_screen_auto_select_certificate_rules_.Mutable(index)->assign(std::move(value));
}
inline void DeviceLoginScreenAutoSelectCertificateForUrls::set_login_screen_auto_select_certificate_rules(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  login_screen_auto_select_certificate_rules_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceLoginScreenAutoSelectCertificateForUrls.login_screen_auto_select_certificate_rules)
}
inline void DeviceLoginScreenAutoSelectCertificateForUrls::set_login_screen_auto_select_certificate_rules(int index, const char* value, size_t size) {
  login_screen_auto_select_certificate_rules_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceLoginScreenAutoSelectCertificateForUrls.login_screen_auto_select_certificate_rules)
}
inline std::string* DeviceLoginScreenAutoSelectCertificateForUrls::_internal_add_login_screen_auto_select_certificate_rules() {
  return login_screen_auto_select_certificate_rules_.Add();
}
inline void DeviceLoginScreenAutoSelectCertificateForUrls::add_login_screen_auto_select_certificate_rules(const std::string& value) {
  login_screen_auto_select_certificate_rules_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:enterprise_management.DeviceLoginScreenAutoSelectCertificateForUrls.login_screen_auto_select_certificate_rules)
}
inline void DeviceLoginScreenAutoSelectCertificateForUrls::add_login_screen_auto_select_certificate_rules(std::string&& value) {
  login_screen_auto_select_certificate_rules_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:enterprise_management.DeviceLoginScreenAutoSelectCertificateForUrls.login_screen_auto_select_certificate_rules)
}
inline void DeviceLoginScreenAutoSelectCertificateForUrls::add_login_screen_auto_select_certificate_rules(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  login_screen_auto_select_certificate_rules_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:enterprise_management.DeviceLoginScreenAutoSelectCertificateForUrls.login_screen_auto_select_certificate_rules)
}
inline void DeviceLoginScreenAutoSelectCertificateForUrls::add_login_screen_auto_select_certificate_rules(const char* value, size_t size) {
  login_screen_auto_select_certificate_rules_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:enterprise_management.DeviceLoginScreenAutoSelectCertificateForUrls.login_screen_auto_select_certificate_rules)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeviceLoginScreenAutoSelectCertificateForUrls::login_screen_auto_select_certificate_rules() const {
  // @@protoc_insertion_point(field_list:enterprise_management.DeviceLoginScreenAutoSelectCertificateForUrls.login_screen_auto_select_certificate_rules)
  return login_screen_auto_select_certificate_rules_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeviceLoginScreenAutoSelectCertificateForUrls::mutable_login_screen_auto_select_certificate_rules() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceLoginScreenAutoSelectCertificateForUrls.login_screen_auto_select_certificate_rules)
  return &login_screen_auto_select_certificate_rules_;
}

// -------------------------------------------------------------------

// UnaffiliatedArcAllowedProto

// optional bool unaffiliated_arc_allowed = 1;
inline bool UnaffiliatedArcAllowedProto::_internal_has_unaffiliated_arc_allowed() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UnaffiliatedArcAllowedProto::has_unaffiliated_arc_allowed() const {
  return _internal_has_unaffiliated_arc_allowed();
}
inline void UnaffiliatedArcAllowedProto::clear_unaffiliated_arc_allowed() {
  unaffiliated_arc_allowed_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool UnaffiliatedArcAllowedProto::_internal_unaffiliated_arc_allowed() const {
  return unaffiliated_arc_allowed_;
}
inline bool UnaffiliatedArcAllowedProto::unaffiliated_arc_allowed() const {
  // @@protoc_insertion_point(field_get:enterprise_management.UnaffiliatedArcAllowedProto.unaffiliated_arc_allowed)
  return _internal_unaffiliated_arc_allowed();
}
inline void UnaffiliatedArcAllowedProto::_internal_set_unaffiliated_arc_allowed(bool value) {
  _has_bits_[0] |= 0x00000001u;
  unaffiliated_arc_allowed_ = value;
}
inline void UnaffiliatedArcAllowedProto::set_unaffiliated_arc_allowed(bool value) {
  _internal_set_unaffiliated_arc_allowed(value);
  // @@protoc_insertion_point(field_set:enterprise_management.UnaffiliatedArcAllowedProto.unaffiliated_arc_allowed)
}

// -------------------------------------------------------------------

// DeviceKerberosEncryptionTypesProto

// optional .enterprise_management.DeviceKerberosEncryptionTypesProto.Types types = 1 [default = ENC_TYPES_STRONG];
inline bool DeviceKerberosEncryptionTypesProto::_internal_has_types() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceKerberosEncryptionTypesProto::has_types() const {
  return _internal_has_types();
}
inline void DeviceKerberosEncryptionTypesProto::clear_types() {
  types_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::enterprise_management::DeviceKerberosEncryptionTypesProto_Types DeviceKerberosEncryptionTypesProto::_internal_types() const {
  return static_cast< ::enterprise_management::DeviceKerberosEncryptionTypesProto_Types >(types_);
}
inline ::enterprise_management::DeviceKerberosEncryptionTypesProto_Types DeviceKerberosEncryptionTypesProto::types() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceKerberosEncryptionTypesProto.types)
  return _internal_types();
}
inline void DeviceKerberosEncryptionTypesProto::_internal_set_types(::enterprise_management::DeviceKerberosEncryptionTypesProto_Types value) {
  assert(::enterprise_management::DeviceKerberosEncryptionTypesProto_Types_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  types_ = value;
}
inline void DeviceKerberosEncryptionTypesProto::set_types(::enterprise_management::DeviceKerberosEncryptionTypesProto_Types value) {
  _internal_set_types(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceKerberosEncryptionTypesProto.types)
}

// -------------------------------------------------------------------

// DeviceUserPolicyLoopbackProcessingModeProto

// optional .enterprise_management.DeviceUserPolicyLoopbackProcessingModeProto.Mode mode = 1 [default = USER_POLICY_MODE_DEFAULT];
inline bool DeviceUserPolicyLoopbackProcessingModeProto::_internal_has_mode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceUserPolicyLoopbackProcessingModeProto::has_mode() const {
  return _internal_has_mode();
}
inline void DeviceUserPolicyLoopbackProcessingModeProto::clear_mode() {
  mode_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto_Mode DeviceUserPolicyLoopbackProcessingModeProto::_internal_mode() const {
  return static_cast< ::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto_Mode >(mode_);
}
inline ::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto_Mode DeviceUserPolicyLoopbackProcessingModeProto::mode() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceUserPolicyLoopbackProcessingModeProto.mode)
  return _internal_mode();
}
inline void DeviceUserPolicyLoopbackProcessingModeProto::_internal_set_mode(::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto_Mode value) {
  assert(::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto_Mode_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  mode_ = value;
}
inline void DeviceUserPolicyLoopbackProcessingModeProto::set_mode(::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto_Mode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceUserPolicyLoopbackProcessingModeProto.mode)
}

// -------------------------------------------------------------------

// DeviceLoginScreenIsolateOriginsProto

// optional string isolate_origins = 1;
inline bool DeviceLoginScreenIsolateOriginsProto::_internal_has_isolate_origins() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceLoginScreenIsolateOriginsProto::has_isolate_origins() const {
  return _internal_has_isolate_origins();
}
inline void DeviceLoginScreenIsolateOriginsProto::clear_isolate_origins() {
  isolate_origins_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeviceLoginScreenIsolateOriginsProto::isolate_origins() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceLoginScreenIsolateOriginsProto.isolate_origins)
  return _internal_isolate_origins();
}
inline void DeviceLoginScreenIsolateOriginsProto::set_isolate_origins(const std::string& value) {
  _internal_set_isolate_origins(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceLoginScreenIsolateOriginsProto.isolate_origins)
}
inline std::string* DeviceLoginScreenIsolateOriginsProto::mutable_isolate_origins() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceLoginScreenIsolateOriginsProto.isolate_origins)
  return _internal_mutable_isolate_origins();
}
inline const std::string& DeviceLoginScreenIsolateOriginsProto::_internal_isolate_origins() const {
  return isolate_origins_.Get();
}
inline void DeviceLoginScreenIsolateOriginsProto::_internal_set_isolate_origins(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  isolate_origins_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceLoginScreenIsolateOriginsProto::set_isolate_origins(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  isolate_origins_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceLoginScreenIsolateOriginsProto.isolate_origins)
}
inline void DeviceLoginScreenIsolateOriginsProto::set_isolate_origins(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  isolate_origins_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceLoginScreenIsolateOriginsProto.isolate_origins)
}
inline void DeviceLoginScreenIsolateOriginsProto::set_isolate_origins(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  isolate_origins_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceLoginScreenIsolateOriginsProto.isolate_origins)
}
inline std::string* DeviceLoginScreenIsolateOriginsProto::_internal_mutable_isolate_origins() {
  _has_bits_[0] |= 0x00000001u;
  return isolate_origins_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceLoginScreenIsolateOriginsProto::release_isolate_origins() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceLoginScreenIsolateOriginsProto.isolate_origins)
  if (!_internal_has_isolate_origins()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return isolate_origins_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceLoginScreenIsolateOriginsProto::set_allocated_isolate_origins(std::string* isolate_origins) {
  if (isolate_origins != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  isolate_origins_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), isolate_origins,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceLoginScreenIsolateOriginsProto.isolate_origins)
}
inline std::string* DeviceLoginScreenIsolateOriginsProto::unsafe_arena_release_isolate_origins() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.DeviceLoginScreenIsolateOriginsProto.isolate_origins)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return isolate_origins_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceLoginScreenIsolateOriginsProto::unsafe_arena_set_allocated_isolate_origins(
    std::string* isolate_origins) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (isolate_origins != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  isolate_origins_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      isolate_origins, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.DeviceLoginScreenIsolateOriginsProto.isolate_origins)
}

// -------------------------------------------------------------------

// DeviceLoginScreenSitePerProcessProto

// optional bool site_per_process = 1;
inline bool DeviceLoginScreenSitePerProcessProto::_internal_has_site_per_process() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceLoginScreenSitePerProcessProto::has_site_per_process() const {
  return _internal_has_site_per_process();
}
inline void DeviceLoginScreenSitePerProcessProto::clear_site_per_process() {
  site_per_process_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool DeviceLoginScreenSitePerProcessProto::_internal_site_per_process() const {
  return site_per_process_;
}
inline bool DeviceLoginScreenSitePerProcessProto::site_per_process() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceLoginScreenSitePerProcessProto.site_per_process)
  return _internal_site_per_process();
}
inline void DeviceLoginScreenSitePerProcessProto::_internal_set_site_per_process(bool value) {
  _has_bits_[0] |= 0x00000001u;
  site_per_process_ = value;
}
inline void DeviceLoginScreenSitePerProcessProto::set_site_per_process(bool value) {
  _internal_set_site_per_process(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceLoginScreenSitePerProcessProto.site_per_process)
}

// -------------------------------------------------------------------

// VirtualMachinesAllowedProto

// optional bool virtual_machines_allowed = 1;
inline bool VirtualMachinesAllowedProto::_internal_has_virtual_machines_allowed() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VirtualMachinesAllowedProto::has_virtual_machines_allowed() const {
  return _internal_has_virtual_machines_allowed();
}
inline void VirtualMachinesAllowedProto::clear_virtual_machines_allowed() {
  virtual_machines_allowed_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool VirtualMachinesAllowedProto::_internal_virtual_machines_allowed() const {
  return virtual_machines_allowed_;
}
inline bool VirtualMachinesAllowedProto::virtual_machines_allowed() const {
  // @@protoc_insertion_point(field_get:enterprise_management.VirtualMachinesAllowedProto.virtual_machines_allowed)
  return _internal_virtual_machines_allowed();
}
inline void VirtualMachinesAllowedProto::_internal_set_virtual_machines_allowed(bool value) {
  _has_bits_[0] |= 0x00000001u;
  virtual_machines_allowed_ = value;
}
inline void VirtualMachinesAllowedProto::set_virtual_machines_allowed(bool value) {
  _internal_set_virtual_machines_allowed(value);
  // @@protoc_insertion_point(field_set:enterprise_management.VirtualMachinesAllowedProto.virtual_machines_allowed)
}

// -------------------------------------------------------------------

// DeviceMachinePasswordChangeRateProto

// optional int32 rate_days = 1;
inline bool DeviceMachinePasswordChangeRateProto::_internal_has_rate_days() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceMachinePasswordChangeRateProto::has_rate_days() const {
  return _internal_has_rate_days();
}
inline void DeviceMachinePasswordChangeRateProto::clear_rate_days() {
  rate_days_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceMachinePasswordChangeRateProto::_internal_rate_days() const {
  return rate_days_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceMachinePasswordChangeRateProto::rate_days() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceMachinePasswordChangeRateProto.rate_days)
  return _internal_rate_days();
}
inline void DeviceMachinePasswordChangeRateProto::_internal_set_rate_days(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  rate_days_ = value;
}
inline void DeviceMachinePasswordChangeRateProto::set_rate_days(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rate_days(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceMachinePasswordChangeRateProto.rate_days)
}

// -------------------------------------------------------------------

// DeviceGpoCacheLifetimeProto

// optional int32 lifetime_hours = 1;
inline bool DeviceGpoCacheLifetimeProto::_internal_has_lifetime_hours() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceGpoCacheLifetimeProto::has_lifetime_hours() const {
  return _internal_has_lifetime_hours();
}
inline void DeviceGpoCacheLifetimeProto::clear_lifetime_hours() {
  lifetime_hours_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceGpoCacheLifetimeProto::_internal_lifetime_hours() const {
  return lifetime_hours_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceGpoCacheLifetimeProto::lifetime_hours() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceGpoCacheLifetimeProto.lifetime_hours)
  return _internal_lifetime_hours();
}
inline void DeviceGpoCacheLifetimeProto::_internal_set_lifetime_hours(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  lifetime_hours_ = value;
}
inline void DeviceGpoCacheLifetimeProto::set_lifetime_hours(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lifetime_hours(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceGpoCacheLifetimeProto.lifetime_hours)
}

// -------------------------------------------------------------------

// DeviceAuthDataCacheLifetimeProto

// optional int32 lifetime_hours = 1;
inline bool DeviceAuthDataCacheLifetimeProto::_internal_has_lifetime_hours() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceAuthDataCacheLifetimeProto::has_lifetime_hours() const {
  return _internal_has_lifetime_hours();
}
inline void DeviceAuthDataCacheLifetimeProto::clear_lifetime_hours() {
  lifetime_hours_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceAuthDataCacheLifetimeProto::_internal_lifetime_hours() const {
  return lifetime_hours_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceAuthDataCacheLifetimeProto::lifetime_hours() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceAuthDataCacheLifetimeProto.lifetime_hours)
  return _internal_lifetime_hours();
}
inline void DeviceAuthDataCacheLifetimeProto::_internal_set_lifetime_hours(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  lifetime_hours_ = value;
}
inline void DeviceAuthDataCacheLifetimeProto::set_lifetime_hours(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lifetime_hours(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceAuthDataCacheLifetimeProto.lifetime_hours)
}

// -------------------------------------------------------------------

// SamlLoginAuthenticationTypeProto

// optional .enterprise_management.SamlLoginAuthenticationTypeProto.Type saml_login_authentication_type = 1 [default = TYPE_DEFAULT];
inline bool SamlLoginAuthenticationTypeProto::_internal_has_saml_login_authentication_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SamlLoginAuthenticationTypeProto::has_saml_login_authentication_type() const {
  return _internal_has_saml_login_authentication_type();
}
inline void SamlLoginAuthenticationTypeProto::clear_saml_login_authentication_type() {
  saml_login_authentication_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::enterprise_management::SamlLoginAuthenticationTypeProto_Type SamlLoginAuthenticationTypeProto::_internal_saml_login_authentication_type() const {
  return static_cast< ::enterprise_management::SamlLoginAuthenticationTypeProto_Type >(saml_login_authentication_type_);
}
inline ::enterprise_management::SamlLoginAuthenticationTypeProto_Type SamlLoginAuthenticationTypeProto::saml_login_authentication_type() const {
  // @@protoc_insertion_point(field_get:enterprise_management.SamlLoginAuthenticationTypeProto.saml_login_authentication_type)
  return _internal_saml_login_authentication_type();
}
inline void SamlLoginAuthenticationTypeProto::_internal_set_saml_login_authentication_type(::enterprise_management::SamlLoginAuthenticationTypeProto_Type value) {
  assert(::enterprise_management::SamlLoginAuthenticationTypeProto_Type_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  saml_login_authentication_type_ = value;
}
inline void SamlLoginAuthenticationTypeProto::set_saml_login_authentication_type(::enterprise_management::SamlLoginAuthenticationTypeProto_Type value) {
  _internal_set_saml_login_authentication_type(value);
  // @@protoc_insertion_point(field_set:enterprise_management.SamlLoginAuthenticationTypeProto.saml_login_authentication_type)
}

// -------------------------------------------------------------------

// DeviceUnaffiliatedCrostiniAllowedProto

// optional bool device_unaffiliated_crostini_allowed = 1;
inline bool DeviceUnaffiliatedCrostiniAllowedProto::_internal_has_device_unaffiliated_crostini_allowed() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceUnaffiliatedCrostiniAllowedProto::has_device_unaffiliated_crostini_allowed() const {
  return _internal_has_device_unaffiliated_crostini_allowed();
}
inline void DeviceUnaffiliatedCrostiniAllowedProto::clear_device_unaffiliated_crostini_allowed() {
  device_unaffiliated_crostini_allowed_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool DeviceUnaffiliatedCrostiniAllowedProto::_internal_device_unaffiliated_crostini_allowed() const {
  return device_unaffiliated_crostini_allowed_;
}
inline bool DeviceUnaffiliatedCrostiniAllowedProto::device_unaffiliated_crostini_allowed() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceUnaffiliatedCrostiniAllowedProto.device_unaffiliated_crostini_allowed)
  return _internal_device_unaffiliated_crostini_allowed();
}
inline void DeviceUnaffiliatedCrostiniAllowedProto::_internal_set_device_unaffiliated_crostini_allowed(bool value) {
  _has_bits_[0] |= 0x00000001u;
  device_unaffiliated_crostini_allowed_ = value;
}
inline void DeviceUnaffiliatedCrostiniAllowedProto::set_device_unaffiliated_crostini_allowed(bool value) {
  _internal_set_device_unaffiliated_crostini_allowed(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceUnaffiliatedCrostiniAllowedProto.device_unaffiliated_crostini_allowed)
}

// -------------------------------------------------------------------

// PluginVmAllowedProto

// optional bool plugin_vm_allowed = 1;
inline bool PluginVmAllowedProto::_internal_has_plugin_vm_allowed() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PluginVmAllowedProto::has_plugin_vm_allowed() const {
  return _internal_has_plugin_vm_allowed();
}
inline void PluginVmAllowedProto::clear_plugin_vm_allowed() {
  plugin_vm_allowed_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool PluginVmAllowedProto::_internal_plugin_vm_allowed() const {
  return plugin_vm_allowed_;
}
inline bool PluginVmAllowedProto::plugin_vm_allowed() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PluginVmAllowedProto.plugin_vm_allowed)
  return _internal_plugin_vm_allowed();
}
inline void PluginVmAllowedProto::_internal_set_plugin_vm_allowed(bool value) {
  _has_bits_[0] |= 0x00000001u;
  plugin_vm_allowed_ = value;
}
inline void PluginVmAllowedProto::set_plugin_vm_allowed(bool value) {
  _internal_set_plugin_vm_allowed(value);
  // @@protoc_insertion_point(field_set:enterprise_management.PluginVmAllowedProto.plugin_vm_allowed)
}

// -------------------------------------------------------------------

// PluginVmLicenseKeyProto

// optional string plugin_vm_license_key = 1;
inline bool PluginVmLicenseKeyProto::_internal_has_plugin_vm_license_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PluginVmLicenseKeyProto::has_plugin_vm_license_key() const {
  return _internal_has_plugin_vm_license_key();
}
inline void PluginVmLicenseKeyProto::clear_plugin_vm_license_key() {
  plugin_vm_license_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PluginVmLicenseKeyProto::plugin_vm_license_key() const {
  // @@protoc_insertion_point(field_get:enterprise_management.PluginVmLicenseKeyProto.plugin_vm_license_key)
  return _internal_plugin_vm_license_key();
}
inline void PluginVmLicenseKeyProto::set_plugin_vm_license_key(const std::string& value) {
  _internal_set_plugin_vm_license_key(value);
  // @@protoc_insertion_point(field_set:enterprise_management.PluginVmLicenseKeyProto.plugin_vm_license_key)
}
inline std::string* PluginVmLicenseKeyProto::mutable_plugin_vm_license_key() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.PluginVmLicenseKeyProto.plugin_vm_license_key)
  return _internal_mutable_plugin_vm_license_key();
}
inline const std::string& PluginVmLicenseKeyProto::_internal_plugin_vm_license_key() const {
  return plugin_vm_license_key_.Get();
}
inline void PluginVmLicenseKeyProto::_internal_set_plugin_vm_license_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  plugin_vm_license_key_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PluginVmLicenseKeyProto::set_plugin_vm_license_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  plugin_vm_license_key_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.PluginVmLicenseKeyProto.plugin_vm_license_key)
}
inline void PluginVmLicenseKeyProto::set_plugin_vm_license_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  plugin_vm_license_key_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.PluginVmLicenseKeyProto.plugin_vm_license_key)
}
inline void PluginVmLicenseKeyProto::set_plugin_vm_license_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  plugin_vm_license_key_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.PluginVmLicenseKeyProto.plugin_vm_license_key)
}
inline std::string* PluginVmLicenseKeyProto::_internal_mutable_plugin_vm_license_key() {
  _has_bits_[0] |= 0x00000001u;
  return plugin_vm_license_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PluginVmLicenseKeyProto::release_plugin_vm_license_key() {
  // @@protoc_insertion_point(field_release:enterprise_management.PluginVmLicenseKeyProto.plugin_vm_license_key)
  if (!_internal_has_plugin_vm_license_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return plugin_vm_license_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PluginVmLicenseKeyProto::set_allocated_plugin_vm_license_key(std::string* plugin_vm_license_key) {
  if (plugin_vm_license_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  plugin_vm_license_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plugin_vm_license_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.PluginVmLicenseKeyProto.plugin_vm_license_key)
}
inline std::string* PluginVmLicenseKeyProto::unsafe_arena_release_plugin_vm_license_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.PluginVmLicenseKeyProto.plugin_vm_license_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return plugin_vm_license_key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PluginVmLicenseKeyProto::unsafe_arena_set_allocated_plugin_vm_license_key(
    std::string* plugin_vm_license_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (plugin_vm_license_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  plugin_vm_license_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      plugin_vm_license_key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.PluginVmLicenseKeyProto.plugin_vm_license_key)
}

// -------------------------------------------------------------------

// DeviceRebootOnUserSignoutProto

// optional .enterprise_management.DeviceRebootOnUserSignoutProto.RebootOnSignoutMode reboot_on_signout_mode = 1 [default = NEVER];
inline bool DeviceRebootOnUserSignoutProto::_internal_has_reboot_on_signout_mode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceRebootOnUserSignoutProto::has_reboot_on_signout_mode() const {
  return _internal_has_reboot_on_signout_mode();
}
inline void DeviceRebootOnUserSignoutProto::clear_reboot_on_signout_mode() {
  reboot_on_signout_mode_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::enterprise_management::DeviceRebootOnUserSignoutProto_RebootOnSignoutMode DeviceRebootOnUserSignoutProto::_internal_reboot_on_signout_mode() const {
  return static_cast< ::enterprise_management::DeviceRebootOnUserSignoutProto_RebootOnSignoutMode >(reboot_on_signout_mode_);
}
inline ::enterprise_management::DeviceRebootOnUserSignoutProto_RebootOnSignoutMode DeviceRebootOnUserSignoutProto::reboot_on_signout_mode() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceRebootOnUserSignoutProto.reboot_on_signout_mode)
  return _internal_reboot_on_signout_mode();
}
inline void DeviceRebootOnUserSignoutProto::_internal_set_reboot_on_signout_mode(::enterprise_management::DeviceRebootOnUserSignoutProto_RebootOnSignoutMode value) {
  assert(::enterprise_management::DeviceRebootOnUserSignoutProto_RebootOnSignoutMode_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  reboot_on_signout_mode_ = value;
}
inline void DeviceRebootOnUserSignoutProto::set_reboot_on_signout_mode(::enterprise_management::DeviceRebootOnUserSignoutProto_RebootOnSignoutMode value) {
  _internal_set_reboot_on_signout_mode(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceRebootOnUserSignoutProto.reboot_on_signout_mode)
}

// -------------------------------------------------------------------

// DeviceWilcoDtcAllowedProto

// optional bool device_wilco_dtc_allowed = 1;
inline bool DeviceWilcoDtcAllowedProto::_internal_has_device_wilco_dtc_allowed() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceWilcoDtcAllowedProto::has_device_wilco_dtc_allowed() const {
  return _internal_has_device_wilco_dtc_allowed();
}
inline void DeviceWilcoDtcAllowedProto::clear_device_wilco_dtc_allowed() {
  device_wilco_dtc_allowed_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool DeviceWilcoDtcAllowedProto::_internal_device_wilco_dtc_allowed() const {
  return device_wilco_dtc_allowed_;
}
inline bool DeviceWilcoDtcAllowedProto::device_wilco_dtc_allowed() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceWilcoDtcAllowedProto.device_wilco_dtc_allowed)
  return _internal_device_wilco_dtc_allowed();
}
inline void DeviceWilcoDtcAllowedProto::_internal_set_device_wilco_dtc_allowed(bool value) {
  _has_bits_[0] |= 0x00000001u;
  device_wilco_dtc_allowed_ = value;
}
inline void DeviceWilcoDtcAllowedProto::set_device_wilco_dtc_allowed(bool value) {
  _internal_set_device_wilco_dtc_allowed(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceWilcoDtcAllowedProto.device_wilco_dtc_allowed)
}

// -------------------------------------------------------------------

// DeviceWilcoDtcConfigurationProto

// optional string device_wilco_dtc_configuration = 1;
inline bool DeviceWilcoDtcConfigurationProto::_internal_has_device_wilco_dtc_configuration() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceWilcoDtcConfigurationProto::has_device_wilco_dtc_configuration() const {
  return _internal_has_device_wilco_dtc_configuration();
}
inline void DeviceWilcoDtcConfigurationProto::clear_device_wilco_dtc_configuration() {
  device_wilco_dtc_configuration_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeviceWilcoDtcConfigurationProto::device_wilco_dtc_configuration() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceWilcoDtcConfigurationProto.device_wilco_dtc_configuration)
  return _internal_device_wilco_dtc_configuration();
}
inline void DeviceWilcoDtcConfigurationProto::set_device_wilco_dtc_configuration(const std::string& value) {
  _internal_set_device_wilco_dtc_configuration(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceWilcoDtcConfigurationProto.device_wilco_dtc_configuration)
}
inline std::string* DeviceWilcoDtcConfigurationProto::mutable_device_wilco_dtc_configuration() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceWilcoDtcConfigurationProto.device_wilco_dtc_configuration)
  return _internal_mutable_device_wilco_dtc_configuration();
}
inline const std::string& DeviceWilcoDtcConfigurationProto::_internal_device_wilco_dtc_configuration() const {
  return device_wilco_dtc_configuration_.Get();
}
inline void DeviceWilcoDtcConfigurationProto::_internal_set_device_wilco_dtc_configuration(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  device_wilco_dtc_configuration_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceWilcoDtcConfigurationProto::set_device_wilco_dtc_configuration(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  device_wilco_dtc_configuration_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceWilcoDtcConfigurationProto.device_wilco_dtc_configuration)
}
inline void DeviceWilcoDtcConfigurationProto::set_device_wilco_dtc_configuration(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  device_wilco_dtc_configuration_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceWilcoDtcConfigurationProto.device_wilco_dtc_configuration)
}
inline void DeviceWilcoDtcConfigurationProto::set_device_wilco_dtc_configuration(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  device_wilco_dtc_configuration_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceWilcoDtcConfigurationProto.device_wilco_dtc_configuration)
}
inline std::string* DeviceWilcoDtcConfigurationProto::_internal_mutable_device_wilco_dtc_configuration() {
  _has_bits_[0] |= 0x00000001u;
  return device_wilco_dtc_configuration_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceWilcoDtcConfigurationProto::release_device_wilco_dtc_configuration() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceWilcoDtcConfigurationProto.device_wilco_dtc_configuration)
  if (!_internal_has_device_wilco_dtc_configuration()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return device_wilco_dtc_configuration_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceWilcoDtcConfigurationProto::set_allocated_device_wilco_dtc_configuration(std::string* device_wilco_dtc_configuration) {
  if (device_wilco_dtc_configuration != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  device_wilco_dtc_configuration_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_wilco_dtc_configuration,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceWilcoDtcConfigurationProto.device_wilco_dtc_configuration)
}
inline std::string* DeviceWilcoDtcConfigurationProto::unsafe_arena_release_device_wilco_dtc_configuration() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.DeviceWilcoDtcConfigurationProto.device_wilco_dtc_configuration)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return device_wilco_dtc_configuration_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceWilcoDtcConfigurationProto::unsafe_arena_set_allocated_device_wilco_dtc_configuration(
    std::string* device_wilco_dtc_configuration) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_wilco_dtc_configuration != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  device_wilco_dtc_configuration_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_wilco_dtc_configuration, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.DeviceWilcoDtcConfigurationProto.device_wilco_dtc_configuration)
}

// -------------------------------------------------------------------

// DevicePowerPeakShiftProto

// optional bool enabled = 1;
inline bool DevicePowerPeakShiftProto::_internal_has_enabled() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DevicePowerPeakShiftProto::has_enabled() const {
  return _internal_has_enabled();
}
inline void DevicePowerPeakShiftProto::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool DevicePowerPeakShiftProto::_internal_enabled() const {
  return enabled_;
}
inline bool DevicePowerPeakShiftProto::enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DevicePowerPeakShiftProto.enabled)
  return _internal_enabled();
}
inline void DevicePowerPeakShiftProto::_internal_set_enabled(bool value) {
  _has_bits_[0] |= 0x00000002u;
  enabled_ = value;
}
inline void DevicePowerPeakShiftProto::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DevicePowerPeakShiftProto.enabled)
}

// optional int32 battery_threshold = 2;
inline bool DevicePowerPeakShiftProto::_internal_has_battery_threshold() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DevicePowerPeakShiftProto::has_battery_threshold() const {
  return _internal_has_battery_threshold();
}
inline void DevicePowerPeakShiftProto::clear_battery_threshold() {
  battery_threshold_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DevicePowerPeakShiftProto::_internal_battery_threshold() const {
  return battery_threshold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DevicePowerPeakShiftProto::battery_threshold() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DevicePowerPeakShiftProto.battery_threshold)
  return _internal_battery_threshold();
}
inline void DevicePowerPeakShiftProto::_internal_set_battery_threshold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  battery_threshold_ = value;
}
inline void DevicePowerPeakShiftProto::set_battery_threshold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_battery_threshold(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DevicePowerPeakShiftProto.battery_threshold)
}

// optional string day_configs = 3;
inline bool DevicePowerPeakShiftProto::_internal_has_day_configs() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DevicePowerPeakShiftProto::has_day_configs() const {
  return _internal_has_day_configs();
}
inline void DevicePowerPeakShiftProto::clear_day_configs() {
  day_configs_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DevicePowerPeakShiftProto::day_configs() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DevicePowerPeakShiftProto.day_configs)
  return _internal_day_configs();
}
inline void DevicePowerPeakShiftProto::set_day_configs(const std::string& value) {
  _internal_set_day_configs(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DevicePowerPeakShiftProto.day_configs)
}
inline std::string* DevicePowerPeakShiftProto::mutable_day_configs() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.DevicePowerPeakShiftProto.day_configs)
  return _internal_mutable_day_configs();
}
inline const std::string& DevicePowerPeakShiftProto::_internal_day_configs() const {
  return day_configs_.Get();
}
inline void DevicePowerPeakShiftProto::_internal_set_day_configs(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  day_configs_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DevicePowerPeakShiftProto::set_day_configs(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  day_configs_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DevicePowerPeakShiftProto.day_configs)
}
inline void DevicePowerPeakShiftProto::set_day_configs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  day_configs_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.DevicePowerPeakShiftProto.day_configs)
}
inline void DevicePowerPeakShiftProto::set_day_configs(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  day_configs_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DevicePowerPeakShiftProto.day_configs)
}
inline std::string* DevicePowerPeakShiftProto::_internal_mutable_day_configs() {
  _has_bits_[0] |= 0x00000001u;
  return day_configs_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DevicePowerPeakShiftProto::release_day_configs() {
  // @@protoc_insertion_point(field_release:enterprise_management.DevicePowerPeakShiftProto.day_configs)
  if (!_internal_has_day_configs()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return day_configs_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DevicePowerPeakShiftProto::set_allocated_day_configs(std::string* day_configs) {
  if (day_configs != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  day_configs_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), day_configs,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DevicePowerPeakShiftProto.day_configs)
}
inline std::string* DevicePowerPeakShiftProto::unsafe_arena_release_day_configs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.DevicePowerPeakShiftProto.day_configs)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return day_configs_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DevicePowerPeakShiftProto::unsafe_arena_set_allocated_day_configs(
    std::string* day_configs) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (day_configs != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  day_configs_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      day_configs, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.DevicePowerPeakShiftProto.day_configs)
}

// -------------------------------------------------------------------

// DeviceBootOnAcProto

// optional bool enabled = 1;
inline bool DeviceBootOnAcProto::_internal_has_enabled() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceBootOnAcProto::has_enabled() const {
  return _internal_has_enabled();
}
inline void DeviceBootOnAcProto::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool DeviceBootOnAcProto::_internal_enabled() const {
  return enabled_;
}
inline bool DeviceBootOnAcProto::enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceBootOnAcProto.enabled)
  return _internal_enabled();
}
inline void DeviceBootOnAcProto::_internal_set_enabled(bool value) {
  _has_bits_[0] |= 0x00000001u;
  enabled_ = value;
}
inline void DeviceBootOnAcProto::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceBootOnAcProto.enabled)
}

// -------------------------------------------------------------------

// DeviceDockMacAddressSourceProto

// optional .enterprise_management.DeviceDockMacAddressSourceProto.Source source = 1;
inline bool DeviceDockMacAddressSourceProto::_internal_has_source() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceDockMacAddressSourceProto::has_source() const {
  return _internal_has_source();
}
inline void DeviceDockMacAddressSourceProto::clear_source() {
  source_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::enterprise_management::DeviceDockMacAddressSourceProto_Source DeviceDockMacAddressSourceProto::_internal_source() const {
  return static_cast< ::enterprise_management::DeviceDockMacAddressSourceProto_Source >(source_);
}
inline ::enterprise_management::DeviceDockMacAddressSourceProto_Source DeviceDockMacAddressSourceProto::source() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceDockMacAddressSourceProto.source)
  return _internal_source();
}
inline void DeviceDockMacAddressSourceProto::_internal_set_source(::enterprise_management::DeviceDockMacAddressSourceProto_Source value) {
  assert(::enterprise_management::DeviceDockMacAddressSourceProto_Source_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  source_ = value;
}
inline void DeviceDockMacAddressSourceProto::set_source(::enterprise_management::DeviceDockMacAddressSourceProto_Source value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceDockMacAddressSourceProto.source)
}

// -------------------------------------------------------------------

// DeviceAdvancedBatteryChargeModeProto

// optional bool enabled = 1;
inline bool DeviceAdvancedBatteryChargeModeProto::_internal_has_enabled() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DeviceAdvancedBatteryChargeModeProto::has_enabled() const {
  return _internal_has_enabled();
}
inline void DeviceAdvancedBatteryChargeModeProto::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool DeviceAdvancedBatteryChargeModeProto::_internal_enabled() const {
  return enabled_;
}
inline bool DeviceAdvancedBatteryChargeModeProto::enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceAdvancedBatteryChargeModeProto.enabled)
  return _internal_enabled();
}
inline void DeviceAdvancedBatteryChargeModeProto::_internal_set_enabled(bool value) {
  _has_bits_[0] |= 0x00000002u;
  enabled_ = value;
}
inline void DeviceAdvancedBatteryChargeModeProto::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceAdvancedBatteryChargeModeProto.enabled)
}

// optional string day_configs = 2;
inline bool DeviceAdvancedBatteryChargeModeProto::_internal_has_day_configs() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceAdvancedBatteryChargeModeProto::has_day_configs() const {
  return _internal_has_day_configs();
}
inline void DeviceAdvancedBatteryChargeModeProto::clear_day_configs() {
  day_configs_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeviceAdvancedBatteryChargeModeProto::day_configs() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceAdvancedBatteryChargeModeProto.day_configs)
  return _internal_day_configs();
}
inline void DeviceAdvancedBatteryChargeModeProto::set_day_configs(const std::string& value) {
  _internal_set_day_configs(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceAdvancedBatteryChargeModeProto.day_configs)
}
inline std::string* DeviceAdvancedBatteryChargeModeProto::mutable_day_configs() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceAdvancedBatteryChargeModeProto.day_configs)
  return _internal_mutable_day_configs();
}
inline const std::string& DeviceAdvancedBatteryChargeModeProto::_internal_day_configs() const {
  return day_configs_.Get();
}
inline void DeviceAdvancedBatteryChargeModeProto::_internal_set_day_configs(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  day_configs_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceAdvancedBatteryChargeModeProto::set_day_configs(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  day_configs_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceAdvancedBatteryChargeModeProto.day_configs)
}
inline void DeviceAdvancedBatteryChargeModeProto::set_day_configs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  day_configs_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceAdvancedBatteryChargeModeProto.day_configs)
}
inline void DeviceAdvancedBatteryChargeModeProto::set_day_configs(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  day_configs_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceAdvancedBatteryChargeModeProto.day_configs)
}
inline std::string* DeviceAdvancedBatteryChargeModeProto::_internal_mutable_day_configs() {
  _has_bits_[0] |= 0x00000001u;
  return day_configs_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceAdvancedBatteryChargeModeProto::release_day_configs() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceAdvancedBatteryChargeModeProto.day_configs)
  if (!_internal_has_day_configs()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return day_configs_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceAdvancedBatteryChargeModeProto::set_allocated_day_configs(std::string* day_configs) {
  if (day_configs != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  day_configs_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), day_configs,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceAdvancedBatteryChargeModeProto.day_configs)
}
inline std::string* DeviceAdvancedBatteryChargeModeProto::unsafe_arena_release_day_configs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.DeviceAdvancedBatteryChargeModeProto.day_configs)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return day_configs_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceAdvancedBatteryChargeModeProto::unsafe_arena_set_allocated_day_configs(
    std::string* day_configs) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (day_configs != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  day_configs_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      day_configs, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.DeviceAdvancedBatteryChargeModeProto.day_configs)
}

// -------------------------------------------------------------------

// DeviceBatteryChargeModeProto

// optional .enterprise_management.DeviceBatteryChargeModeProto.BatteryChargeMode battery_charge_mode = 1;
inline bool DeviceBatteryChargeModeProto::_internal_has_battery_charge_mode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceBatteryChargeModeProto::has_battery_charge_mode() const {
  return _internal_has_battery_charge_mode();
}
inline void DeviceBatteryChargeModeProto::clear_battery_charge_mode() {
  battery_charge_mode_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::enterprise_management::DeviceBatteryChargeModeProto_BatteryChargeMode DeviceBatteryChargeModeProto::_internal_battery_charge_mode() const {
  return static_cast< ::enterprise_management::DeviceBatteryChargeModeProto_BatteryChargeMode >(battery_charge_mode_);
}
inline ::enterprise_management::DeviceBatteryChargeModeProto_BatteryChargeMode DeviceBatteryChargeModeProto::battery_charge_mode() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceBatteryChargeModeProto.battery_charge_mode)
  return _internal_battery_charge_mode();
}
inline void DeviceBatteryChargeModeProto::_internal_set_battery_charge_mode(::enterprise_management::DeviceBatteryChargeModeProto_BatteryChargeMode value) {
  assert(::enterprise_management::DeviceBatteryChargeModeProto_BatteryChargeMode_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  battery_charge_mode_ = value;
}
inline void DeviceBatteryChargeModeProto::set_battery_charge_mode(::enterprise_management::DeviceBatteryChargeModeProto_BatteryChargeMode value) {
  _internal_set_battery_charge_mode(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceBatteryChargeModeProto.battery_charge_mode)
}

// optional int32 custom_charge_start = 2;
inline bool DeviceBatteryChargeModeProto::_internal_has_custom_charge_start() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DeviceBatteryChargeModeProto::has_custom_charge_start() const {
  return _internal_has_custom_charge_start();
}
inline void DeviceBatteryChargeModeProto::clear_custom_charge_start() {
  custom_charge_start_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceBatteryChargeModeProto::_internal_custom_charge_start() const {
  return custom_charge_start_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceBatteryChargeModeProto::custom_charge_start() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceBatteryChargeModeProto.custom_charge_start)
  return _internal_custom_charge_start();
}
inline void DeviceBatteryChargeModeProto::_internal_set_custom_charge_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  custom_charge_start_ = value;
}
inline void DeviceBatteryChargeModeProto::set_custom_charge_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_custom_charge_start(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceBatteryChargeModeProto.custom_charge_start)
}

// optional int32 custom_charge_stop = 3;
inline bool DeviceBatteryChargeModeProto::_internal_has_custom_charge_stop() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DeviceBatteryChargeModeProto::has_custom_charge_stop() const {
  return _internal_has_custom_charge_stop();
}
inline void DeviceBatteryChargeModeProto::clear_custom_charge_stop() {
  custom_charge_stop_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceBatteryChargeModeProto::_internal_custom_charge_stop() const {
  return custom_charge_stop_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceBatteryChargeModeProto::custom_charge_stop() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceBatteryChargeModeProto.custom_charge_stop)
  return _internal_custom_charge_stop();
}
inline void DeviceBatteryChargeModeProto::_internal_set_custom_charge_stop(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  custom_charge_stop_ = value;
}
inline void DeviceBatteryChargeModeProto::set_custom_charge_stop(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_custom_charge_stop(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceBatteryChargeModeProto.custom_charge_stop)
}

// -------------------------------------------------------------------

// DeviceUsbPowerShareProto

// optional bool enabled = 1;
inline bool DeviceUsbPowerShareProto::_internal_has_enabled() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceUsbPowerShareProto::has_enabled() const {
  return _internal_has_enabled();
}
inline void DeviceUsbPowerShareProto::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool DeviceUsbPowerShareProto::_internal_enabled() const {
  return enabled_;
}
inline bool DeviceUsbPowerShareProto::enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceUsbPowerShareProto.enabled)
  return _internal_enabled();
}
inline void DeviceUsbPowerShareProto::_internal_set_enabled(bool value) {
  _has_bits_[0] |= 0x00000001u;
  enabled_ = value;
}
inline void DeviceUsbPowerShareProto::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceUsbPowerShareProto.enabled)
}

// -------------------------------------------------------------------

// DeviceScheduledUpdateCheckProto

// optional string device_scheduled_update_check_settings = 1;
inline bool DeviceScheduledUpdateCheckProto::_internal_has_device_scheduled_update_check_settings() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceScheduledUpdateCheckProto::has_device_scheduled_update_check_settings() const {
  return _internal_has_device_scheduled_update_check_settings();
}
inline void DeviceScheduledUpdateCheckProto::clear_device_scheduled_update_check_settings() {
  device_scheduled_update_check_settings_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeviceScheduledUpdateCheckProto::device_scheduled_update_check_settings() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceScheduledUpdateCheckProto.device_scheduled_update_check_settings)
  return _internal_device_scheduled_update_check_settings();
}
inline void DeviceScheduledUpdateCheckProto::set_device_scheduled_update_check_settings(const std::string& value) {
  _internal_set_device_scheduled_update_check_settings(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceScheduledUpdateCheckProto.device_scheduled_update_check_settings)
}
inline std::string* DeviceScheduledUpdateCheckProto::mutable_device_scheduled_update_check_settings() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceScheduledUpdateCheckProto.device_scheduled_update_check_settings)
  return _internal_mutable_device_scheduled_update_check_settings();
}
inline const std::string& DeviceScheduledUpdateCheckProto::_internal_device_scheduled_update_check_settings() const {
  return device_scheduled_update_check_settings_.Get();
}
inline void DeviceScheduledUpdateCheckProto::_internal_set_device_scheduled_update_check_settings(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  device_scheduled_update_check_settings_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceScheduledUpdateCheckProto::set_device_scheduled_update_check_settings(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  device_scheduled_update_check_settings_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceScheduledUpdateCheckProto.device_scheduled_update_check_settings)
}
inline void DeviceScheduledUpdateCheckProto::set_device_scheduled_update_check_settings(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  device_scheduled_update_check_settings_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceScheduledUpdateCheckProto.device_scheduled_update_check_settings)
}
inline void DeviceScheduledUpdateCheckProto::set_device_scheduled_update_check_settings(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  device_scheduled_update_check_settings_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceScheduledUpdateCheckProto.device_scheduled_update_check_settings)
}
inline std::string* DeviceScheduledUpdateCheckProto::_internal_mutable_device_scheduled_update_check_settings() {
  _has_bits_[0] |= 0x00000001u;
  return device_scheduled_update_check_settings_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceScheduledUpdateCheckProto::release_device_scheduled_update_check_settings() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceScheduledUpdateCheckProto.device_scheduled_update_check_settings)
  if (!_internal_has_device_scheduled_update_check_settings()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return device_scheduled_update_check_settings_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceScheduledUpdateCheckProto::set_allocated_device_scheduled_update_check_settings(std::string* device_scheduled_update_check_settings) {
  if (device_scheduled_update_check_settings != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  device_scheduled_update_check_settings_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_scheduled_update_check_settings,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceScheduledUpdateCheckProto.device_scheduled_update_check_settings)
}
inline std::string* DeviceScheduledUpdateCheckProto::unsafe_arena_release_device_scheduled_update_check_settings() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.DeviceScheduledUpdateCheckProto.device_scheduled_update_check_settings)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return device_scheduled_update_check_settings_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceScheduledUpdateCheckProto::unsafe_arena_set_allocated_device_scheduled_update_check_settings(
    std::string* device_scheduled_update_check_settings) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_scheduled_update_check_settings != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  device_scheduled_update_check_settings_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_scheduled_update_check_settings, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.DeviceScheduledUpdateCheckProto.device_scheduled_update_check_settings)
}

// -------------------------------------------------------------------

// DevicePowerwashAllowedProto

// optional bool device_powerwash_allowed = 1;
inline bool DevicePowerwashAllowedProto::_internal_has_device_powerwash_allowed() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DevicePowerwashAllowedProto::has_device_powerwash_allowed() const {
  return _internal_has_device_powerwash_allowed();
}
inline void DevicePowerwashAllowedProto::clear_device_powerwash_allowed() {
  device_powerwash_allowed_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool DevicePowerwashAllowedProto::_internal_device_powerwash_allowed() const {
  return device_powerwash_allowed_;
}
inline bool DevicePowerwashAllowedProto::device_powerwash_allowed() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DevicePowerwashAllowedProto.device_powerwash_allowed)
  return _internal_device_powerwash_allowed();
}
inline void DevicePowerwashAllowedProto::_internal_set_device_powerwash_allowed(bool value) {
  _has_bits_[0] |= 0x00000001u;
  device_powerwash_allowed_ = value;
}
inline void DevicePowerwashAllowedProto::set_device_powerwash_allowed(bool value) {
  _internal_set_device_powerwash_allowed(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DevicePowerwashAllowedProto.device_powerwash_allowed)
}

// -------------------------------------------------------------------

// DeviceLoginScreenWebUsbAllowDevicesForUrlsProto

// optional string device_login_screen_webusb_allow_devices_for_urls = 1;
inline bool DeviceLoginScreenWebUsbAllowDevicesForUrlsProto::_internal_has_device_login_screen_webusb_allow_devices_for_urls() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceLoginScreenWebUsbAllowDevicesForUrlsProto::has_device_login_screen_webusb_allow_devices_for_urls() const {
  return _internal_has_device_login_screen_webusb_allow_devices_for_urls();
}
inline void DeviceLoginScreenWebUsbAllowDevicesForUrlsProto::clear_device_login_screen_webusb_allow_devices_for_urls() {
  device_login_screen_webusb_allow_devices_for_urls_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeviceLoginScreenWebUsbAllowDevicesForUrlsProto::device_login_screen_webusb_allow_devices_for_urls() const {
  // @@protoc_insertion_point(field_get:enterprise_management.DeviceLoginScreenWebUsbAllowDevicesForUrlsProto.device_login_screen_webusb_allow_devices_for_urls)
  return _internal_device_login_screen_webusb_allow_devices_for_urls();
}
inline void DeviceLoginScreenWebUsbAllowDevicesForUrlsProto::set_device_login_screen_webusb_allow_devices_for_urls(const std::string& value) {
  _internal_set_device_login_screen_webusb_allow_devices_for_urls(value);
  // @@protoc_insertion_point(field_set:enterprise_management.DeviceLoginScreenWebUsbAllowDevicesForUrlsProto.device_login_screen_webusb_allow_devices_for_urls)
}
inline std::string* DeviceLoginScreenWebUsbAllowDevicesForUrlsProto::mutable_device_login_screen_webusb_allow_devices_for_urls() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceLoginScreenWebUsbAllowDevicesForUrlsProto.device_login_screen_webusb_allow_devices_for_urls)
  return _internal_mutable_device_login_screen_webusb_allow_devices_for_urls();
}
inline const std::string& DeviceLoginScreenWebUsbAllowDevicesForUrlsProto::_internal_device_login_screen_webusb_allow_devices_for_urls() const {
  return device_login_screen_webusb_allow_devices_for_urls_.Get();
}
inline void DeviceLoginScreenWebUsbAllowDevicesForUrlsProto::_internal_set_device_login_screen_webusb_allow_devices_for_urls(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  device_login_screen_webusb_allow_devices_for_urls_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceLoginScreenWebUsbAllowDevicesForUrlsProto::set_device_login_screen_webusb_allow_devices_for_urls(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  device_login_screen_webusb_allow_devices_for_urls_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.DeviceLoginScreenWebUsbAllowDevicesForUrlsProto.device_login_screen_webusb_allow_devices_for_urls)
}
inline void DeviceLoginScreenWebUsbAllowDevicesForUrlsProto::set_device_login_screen_webusb_allow_devices_for_urls(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  device_login_screen_webusb_allow_devices_for_urls_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceLoginScreenWebUsbAllowDevicesForUrlsProto.device_login_screen_webusb_allow_devices_for_urls)
}
inline void DeviceLoginScreenWebUsbAllowDevicesForUrlsProto::set_device_login_screen_webusb_allow_devices_for_urls(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  device_login_screen_webusb_allow_devices_for_urls_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceLoginScreenWebUsbAllowDevicesForUrlsProto.device_login_screen_webusb_allow_devices_for_urls)
}
inline std::string* DeviceLoginScreenWebUsbAllowDevicesForUrlsProto::_internal_mutable_device_login_screen_webusb_allow_devices_for_urls() {
  _has_bits_[0] |= 0x00000001u;
  return device_login_screen_webusb_allow_devices_for_urls_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceLoginScreenWebUsbAllowDevicesForUrlsProto::release_device_login_screen_webusb_allow_devices_for_urls() {
  // @@protoc_insertion_point(field_release:enterprise_management.DeviceLoginScreenWebUsbAllowDevicesForUrlsProto.device_login_screen_webusb_allow_devices_for_urls)
  if (!_internal_has_device_login_screen_webusb_allow_devices_for_urls()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return device_login_screen_webusb_allow_devices_for_urls_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceLoginScreenWebUsbAllowDevicesForUrlsProto::set_allocated_device_login_screen_webusb_allow_devices_for_urls(std::string* device_login_screen_webusb_allow_devices_for_urls) {
  if (device_login_screen_webusb_allow_devices_for_urls != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  device_login_screen_webusb_allow_devices_for_urls_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_login_screen_webusb_allow_devices_for_urls,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceLoginScreenWebUsbAllowDevicesForUrlsProto.device_login_screen_webusb_allow_devices_for_urls)
}
inline std::string* DeviceLoginScreenWebUsbAllowDevicesForUrlsProto::unsafe_arena_release_device_login_screen_webusb_allow_devices_for_urls() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.DeviceLoginScreenWebUsbAllowDevicesForUrlsProto.device_login_screen_webusb_allow_devices_for_urls)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return device_login_screen_webusb_allow_devices_for_urls_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceLoginScreenWebUsbAllowDevicesForUrlsProto::unsafe_arena_set_allocated_device_login_screen_webusb_allow_devices_for_urls(
    std::string* device_login_screen_webusb_allow_devices_for_urls) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_login_screen_webusb_allow_devices_for_urls != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  device_login_screen_webusb_allow_devices_for_urls_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_login_screen_webusb_allow_devices_for_urls, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.DeviceLoginScreenWebUsbAllowDevicesForUrlsProto.device_login_screen_webusb_allow_devices_for_urls)
}

// -------------------------------------------------------------------

// SystemProxySettingsProto

// optional string system_proxy_settings = 1;
inline bool SystemProxySettingsProto::_internal_has_system_proxy_settings() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SystemProxySettingsProto::has_system_proxy_settings() const {
  return _internal_has_system_proxy_settings();
}
inline void SystemProxySettingsProto::clear_system_proxy_settings() {
  system_proxy_settings_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SystemProxySettingsProto::system_proxy_settings() const {
  // @@protoc_insertion_point(field_get:enterprise_management.SystemProxySettingsProto.system_proxy_settings)
  return _internal_system_proxy_settings();
}
inline void SystemProxySettingsProto::set_system_proxy_settings(const std::string& value) {
  _internal_set_system_proxy_settings(value);
  // @@protoc_insertion_point(field_set:enterprise_management.SystemProxySettingsProto.system_proxy_settings)
}
inline std::string* SystemProxySettingsProto::mutable_system_proxy_settings() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.SystemProxySettingsProto.system_proxy_settings)
  return _internal_mutable_system_proxy_settings();
}
inline const std::string& SystemProxySettingsProto::_internal_system_proxy_settings() const {
  return system_proxy_settings_.Get();
}
inline void SystemProxySettingsProto::_internal_set_system_proxy_settings(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  system_proxy_settings_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SystemProxySettingsProto::set_system_proxy_settings(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  system_proxy_settings_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.SystemProxySettingsProto.system_proxy_settings)
}
inline void SystemProxySettingsProto::set_system_proxy_settings(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  system_proxy_settings_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.SystemProxySettingsProto.system_proxy_settings)
}
inline void SystemProxySettingsProto::set_system_proxy_settings(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  system_proxy_settings_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.SystemProxySettingsProto.system_proxy_settings)
}
inline std::string* SystemProxySettingsProto::_internal_mutable_system_proxy_settings() {
  _has_bits_[0] |= 0x00000001u;
  return system_proxy_settings_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SystemProxySettingsProto::release_system_proxy_settings() {
  // @@protoc_insertion_point(field_release:enterprise_management.SystemProxySettingsProto.system_proxy_settings)
  if (!_internal_has_system_proxy_settings()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return system_proxy_settings_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemProxySettingsProto::set_allocated_system_proxy_settings(std::string* system_proxy_settings) {
  if (system_proxy_settings != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  system_proxy_settings_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), system_proxy_settings,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.SystemProxySettingsProto.system_proxy_settings)
}
inline std::string* SystemProxySettingsProto::unsafe_arena_release_system_proxy_settings() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.SystemProxySettingsProto.system_proxy_settings)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return system_proxy_settings_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SystemProxySettingsProto::unsafe_arena_set_allocated_system_proxy_settings(
    std::string* system_proxy_settings) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (system_proxy_settings != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  system_proxy_settings_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      system_proxy_settings, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.SystemProxySettingsProto.system_proxy_settings)
}

// -------------------------------------------------------------------

// RequiredClientCertificateForDeviceProto

// optional string required_client_certificate_for_device = 1;
inline bool RequiredClientCertificateForDeviceProto::_internal_has_required_client_certificate_for_device() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RequiredClientCertificateForDeviceProto::has_required_client_certificate_for_device() const {
  return _internal_has_required_client_certificate_for_device();
}
inline void RequiredClientCertificateForDeviceProto::clear_required_client_certificate_for_device() {
  required_client_certificate_for_device_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RequiredClientCertificateForDeviceProto::required_client_certificate_for_device() const {
  // @@protoc_insertion_point(field_get:enterprise_management.RequiredClientCertificateForDeviceProto.required_client_certificate_for_device)
  return _internal_required_client_certificate_for_device();
}
inline void RequiredClientCertificateForDeviceProto::set_required_client_certificate_for_device(const std::string& value) {
  _internal_set_required_client_certificate_for_device(value);
  // @@protoc_insertion_point(field_set:enterprise_management.RequiredClientCertificateForDeviceProto.required_client_certificate_for_device)
}
inline std::string* RequiredClientCertificateForDeviceProto::mutable_required_client_certificate_for_device() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.RequiredClientCertificateForDeviceProto.required_client_certificate_for_device)
  return _internal_mutable_required_client_certificate_for_device();
}
inline const std::string& RequiredClientCertificateForDeviceProto::_internal_required_client_certificate_for_device() const {
  return required_client_certificate_for_device_.Get();
}
inline void RequiredClientCertificateForDeviceProto::_internal_set_required_client_certificate_for_device(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  required_client_certificate_for_device_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RequiredClientCertificateForDeviceProto::set_required_client_certificate_for_device(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  required_client_certificate_for_device_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:enterprise_management.RequiredClientCertificateForDeviceProto.required_client_certificate_for_device)
}
inline void RequiredClientCertificateForDeviceProto::set_required_client_certificate_for_device(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  required_client_certificate_for_device_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:enterprise_management.RequiredClientCertificateForDeviceProto.required_client_certificate_for_device)
}
inline void RequiredClientCertificateForDeviceProto::set_required_client_certificate_for_device(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  required_client_certificate_for_device_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:enterprise_management.RequiredClientCertificateForDeviceProto.required_client_certificate_for_device)
}
inline std::string* RequiredClientCertificateForDeviceProto::_internal_mutable_required_client_certificate_for_device() {
  _has_bits_[0] |= 0x00000001u;
  return required_client_certificate_for_device_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RequiredClientCertificateForDeviceProto::release_required_client_certificate_for_device() {
  // @@protoc_insertion_point(field_release:enterprise_management.RequiredClientCertificateForDeviceProto.required_client_certificate_for_device)
  if (!_internal_has_required_client_certificate_for_device()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return required_client_certificate_for_device_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequiredClientCertificateForDeviceProto::set_allocated_required_client_certificate_for_device(std::string* required_client_certificate_for_device) {
  if (required_client_certificate_for_device != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  required_client_certificate_for_device_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), required_client_certificate_for_device,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.RequiredClientCertificateForDeviceProto.required_client_certificate_for_device)
}
inline std::string* RequiredClientCertificateForDeviceProto::unsafe_arena_release_required_client_certificate_for_device() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_management.RequiredClientCertificateForDeviceProto.required_client_certificate_for_device)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return required_client_certificate_for_device_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RequiredClientCertificateForDeviceProto::unsafe_arena_set_allocated_required_client_certificate_for_device(
    std::string* required_client_certificate_for_device) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (required_client_certificate_for_device != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  required_client_certificate_for_device_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      required_client_certificate_for_device, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.RequiredClientCertificateForDeviceProto.required_client_certificate_for_device)
}

// -------------------------------------------------------------------

// ChromeDeviceSettingsProto

// optional .enterprise_management.DevicePolicyRefreshRateProto device_policy_refresh_rate = 1;
inline bool ChromeDeviceSettingsProto::_internal_has_device_policy_refresh_rate() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || device_policy_refresh_rate_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_device_policy_refresh_rate() const {
  return _internal_has_device_policy_refresh_rate();
}
inline void ChromeDeviceSettingsProto::clear_device_policy_refresh_rate() {
  if (device_policy_refresh_rate_ != nullptr) device_policy_refresh_rate_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::enterprise_management::DevicePolicyRefreshRateProto& ChromeDeviceSettingsProto::_internal_device_policy_refresh_rate() const {
  const ::enterprise_management::DevicePolicyRefreshRateProto* p = device_policy_refresh_rate_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::DevicePolicyRefreshRateProto*>(
      &::enterprise_management::_DevicePolicyRefreshRateProto_default_instance_);
}
inline const ::enterprise_management::DevicePolicyRefreshRateProto& ChromeDeviceSettingsProto::device_policy_refresh_rate() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.device_policy_refresh_rate)
  return _internal_device_policy_refresh_rate();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_device_policy_refresh_rate(
    ::enterprise_management::DevicePolicyRefreshRateProto* device_policy_refresh_rate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_policy_refresh_rate_);
  }
  device_policy_refresh_rate_ = device_policy_refresh_rate;
  if (device_policy_refresh_rate) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_policy_refresh_rate)
}
inline ::enterprise_management::DevicePolicyRefreshRateProto* ChromeDeviceSettingsProto::release_device_policy_refresh_rate() {
  auto temp = unsafe_arena_release_device_policy_refresh_rate();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::DevicePolicyRefreshRateProto* ChromeDeviceSettingsProto::unsafe_arena_release_device_policy_refresh_rate() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.device_policy_refresh_rate)
  _has_bits_[0] &= ~0x00000001u;
  ::enterprise_management::DevicePolicyRefreshRateProto* temp = device_policy_refresh_rate_;
  device_policy_refresh_rate_ = nullptr;
  return temp;
}
inline ::enterprise_management::DevicePolicyRefreshRateProto* ChromeDeviceSettingsProto::_internal_mutable_device_policy_refresh_rate() {
  _has_bits_[0] |= 0x00000001u;
  if (device_policy_refresh_rate_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::DevicePolicyRefreshRateProto>(GetArena());
    device_policy_refresh_rate_ = p;
  }
  return device_policy_refresh_rate_;
}
inline ::enterprise_management::DevicePolicyRefreshRateProto* ChromeDeviceSettingsProto::mutable_device_policy_refresh_rate() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.device_policy_refresh_rate)
  return _internal_mutable_device_policy_refresh_rate();
}
inline void ChromeDeviceSettingsProto::set_allocated_device_policy_refresh_rate(::enterprise_management::DevicePolicyRefreshRateProto* device_policy_refresh_rate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_policy_refresh_rate_;
  }
  if (device_policy_refresh_rate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_policy_refresh_rate);
    if (message_arena != submessage_arena) {
      device_policy_refresh_rate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_policy_refresh_rate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  device_policy_refresh_rate_ = device_policy_refresh_rate;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_policy_refresh_rate)
}

// optional .enterprise_management.UserWhitelistProto user_whitelist = 2;
inline bool ChromeDeviceSettingsProto::_internal_has_user_whitelist() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || user_whitelist_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_user_whitelist() const {
  return _internal_has_user_whitelist();
}
inline void ChromeDeviceSettingsProto::clear_user_whitelist() {
  if (user_whitelist_ != nullptr) user_whitelist_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::enterprise_management::UserWhitelistProto& ChromeDeviceSettingsProto::_internal_user_whitelist() const {
  const ::enterprise_management::UserWhitelistProto* p = user_whitelist_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::UserWhitelistProto*>(
      &::enterprise_management::_UserWhitelistProto_default_instance_);
}
inline const ::enterprise_management::UserWhitelistProto& ChromeDeviceSettingsProto::user_whitelist() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.user_whitelist)
  return _internal_user_whitelist();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_user_whitelist(
    ::enterprise_management::UserWhitelistProto* user_whitelist) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_whitelist_);
  }
  user_whitelist_ = user_whitelist;
  if (user_whitelist) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.user_whitelist)
}
inline ::enterprise_management::UserWhitelistProto* ChromeDeviceSettingsProto::release_user_whitelist() {
  auto temp = unsafe_arena_release_user_whitelist();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::UserWhitelistProto* ChromeDeviceSettingsProto::unsafe_arena_release_user_whitelist() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.user_whitelist)
  _has_bits_[0] &= ~0x00000002u;
  ::enterprise_management::UserWhitelistProto* temp = user_whitelist_;
  user_whitelist_ = nullptr;
  return temp;
}
inline ::enterprise_management::UserWhitelistProto* ChromeDeviceSettingsProto::_internal_mutable_user_whitelist() {
  _has_bits_[0] |= 0x00000002u;
  if (user_whitelist_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::UserWhitelistProto>(GetArena());
    user_whitelist_ = p;
  }
  return user_whitelist_;
}
inline ::enterprise_management::UserWhitelistProto* ChromeDeviceSettingsProto::mutable_user_whitelist() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.user_whitelist)
  return _internal_mutable_user_whitelist();
}
inline void ChromeDeviceSettingsProto::set_allocated_user_whitelist(::enterprise_management::UserWhitelistProto* user_whitelist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete user_whitelist_;
  }
  if (user_whitelist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user_whitelist);
    if (message_arena != submessage_arena) {
      user_whitelist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_whitelist, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_whitelist_ = user_whitelist;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.user_whitelist)
}

// optional .enterprise_management.GuestModeEnabledProto guest_mode_enabled = 3;
inline bool ChromeDeviceSettingsProto::_internal_has_guest_mode_enabled() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || guest_mode_enabled_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_guest_mode_enabled() const {
  return _internal_has_guest_mode_enabled();
}
inline void ChromeDeviceSettingsProto::clear_guest_mode_enabled() {
  if (guest_mode_enabled_ != nullptr) guest_mode_enabled_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::enterprise_management::GuestModeEnabledProto& ChromeDeviceSettingsProto::_internal_guest_mode_enabled() const {
  const ::enterprise_management::GuestModeEnabledProto* p = guest_mode_enabled_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::GuestModeEnabledProto*>(
      &::enterprise_management::_GuestModeEnabledProto_default_instance_);
}
inline const ::enterprise_management::GuestModeEnabledProto& ChromeDeviceSettingsProto::guest_mode_enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.guest_mode_enabled)
  return _internal_guest_mode_enabled();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_guest_mode_enabled(
    ::enterprise_management::GuestModeEnabledProto* guest_mode_enabled) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guest_mode_enabled_);
  }
  guest_mode_enabled_ = guest_mode_enabled;
  if (guest_mode_enabled) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.guest_mode_enabled)
}
inline ::enterprise_management::GuestModeEnabledProto* ChromeDeviceSettingsProto::release_guest_mode_enabled() {
  auto temp = unsafe_arena_release_guest_mode_enabled();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::GuestModeEnabledProto* ChromeDeviceSettingsProto::unsafe_arena_release_guest_mode_enabled() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.guest_mode_enabled)
  _has_bits_[0] &= ~0x00000004u;
  ::enterprise_management::GuestModeEnabledProto* temp = guest_mode_enabled_;
  guest_mode_enabled_ = nullptr;
  return temp;
}
inline ::enterprise_management::GuestModeEnabledProto* ChromeDeviceSettingsProto::_internal_mutable_guest_mode_enabled() {
  _has_bits_[0] |= 0x00000004u;
  if (guest_mode_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::GuestModeEnabledProto>(GetArena());
    guest_mode_enabled_ = p;
  }
  return guest_mode_enabled_;
}
inline ::enterprise_management::GuestModeEnabledProto* ChromeDeviceSettingsProto::mutable_guest_mode_enabled() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.guest_mode_enabled)
  return _internal_mutable_guest_mode_enabled();
}
inline void ChromeDeviceSettingsProto::set_allocated_guest_mode_enabled(::enterprise_management::GuestModeEnabledProto* guest_mode_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete guest_mode_enabled_;
  }
  if (guest_mode_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(guest_mode_enabled);
    if (message_arena != submessage_arena) {
      guest_mode_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guest_mode_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  guest_mode_enabled_ = guest_mode_enabled;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.guest_mode_enabled)
}

// optional .enterprise_management.OBSOLETE_DeviceProxySettingsProto device_proxy_settings = 4 [deprecated = true];
inline bool ChromeDeviceSettingsProto::_internal_has_device_proxy_settings() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || device_proxy_settings_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_device_proxy_settings() const {
  return _internal_has_device_proxy_settings();
}
inline void ChromeDeviceSettingsProto::clear_device_proxy_settings() {
  if (device_proxy_settings_ != nullptr) device_proxy_settings_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::enterprise_management::OBSOLETE_DeviceProxySettingsProto& ChromeDeviceSettingsProto::_internal_device_proxy_settings() const {
  const ::enterprise_management::OBSOLETE_DeviceProxySettingsProto* p = device_proxy_settings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::OBSOLETE_DeviceProxySettingsProto*>(
      &::enterprise_management::_OBSOLETE_DeviceProxySettingsProto_default_instance_);
}
inline const ::enterprise_management::OBSOLETE_DeviceProxySettingsProto& ChromeDeviceSettingsProto::device_proxy_settings() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.device_proxy_settings)
  return _internal_device_proxy_settings();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_device_proxy_settings(
    ::enterprise_management::OBSOLETE_DeviceProxySettingsProto* device_proxy_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_proxy_settings_);
  }
  device_proxy_settings_ = device_proxy_settings;
  if (device_proxy_settings) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_proxy_settings)
}
inline ::enterprise_management::OBSOLETE_DeviceProxySettingsProto* ChromeDeviceSettingsProto::release_device_proxy_settings() {
  auto temp = unsafe_arena_release_device_proxy_settings();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::OBSOLETE_DeviceProxySettingsProto* ChromeDeviceSettingsProto::unsafe_arena_release_device_proxy_settings() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.device_proxy_settings)
  _has_bits_[0] &= ~0x00000008u;
  ::enterprise_management::OBSOLETE_DeviceProxySettingsProto* temp = device_proxy_settings_;
  device_proxy_settings_ = nullptr;
  return temp;
}
inline ::enterprise_management::OBSOLETE_DeviceProxySettingsProto* ChromeDeviceSettingsProto::_internal_mutable_device_proxy_settings() {
  _has_bits_[0] |= 0x00000008u;
  if (device_proxy_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::OBSOLETE_DeviceProxySettingsProto>(GetArena());
    device_proxy_settings_ = p;
  }
  return device_proxy_settings_;
}
inline ::enterprise_management::OBSOLETE_DeviceProxySettingsProto* ChromeDeviceSettingsProto::mutable_device_proxy_settings() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.device_proxy_settings)
  return _internal_mutable_device_proxy_settings();
}
inline void ChromeDeviceSettingsProto::set_allocated_device_proxy_settings(::enterprise_management::OBSOLETE_DeviceProxySettingsProto* device_proxy_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_proxy_settings_;
  }
  if (device_proxy_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_proxy_settings);
    if (message_arena != submessage_arena) {
      device_proxy_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_proxy_settings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  device_proxy_settings_ = device_proxy_settings;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_proxy_settings)
}

// optional .enterprise_management.CameraEnabledProto camera_enabled = 5;
inline bool ChromeDeviceSettingsProto::_internal_has_camera_enabled() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || camera_enabled_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_camera_enabled() const {
  return _internal_has_camera_enabled();
}
inline void ChromeDeviceSettingsProto::clear_camera_enabled() {
  if (camera_enabled_ != nullptr) camera_enabled_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::enterprise_management::CameraEnabledProto& ChromeDeviceSettingsProto::_internal_camera_enabled() const {
  const ::enterprise_management::CameraEnabledProto* p = camera_enabled_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::CameraEnabledProto*>(
      &::enterprise_management::_CameraEnabledProto_default_instance_);
}
inline const ::enterprise_management::CameraEnabledProto& ChromeDeviceSettingsProto::camera_enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.camera_enabled)
  return _internal_camera_enabled();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_camera_enabled(
    ::enterprise_management::CameraEnabledProto* camera_enabled) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(camera_enabled_);
  }
  camera_enabled_ = camera_enabled;
  if (camera_enabled) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.camera_enabled)
}
inline ::enterprise_management::CameraEnabledProto* ChromeDeviceSettingsProto::release_camera_enabled() {
  auto temp = unsafe_arena_release_camera_enabled();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::CameraEnabledProto* ChromeDeviceSettingsProto::unsafe_arena_release_camera_enabled() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.camera_enabled)
  _has_bits_[0] &= ~0x00000010u;
  ::enterprise_management::CameraEnabledProto* temp = camera_enabled_;
  camera_enabled_ = nullptr;
  return temp;
}
inline ::enterprise_management::CameraEnabledProto* ChromeDeviceSettingsProto::_internal_mutable_camera_enabled() {
  _has_bits_[0] |= 0x00000010u;
  if (camera_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::CameraEnabledProto>(GetArena());
    camera_enabled_ = p;
  }
  return camera_enabled_;
}
inline ::enterprise_management::CameraEnabledProto* ChromeDeviceSettingsProto::mutable_camera_enabled() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.camera_enabled)
  return _internal_mutable_camera_enabled();
}
inline void ChromeDeviceSettingsProto::set_allocated_camera_enabled(::enterprise_management::CameraEnabledProto* camera_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete camera_enabled_;
  }
  if (camera_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(camera_enabled);
    if (message_arena != submessage_arena) {
      camera_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  camera_enabled_ = camera_enabled;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.camera_enabled)
}

// optional .enterprise_management.ShowUserNamesOnSigninProto show_user_names = 6;
inline bool ChromeDeviceSettingsProto::_internal_has_show_user_names() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || show_user_names_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_show_user_names() const {
  return _internal_has_show_user_names();
}
inline void ChromeDeviceSettingsProto::clear_show_user_names() {
  if (show_user_names_ != nullptr) show_user_names_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::enterprise_management::ShowUserNamesOnSigninProto& ChromeDeviceSettingsProto::_internal_show_user_names() const {
  const ::enterprise_management::ShowUserNamesOnSigninProto* p = show_user_names_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::ShowUserNamesOnSigninProto*>(
      &::enterprise_management::_ShowUserNamesOnSigninProto_default_instance_);
}
inline const ::enterprise_management::ShowUserNamesOnSigninProto& ChromeDeviceSettingsProto::show_user_names() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.show_user_names)
  return _internal_show_user_names();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_show_user_names(
    ::enterprise_management::ShowUserNamesOnSigninProto* show_user_names) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_user_names_);
  }
  show_user_names_ = show_user_names;
  if (show_user_names) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.show_user_names)
}
inline ::enterprise_management::ShowUserNamesOnSigninProto* ChromeDeviceSettingsProto::release_show_user_names() {
  auto temp = unsafe_arena_release_show_user_names();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::ShowUserNamesOnSigninProto* ChromeDeviceSettingsProto::unsafe_arena_release_show_user_names() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.show_user_names)
  _has_bits_[0] &= ~0x00000020u;
  ::enterprise_management::ShowUserNamesOnSigninProto* temp = show_user_names_;
  show_user_names_ = nullptr;
  return temp;
}
inline ::enterprise_management::ShowUserNamesOnSigninProto* ChromeDeviceSettingsProto::_internal_mutable_show_user_names() {
  _has_bits_[0] |= 0x00000020u;
  if (show_user_names_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::ShowUserNamesOnSigninProto>(GetArena());
    show_user_names_ = p;
  }
  return show_user_names_;
}
inline ::enterprise_management::ShowUserNamesOnSigninProto* ChromeDeviceSettingsProto::mutable_show_user_names() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.show_user_names)
  return _internal_mutable_show_user_names();
}
inline void ChromeDeviceSettingsProto::set_allocated_show_user_names(::enterprise_management::ShowUserNamesOnSigninProto* show_user_names) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete show_user_names_;
  }
  if (show_user_names) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(show_user_names);
    if (message_arena != submessage_arena) {
      show_user_names = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show_user_names, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  show_user_names_ = show_user_names;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.show_user_names)
}

// optional .enterprise_management.DataRoamingEnabledProto data_roaming_enabled = 7;
inline bool ChromeDeviceSettingsProto::_internal_has_data_roaming_enabled() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || data_roaming_enabled_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_data_roaming_enabled() const {
  return _internal_has_data_roaming_enabled();
}
inline void ChromeDeviceSettingsProto::clear_data_roaming_enabled() {
  if (data_roaming_enabled_ != nullptr) data_roaming_enabled_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::enterprise_management::DataRoamingEnabledProto& ChromeDeviceSettingsProto::_internal_data_roaming_enabled() const {
  const ::enterprise_management::DataRoamingEnabledProto* p = data_roaming_enabled_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::DataRoamingEnabledProto*>(
      &::enterprise_management::_DataRoamingEnabledProto_default_instance_);
}
inline const ::enterprise_management::DataRoamingEnabledProto& ChromeDeviceSettingsProto::data_roaming_enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.data_roaming_enabled)
  return _internal_data_roaming_enabled();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_data_roaming_enabled(
    ::enterprise_management::DataRoamingEnabledProto* data_roaming_enabled) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_roaming_enabled_);
  }
  data_roaming_enabled_ = data_roaming_enabled;
  if (data_roaming_enabled) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.data_roaming_enabled)
}
inline ::enterprise_management::DataRoamingEnabledProto* ChromeDeviceSettingsProto::release_data_roaming_enabled() {
  auto temp = unsafe_arena_release_data_roaming_enabled();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::DataRoamingEnabledProto* ChromeDeviceSettingsProto::unsafe_arena_release_data_roaming_enabled() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.data_roaming_enabled)
  _has_bits_[0] &= ~0x00000040u;
  ::enterprise_management::DataRoamingEnabledProto* temp = data_roaming_enabled_;
  data_roaming_enabled_ = nullptr;
  return temp;
}
inline ::enterprise_management::DataRoamingEnabledProto* ChromeDeviceSettingsProto::_internal_mutable_data_roaming_enabled() {
  _has_bits_[0] |= 0x00000040u;
  if (data_roaming_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::DataRoamingEnabledProto>(GetArena());
    data_roaming_enabled_ = p;
  }
  return data_roaming_enabled_;
}
inline ::enterprise_management::DataRoamingEnabledProto* ChromeDeviceSettingsProto::mutable_data_roaming_enabled() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.data_roaming_enabled)
  return _internal_mutable_data_roaming_enabled();
}
inline void ChromeDeviceSettingsProto::set_allocated_data_roaming_enabled(::enterprise_management::DataRoamingEnabledProto* data_roaming_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_roaming_enabled_;
  }
  if (data_roaming_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data_roaming_enabled);
    if (message_arena != submessage_arena) {
      data_roaming_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_roaming_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  data_roaming_enabled_ = data_roaming_enabled;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.data_roaming_enabled)
}

// optional .enterprise_management.AllowNewUsersProto allow_new_users = 8;
inline bool ChromeDeviceSettingsProto::_internal_has_allow_new_users() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || allow_new_users_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_allow_new_users() const {
  return _internal_has_allow_new_users();
}
inline void ChromeDeviceSettingsProto::clear_allow_new_users() {
  if (allow_new_users_ != nullptr) allow_new_users_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::enterprise_management::AllowNewUsersProto& ChromeDeviceSettingsProto::_internal_allow_new_users() const {
  const ::enterprise_management::AllowNewUsersProto* p = allow_new_users_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::AllowNewUsersProto*>(
      &::enterprise_management::_AllowNewUsersProto_default_instance_);
}
inline const ::enterprise_management::AllowNewUsersProto& ChromeDeviceSettingsProto::allow_new_users() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.allow_new_users)
  return _internal_allow_new_users();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_allow_new_users(
    ::enterprise_management::AllowNewUsersProto* allow_new_users) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(allow_new_users_);
  }
  allow_new_users_ = allow_new_users;
  if (allow_new_users) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.allow_new_users)
}
inline ::enterprise_management::AllowNewUsersProto* ChromeDeviceSettingsProto::release_allow_new_users() {
  auto temp = unsafe_arena_release_allow_new_users();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::AllowNewUsersProto* ChromeDeviceSettingsProto::unsafe_arena_release_allow_new_users() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.allow_new_users)
  _has_bits_[0] &= ~0x00000080u;
  ::enterprise_management::AllowNewUsersProto* temp = allow_new_users_;
  allow_new_users_ = nullptr;
  return temp;
}
inline ::enterprise_management::AllowNewUsersProto* ChromeDeviceSettingsProto::_internal_mutable_allow_new_users() {
  _has_bits_[0] |= 0x00000080u;
  if (allow_new_users_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::AllowNewUsersProto>(GetArena());
    allow_new_users_ = p;
  }
  return allow_new_users_;
}
inline ::enterprise_management::AllowNewUsersProto* ChromeDeviceSettingsProto::mutable_allow_new_users() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.allow_new_users)
  return _internal_mutable_allow_new_users();
}
inline void ChromeDeviceSettingsProto::set_allocated_allow_new_users(::enterprise_management::AllowNewUsersProto* allow_new_users) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete allow_new_users_;
  }
  if (allow_new_users) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(allow_new_users);
    if (message_arena != submessage_arena) {
      allow_new_users = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, allow_new_users, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  allow_new_users_ = allow_new_users;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.allow_new_users)
}

// optional .enterprise_management.MetricsEnabledProto metrics_enabled = 9;
inline bool ChromeDeviceSettingsProto::_internal_has_metrics_enabled() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || metrics_enabled_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_metrics_enabled() const {
  return _internal_has_metrics_enabled();
}
inline void ChromeDeviceSettingsProto::clear_metrics_enabled() {
  if (metrics_enabled_ != nullptr) metrics_enabled_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::enterprise_management::MetricsEnabledProto& ChromeDeviceSettingsProto::_internal_metrics_enabled() const {
  const ::enterprise_management::MetricsEnabledProto* p = metrics_enabled_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::MetricsEnabledProto*>(
      &::enterprise_management::_MetricsEnabledProto_default_instance_);
}
inline const ::enterprise_management::MetricsEnabledProto& ChromeDeviceSettingsProto::metrics_enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.metrics_enabled)
  return _internal_metrics_enabled();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_metrics_enabled(
    ::enterprise_management::MetricsEnabledProto* metrics_enabled) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metrics_enabled_);
  }
  metrics_enabled_ = metrics_enabled;
  if (metrics_enabled) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.metrics_enabled)
}
inline ::enterprise_management::MetricsEnabledProto* ChromeDeviceSettingsProto::release_metrics_enabled() {
  auto temp = unsafe_arena_release_metrics_enabled();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::MetricsEnabledProto* ChromeDeviceSettingsProto::unsafe_arena_release_metrics_enabled() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.metrics_enabled)
  _has_bits_[0] &= ~0x00000100u;
  ::enterprise_management::MetricsEnabledProto* temp = metrics_enabled_;
  metrics_enabled_ = nullptr;
  return temp;
}
inline ::enterprise_management::MetricsEnabledProto* ChromeDeviceSettingsProto::_internal_mutable_metrics_enabled() {
  _has_bits_[0] |= 0x00000100u;
  if (metrics_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::MetricsEnabledProto>(GetArena());
    metrics_enabled_ = p;
  }
  return metrics_enabled_;
}
inline ::enterprise_management::MetricsEnabledProto* ChromeDeviceSettingsProto::mutable_metrics_enabled() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.metrics_enabled)
  return _internal_mutable_metrics_enabled();
}
inline void ChromeDeviceSettingsProto::set_allocated_metrics_enabled(::enterprise_management::MetricsEnabledProto* metrics_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete metrics_enabled_;
  }
  if (metrics_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(metrics_enabled);
    if (message_arena != submessage_arena) {
      metrics_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metrics_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  metrics_enabled_ = metrics_enabled;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.metrics_enabled)
}

// optional .enterprise_management.ReleaseChannelProto release_channel = 10;
inline bool ChromeDeviceSettingsProto::_internal_has_release_channel() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || release_channel_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_release_channel() const {
  return _internal_has_release_channel();
}
inline void ChromeDeviceSettingsProto::clear_release_channel() {
  if (release_channel_ != nullptr) release_channel_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::enterprise_management::ReleaseChannelProto& ChromeDeviceSettingsProto::_internal_release_channel() const {
  const ::enterprise_management::ReleaseChannelProto* p = release_channel_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::ReleaseChannelProto*>(
      &::enterprise_management::_ReleaseChannelProto_default_instance_);
}
inline const ::enterprise_management::ReleaseChannelProto& ChromeDeviceSettingsProto::release_channel() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.release_channel)
  return _internal_release_channel();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_release_channel(
    ::enterprise_management::ReleaseChannelProto* release_channel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(release_channel_);
  }
  release_channel_ = release_channel;
  if (release_channel) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.release_channel)
}
inline ::enterprise_management::ReleaseChannelProto* ChromeDeviceSettingsProto::release_release_channel() {
  auto temp = unsafe_arena_release_release_channel();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::ReleaseChannelProto* ChromeDeviceSettingsProto::unsafe_arena_release_release_channel() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.release_channel)
  _has_bits_[0] &= ~0x00000200u;
  ::enterprise_management::ReleaseChannelProto* temp = release_channel_;
  release_channel_ = nullptr;
  return temp;
}
inline ::enterprise_management::ReleaseChannelProto* ChromeDeviceSettingsProto::_internal_mutable_release_channel() {
  _has_bits_[0] |= 0x00000200u;
  if (release_channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::ReleaseChannelProto>(GetArena());
    release_channel_ = p;
  }
  return release_channel_;
}
inline ::enterprise_management::ReleaseChannelProto* ChromeDeviceSettingsProto::mutable_release_channel() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.release_channel)
  return _internal_mutable_release_channel();
}
inline void ChromeDeviceSettingsProto::set_allocated_release_channel(::enterprise_management::ReleaseChannelProto* release_channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete release_channel_;
  }
  if (release_channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(release_channel);
    if (message_arena != submessage_arena) {
      release_channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, release_channel, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  release_channel_ = release_channel;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.release_channel)
}

// optional .enterprise_management.DeviceOpenNetworkConfigurationProto open_network_configuration = 11;
inline bool ChromeDeviceSettingsProto::_internal_has_open_network_configuration() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || open_network_configuration_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_open_network_configuration() const {
  return _internal_has_open_network_configuration();
}
inline void ChromeDeviceSettingsProto::clear_open_network_configuration() {
  if (open_network_configuration_ != nullptr) open_network_configuration_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::enterprise_management::DeviceOpenNetworkConfigurationProto& ChromeDeviceSettingsProto::_internal_open_network_configuration() const {
  const ::enterprise_management::DeviceOpenNetworkConfigurationProto* p = open_network_configuration_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::DeviceOpenNetworkConfigurationProto*>(
      &::enterprise_management::_DeviceOpenNetworkConfigurationProto_default_instance_);
}
inline const ::enterprise_management::DeviceOpenNetworkConfigurationProto& ChromeDeviceSettingsProto::open_network_configuration() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.open_network_configuration)
  return _internal_open_network_configuration();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_open_network_configuration(
    ::enterprise_management::DeviceOpenNetworkConfigurationProto* open_network_configuration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(open_network_configuration_);
  }
  open_network_configuration_ = open_network_configuration;
  if (open_network_configuration) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.open_network_configuration)
}
inline ::enterprise_management::DeviceOpenNetworkConfigurationProto* ChromeDeviceSettingsProto::release_open_network_configuration() {
  auto temp = unsafe_arena_release_open_network_configuration();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::DeviceOpenNetworkConfigurationProto* ChromeDeviceSettingsProto::unsafe_arena_release_open_network_configuration() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.open_network_configuration)
  _has_bits_[0] &= ~0x00000400u;
  ::enterprise_management::DeviceOpenNetworkConfigurationProto* temp = open_network_configuration_;
  open_network_configuration_ = nullptr;
  return temp;
}
inline ::enterprise_management::DeviceOpenNetworkConfigurationProto* ChromeDeviceSettingsProto::_internal_mutable_open_network_configuration() {
  _has_bits_[0] |= 0x00000400u;
  if (open_network_configuration_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::DeviceOpenNetworkConfigurationProto>(GetArena());
    open_network_configuration_ = p;
  }
  return open_network_configuration_;
}
inline ::enterprise_management::DeviceOpenNetworkConfigurationProto* ChromeDeviceSettingsProto::mutable_open_network_configuration() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.open_network_configuration)
  return _internal_mutable_open_network_configuration();
}
inline void ChromeDeviceSettingsProto::set_allocated_open_network_configuration(::enterprise_management::DeviceOpenNetworkConfigurationProto* open_network_configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete open_network_configuration_;
  }
  if (open_network_configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(open_network_configuration);
    if (message_arena != submessage_arena) {
      open_network_configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, open_network_configuration, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  open_network_configuration_ = open_network_configuration;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.open_network_configuration)
}

// optional .enterprise_management.DeviceReportingProto device_reporting = 12;
inline bool ChromeDeviceSettingsProto::_internal_has_device_reporting() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || device_reporting_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_device_reporting() const {
  return _internal_has_device_reporting();
}
inline void ChromeDeviceSettingsProto::clear_device_reporting() {
  if (device_reporting_ != nullptr) device_reporting_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::enterprise_management::DeviceReportingProto& ChromeDeviceSettingsProto::_internal_device_reporting() const {
  const ::enterprise_management::DeviceReportingProto* p = device_reporting_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::DeviceReportingProto*>(
      &::enterprise_management::_DeviceReportingProto_default_instance_);
}
inline const ::enterprise_management::DeviceReportingProto& ChromeDeviceSettingsProto::device_reporting() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.device_reporting)
  return _internal_device_reporting();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_device_reporting(
    ::enterprise_management::DeviceReportingProto* device_reporting) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_reporting_);
  }
  device_reporting_ = device_reporting;
  if (device_reporting) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_reporting)
}
inline ::enterprise_management::DeviceReportingProto* ChromeDeviceSettingsProto::release_device_reporting() {
  auto temp = unsafe_arena_release_device_reporting();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::DeviceReportingProto* ChromeDeviceSettingsProto::unsafe_arena_release_device_reporting() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.device_reporting)
  _has_bits_[0] &= ~0x00000800u;
  ::enterprise_management::DeviceReportingProto* temp = device_reporting_;
  device_reporting_ = nullptr;
  return temp;
}
inline ::enterprise_management::DeviceReportingProto* ChromeDeviceSettingsProto::_internal_mutable_device_reporting() {
  _has_bits_[0] |= 0x00000800u;
  if (device_reporting_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::DeviceReportingProto>(GetArena());
    device_reporting_ = p;
  }
  return device_reporting_;
}
inline ::enterprise_management::DeviceReportingProto* ChromeDeviceSettingsProto::mutable_device_reporting() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.device_reporting)
  return _internal_mutable_device_reporting();
}
inline void ChromeDeviceSettingsProto::set_allocated_device_reporting(::enterprise_management::DeviceReportingProto* device_reporting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_reporting_;
  }
  if (device_reporting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_reporting);
    if (message_arena != submessage_arena) {
      device_reporting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_reporting, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  device_reporting_ = device_reporting;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_reporting)
}

// optional .enterprise_management.EphemeralUsersEnabledProto ephemeral_users_enabled = 13;
inline bool ChromeDeviceSettingsProto::_internal_has_ephemeral_users_enabled() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || ephemeral_users_enabled_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_ephemeral_users_enabled() const {
  return _internal_has_ephemeral_users_enabled();
}
inline void ChromeDeviceSettingsProto::clear_ephemeral_users_enabled() {
  if (ephemeral_users_enabled_ != nullptr) ephemeral_users_enabled_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::enterprise_management::EphemeralUsersEnabledProto& ChromeDeviceSettingsProto::_internal_ephemeral_users_enabled() const {
  const ::enterprise_management::EphemeralUsersEnabledProto* p = ephemeral_users_enabled_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::EphemeralUsersEnabledProto*>(
      &::enterprise_management::_EphemeralUsersEnabledProto_default_instance_);
}
inline const ::enterprise_management::EphemeralUsersEnabledProto& ChromeDeviceSettingsProto::ephemeral_users_enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.ephemeral_users_enabled)
  return _internal_ephemeral_users_enabled();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_ephemeral_users_enabled(
    ::enterprise_management::EphemeralUsersEnabledProto* ephemeral_users_enabled) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ephemeral_users_enabled_);
  }
  ephemeral_users_enabled_ = ephemeral_users_enabled;
  if (ephemeral_users_enabled) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.ephemeral_users_enabled)
}
inline ::enterprise_management::EphemeralUsersEnabledProto* ChromeDeviceSettingsProto::release_ephemeral_users_enabled() {
  auto temp = unsafe_arena_release_ephemeral_users_enabled();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::EphemeralUsersEnabledProto* ChromeDeviceSettingsProto::unsafe_arena_release_ephemeral_users_enabled() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.ephemeral_users_enabled)
  _has_bits_[0] &= ~0x00001000u;
  ::enterprise_management::EphemeralUsersEnabledProto* temp = ephemeral_users_enabled_;
  ephemeral_users_enabled_ = nullptr;
  return temp;
}
inline ::enterprise_management::EphemeralUsersEnabledProto* ChromeDeviceSettingsProto::_internal_mutable_ephemeral_users_enabled() {
  _has_bits_[0] |= 0x00001000u;
  if (ephemeral_users_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::EphemeralUsersEnabledProto>(GetArena());
    ephemeral_users_enabled_ = p;
  }
  return ephemeral_users_enabled_;
}
inline ::enterprise_management::EphemeralUsersEnabledProto* ChromeDeviceSettingsProto::mutable_ephemeral_users_enabled() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.ephemeral_users_enabled)
  return _internal_mutable_ephemeral_users_enabled();
}
inline void ChromeDeviceSettingsProto::set_allocated_ephemeral_users_enabled(::enterprise_management::EphemeralUsersEnabledProto* ephemeral_users_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ephemeral_users_enabled_;
  }
  if (ephemeral_users_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ephemeral_users_enabled);
    if (message_arena != submessage_arena) {
      ephemeral_users_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ephemeral_users_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  ephemeral_users_enabled_ = ephemeral_users_enabled;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.ephemeral_users_enabled)
}

// optional .enterprise_management.OBSOLETE_AppPackProto app_pack = 14 [deprecated = true];
inline bool ChromeDeviceSettingsProto::_internal_has_app_pack() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || app_pack_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_app_pack() const {
  return _internal_has_app_pack();
}
inline void ChromeDeviceSettingsProto::clear_app_pack() {
  if (app_pack_ != nullptr) app_pack_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
inline const ::enterprise_management::OBSOLETE_AppPackProto& ChromeDeviceSettingsProto::_internal_app_pack() const {
  const ::enterprise_management::OBSOLETE_AppPackProto* p = app_pack_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::OBSOLETE_AppPackProto*>(
      &::enterprise_management::_OBSOLETE_AppPackProto_default_instance_);
}
inline const ::enterprise_management::OBSOLETE_AppPackProto& ChromeDeviceSettingsProto::app_pack() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.app_pack)
  return _internal_app_pack();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_app_pack(
    ::enterprise_management::OBSOLETE_AppPackProto* app_pack) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_pack_);
  }
  app_pack_ = app_pack;
  if (app_pack) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.app_pack)
}
inline ::enterprise_management::OBSOLETE_AppPackProto* ChromeDeviceSettingsProto::release_app_pack() {
  auto temp = unsafe_arena_release_app_pack();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::OBSOLETE_AppPackProto* ChromeDeviceSettingsProto::unsafe_arena_release_app_pack() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.app_pack)
  _has_bits_[0] &= ~0x00002000u;
  ::enterprise_management::OBSOLETE_AppPackProto* temp = app_pack_;
  app_pack_ = nullptr;
  return temp;
}
inline ::enterprise_management::OBSOLETE_AppPackProto* ChromeDeviceSettingsProto::_internal_mutable_app_pack() {
  _has_bits_[0] |= 0x00002000u;
  if (app_pack_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::OBSOLETE_AppPackProto>(GetArena());
    app_pack_ = p;
  }
  return app_pack_;
}
inline ::enterprise_management::OBSOLETE_AppPackProto* ChromeDeviceSettingsProto::mutable_app_pack() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.app_pack)
  return _internal_mutable_app_pack();
}
inline void ChromeDeviceSettingsProto::set_allocated_app_pack(::enterprise_management::OBSOLETE_AppPackProto* app_pack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete app_pack_;
  }
  if (app_pack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(app_pack);
    if (message_arena != submessage_arena) {
      app_pack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_pack, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  app_pack_ = app_pack;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.app_pack)
}

// optional .enterprise_management.OBSOLETE_ForcedLogoutTimeoutsProto forced_logout_timeouts = 15 [deprecated = true];
inline bool ChromeDeviceSettingsProto::_internal_has_forced_logout_timeouts() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || forced_logout_timeouts_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_forced_logout_timeouts() const {
  return _internal_has_forced_logout_timeouts();
}
inline void ChromeDeviceSettingsProto::clear_forced_logout_timeouts() {
  if (forced_logout_timeouts_ != nullptr) forced_logout_timeouts_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
inline const ::enterprise_management::OBSOLETE_ForcedLogoutTimeoutsProto& ChromeDeviceSettingsProto::_internal_forced_logout_timeouts() const {
  const ::enterprise_management::OBSOLETE_ForcedLogoutTimeoutsProto* p = forced_logout_timeouts_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::OBSOLETE_ForcedLogoutTimeoutsProto*>(
      &::enterprise_management::_OBSOLETE_ForcedLogoutTimeoutsProto_default_instance_);
}
inline const ::enterprise_management::OBSOLETE_ForcedLogoutTimeoutsProto& ChromeDeviceSettingsProto::forced_logout_timeouts() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.forced_logout_timeouts)
  return _internal_forced_logout_timeouts();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_forced_logout_timeouts(
    ::enterprise_management::OBSOLETE_ForcedLogoutTimeoutsProto* forced_logout_timeouts) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(forced_logout_timeouts_);
  }
  forced_logout_timeouts_ = forced_logout_timeouts;
  if (forced_logout_timeouts) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.forced_logout_timeouts)
}
inline ::enterprise_management::OBSOLETE_ForcedLogoutTimeoutsProto* ChromeDeviceSettingsProto::release_forced_logout_timeouts() {
  auto temp = unsafe_arena_release_forced_logout_timeouts();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::OBSOLETE_ForcedLogoutTimeoutsProto* ChromeDeviceSettingsProto::unsafe_arena_release_forced_logout_timeouts() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.forced_logout_timeouts)
  _has_bits_[0] &= ~0x00004000u;
  ::enterprise_management::OBSOLETE_ForcedLogoutTimeoutsProto* temp = forced_logout_timeouts_;
  forced_logout_timeouts_ = nullptr;
  return temp;
}
inline ::enterprise_management::OBSOLETE_ForcedLogoutTimeoutsProto* ChromeDeviceSettingsProto::_internal_mutable_forced_logout_timeouts() {
  _has_bits_[0] |= 0x00004000u;
  if (forced_logout_timeouts_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::OBSOLETE_ForcedLogoutTimeoutsProto>(GetArena());
    forced_logout_timeouts_ = p;
  }
  return forced_logout_timeouts_;
}
inline ::enterprise_management::OBSOLETE_ForcedLogoutTimeoutsProto* ChromeDeviceSettingsProto::mutable_forced_logout_timeouts() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.forced_logout_timeouts)
  return _internal_mutable_forced_logout_timeouts();
}
inline void ChromeDeviceSettingsProto::set_allocated_forced_logout_timeouts(::enterprise_management::OBSOLETE_ForcedLogoutTimeoutsProto* forced_logout_timeouts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete forced_logout_timeouts_;
  }
  if (forced_logout_timeouts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(forced_logout_timeouts);
    if (message_arena != submessage_arena) {
      forced_logout_timeouts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forced_logout_timeouts, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  forced_logout_timeouts_ = forced_logout_timeouts;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.forced_logout_timeouts)
}

// optional .enterprise_management.OBSOLETE_ScreenSaverProto login_screen_saver = 16 [deprecated = true];
inline bool ChromeDeviceSettingsProto::_internal_has_login_screen_saver() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || login_screen_saver_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_login_screen_saver() const {
  return _internal_has_login_screen_saver();
}
inline void ChromeDeviceSettingsProto::clear_login_screen_saver() {
  if (login_screen_saver_ != nullptr) login_screen_saver_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
inline const ::enterprise_management::OBSOLETE_ScreenSaverProto& ChromeDeviceSettingsProto::_internal_login_screen_saver() const {
  const ::enterprise_management::OBSOLETE_ScreenSaverProto* p = login_screen_saver_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::OBSOLETE_ScreenSaverProto*>(
      &::enterprise_management::_OBSOLETE_ScreenSaverProto_default_instance_);
}
inline const ::enterprise_management::OBSOLETE_ScreenSaverProto& ChromeDeviceSettingsProto::login_screen_saver() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.login_screen_saver)
  return _internal_login_screen_saver();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_login_screen_saver(
    ::enterprise_management::OBSOLETE_ScreenSaverProto* login_screen_saver) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_saver_);
  }
  login_screen_saver_ = login_screen_saver;
  if (login_screen_saver) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.login_screen_saver)
}
inline ::enterprise_management::OBSOLETE_ScreenSaverProto* ChromeDeviceSettingsProto::release_login_screen_saver() {
  auto temp = unsafe_arena_release_login_screen_saver();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::OBSOLETE_ScreenSaverProto* ChromeDeviceSettingsProto::unsafe_arena_release_login_screen_saver() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.login_screen_saver)
  _has_bits_[0] &= ~0x00008000u;
  ::enterprise_management::OBSOLETE_ScreenSaverProto* temp = login_screen_saver_;
  login_screen_saver_ = nullptr;
  return temp;
}
inline ::enterprise_management::OBSOLETE_ScreenSaverProto* ChromeDeviceSettingsProto::_internal_mutable_login_screen_saver() {
  _has_bits_[0] |= 0x00008000u;
  if (login_screen_saver_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::OBSOLETE_ScreenSaverProto>(GetArena());
    login_screen_saver_ = p;
  }
  return login_screen_saver_;
}
inline ::enterprise_management::OBSOLETE_ScreenSaverProto* ChromeDeviceSettingsProto::mutable_login_screen_saver() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.login_screen_saver)
  return _internal_mutable_login_screen_saver();
}
inline void ChromeDeviceSettingsProto::set_allocated_login_screen_saver(::enterprise_management::OBSOLETE_ScreenSaverProto* login_screen_saver) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete login_screen_saver_;
  }
  if (login_screen_saver) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(login_screen_saver);
    if (message_arena != submessage_arena) {
      login_screen_saver = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_screen_saver, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  login_screen_saver_ = login_screen_saver;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.login_screen_saver)
}

// optional .enterprise_management.AutoUpdateSettingsProto auto_update_settings = 17;
inline bool ChromeDeviceSettingsProto::_internal_has_auto_update_settings() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || auto_update_settings_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_auto_update_settings() const {
  return _internal_has_auto_update_settings();
}
inline void ChromeDeviceSettingsProto::clear_auto_update_settings() {
  if (auto_update_settings_ != nullptr) auto_update_settings_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
inline const ::enterprise_management::AutoUpdateSettingsProto& ChromeDeviceSettingsProto::_internal_auto_update_settings() const {
  const ::enterprise_management::AutoUpdateSettingsProto* p = auto_update_settings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::AutoUpdateSettingsProto*>(
      &::enterprise_management::_AutoUpdateSettingsProto_default_instance_);
}
inline const ::enterprise_management::AutoUpdateSettingsProto& ChromeDeviceSettingsProto::auto_update_settings() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.auto_update_settings)
  return _internal_auto_update_settings();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_auto_update_settings(
    ::enterprise_management::AutoUpdateSettingsProto* auto_update_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(auto_update_settings_);
  }
  auto_update_settings_ = auto_update_settings;
  if (auto_update_settings) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.auto_update_settings)
}
inline ::enterprise_management::AutoUpdateSettingsProto* ChromeDeviceSettingsProto::release_auto_update_settings() {
  auto temp = unsafe_arena_release_auto_update_settings();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::AutoUpdateSettingsProto* ChromeDeviceSettingsProto::unsafe_arena_release_auto_update_settings() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.auto_update_settings)
  _has_bits_[0] &= ~0x00010000u;
  ::enterprise_management::AutoUpdateSettingsProto* temp = auto_update_settings_;
  auto_update_settings_ = nullptr;
  return temp;
}
inline ::enterprise_management::AutoUpdateSettingsProto* ChromeDeviceSettingsProto::_internal_mutable_auto_update_settings() {
  _has_bits_[0] |= 0x00010000u;
  if (auto_update_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::AutoUpdateSettingsProto>(GetArena());
    auto_update_settings_ = p;
  }
  return auto_update_settings_;
}
inline ::enterprise_management::AutoUpdateSettingsProto* ChromeDeviceSettingsProto::mutable_auto_update_settings() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.auto_update_settings)
  return _internal_mutable_auto_update_settings();
}
inline void ChromeDeviceSettingsProto::set_allocated_auto_update_settings(::enterprise_management::AutoUpdateSettingsProto* auto_update_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete auto_update_settings_;
  }
  if (auto_update_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(auto_update_settings);
    if (message_arena != submessage_arena) {
      auto_update_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auto_update_settings, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  auto_update_settings_ = auto_update_settings;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.auto_update_settings)
}

// optional .enterprise_management.OBSOLETE_StartUpUrlsProto start_up_urls = 18 [deprecated = true];
inline bool ChromeDeviceSettingsProto::_internal_has_start_up_urls() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || start_up_urls_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_start_up_urls() const {
  return _internal_has_start_up_urls();
}
inline void ChromeDeviceSettingsProto::clear_start_up_urls() {
  if (start_up_urls_ != nullptr) start_up_urls_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
inline const ::enterprise_management::OBSOLETE_StartUpUrlsProto& ChromeDeviceSettingsProto::_internal_start_up_urls() const {
  const ::enterprise_management::OBSOLETE_StartUpUrlsProto* p = start_up_urls_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::OBSOLETE_StartUpUrlsProto*>(
      &::enterprise_management::_OBSOLETE_StartUpUrlsProto_default_instance_);
}
inline const ::enterprise_management::OBSOLETE_StartUpUrlsProto& ChromeDeviceSettingsProto::start_up_urls() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.start_up_urls)
  return _internal_start_up_urls();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_start_up_urls(
    ::enterprise_management::OBSOLETE_StartUpUrlsProto* start_up_urls) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_up_urls_);
  }
  start_up_urls_ = start_up_urls;
  if (start_up_urls) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.start_up_urls)
}
inline ::enterprise_management::OBSOLETE_StartUpUrlsProto* ChromeDeviceSettingsProto::release_start_up_urls() {
  auto temp = unsafe_arena_release_start_up_urls();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::OBSOLETE_StartUpUrlsProto* ChromeDeviceSettingsProto::unsafe_arena_release_start_up_urls() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.start_up_urls)
  _has_bits_[0] &= ~0x00020000u;
  ::enterprise_management::OBSOLETE_StartUpUrlsProto* temp = start_up_urls_;
  start_up_urls_ = nullptr;
  return temp;
}
inline ::enterprise_management::OBSOLETE_StartUpUrlsProto* ChromeDeviceSettingsProto::_internal_mutable_start_up_urls() {
  _has_bits_[0] |= 0x00020000u;
  if (start_up_urls_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::OBSOLETE_StartUpUrlsProto>(GetArena());
    start_up_urls_ = p;
  }
  return start_up_urls_;
}
inline ::enterprise_management::OBSOLETE_StartUpUrlsProto* ChromeDeviceSettingsProto::mutable_start_up_urls() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.start_up_urls)
  return _internal_mutable_start_up_urls();
}
inline void ChromeDeviceSettingsProto::set_allocated_start_up_urls(::enterprise_management::OBSOLETE_StartUpUrlsProto* start_up_urls) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete start_up_urls_;
  }
  if (start_up_urls) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(start_up_urls);
    if (message_arena != submessage_arena) {
      start_up_urls = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_up_urls, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  start_up_urls_ = start_up_urls;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.start_up_urls)
}

// optional .enterprise_management.OBSOLETE_PinnedAppsProto pinned_apps = 19 [deprecated = true];
inline bool ChromeDeviceSettingsProto::_internal_has_pinned_apps() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || pinned_apps_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_pinned_apps() const {
  return _internal_has_pinned_apps();
}
inline void ChromeDeviceSettingsProto::clear_pinned_apps() {
  if (pinned_apps_ != nullptr) pinned_apps_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
inline const ::enterprise_management::OBSOLETE_PinnedAppsProto& ChromeDeviceSettingsProto::_internal_pinned_apps() const {
  const ::enterprise_management::OBSOLETE_PinnedAppsProto* p = pinned_apps_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::OBSOLETE_PinnedAppsProto*>(
      &::enterprise_management::_OBSOLETE_PinnedAppsProto_default_instance_);
}
inline const ::enterprise_management::OBSOLETE_PinnedAppsProto& ChromeDeviceSettingsProto::pinned_apps() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.pinned_apps)
  return _internal_pinned_apps();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_pinned_apps(
    ::enterprise_management::OBSOLETE_PinnedAppsProto* pinned_apps) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pinned_apps_);
  }
  pinned_apps_ = pinned_apps;
  if (pinned_apps) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.pinned_apps)
}
inline ::enterprise_management::OBSOLETE_PinnedAppsProto* ChromeDeviceSettingsProto::release_pinned_apps() {
  auto temp = unsafe_arena_release_pinned_apps();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::OBSOLETE_PinnedAppsProto* ChromeDeviceSettingsProto::unsafe_arena_release_pinned_apps() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.pinned_apps)
  _has_bits_[0] &= ~0x00040000u;
  ::enterprise_management::OBSOLETE_PinnedAppsProto* temp = pinned_apps_;
  pinned_apps_ = nullptr;
  return temp;
}
inline ::enterprise_management::OBSOLETE_PinnedAppsProto* ChromeDeviceSettingsProto::_internal_mutable_pinned_apps() {
  _has_bits_[0] |= 0x00040000u;
  if (pinned_apps_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::OBSOLETE_PinnedAppsProto>(GetArena());
    pinned_apps_ = p;
  }
  return pinned_apps_;
}
inline ::enterprise_management::OBSOLETE_PinnedAppsProto* ChromeDeviceSettingsProto::mutable_pinned_apps() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.pinned_apps)
  return _internal_mutable_pinned_apps();
}
inline void ChromeDeviceSettingsProto::set_allocated_pinned_apps(::enterprise_management::OBSOLETE_PinnedAppsProto* pinned_apps) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pinned_apps_;
  }
  if (pinned_apps) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pinned_apps);
    if (message_arena != submessage_arena) {
      pinned_apps = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pinned_apps, submessage_arena);
    }
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  pinned_apps_ = pinned_apps;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.pinned_apps)
}

// optional .enterprise_management.SystemTimezoneProto system_timezone = 20;
inline bool ChromeDeviceSettingsProto::_internal_has_system_timezone() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || system_timezone_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_system_timezone() const {
  return _internal_has_system_timezone();
}
inline void ChromeDeviceSettingsProto::clear_system_timezone() {
  if (system_timezone_ != nullptr) system_timezone_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
inline const ::enterprise_management::SystemTimezoneProto& ChromeDeviceSettingsProto::_internal_system_timezone() const {
  const ::enterprise_management::SystemTimezoneProto* p = system_timezone_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::SystemTimezoneProto*>(
      &::enterprise_management::_SystemTimezoneProto_default_instance_);
}
inline const ::enterprise_management::SystemTimezoneProto& ChromeDeviceSettingsProto::system_timezone() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.system_timezone)
  return _internal_system_timezone();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_system_timezone(
    ::enterprise_management::SystemTimezoneProto* system_timezone) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(system_timezone_);
  }
  system_timezone_ = system_timezone;
  if (system_timezone) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.system_timezone)
}
inline ::enterprise_management::SystemTimezoneProto* ChromeDeviceSettingsProto::release_system_timezone() {
  auto temp = unsafe_arena_release_system_timezone();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::SystemTimezoneProto* ChromeDeviceSettingsProto::unsafe_arena_release_system_timezone() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.system_timezone)
  _has_bits_[0] &= ~0x00080000u;
  ::enterprise_management::SystemTimezoneProto* temp = system_timezone_;
  system_timezone_ = nullptr;
  return temp;
}
inline ::enterprise_management::SystemTimezoneProto* ChromeDeviceSettingsProto::_internal_mutable_system_timezone() {
  _has_bits_[0] |= 0x00080000u;
  if (system_timezone_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::SystemTimezoneProto>(GetArena());
    system_timezone_ = p;
  }
  return system_timezone_;
}
inline ::enterprise_management::SystemTimezoneProto* ChromeDeviceSettingsProto::mutable_system_timezone() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.system_timezone)
  return _internal_mutable_system_timezone();
}
inline void ChromeDeviceSettingsProto::set_allocated_system_timezone(::enterprise_management::SystemTimezoneProto* system_timezone) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete system_timezone_;
  }
  if (system_timezone) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(system_timezone);
    if (message_arena != submessage_arena) {
      system_timezone = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, system_timezone, submessage_arena);
    }
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  system_timezone_ = system_timezone;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.system_timezone)
}

// optional .enterprise_management.DeviceLocalAccountsProto device_local_accounts = 21;
inline bool ChromeDeviceSettingsProto::_internal_has_device_local_accounts() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || device_local_accounts_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_device_local_accounts() const {
  return _internal_has_device_local_accounts();
}
inline void ChromeDeviceSettingsProto::clear_device_local_accounts() {
  if (device_local_accounts_ != nullptr) device_local_accounts_->Clear();
  _has_bits_[0] &= ~0x00100000u;
}
inline const ::enterprise_management::DeviceLocalAccountsProto& ChromeDeviceSettingsProto::_internal_device_local_accounts() const {
  const ::enterprise_management::DeviceLocalAccountsProto* p = device_local_accounts_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::DeviceLocalAccountsProto*>(
      &::enterprise_management::_DeviceLocalAccountsProto_default_instance_);
}
inline const ::enterprise_management::DeviceLocalAccountsProto& ChromeDeviceSettingsProto::device_local_accounts() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.device_local_accounts)
  return _internal_device_local_accounts();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_device_local_accounts(
    ::enterprise_management::DeviceLocalAccountsProto* device_local_accounts) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_local_accounts_);
  }
  device_local_accounts_ = device_local_accounts;
  if (device_local_accounts) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_local_accounts)
}
inline ::enterprise_management::DeviceLocalAccountsProto* ChromeDeviceSettingsProto::release_device_local_accounts() {
  auto temp = unsafe_arena_release_device_local_accounts();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::DeviceLocalAccountsProto* ChromeDeviceSettingsProto::unsafe_arena_release_device_local_accounts() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.device_local_accounts)
  _has_bits_[0] &= ~0x00100000u;
  ::enterprise_management::DeviceLocalAccountsProto* temp = device_local_accounts_;
  device_local_accounts_ = nullptr;
  return temp;
}
inline ::enterprise_management::DeviceLocalAccountsProto* ChromeDeviceSettingsProto::_internal_mutable_device_local_accounts() {
  _has_bits_[0] |= 0x00100000u;
  if (device_local_accounts_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::DeviceLocalAccountsProto>(GetArena());
    device_local_accounts_ = p;
  }
  return device_local_accounts_;
}
inline ::enterprise_management::DeviceLocalAccountsProto* ChromeDeviceSettingsProto::mutable_device_local_accounts() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.device_local_accounts)
  return _internal_mutable_device_local_accounts();
}
inline void ChromeDeviceSettingsProto::set_allocated_device_local_accounts(::enterprise_management::DeviceLocalAccountsProto* device_local_accounts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_local_accounts_;
  }
  if (device_local_accounts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_local_accounts);
    if (message_arena != submessage_arena) {
      device_local_accounts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_local_accounts, submessage_arena);
    }
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  device_local_accounts_ = device_local_accounts;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_local_accounts)
}

// optional .enterprise_management.AllowRedeemChromeOsRegistrationOffersProto allow_redeem_offers = 22;
inline bool ChromeDeviceSettingsProto::_internal_has_allow_redeem_offers() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || allow_redeem_offers_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_allow_redeem_offers() const {
  return _internal_has_allow_redeem_offers();
}
inline void ChromeDeviceSettingsProto::clear_allow_redeem_offers() {
  if (allow_redeem_offers_ != nullptr) allow_redeem_offers_->Clear();
  _has_bits_[0] &= ~0x00200000u;
}
inline const ::enterprise_management::AllowRedeemChromeOsRegistrationOffersProto& ChromeDeviceSettingsProto::_internal_allow_redeem_offers() const {
  const ::enterprise_management::AllowRedeemChromeOsRegistrationOffersProto* p = allow_redeem_offers_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::AllowRedeemChromeOsRegistrationOffersProto*>(
      &::enterprise_management::_AllowRedeemChromeOsRegistrationOffersProto_default_instance_);
}
inline const ::enterprise_management::AllowRedeemChromeOsRegistrationOffersProto& ChromeDeviceSettingsProto::allow_redeem_offers() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.allow_redeem_offers)
  return _internal_allow_redeem_offers();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_allow_redeem_offers(
    ::enterprise_management::AllowRedeemChromeOsRegistrationOffersProto* allow_redeem_offers) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(allow_redeem_offers_);
  }
  allow_redeem_offers_ = allow_redeem_offers;
  if (allow_redeem_offers) {
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.allow_redeem_offers)
}
inline ::enterprise_management::AllowRedeemChromeOsRegistrationOffersProto* ChromeDeviceSettingsProto::release_allow_redeem_offers() {
  auto temp = unsafe_arena_release_allow_redeem_offers();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::AllowRedeemChromeOsRegistrationOffersProto* ChromeDeviceSettingsProto::unsafe_arena_release_allow_redeem_offers() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.allow_redeem_offers)
  _has_bits_[0] &= ~0x00200000u;
  ::enterprise_management::AllowRedeemChromeOsRegistrationOffersProto* temp = allow_redeem_offers_;
  allow_redeem_offers_ = nullptr;
  return temp;
}
inline ::enterprise_management::AllowRedeemChromeOsRegistrationOffersProto* ChromeDeviceSettingsProto::_internal_mutable_allow_redeem_offers() {
  _has_bits_[0] |= 0x00200000u;
  if (allow_redeem_offers_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::AllowRedeemChromeOsRegistrationOffersProto>(GetArena());
    allow_redeem_offers_ = p;
  }
  return allow_redeem_offers_;
}
inline ::enterprise_management::AllowRedeemChromeOsRegistrationOffersProto* ChromeDeviceSettingsProto::mutable_allow_redeem_offers() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.allow_redeem_offers)
  return _internal_mutable_allow_redeem_offers();
}
inline void ChromeDeviceSettingsProto::set_allocated_allow_redeem_offers(::enterprise_management::AllowRedeemChromeOsRegistrationOffersProto* allow_redeem_offers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete allow_redeem_offers_;
  }
  if (allow_redeem_offers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(allow_redeem_offers);
    if (message_arena != submessage_arena) {
      allow_redeem_offers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, allow_redeem_offers, submessage_arena);
    }
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  allow_redeem_offers_ = allow_redeem_offers;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.allow_redeem_offers)
}

// optional .enterprise_management.StartUpFlagsProto start_up_flags = 23;
inline bool ChromeDeviceSettingsProto::_internal_has_start_up_flags() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || start_up_flags_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_start_up_flags() const {
  return _internal_has_start_up_flags();
}
inline void ChromeDeviceSettingsProto::clear_start_up_flags() {
  if (start_up_flags_ != nullptr) start_up_flags_->Clear();
  _has_bits_[0] &= ~0x00400000u;
}
inline const ::enterprise_management::StartUpFlagsProto& ChromeDeviceSettingsProto::_internal_start_up_flags() const {
  const ::enterprise_management::StartUpFlagsProto* p = start_up_flags_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::StartUpFlagsProto*>(
      &::enterprise_management::_StartUpFlagsProto_default_instance_);
}
inline const ::enterprise_management::StartUpFlagsProto& ChromeDeviceSettingsProto::start_up_flags() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.start_up_flags)
  return _internal_start_up_flags();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_start_up_flags(
    ::enterprise_management::StartUpFlagsProto* start_up_flags) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_up_flags_);
  }
  start_up_flags_ = start_up_flags;
  if (start_up_flags) {
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.start_up_flags)
}
inline ::enterprise_management::StartUpFlagsProto* ChromeDeviceSettingsProto::release_start_up_flags() {
  auto temp = unsafe_arena_release_start_up_flags();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::StartUpFlagsProto* ChromeDeviceSettingsProto::unsafe_arena_release_start_up_flags() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.start_up_flags)
  _has_bits_[0] &= ~0x00400000u;
  ::enterprise_management::StartUpFlagsProto* temp = start_up_flags_;
  start_up_flags_ = nullptr;
  return temp;
}
inline ::enterprise_management::StartUpFlagsProto* ChromeDeviceSettingsProto::_internal_mutable_start_up_flags() {
  _has_bits_[0] |= 0x00400000u;
  if (start_up_flags_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::StartUpFlagsProto>(GetArena());
    start_up_flags_ = p;
  }
  return start_up_flags_;
}
inline ::enterprise_management::StartUpFlagsProto* ChromeDeviceSettingsProto::mutable_start_up_flags() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.start_up_flags)
  return _internal_mutable_start_up_flags();
}
inline void ChromeDeviceSettingsProto::set_allocated_start_up_flags(::enterprise_management::StartUpFlagsProto* start_up_flags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete start_up_flags_;
  }
  if (start_up_flags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(start_up_flags);
    if (message_arena != submessage_arena) {
      start_up_flags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_up_flags, submessage_arena);
    }
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  start_up_flags_ = start_up_flags;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.start_up_flags)
}

// optional .enterprise_management.UptimeLimitProto uptime_limit = 24;
inline bool ChromeDeviceSettingsProto::_internal_has_uptime_limit() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  PROTOBUF_ASSUME(!value || uptime_limit_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_uptime_limit() const {
  return _internal_has_uptime_limit();
}
inline void ChromeDeviceSettingsProto::clear_uptime_limit() {
  if (uptime_limit_ != nullptr) uptime_limit_->Clear();
  _has_bits_[0] &= ~0x00800000u;
}
inline const ::enterprise_management::UptimeLimitProto& ChromeDeviceSettingsProto::_internal_uptime_limit() const {
  const ::enterprise_management::UptimeLimitProto* p = uptime_limit_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::UptimeLimitProto*>(
      &::enterprise_management::_UptimeLimitProto_default_instance_);
}
inline const ::enterprise_management::UptimeLimitProto& ChromeDeviceSettingsProto::uptime_limit() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.uptime_limit)
  return _internal_uptime_limit();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_uptime_limit(
    ::enterprise_management::UptimeLimitProto* uptime_limit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uptime_limit_);
  }
  uptime_limit_ = uptime_limit;
  if (uptime_limit) {
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.uptime_limit)
}
inline ::enterprise_management::UptimeLimitProto* ChromeDeviceSettingsProto::release_uptime_limit() {
  auto temp = unsafe_arena_release_uptime_limit();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::UptimeLimitProto* ChromeDeviceSettingsProto::unsafe_arena_release_uptime_limit() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.uptime_limit)
  _has_bits_[0] &= ~0x00800000u;
  ::enterprise_management::UptimeLimitProto* temp = uptime_limit_;
  uptime_limit_ = nullptr;
  return temp;
}
inline ::enterprise_management::UptimeLimitProto* ChromeDeviceSettingsProto::_internal_mutable_uptime_limit() {
  _has_bits_[0] |= 0x00800000u;
  if (uptime_limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::UptimeLimitProto>(GetArena());
    uptime_limit_ = p;
  }
  return uptime_limit_;
}
inline ::enterprise_management::UptimeLimitProto* ChromeDeviceSettingsProto::mutable_uptime_limit() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.uptime_limit)
  return _internal_mutable_uptime_limit();
}
inline void ChromeDeviceSettingsProto::set_allocated_uptime_limit(::enterprise_management::UptimeLimitProto* uptime_limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete uptime_limit_;
  }
  if (uptime_limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(uptime_limit);
    if (message_arena != submessage_arena) {
      uptime_limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uptime_limit, submessage_arena);
    }
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  uptime_limit_ = uptime_limit;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.uptime_limit)
}

// optional .enterprise_management.VariationsParameterProto variations_parameter = 25;
inline bool ChromeDeviceSettingsProto::_internal_has_variations_parameter() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  PROTOBUF_ASSUME(!value || variations_parameter_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_variations_parameter() const {
  return _internal_has_variations_parameter();
}
inline void ChromeDeviceSettingsProto::clear_variations_parameter() {
  if (variations_parameter_ != nullptr) variations_parameter_->Clear();
  _has_bits_[0] &= ~0x01000000u;
}
inline const ::enterprise_management::VariationsParameterProto& ChromeDeviceSettingsProto::_internal_variations_parameter() const {
  const ::enterprise_management::VariationsParameterProto* p = variations_parameter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::VariationsParameterProto*>(
      &::enterprise_management::_VariationsParameterProto_default_instance_);
}
inline const ::enterprise_management::VariationsParameterProto& ChromeDeviceSettingsProto::variations_parameter() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.variations_parameter)
  return _internal_variations_parameter();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_variations_parameter(
    ::enterprise_management::VariationsParameterProto* variations_parameter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(variations_parameter_);
  }
  variations_parameter_ = variations_parameter;
  if (variations_parameter) {
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.variations_parameter)
}
inline ::enterprise_management::VariationsParameterProto* ChromeDeviceSettingsProto::release_variations_parameter() {
  auto temp = unsafe_arena_release_variations_parameter();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::VariationsParameterProto* ChromeDeviceSettingsProto::unsafe_arena_release_variations_parameter() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.variations_parameter)
  _has_bits_[0] &= ~0x01000000u;
  ::enterprise_management::VariationsParameterProto* temp = variations_parameter_;
  variations_parameter_ = nullptr;
  return temp;
}
inline ::enterprise_management::VariationsParameterProto* ChromeDeviceSettingsProto::_internal_mutable_variations_parameter() {
  _has_bits_[0] |= 0x01000000u;
  if (variations_parameter_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::VariationsParameterProto>(GetArena());
    variations_parameter_ = p;
  }
  return variations_parameter_;
}
inline ::enterprise_management::VariationsParameterProto* ChromeDeviceSettingsProto::mutable_variations_parameter() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.variations_parameter)
  return _internal_mutable_variations_parameter();
}
inline void ChromeDeviceSettingsProto::set_allocated_variations_parameter(::enterprise_management::VariationsParameterProto* variations_parameter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete variations_parameter_;
  }
  if (variations_parameter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(variations_parameter);
    if (message_arena != submessage_arena) {
      variations_parameter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, variations_parameter, submessage_arena);
    }
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  variations_parameter_ = variations_parameter;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.variations_parameter)
}

// optional .enterprise_management.AttestationSettingsProto attestation_settings = 26;
inline bool ChromeDeviceSettingsProto::_internal_has_attestation_settings() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  PROTOBUF_ASSUME(!value || attestation_settings_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_attestation_settings() const {
  return _internal_has_attestation_settings();
}
inline void ChromeDeviceSettingsProto::clear_attestation_settings() {
  if (attestation_settings_ != nullptr) attestation_settings_->Clear();
  _has_bits_[0] &= ~0x02000000u;
}
inline const ::enterprise_management::AttestationSettingsProto& ChromeDeviceSettingsProto::_internal_attestation_settings() const {
  const ::enterprise_management::AttestationSettingsProto* p = attestation_settings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::AttestationSettingsProto*>(
      &::enterprise_management::_AttestationSettingsProto_default_instance_);
}
inline const ::enterprise_management::AttestationSettingsProto& ChromeDeviceSettingsProto::attestation_settings() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.attestation_settings)
  return _internal_attestation_settings();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_attestation_settings(
    ::enterprise_management::AttestationSettingsProto* attestation_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attestation_settings_);
  }
  attestation_settings_ = attestation_settings;
  if (attestation_settings) {
    _has_bits_[0] |= 0x02000000u;
  } else {
    _has_bits_[0] &= ~0x02000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.attestation_settings)
}
inline ::enterprise_management::AttestationSettingsProto* ChromeDeviceSettingsProto::release_attestation_settings() {
  auto temp = unsafe_arena_release_attestation_settings();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::AttestationSettingsProto* ChromeDeviceSettingsProto::unsafe_arena_release_attestation_settings() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.attestation_settings)
  _has_bits_[0] &= ~0x02000000u;
  ::enterprise_management::AttestationSettingsProto* temp = attestation_settings_;
  attestation_settings_ = nullptr;
  return temp;
}
inline ::enterprise_management::AttestationSettingsProto* ChromeDeviceSettingsProto::_internal_mutable_attestation_settings() {
  _has_bits_[0] |= 0x02000000u;
  if (attestation_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::AttestationSettingsProto>(GetArena());
    attestation_settings_ = p;
  }
  return attestation_settings_;
}
inline ::enterprise_management::AttestationSettingsProto* ChromeDeviceSettingsProto::mutable_attestation_settings() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.attestation_settings)
  return _internal_mutable_attestation_settings();
}
inline void ChromeDeviceSettingsProto::set_allocated_attestation_settings(::enterprise_management::AttestationSettingsProto* attestation_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete attestation_settings_;
  }
  if (attestation_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(attestation_settings);
    if (message_arena != submessage_arena) {
      attestation_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attestation_settings, submessage_arena);
    }
    _has_bits_[0] |= 0x02000000u;
  } else {
    _has_bits_[0] &= ~0x02000000u;
  }
  attestation_settings_ = attestation_settings;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.attestation_settings)
}

// optional .enterprise_management.AccessibilitySettingsProto accessibility_settings = 27;
inline bool ChromeDeviceSettingsProto::_internal_has_accessibility_settings() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  PROTOBUF_ASSUME(!value || accessibility_settings_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_accessibility_settings() const {
  return _internal_has_accessibility_settings();
}
inline void ChromeDeviceSettingsProto::clear_accessibility_settings() {
  if (accessibility_settings_ != nullptr) accessibility_settings_->Clear();
  _has_bits_[0] &= ~0x04000000u;
}
inline const ::enterprise_management::AccessibilitySettingsProto& ChromeDeviceSettingsProto::_internal_accessibility_settings() const {
  const ::enterprise_management::AccessibilitySettingsProto* p = accessibility_settings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::AccessibilitySettingsProto*>(
      &::enterprise_management::_AccessibilitySettingsProto_default_instance_);
}
inline const ::enterprise_management::AccessibilitySettingsProto& ChromeDeviceSettingsProto::accessibility_settings() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.accessibility_settings)
  return _internal_accessibility_settings();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_accessibility_settings(
    ::enterprise_management::AccessibilitySettingsProto* accessibility_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accessibility_settings_);
  }
  accessibility_settings_ = accessibility_settings;
  if (accessibility_settings) {
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.accessibility_settings)
}
inline ::enterprise_management::AccessibilitySettingsProto* ChromeDeviceSettingsProto::release_accessibility_settings() {
  auto temp = unsafe_arena_release_accessibility_settings();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::AccessibilitySettingsProto* ChromeDeviceSettingsProto::unsafe_arena_release_accessibility_settings() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.accessibility_settings)
  _has_bits_[0] &= ~0x04000000u;
  ::enterprise_management::AccessibilitySettingsProto* temp = accessibility_settings_;
  accessibility_settings_ = nullptr;
  return temp;
}
inline ::enterprise_management::AccessibilitySettingsProto* ChromeDeviceSettingsProto::_internal_mutable_accessibility_settings() {
  _has_bits_[0] |= 0x04000000u;
  if (accessibility_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::AccessibilitySettingsProto>(GetArena());
    accessibility_settings_ = p;
  }
  return accessibility_settings_;
}
inline ::enterprise_management::AccessibilitySettingsProto* ChromeDeviceSettingsProto::mutable_accessibility_settings() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.accessibility_settings)
  return _internal_mutable_accessibility_settings();
}
inline void ChromeDeviceSettingsProto::set_allocated_accessibility_settings(::enterprise_management::AccessibilitySettingsProto* accessibility_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete accessibility_settings_;
  }
  if (accessibility_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(accessibility_settings);
    if (message_arena != submessage_arena) {
      accessibility_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accessibility_settings, submessage_arena);
    }
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  accessibility_settings_ = accessibility_settings;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.accessibility_settings)
}

// optional .enterprise_management.OBSOLETE_SupervisedUsersSettingsProto supervised_users_settings = 28 [deprecated = true];
inline bool ChromeDeviceSettingsProto::_internal_has_supervised_users_settings() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  PROTOBUF_ASSUME(!value || supervised_users_settings_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_supervised_users_settings() const {
  return _internal_has_supervised_users_settings();
}
inline void ChromeDeviceSettingsProto::clear_supervised_users_settings() {
  if (supervised_users_settings_ != nullptr) supervised_users_settings_->Clear();
  _has_bits_[0] &= ~0x08000000u;
}
inline const ::enterprise_management::OBSOLETE_SupervisedUsersSettingsProto& ChromeDeviceSettingsProto::_internal_supervised_users_settings() const {
  const ::enterprise_management::OBSOLETE_SupervisedUsersSettingsProto* p = supervised_users_settings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::OBSOLETE_SupervisedUsersSettingsProto*>(
      &::enterprise_management::_OBSOLETE_SupervisedUsersSettingsProto_default_instance_);
}
inline const ::enterprise_management::OBSOLETE_SupervisedUsersSettingsProto& ChromeDeviceSettingsProto::supervised_users_settings() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.supervised_users_settings)
  return _internal_supervised_users_settings();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_supervised_users_settings(
    ::enterprise_management::OBSOLETE_SupervisedUsersSettingsProto* supervised_users_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(supervised_users_settings_);
  }
  supervised_users_settings_ = supervised_users_settings;
  if (supervised_users_settings) {
    _has_bits_[0] |= 0x08000000u;
  } else {
    _has_bits_[0] &= ~0x08000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.supervised_users_settings)
}
inline ::enterprise_management::OBSOLETE_SupervisedUsersSettingsProto* ChromeDeviceSettingsProto::release_supervised_users_settings() {
  auto temp = unsafe_arena_release_supervised_users_settings();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::OBSOLETE_SupervisedUsersSettingsProto* ChromeDeviceSettingsProto::unsafe_arena_release_supervised_users_settings() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.supervised_users_settings)
  _has_bits_[0] &= ~0x08000000u;
  ::enterprise_management::OBSOLETE_SupervisedUsersSettingsProto* temp = supervised_users_settings_;
  supervised_users_settings_ = nullptr;
  return temp;
}
inline ::enterprise_management::OBSOLETE_SupervisedUsersSettingsProto* ChromeDeviceSettingsProto::_internal_mutable_supervised_users_settings() {
  _has_bits_[0] |= 0x08000000u;
  if (supervised_users_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::OBSOLETE_SupervisedUsersSettingsProto>(GetArena());
    supervised_users_settings_ = p;
  }
  return supervised_users_settings_;
}
inline ::enterprise_management::OBSOLETE_SupervisedUsersSettingsProto* ChromeDeviceSettingsProto::mutable_supervised_users_settings() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.supervised_users_settings)
  return _internal_mutable_supervised_users_settings();
}
inline void ChromeDeviceSettingsProto::set_allocated_supervised_users_settings(::enterprise_management::OBSOLETE_SupervisedUsersSettingsProto* supervised_users_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete supervised_users_settings_;
  }
  if (supervised_users_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(supervised_users_settings);
    if (message_arena != submessage_arena) {
      supervised_users_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, supervised_users_settings, submessage_arena);
    }
    _has_bits_[0] |= 0x08000000u;
  } else {
    _has_bits_[0] &= ~0x08000000u;
  }
  supervised_users_settings_ = supervised_users_settings;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.supervised_users_settings)
}

// optional .enterprise_management.LoginScreenPowerManagementProto login_screen_power_management = 29;
inline bool ChromeDeviceSettingsProto::_internal_has_login_screen_power_management() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  PROTOBUF_ASSUME(!value || login_screen_power_management_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_login_screen_power_management() const {
  return _internal_has_login_screen_power_management();
}
inline void ChromeDeviceSettingsProto::clear_login_screen_power_management() {
  if (login_screen_power_management_ != nullptr) login_screen_power_management_->Clear();
  _has_bits_[0] &= ~0x10000000u;
}
inline const ::enterprise_management::LoginScreenPowerManagementProto& ChromeDeviceSettingsProto::_internal_login_screen_power_management() const {
  const ::enterprise_management::LoginScreenPowerManagementProto* p = login_screen_power_management_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::LoginScreenPowerManagementProto*>(
      &::enterprise_management::_LoginScreenPowerManagementProto_default_instance_);
}
inline const ::enterprise_management::LoginScreenPowerManagementProto& ChromeDeviceSettingsProto::login_screen_power_management() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.login_screen_power_management)
  return _internal_login_screen_power_management();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_login_screen_power_management(
    ::enterprise_management::LoginScreenPowerManagementProto* login_screen_power_management) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_power_management_);
  }
  login_screen_power_management_ = login_screen_power_management;
  if (login_screen_power_management) {
    _has_bits_[0] |= 0x10000000u;
  } else {
    _has_bits_[0] &= ~0x10000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.login_screen_power_management)
}
inline ::enterprise_management::LoginScreenPowerManagementProto* ChromeDeviceSettingsProto::release_login_screen_power_management() {
  auto temp = unsafe_arena_release_login_screen_power_management();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::LoginScreenPowerManagementProto* ChromeDeviceSettingsProto::unsafe_arena_release_login_screen_power_management() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.login_screen_power_management)
  _has_bits_[0] &= ~0x10000000u;
  ::enterprise_management::LoginScreenPowerManagementProto* temp = login_screen_power_management_;
  login_screen_power_management_ = nullptr;
  return temp;
}
inline ::enterprise_management::LoginScreenPowerManagementProto* ChromeDeviceSettingsProto::_internal_mutable_login_screen_power_management() {
  _has_bits_[0] |= 0x10000000u;
  if (login_screen_power_management_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::LoginScreenPowerManagementProto>(GetArena());
    login_screen_power_management_ = p;
  }
  return login_screen_power_management_;
}
inline ::enterprise_management::LoginScreenPowerManagementProto* ChromeDeviceSettingsProto::mutable_login_screen_power_management() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.login_screen_power_management)
  return _internal_mutable_login_screen_power_management();
}
inline void ChromeDeviceSettingsProto::set_allocated_login_screen_power_management(::enterprise_management::LoginScreenPowerManagementProto* login_screen_power_management) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete login_screen_power_management_;
  }
  if (login_screen_power_management) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(login_screen_power_management);
    if (message_arena != submessage_arena) {
      login_screen_power_management = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_screen_power_management, submessage_arena);
    }
    _has_bits_[0] |= 0x10000000u;
  } else {
    _has_bits_[0] &= ~0x10000000u;
  }
  login_screen_power_management_ = login_screen_power_management;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.login_screen_power_management)
}

// optional .enterprise_management.SystemUse24HourClockProto use_24hour_clock = 30;
inline bool ChromeDeviceSettingsProto::_internal_has_use_24hour_clock() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  PROTOBUF_ASSUME(!value || use_24hour_clock_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_use_24hour_clock() const {
  return _internal_has_use_24hour_clock();
}
inline void ChromeDeviceSettingsProto::clear_use_24hour_clock() {
  if (use_24hour_clock_ != nullptr) use_24hour_clock_->Clear();
  _has_bits_[0] &= ~0x20000000u;
}
inline const ::enterprise_management::SystemUse24HourClockProto& ChromeDeviceSettingsProto::_internal_use_24hour_clock() const {
  const ::enterprise_management::SystemUse24HourClockProto* p = use_24hour_clock_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::SystemUse24HourClockProto*>(
      &::enterprise_management::_SystemUse24HourClockProto_default_instance_);
}
inline const ::enterprise_management::SystemUse24HourClockProto& ChromeDeviceSettingsProto::use_24hour_clock() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.use_24hour_clock)
  return _internal_use_24hour_clock();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_use_24hour_clock(
    ::enterprise_management::SystemUse24HourClockProto* use_24hour_clock) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(use_24hour_clock_);
  }
  use_24hour_clock_ = use_24hour_clock;
  if (use_24hour_clock) {
    _has_bits_[0] |= 0x20000000u;
  } else {
    _has_bits_[0] &= ~0x20000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.use_24hour_clock)
}
inline ::enterprise_management::SystemUse24HourClockProto* ChromeDeviceSettingsProto::release_use_24hour_clock() {
  auto temp = unsafe_arena_release_use_24hour_clock();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::SystemUse24HourClockProto* ChromeDeviceSettingsProto::unsafe_arena_release_use_24hour_clock() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.use_24hour_clock)
  _has_bits_[0] &= ~0x20000000u;
  ::enterprise_management::SystemUse24HourClockProto* temp = use_24hour_clock_;
  use_24hour_clock_ = nullptr;
  return temp;
}
inline ::enterprise_management::SystemUse24HourClockProto* ChromeDeviceSettingsProto::_internal_mutable_use_24hour_clock() {
  _has_bits_[0] |= 0x20000000u;
  if (use_24hour_clock_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::SystemUse24HourClockProto>(GetArena());
    use_24hour_clock_ = p;
  }
  return use_24hour_clock_;
}
inline ::enterprise_management::SystemUse24HourClockProto* ChromeDeviceSettingsProto::mutable_use_24hour_clock() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.use_24hour_clock)
  return _internal_mutable_use_24hour_clock();
}
inline void ChromeDeviceSettingsProto::set_allocated_use_24hour_clock(::enterprise_management::SystemUse24HourClockProto* use_24hour_clock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete use_24hour_clock_;
  }
  if (use_24hour_clock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(use_24hour_clock);
    if (message_arena != submessage_arena) {
      use_24hour_clock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, use_24hour_clock, submessage_arena);
    }
    _has_bits_[0] |= 0x20000000u;
  } else {
    _has_bits_[0] &= ~0x20000000u;
  }
  use_24hour_clock_ = use_24hour_clock;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.use_24hour_clock)
}

// optional .enterprise_management.AutoCleanupSettigsProto auto_clean_up_settings = 31;
inline bool ChromeDeviceSettingsProto::_internal_has_auto_clean_up_settings() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  PROTOBUF_ASSUME(!value || auto_clean_up_settings_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_auto_clean_up_settings() const {
  return _internal_has_auto_clean_up_settings();
}
inline void ChromeDeviceSettingsProto::clear_auto_clean_up_settings() {
  if (auto_clean_up_settings_ != nullptr) auto_clean_up_settings_->Clear();
  _has_bits_[0] &= ~0x40000000u;
}
inline const ::enterprise_management::AutoCleanupSettigsProto& ChromeDeviceSettingsProto::_internal_auto_clean_up_settings() const {
  const ::enterprise_management::AutoCleanupSettigsProto* p = auto_clean_up_settings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::AutoCleanupSettigsProto*>(
      &::enterprise_management::_AutoCleanupSettigsProto_default_instance_);
}
inline const ::enterprise_management::AutoCleanupSettigsProto& ChromeDeviceSettingsProto::auto_clean_up_settings() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.auto_clean_up_settings)
  return _internal_auto_clean_up_settings();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_auto_clean_up_settings(
    ::enterprise_management::AutoCleanupSettigsProto* auto_clean_up_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(auto_clean_up_settings_);
  }
  auto_clean_up_settings_ = auto_clean_up_settings;
  if (auto_clean_up_settings) {
    _has_bits_[0] |= 0x40000000u;
  } else {
    _has_bits_[0] &= ~0x40000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.auto_clean_up_settings)
}
inline ::enterprise_management::AutoCleanupSettigsProto* ChromeDeviceSettingsProto::release_auto_clean_up_settings() {
  auto temp = unsafe_arena_release_auto_clean_up_settings();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::AutoCleanupSettigsProto* ChromeDeviceSettingsProto::unsafe_arena_release_auto_clean_up_settings() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.auto_clean_up_settings)
  _has_bits_[0] &= ~0x40000000u;
  ::enterprise_management::AutoCleanupSettigsProto* temp = auto_clean_up_settings_;
  auto_clean_up_settings_ = nullptr;
  return temp;
}
inline ::enterprise_management::AutoCleanupSettigsProto* ChromeDeviceSettingsProto::_internal_mutable_auto_clean_up_settings() {
  _has_bits_[0] |= 0x40000000u;
  if (auto_clean_up_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::AutoCleanupSettigsProto>(GetArena());
    auto_clean_up_settings_ = p;
  }
  return auto_clean_up_settings_;
}
inline ::enterprise_management::AutoCleanupSettigsProto* ChromeDeviceSettingsProto::mutable_auto_clean_up_settings() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.auto_clean_up_settings)
  return _internal_mutable_auto_clean_up_settings();
}
inline void ChromeDeviceSettingsProto::set_allocated_auto_clean_up_settings(::enterprise_management::AutoCleanupSettigsProto* auto_clean_up_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete auto_clean_up_settings_;
  }
  if (auto_clean_up_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(auto_clean_up_settings);
    if (message_arena != submessage_arena) {
      auto_clean_up_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auto_clean_up_settings, submessage_arena);
    }
    _has_bits_[0] |= 0x40000000u;
  } else {
    _has_bits_[0] &= ~0x40000000u;
  }
  auto_clean_up_settings_ = auto_clean_up_settings;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.auto_clean_up_settings)
}

// optional .enterprise_management.SystemSettingsProto system_settings = 32;
inline bool ChromeDeviceSettingsProto::_internal_has_system_settings() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  PROTOBUF_ASSUME(!value || system_settings_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_system_settings() const {
  return _internal_has_system_settings();
}
inline void ChromeDeviceSettingsProto::clear_system_settings() {
  if (system_settings_ != nullptr) system_settings_->Clear();
  _has_bits_[0] &= ~0x80000000u;
}
inline const ::enterprise_management::SystemSettingsProto& ChromeDeviceSettingsProto::_internal_system_settings() const {
  const ::enterprise_management::SystemSettingsProto* p = system_settings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::SystemSettingsProto*>(
      &::enterprise_management::_SystemSettingsProto_default_instance_);
}
inline const ::enterprise_management::SystemSettingsProto& ChromeDeviceSettingsProto::system_settings() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.system_settings)
  return _internal_system_settings();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_system_settings(
    ::enterprise_management::SystemSettingsProto* system_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(system_settings_);
  }
  system_settings_ = system_settings;
  if (system_settings) {
    _has_bits_[0] |= 0x80000000u;
  } else {
    _has_bits_[0] &= ~0x80000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.system_settings)
}
inline ::enterprise_management::SystemSettingsProto* ChromeDeviceSettingsProto::release_system_settings() {
  auto temp = unsafe_arena_release_system_settings();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::SystemSettingsProto* ChromeDeviceSettingsProto::unsafe_arena_release_system_settings() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.system_settings)
  _has_bits_[0] &= ~0x80000000u;
  ::enterprise_management::SystemSettingsProto* temp = system_settings_;
  system_settings_ = nullptr;
  return temp;
}
inline ::enterprise_management::SystemSettingsProto* ChromeDeviceSettingsProto::_internal_mutable_system_settings() {
  _has_bits_[0] |= 0x80000000u;
  if (system_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::SystemSettingsProto>(GetArena());
    system_settings_ = p;
  }
  return system_settings_;
}
inline ::enterprise_management::SystemSettingsProto* ChromeDeviceSettingsProto::mutable_system_settings() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.system_settings)
  return _internal_mutable_system_settings();
}
inline void ChromeDeviceSettingsProto::set_allocated_system_settings(::enterprise_management::SystemSettingsProto* system_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete system_settings_;
  }
  if (system_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(system_settings);
    if (message_arena != submessage_arena) {
      system_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, system_settings, submessage_arena);
    }
    _has_bits_[0] |= 0x80000000u;
  } else {
    _has_bits_[0] &= ~0x80000000u;
  }
  system_settings_ = system_settings;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.system_settings)
}

// optional .enterprise_management.SAMLSettingsProto saml_settings = 33;
inline bool ChromeDeviceSettingsProto::_internal_has_saml_settings() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || saml_settings_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_saml_settings() const {
  return _internal_has_saml_settings();
}
inline void ChromeDeviceSettingsProto::clear_saml_settings() {
  if (saml_settings_ != nullptr) saml_settings_->Clear();
  _has_bits_[1] &= ~0x00000001u;
}
inline const ::enterprise_management::SAMLSettingsProto& ChromeDeviceSettingsProto::_internal_saml_settings() const {
  const ::enterprise_management::SAMLSettingsProto* p = saml_settings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::SAMLSettingsProto*>(
      &::enterprise_management::_SAMLSettingsProto_default_instance_);
}
inline const ::enterprise_management::SAMLSettingsProto& ChromeDeviceSettingsProto::saml_settings() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.saml_settings)
  return _internal_saml_settings();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_saml_settings(
    ::enterprise_management::SAMLSettingsProto* saml_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(saml_settings_);
  }
  saml_settings_ = saml_settings;
  if (saml_settings) {
    _has_bits_[1] |= 0x00000001u;
  } else {
    _has_bits_[1] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.saml_settings)
}
inline ::enterprise_management::SAMLSettingsProto* ChromeDeviceSettingsProto::release_saml_settings() {
  auto temp = unsafe_arena_release_saml_settings();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::SAMLSettingsProto* ChromeDeviceSettingsProto::unsafe_arena_release_saml_settings() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.saml_settings)
  _has_bits_[1] &= ~0x00000001u;
  ::enterprise_management::SAMLSettingsProto* temp = saml_settings_;
  saml_settings_ = nullptr;
  return temp;
}
inline ::enterprise_management::SAMLSettingsProto* ChromeDeviceSettingsProto::_internal_mutable_saml_settings() {
  _has_bits_[1] |= 0x00000001u;
  if (saml_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::SAMLSettingsProto>(GetArena());
    saml_settings_ = p;
  }
  return saml_settings_;
}
inline ::enterprise_management::SAMLSettingsProto* ChromeDeviceSettingsProto::mutable_saml_settings() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.saml_settings)
  return _internal_mutable_saml_settings();
}
inline void ChromeDeviceSettingsProto::set_allocated_saml_settings(::enterprise_management::SAMLSettingsProto* saml_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete saml_settings_;
  }
  if (saml_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(saml_settings);
    if (message_arena != submessage_arena) {
      saml_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, saml_settings, submessage_arena);
    }
    _has_bits_[1] |= 0x00000001u;
  } else {
    _has_bits_[1] &= ~0x00000001u;
  }
  saml_settings_ = saml_settings;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.saml_settings)
}

// optional .enterprise_management.RebootOnShutdownProto reboot_on_shutdown = 34;
inline bool ChromeDeviceSettingsProto::_internal_has_reboot_on_shutdown() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || reboot_on_shutdown_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_reboot_on_shutdown() const {
  return _internal_has_reboot_on_shutdown();
}
inline void ChromeDeviceSettingsProto::clear_reboot_on_shutdown() {
  if (reboot_on_shutdown_ != nullptr) reboot_on_shutdown_->Clear();
  _has_bits_[1] &= ~0x00000002u;
}
inline const ::enterprise_management::RebootOnShutdownProto& ChromeDeviceSettingsProto::_internal_reboot_on_shutdown() const {
  const ::enterprise_management::RebootOnShutdownProto* p = reboot_on_shutdown_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::RebootOnShutdownProto*>(
      &::enterprise_management::_RebootOnShutdownProto_default_instance_);
}
inline const ::enterprise_management::RebootOnShutdownProto& ChromeDeviceSettingsProto::reboot_on_shutdown() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.reboot_on_shutdown)
  return _internal_reboot_on_shutdown();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_reboot_on_shutdown(
    ::enterprise_management::RebootOnShutdownProto* reboot_on_shutdown) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reboot_on_shutdown_);
  }
  reboot_on_shutdown_ = reboot_on_shutdown;
  if (reboot_on_shutdown) {
    _has_bits_[1] |= 0x00000002u;
  } else {
    _has_bits_[1] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.reboot_on_shutdown)
}
inline ::enterprise_management::RebootOnShutdownProto* ChromeDeviceSettingsProto::release_reboot_on_shutdown() {
  auto temp = unsafe_arena_release_reboot_on_shutdown();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::RebootOnShutdownProto* ChromeDeviceSettingsProto::unsafe_arena_release_reboot_on_shutdown() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.reboot_on_shutdown)
  _has_bits_[1] &= ~0x00000002u;
  ::enterprise_management::RebootOnShutdownProto* temp = reboot_on_shutdown_;
  reboot_on_shutdown_ = nullptr;
  return temp;
}
inline ::enterprise_management::RebootOnShutdownProto* ChromeDeviceSettingsProto::_internal_mutable_reboot_on_shutdown() {
  _has_bits_[1] |= 0x00000002u;
  if (reboot_on_shutdown_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::RebootOnShutdownProto>(GetArena());
    reboot_on_shutdown_ = p;
  }
  return reboot_on_shutdown_;
}
inline ::enterprise_management::RebootOnShutdownProto* ChromeDeviceSettingsProto::mutable_reboot_on_shutdown() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.reboot_on_shutdown)
  return _internal_mutable_reboot_on_shutdown();
}
inline void ChromeDeviceSettingsProto::set_allocated_reboot_on_shutdown(::enterprise_management::RebootOnShutdownProto* reboot_on_shutdown) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reboot_on_shutdown_;
  }
  if (reboot_on_shutdown) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reboot_on_shutdown);
    if (message_arena != submessage_arena) {
      reboot_on_shutdown = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reboot_on_shutdown, submessage_arena);
    }
    _has_bits_[1] |= 0x00000002u;
  } else {
    _has_bits_[1] &= ~0x00000002u;
  }
  reboot_on_shutdown_ = reboot_on_shutdown;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.reboot_on_shutdown)
}

// optional .enterprise_management.DeviceHeartbeatSettingsProto device_heartbeat_settings = 35;
inline bool ChromeDeviceSettingsProto::_internal_has_device_heartbeat_settings() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || device_heartbeat_settings_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_device_heartbeat_settings() const {
  return _internal_has_device_heartbeat_settings();
}
inline void ChromeDeviceSettingsProto::clear_device_heartbeat_settings() {
  if (device_heartbeat_settings_ != nullptr) device_heartbeat_settings_->Clear();
  _has_bits_[1] &= ~0x00000004u;
}
inline const ::enterprise_management::DeviceHeartbeatSettingsProto& ChromeDeviceSettingsProto::_internal_device_heartbeat_settings() const {
  const ::enterprise_management::DeviceHeartbeatSettingsProto* p = device_heartbeat_settings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::DeviceHeartbeatSettingsProto*>(
      &::enterprise_management::_DeviceHeartbeatSettingsProto_default_instance_);
}
inline const ::enterprise_management::DeviceHeartbeatSettingsProto& ChromeDeviceSettingsProto::device_heartbeat_settings() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.device_heartbeat_settings)
  return _internal_device_heartbeat_settings();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_device_heartbeat_settings(
    ::enterprise_management::DeviceHeartbeatSettingsProto* device_heartbeat_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_heartbeat_settings_);
  }
  device_heartbeat_settings_ = device_heartbeat_settings;
  if (device_heartbeat_settings) {
    _has_bits_[1] |= 0x00000004u;
  } else {
    _has_bits_[1] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_heartbeat_settings)
}
inline ::enterprise_management::DeviceHeartbeatSettingsProto* ChromeDeviceSettingsProto::release_device_heartbeat_settings() {
  auto temp = unsafe_arena_release_device_heartbeat_settings();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::DeviceHeartbeatSettingsProto* ChromeDeviceSettingsProto::unsafe_arena_release_device_heartbeat_settings() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.device_heartbeat_settings)
  _has_bits_[1] &= ~0x00000004u;
  ::enterprise_management::DeviceHeartbeatSettingsProto* temp = device_heartbeat_settings_;
  device_heartbeat_settings_ = nullptr;
  return temp;
}
inline ::enterprise_management::DeviceHeartbeatSettingsProto* ChromeDeviceSettingsProto::_internal_mutable_device_heartbeat_settings() {
  _has_bits_[1] |= 0x00000004u;
  if (device_heartbeat_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::DeviceHeartbeatSettingsProto>(GetArena());
    device_heartbeat_settings_ = p;
  }
  return device_heartbeat_settings_;
}
inline ::enterprise_management::DeviceHeartbeatSettingsProto* ChromeDeviceSettingsProto::mutable_device_heartbeat_settings() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.device_heartbeat_settings)
  return _internal_mutable_device_heartbeat_settings();
}
inline void ChromeDeviceSettingsProto::set_allocated_device_heartbeat_settings(::enterprise_management::DeviceHeartbeatSettingsProto* device_heartbeat_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_heartbeat_settings_;
  }
  if (device_heartbeat_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_heartbeat_settings);
    if (message_arena != submessage_arena) {
      device_heartbeat_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_heartbeat_settings, submessage_arena);
    }
    _has_bits_[1] |= 0x00000004u;
  } else {
    _has_bits_[1] &= ~0x00000004u;
  }
  device_heartbeat_settings_ = device_heartbeat_settings;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_heartbeat_settings)
}

// optional .enterprise_management.ExtensionCacheSizeProto extension_cache_size = 36;
inline bool ChromeDeviceSettingsProto::_internal_has_extension_cache_size() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || extension_cache_size_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_extension_cache_size() const {
  return _internal_has_extension_cache_size();
}
inline void ChromeDeviceSettingsProto::clear_extension_cache_size() {
  if (extension_cache_size_ != nullptr) extension_cache_size_->Clear();
  _has_bits_[1] &= ~0x00000008u;
}
inline const ::enterprise_management::ExtensionCacheSizeProto& ChromeDeviceSettingsProto::_internal_extension_cache_size() const {
  const ::enterprise_management::ExtensionCacheSizeProto* p = extension_cache_size_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::ExtensionCacheSizeProto*>(
      &::enterprise_management::_ExtensionCacheSizeProto_default_instance_);
}
inline const ::enterprise_management::ExtensionCacheSizeProto& ChromeDeviceSettingsProto::extension_cache_size() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.extension_cache_size)
  return _internal_extension_cache_size();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_extension_cache_size(
    ::enterprise_management::ExtensionCacheSizeProto* extension_cache_size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extension_cache_size_);
  }
  extension_cache_size_ = extension_cache_size;
  if (extension_cache_size) {
    _has_bits_[1] |= 0x00000008u;
  } else {
    _has_bits_[1] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.extension_cache_size)
}
inline ::enterprise_management::ExtensionCacheSizeProto* ChromeDeviceSettingsProto::release_extension_cache_size() {
  auto temp = unsafe_arena_release_extension_cache_size();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::ExtensionCacheSizeProto* ChromeDeviceSettingsProto::unsafe_arena_release_extension_cache_size() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.extension_cache_size)
  _has_bits_[1] &= ~0x00000008u;
  ::enterprise_management::ExtensionCacheSizeProto* temp = extension_cache_size_;
  extension_cache_size_ = nullptr;
  return temp;
}
inline ::enterprise_management::ExtensionCacheSizeProto* ChromeDeviceSettingsProto::_internal_mutable_extension_cache_size() {
  _has_bits_[1] |= 0x00000008u;
  if (extension_cache_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::ExtensionCacheSizeProto>(GetArena());
    extension_cache_size_ = p;
  }
  return extension_cache_size_;
}
inline ::enterprise_management::ExtensionCacheSizeProto* ChromeDeviceSettingsProto::mutable_extension_cache_size() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.extension_cache_size)
  return _internal_mutable_extension_cache_size();
}
inline void ChromeDeviceSettingsProto::set_allocated_extension_cache_size(::enterprise_management::ExtensionCacheSizeProto* extension_cache_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete extension_cache_size_;
  }
  if (extension_cache_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(extension_cache_size);
    if (message_arena != submessage_arena) {
      extension_cache_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension_cache_size, submessage_arena);
    }
    _has_bits_[1] |= 0x00000008u;
  } else {
    _has_bits_[1] &= ~0x00000008u;
  }
  extension_cache_size_ = extension_cache_size;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.extension_cache_size)
}

// optional .enterprise_management.LoginScreenDomainAutoCompleteProto login_screen_domain_auto_complete = 37;
inline bool ChromeDeviceSettingsProto::_internal_has_login_screen_domain_auto_complete() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || login_screen_domain_auto_complete_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_login_screen_domain_auto_complete() const {
  return _internal_has_login_screen_domain_auto_complete();
}
inline void ChromeDeviceSettingsProto::clear_login_screen_domain_auto_complete() {
  if (login_screen_domain_auto_complete_ != nullptr) login_screen_domain_auto_complete_->Clear();
  _has_bits_[1] &= ~0x00000010u;
}
inline const ::enterprise_management::LoginScreenDomainAutoCompleteProto& ChromeDeviceSettingsProto::_internal_login_screen_domain_auto_complete() const {
  const ::enterprise_management::LoginScreenDomainAutoCompleteProto* p = login_screen_domain_auto_complete_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::LoginScreenDomainAutoCompleteProto*>(
      &::enterprise_management::_LoginScreenDomainAutoCompleteProto_default_instance_);
}
inline const ::enterprise_management::LoginScreenDomainAutoCompleteProto& ChromeDeviceSettingsProto::login_screen_domain_auto_complete() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.login_screen_domain_auto_complete)
  return _internal_login_screen_domain_auto_complete();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_login_screen_domain_auto_complete(
    ::enterprise_management::LoginScreenDomainAutoCompleteProto* login_screen_domain_auto_complete) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_domain_auto_complete_);
  }
  login_screen_domain_auto_complete_ = login_screen_domain_auto_complete;
  if (login_screen_domain_auto_complete) {
    _has_bits_[1] |= 0x00000010u;
  } else {
    _has_bits_[1] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.login_screen_domain_auto_complete)
}
inline ::enterprise_management::LoginScreenDomainAutoCompleteProto* ChromeDeviceSettingsProto::release_login_screen_domain_auto_complete() {
  auto temp = unsafe_arena_release_login_screen_domain_auto_complete();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::LoginScreenDomainAutoCompleteProto* ChromeDeviceSettingsProto::unsafe_arena_release_login_screen_domain_auto_complete() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.login_screen_domain_auto_complete)
  _has_bits_[1] &= ~0x00000010u;
  ::enterprise_management::LoginScreenDomainAutoCompleteProto* temp = login_screen_domain_auto_complete_;
  login_screen_domain_auto_complete_ = nullptr;
  return temp;
}
inline ::enterprise_management::LoginScreenDomainAutoCompleteProto* ChromeDeviceSettingsProto::_internal_mutable_login_screen_domain_auto_complete() {
  _has_bits_[1] |= 0x00000010u;
  if (login_screen_domain_auto_complete_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::LoginScreenDomainAutoCompleteProto>(GetArena());
    login_screen_domain_auto_complete_ = p;
  }
  return login_screen_domain_auto_complete_;
}
inline ::enterprise_management::LoginScreenDomainAutoCompleteProto* ChromeDeviceSettingsProto::mutable_login_screen_domain_auto_complete() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.login_screen_domain_auto_complete)
  return _internal_mutable_login_screen_domain_auto_complete();
}
inline void ChromeDeviceSettingsProto::set_allocated_login_screen_domain_auto_complete(::enterprise_management::LoginScreenDomainAutoCompleteProto* login_screen_domain_auto_complete) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete login_screen_domain_auto_complete_;
  }
  if (login_screen_domain_auto_complete) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(login_screen_domain_auto_complete);
    if (message_arena != submessage_arena) {
      login_screen_domain_auto_complete = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_screen_domain_auto_complete, submessage_arena);
    }
    _has_bits_[1] |= 0x00000010u;
  } else {
    _has_bits_[1] &= ~0x00000010u;
  }
  login_screen_domain_auto_complete_ = login_screen_domain_auto_complete;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.login_screen_domain_auto_complete)
}

// optional .enterprise_management.DeviceLogUploadSettingsProto device_log_upload_settings = 38;
inline bool ChromeDeviceSettingsProto::_internal_has_device_log_upload_settings() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || device_log_upload_settings_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_device_log_upload_settings() const {
  return _internal_has_device_log_upload_settings();
}
inline void ChromeDeviceSettingsProto::clear_device_log_upload_settings() {
  if (device_log_upload_settings_ != nullptr) device_log_upload_settings_->Clear();
  _has_bits_[1] &= ~0x00000020u;
}
inline const ::enterprise_management::DeviceLogUploadSettingsProto& ChromeDeviceSettingsProto::_internal_device_log_upload_settings() const {
  const ::enterprise_management::DeviceLogUploadSettingsProto* p = device_log_upload_settings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::DeviceLogUploadSettingsProto*>(
      &::enterprise_management::_DeviceLogUploadSettingsProto_default_instance_);
}
inline const ::enterprise_management::DeviceLogUploadSettingsProto& ChromeDeviceSettingsProto::device_log_upload_settings() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.device_log_upload_settings)
  return _internal_device_log_upload_settings();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_device_log_upload_settings(
    ::enterprise_management::DeviceLogUploadSettingsProto* device_log_upload_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_log_upload_settings_);
  }
  device_log_upload_settings_ = device_log_upload_settings;
  if (device_log_upload_settings) {
    _has_bits_[1] |= 0x00000020u;
  } else {
    _has_bits_[1] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_log_upload_settings)
}
inline ::enterprise_management::DeviceLogUploadSettingsProto* ChromeDeviceSettingsProto::release_device_log_upload_settings() {
  auto temp = unsafe_arena_release_device_log_upload_settings();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::DeviceLogUploadSettingsProto* ChromeDeviceSettingsProto::unsafe_arena_release_device_log_upload_settings() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.device_log_upload_settings)
  _has_bits_[1] &= ~0x00000020u;
  ::enterprise_management::DeviceLogUploadSettingsProto* temp = device_log_upload_settings_;
  device_log_upload_settings_ = nullptr;
  return temp;
}
inline ::enterprise_management::DeviceLogUploadSettingsProto* ChromeDeviceSettingsProto::_internal_mutable_device_log_upload_settings() {
  _has_bits_[1] |= 0x00000020u;
  if (device_log_upload_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::DeviceLogUploadSettingsProto>(GetArena());
    device_log_upload_settings_ = p;
  }
  return device_log_upload_settings_;
}
inline ::enterprise_management::DeviceLogUploadSettingsProto* ChromeDeviceSettingsProto::mutable_device_log_upload_settings() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.device_log_upload_settings)
  return _internal_mutable_device_log_upload_settings();
}
inline void ChromeDeviceSettingsProto::set_allocated_device_log_upload_settings(::enterprise_management::DeviceLogUploadSettingsProto* device_log_upload_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_log_upload_settings_;
  }
  if (device_log_upload_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_log_upload_settings);
    if (message_arena != submessage_arena) {
      device_log_upload_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_log_upload_settings, submessage_arena);
    }
    _has_bits_[1] |= 0x00000020u;
  } else {
    _has_bits_[1] &= ~0x00000020u;
  }
  device_log_upload_settings_ = device_log_upload_settings;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_log_upload_settings)
}

// optional .enterprise_management.DisplayRotationDefaultProto display_rotation_default = 39;
inline bool ChromeDeviceSettingsProto::_internal_has_display_rotation_default() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || display_rotation_default_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_display_rotation_default() const {
  return _internal_has_display_rotation_default();
}
inline void ChromeDeviceSettingsProto::clear_display_rotation_default() {
  if (display_rotation_default_ != nullptr) display_rotation_default_->Clear();
  _has_bits_[1] &= ~0x00000040u;
}
inline const ::enterprise_management::DisplayRotationDefaultProto& ChromeDeviceSettingsProto::_internal_display_rotation_default() const {
  const ::enterprise_management::DisplayRotationDefaultProto* p = display_rotation_default_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::DisplayRotationDefaultProto*>(
      &::enterprise_management::_DisplayRotationDefaultProto_default_instance_);
}
inline const ::enterprise_management::DisplayRotationDefaultProto& ChromeDeviceSettingsProto::display_rotation_default() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.display_rotation_default)
  return _internal_display_rotation_default();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_display_rotation_default(
    ::enterprise_management::DisplayRotationDefaultProto* display_rotation_default) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(display_rotation_default_);
  }
  display_rotation_default_ = display_rotation_default;
  if (display_rotation_default) {
    _has_bits_[1] |= 0x00000040u;
  } else {
    _has_bits_[1] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.display_rotation_default)
}
inline ::enterprise_management::DisplayRotationDefaultProto* ChromeDeviceSettingsProto::release_display_rotation_default() {
  auto temp = unsafe_arena_release_display_rotation_default();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::DisplayRotationDefaultProto* ChromeDeviceSettingsProto::unsafe_arena_release_display_rotation_default() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.display_rotation_default)
  _has_bits_[1] &= ~0x00000040u;
  ::enterprise_management::DisplayRotationDefaultProto* temp = display_rotation_default_;
  display_rotation_default_ = nullptr;
  return temp;
}
inline ::enterprise_management::DisplayRotationDefaultProto* ChromeDeviceSettingsProto::_internal_mutable_display_rotation_default() {
  _has_bits_[1] |= 0x00000040u;
  if (display_rotation_default_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::DisplayRotationDefaultProto>(GetArena());
    display_rotation_default_ = p;
  }
  return display_rotation_default_;
}
inline ::enterprise_management::DisplayRotationDefaultProto* ChromeDeviceSettingsProto::mutable_display_rotation_default() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.display_rotation_default)
  return _internal_mutable_display_rotation_default();
}
inline void ChromeDeviceSettingsProto::set_allocated_display_rotation_default(::enterprise_management::DisplayRotationDefaultProto* display_rotation_default) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete display_rotation_default_;
  }
  if (display_rotation_default) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(display_rotation_default);
    if (message_arena != submessage_arena) {
      display_rotation_default = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, display_rotation_default, submessage_arena);
    }
    _has_bits_[1] |= 0x00000040u;
  } else {
    _has_bits_[1] &= ~0x00000040u;
  }
  display_rotation_default_ = display_rotation_default;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.display_rotation_default)
}

// optional .enterprise_management.AllowKioskAppControlChromeVersionProto allow_kiosk_app_control_chrome_version = 40;
inline bool ChromeDeviceSettingsProto::_internal_has_allow_kiosk_app_control_chrome_version() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || allow_kiosk_app_control_chrome_version_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_allow_kiosk_app_control_chrome_version() const {
  return _internal_has_allow_kiosk_app_control_chrome_version();
}
inline void ChromeDeviceSettingsProto::clear_allow_kiosk_app_control_chrome_version() {
  if (allow_kiosk_app_control_chrome_version_ != nullptr) allow_kiosk_app_control_chrome_version_->Clear();
  _has_bits_[1] &= ~0x00000080u;
}
inline const ::enterprise_management::AllowKioskAppControlChromeVersionProto& ChromeDeviceSettingsProto::_internal_allow_kiosk_app_control_chrome_version() const {
  const ::enterprise_management::AllowKioskAppControlChromeVersionProto* p = allow_kiosk_app_control_chrome_version_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::AllowKioskAppControlChromeVersionProto*>(
      &::enterprise_management::_AllowKioskAppControlChromeVersionProto_default_instance_);
}
inline const ::enterprise_management::AllowKioskAppControlChromeVersionProto& ChromeDeviceSettingsProto::allow_kiosk_app_control_chrome_version() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.allow_kiosk_app_control_chrome_version)
  return _internal_allow_kiosk_app_control_chrome_version();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_allow_kiosk_app_control_chrome_version(
    ::enterprise_management::AllowKioskAppControlChromeVersionProto* allow_kiosk_app_control_chrome_version) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(allow_kiosk_app_control_chrome_version_);
  }
  allow_kiosk_app_control_chrome_version_ = allow_kiosk_app_control_chrome_version;
  if (allow_kiosk_app_control_chrome_version) {
    _has_bits_[1] |= 0x00000080u;
  } else {
    _has_bits_[1] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.allow_kiosk_app_control_chrome_version)
}
inline ::enterprise_management::AllowKioskAppControlChromeVersionProto* ChromeDeviceSettingsProto::release_allow_kiosk_app_control_chrome_version() {
  auto temp = unsafe_arena_release_allow_kiosk_app_control_chrome_version();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::AllowKioskAppControlChromeVersionProto* ChromeDeviceSettingsProto::unsafe_arena_release_allow_kiosk_app_control_chrome_version() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.allow_kiosk_app_control_chrome_version)
  _has_bits_[1] &= ~0x00000080u;
  ::enterprise_management::AllowKioskAppControlChromeVersionProto* temp = allow_kiosk_app_control_chrome_version_;
  allow_kiosk_app_control_chrome_version_ = nullptr;
  return temp;
}
inline ::enterprise_management::AllowKioskAppControlChromeVersionProto* ChromeDeviceSettingsProto::_internal_mutable_allow_kiosk_app_control_chrome_version() {
  _has_bits_[1] |= 0x00000080u;
  if (allow_kiosk_app_control_chrome_version_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::AllowKioskAppControlChromeVersionProto>(GetArena());
    allow_kiosk_app_control_chrome_version_ = p;
  }
  return allow_kiosk_app_control_chrome_version_;
}
inline ::enterprise_management::AllowKioskAppControlChromeVersionProto* ChromeDeviceSettingsProto::mutable_allow_kiosk_app_control_chrome_version() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.allow_kiosk_app_control_chrome_version)
  return _internal_mutable_allow_kiosk_app_control_chrome_version();
}
inline void ChromeDeviceSettingsProto::set_allocated_allow_kiosk_app_control_chrome_version(::enterprise_management::AllowKioskAppControlChromeVersionProto* allow_kiosk_app_control_chrome_version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete allow_kiosk_app_control_chrome_version_;
  }
  if (allow_kiosk_app_control_chrome_version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(allow_kiosk_app_control_chrome_version);
    if (message_arena != submessage_arena) {
      allow_kiosk_app_control_chrome_version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, allow_kiosk_app_control_chrome_version, submessage_arena);
    }
    _has_bits_[1] |= 0x00000080u;
  } else {
    _has_bits_[1] &= ~0x00000080u;
  }
  allow_kiosk_app_control_chrome_version_ = allow_kiosk_app_control_chrome_version;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.allow_kiosk_app_control_chrome_version)
}

// optional .enterprise_management.LoginAuthenticationBehaviorProto login_authentication_behavior = 41;
inline bool ChromeDeviceSettingsProto::_internal_has_login_authentication_behavior() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || login_authentication_behavior_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_login_authentication_behavior() const {
  return _internal_has_login_authentication_behavior();
}
inline void ChromeDeviceSettingsProto::clear_login_authentication_behavior() {
  if (login_authentication_behavior_ != nullptr) login_authentication_behavior_->Clear();
  _has_bits_[1] &= ~0x00000100u;
}
inline const ::enterprise_management::LoginAuthenticationBehaviorProto& ChromeDeviceSettingsProto::_internal_login_authentication_behavior() const {
  const ::enterprise_management::LoginAuthenticationBehaviorProto* p = login_authentication_behavior_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::LoginAuthenticationBehaviorProto*>(
      &::enterprise_management::_LoginAuthenticationBehaviorProto_default_instance_);
}
inline const ::enterprise_management::LoginAuthenticationBehaviorProto& ChromeDeviceSettingsProto::login_authentication_behavior() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.login_authentication_behavior)
  return _internal_login_authentication_behavior();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_login_authentication_behavior(
    ::enterprise_management::LoginAuthenticationBehaviorProto* login_authentication_behavior) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_authentication_behavior_);
  }
  login_authentication_behavior_ = login_authentication_behavior;
  if (login_authentication_behavior) {
    _has_bits_[1] |= 0x00000100u;
  } else {
    _has_bits_[1] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.login_authentication_behavior)
}
inline ::enterprise_management::LoginAuthenticationBehaviorProto* ChromeDeviceSettingsProto::release_login_authentication_behavior() {
  auto temp = unsafe_arena_release_login_authentication_behavior();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::LoginAuthenticationBehaviorProto* ChromeDeviceSettingsProto::unsafe_arena_release_login_authentication_behavior() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.login_authentication_behavior)
  _has_bits_[1] &= ~0x00000100u;
  ::enterprise_management::LoginAuthenticationBehaviorProto* temp = login_authentication_behavior_;
  login_authentication_behavior_ = nullptr;
  return temp;
}
inline ::enterprise_management::LoginAuthenticationBehaviorProto* ChromeDeviceSettingsProto::_internal_mutable_login_authentication_behavior() {
  _has_bits_[1] |= 0x00000100u;
  if (login_authentication_behavior_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::LoginAuthenticationBehaviorProto>(GetArena());
    login_authentication_behavior_ = p;
  }
  return login_authentication_behavior_;
}
inline ::enterprise_management::LoginAuthenticationBehaviorProto* ChromeDeviceSettingsProto::mutable_login_authentication_behavior() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.login_authentication_behavior)
  return _internal_mutable_login_authentication_behavior();
}
inline void ChromeDeviceSettingsProto::set_allocated_login_authentication_behavior(::enterprise_management::LoginAuthenticationBehaviorProto* login_authentication_behavior) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete login_authentication_behavior_;
  }
  if (login_authentication_behavior) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(login_authentication_behavior);
    if (message_arena != submessage_arena) {
      login_authentication_behavior = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_authentication_behavior, submessage_arena);
    }
    _has_bits_[1] |= 0x00000100u;
  } else {
    _has_bits_[1] &= ~0x00000100u;
  }
  login_authentication_behavior_ = login_authentication_behavior;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.login_authentication_behavior)
}

// optional .enterprise_management.UsbDetachableWhitelistProto usb_detachable_whitelist = 42;
inline bool ChromeDeviceSettingsProto::_internal_has_usb_detachable_whitelist() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || usb_detachable_whitelist_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_usb_detachable_whitelist() const {
  return _internal_has_usb_detachable_whitelist();
}
inline void ChromeDeviceSettingsProto::clear_usb_detachable_whitelist() {
  if (usb_detachable_whitelist_ != nullptr) usb_detachable_whitelist_->Clear();
  _has_bits_[1] &= ~0x00000200u;
}
inline const ::enterprise_management::UsbDetachableWhitelistProto& ChromeDeviceSettingsProto::_internal_usb_detachable_whitelist() const {
  const ::enterprise_management::UsbDetachableWhitelistProto* p = usb_detachable_whitelist_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::UsbDetachableWhitelistProto*>(
      &::enterprise_management::_UsbDetachableWhitelistProto_default_instance_);
}
inline const ::enterprise_management::UsbDetachableWhitelistProto& ChromeDeviceSettingsProto::usb_detachable_whitelist() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.usb_detachable_whitelist)
  return _internal_usb_detachable_whitelist();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_usb_detachable_whitelist(
    ::enterprise_management::UsbDetachableWhitelistProto* usb_detachable_whitelist) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(usb_detachable_whitelist_);
  }
  usb_detachable_whitelist_ = usb_detachable_whitelist;
  if (usb_detachable_whitelist) {
    _has_bits_[1] |= 0x00000200u;
  } else {
    _has_bits_[1] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.usb_detachable_whitelist)
}
inline ::enterprise_management::UsbDetachableWhitelistProto* ChromeDeviceSettingsProto::release_usb_detachable_whitelist() {
  auto temp = unsafe_arena_release_usb_detachable_whitelist();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::UsbDetachableWhitelistProto* ChromeDeviceSettingsProto::unsafe_arena_release_usb_detachable_whitelist() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.usb_detachable_whitelist)
  _has_bits_[1] &= ~0x00000200u;
  ::enterprise_management::UsbDetachableWhitelistProto* temp = usb_detachable_whitelist_;
  usb_detachable_whitelist_ = nullptr;
  return temp;
}
inline ::enterprise_management::UsbDetachableWhitelistProto* ChromeDeviceSettingsProto::_internal_mutable_usb_detachable_whitelist() {
  _has_bits_[1] |= 0x00000200u;
  if (usb_detachable_whitelist_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::UsbDetachableWhitelistProto>(GetArena());
    usb_detachable_whitelist_ = p;
  }
  return usb_detachable_whitelist_;
}
inline ::enterprise_management::UsbDetachableWhitelistProto* ChromeDeviceSettingsProto::mutable_usb_detachable_whitelist() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.usb_detachable_whitelist)
  return _internal_mutable_usb_detachable_whitelist();
}
inline void ChromeDeviceSettingsProto::set_allocated_usb_detachable_whitelist(::enterprise_management::UsbDetachableWhitelistProto* usb_detachable_whitelist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete usb_detachable_whitelist_;
  }
  if (usb_detachable_whitelist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(usb_detachable_whitelist);
    if (message_arena != submessage_arena) {
      usb_detachable_whitelist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, usb_detachable_whitelist, submessage_arena);
    }
    _has_bits_[1] |= 0x00000200u;
  } else {
    _has_bits_[1] &= ~0x00000200u;
  }
  usb_detachable_whitelist_ = usb_detachable_whitelist;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.usb_detachable_whitelist)
}

// optional .enterprise_management.AllowBluetoothProto allow_bluetooth = 43;
inline bool ChromeDeviceSettingsProto::_internal_has_allow_bluetooth() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || allow_bluetooth_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_allow_bluetooth() const {
  return _internal_has_allow_bluetooth();
}
inline void ChromeDeviceSettingsProto::clear_allow_bluetooth() {
  if (allow_bluetooth_ != nullptr) allow_bluetooth_->Clear();
  _has_bits_[1] &= ~0x00000400u;
}
inline const ::enterprise_management::AllowBluetoothProto& ChromeDeviceSettingsProto::_internal_allow_bluetooth() const {
  const ::enterprise_management::AllowBluetoothProto* p = allow_bluetooth_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::AllowBluetoothProto*>(
      &::enterprise_management::_AllowBluetoothProto_default_instance_);
}
inline const ::enterprise_management::AllowBluetoothProto& ChromeDeviceSettingsProto::allow_bluetooth() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.allow_bluetooth)
  return _internal_allow_bluetooth();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_allow_bluetooth(
    ::enterprise_management::AllowBluetoothProto* allow_bluetooth) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(allow_bluetooth_);
  }
  allow_bluetooth_ = allow_bluetooth;
  if (allow_bluetooth) {
    _has_bits_[1] |= 0x00000400u;
  } else {
    _has_bits_[1] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.allow_bluetooth)
}
inline ::enterprise_management::AllowBluetoothProto* ChromeDeviceSettingsProto::release_allow_bluetooth() {
  auto temp = unsafe_arena_release_allow_bluetooth();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::AllowBluetoothProto* ChromeDeviceSettingsProto::unsafe_arena_release_allow_bluetooth() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.allow_bluetooth)
  _has_bits_[1] &= ~0x00000400u;
  ::enterprise_management::AllowBluetoothProto* temp = allow_bluetooth_;
  allow_bluetooth_ = nullptr;
  return temp;
}
inline ::enterprise_management::AllowBluetoothProto* ChromeDeviceSettingsProto::_internal_mutable_allow_bluetooth() {
  _has_bits_[1] |= 0x00000400u;
  if (allow_bluetooth_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::AllowBluetoothProto>(GetArena());
    allow_bluetooth_ = p;
  }
  return allow_bluetooth_;
}
inline ::enterprise_management::AllowBluetoothProto* ChromeDeviceSettingsProto::mutable_allow_bluetooth() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.allow_bluetooth)
  return _internal_mutable_allow_bluetooth();
}
inline void ChromeDeviceSettingsProto::set_allocated_allow_bluetooth(::enterprise_management::AllowBluetoothProto* allow_bluetooth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete allow_bluetooth_;
  }
  if (allow_bluetooth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(allow_bluetooth);
    if (message_arena != submessage_arena) {
      allow_bluetooth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, allow_bluetooth, submessage_arena);
    }
    _has_bits_[1] |= 0x00000400u;
  } else {
    _has_bits_[1] &= ~0x00000400u;
  }
  allow_bluetooth_ = allow_bluetooth;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.allow_bluetooth)
}

// optional .enterprise_management.DeviceQuirksDownloadEnabledProto quirks_download_enabled = 44;
inline bool ChromeDeviceSettingsProto::_internal_has_quirks_download_enabled() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || quirks_download_enabled_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_quirks_download_enabled() const {
  return _internal_has_quirks_download_enabled();
}
inline void ChromeDeviceSettingsProto::clear_quirks_download_enabled() {
  if (quirks_download_enabled_ != nullptr) quirks_download_enabled_->Clear();
  _has_bits_[1] &= ~0x00000800u;
}
inline const ::enterprise_management::DeviceQuirksDownloadEnabledProto& ChromeDeviceSettingsProto::_internal_quirks_download_enabled() const {
  const ::enterprise_management::DeviceQuirksDownloadEnabledProto* p = quirks_download_enabled_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::DeviceQuirksDownloadEnabledProto*>(
      &::enterprise_management::_DeviceQuirksDownloadEnabledProto_default_instance_);
}
inline const ::enterprise_management::DeviceQuirksDownloadEnabledProto& ChromeDeviceSettingsProto::quirks_download_enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.quirks_download_enabled)
  return _internal_quirks_download_enabled();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_quirks_download_enabled(
    ::enterprise_management::DeviceQuirksDownloadEnabledProto* quirks_download_enabled) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(quirks_download_enabled_);
  }
  quirks_download_enabled_ = quirks_download_enabled;
  if (quirks_download_enabled) {
    _has_bits_[1] |= 0x00000800u;
  } else {
    _has_bits_[1] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.quirks_download_enabled)
}
inline ::enterprise_management::DeviceQuirksDownloadEnabledProto* ChromeDeviceSettingsProto::release_quirks_download_enabled() {
  auto temp = unsafe_arena_release_quirks_download_enabled();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::DeviceQuirksDownloadEnabledProto* ChromeDeviceSettingsProto::unsafe_arena_release_quirks_download_enabled() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.quirks_download_enabled)
  _has_bits_[1] &= ~0x00000800u;
  ::enterprise_management::DeviceQuirksDownloadEnabledProto* temp = quirks_download_enabled_;
  quirks_download_enabled_ = nullptr;
  return temp;
}
inline ::enterprise_management::DeviceQuirksDownloadEnabledProto* ChromeDeviceSettingsProto::_internal_mutable_quirks_download_enabled() {
  _has_bits_[1] |= 0x00000800u;
  if (quirks_download_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::DeviceQuirksDownloadEnabledProto>(GetArena());
    quirks_download_enabled_ = p;
  }
  return quirks_download_enabled_;
}
inline ::enterprise_management::DeviceQuirksDownloadEnabledProto* ChromeDeviceSettingsProto::mutable_quirks_download_enabled() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.quirks_download_enabled)
  return _internal_mutable_quirks_download_enabled();
}
inline void ChromeDeviceSettingsProto::set_allocated_quirks_download_enabled(::enterprise_management::DeviceQuirksDownloadEnabledProto* quirks_download_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete quirks_download_enabled_;
  }
  if (quirks_download_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(quirks_download_enabled);
    if (message_arena != submessage_arena) {
      quirks_download_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quirks_download_enabled, submessage_arena);
    }
    _has_bits_[1] |= 0x00000800u;
  } else {
    _has_bits_[1] &= ~0x00000800u;
  }
  quirks_download_enabled_ = quirks_download_enabled;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.quirks_download_enabled)
}

// optional .enterprise_management.LoginVideoCaptureAllowedUrlsProto login_video_capture_allowed_urls = 45;
inline bool ChromeDeviceSettingsProto::_internal_has_login_video_capture_allowed_urls() const {
  bool value = (_has_bits_[1] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || login_video_capture_allowed_urls_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_login_video_capture_allowed_urls() const {
  return _internal_has_login_video_capture_allowed_urls();
}
inline void ChromeDeviceSettingsProto::clear_login_video_capture_allowed_urls() {
  if (login_video_capture_allowed_urls_ != nullptr) login_video_capture_allowed_urls_->Clear();
  _has_bits_[1] &= ~0x00001000u;
}
inline const ::enterprise_management::LoginVideoCaptureAllowedUrlsProto& ChromeDeviceSettingsProto::_internal_login_video_capture_allowed_urls() const {
  const ::enterprise_management::LoginVideoCaptureAllowedUrlsProto* p = login_video_capture_allowed_urls_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::LoginVideoCaptureAllowedUrlsProto*>(
      &::enterprise_management::_LoginVideoCaptureAllowedUrlsProto_default_instance_);
}
inline const ::enterprise_management::LoginVideoCaptureAllowedUrlsProto& ChromeDeviceSettingsProto::login_video_capture_allowed_urls() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.login_video_capture_allowed_urls)
  return _internal_login_video_capture_allowed_urls();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_login_video_capture_allowed_urls(
    ::enterprise_management::LoginVideoCaptureAllowedUrlsProto* login_video_capture_allowed_urls) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_video_capture_allowed_urls_);
  }
  login_video_capture_allowed_urls_ = login_video_capture_allowed_urls;
  if (login_video_capture_allowed_urls) {
    _has_bits_[1] |= 0x00001000u;
  } else {
    _has_bits_[1] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.login_video_capture_allowed_urls)
}
inline ::enterprise_management::LoginVideoCaptureAllowedUrlsProto* ChromeDeviceSettingsProto::release_login_video_capture_allowed_urls() {
  auto temp = unsafe_arena_release_login_video_capture_allowed_urls();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::LoginVideoCaptureAllowedUrlsProto* ChromeDeviceSettingsProto::unsafe_arena_release_login_video_capture_allowed_urls() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.login_video_capture_allowed_urls)
  _has_bits_[1] &= ~0x00001000u;
  ::enterprise_management::LoginVideoCaptureAllowedUrlsProto* temp = login_video_capture_allowed_urls_;
  login_video_capture_allowed_urls_ = nullptr;
  return temp;
}
inline ::enterprise_management::LoginVideoCaptureAllowedUrlsProto* ChromeDeviceSettingsProto::_internal_mutable_login_video_capture_allowed_urls() {
  _has_bits_[1] |= 0x00001000u;
  if (login_video_capture_allowed_urls_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::LoginVideoCaptureAllowedUrlsProto>(GetArena());
    login_video_capture_allowed_urls_ = p;
  }
  return login_video_capture_allowed_urls_;
}
inline ::enterprise_management::LoginVideoCaptureAllowedUrlsProto* ChromeDeviceSettingsProto::mutable_login_video_capture_allowed_urls() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.login_video_capture_allowed_urls)
  return _internal_mutable_login_video_capture_allowed_urls();
}
inline void ChromeDeviceSettingsProto::set_allocated_login_video_capture_allowed_urls(::enterprise_management::LoginVideoCaptureAllowedUrlsProto* login_video_capture_allowed_urls) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete login_video_capture_allowed_urls_;
  }
  if (login_video_capture_allowed_urls) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(login_video_capture_allowed_urls);
    if (message_arena != submessage_arena) {
      login_video_capture_allowed_urls = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_video_capture_allowed_urls, submessage_arena);
    }
    _has_bits_[1] |= 0x00001000u;
  } else {
    _has_bits_[1] &= ~0x00001000u;
  }
  login_video_capture_allowed_urls_ = login_video_capture_allowed_urls;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.login_video_capture_allowed_urls)
}

// optional .enterprise_management.DeviceLoginScreenExtensionsProto device_login_screen_extensions = 46;
inline bool ChromeDeviceSettingsProto::_internal_has_device_login_screen_extensions() const {
  bool value = (_has_bits_[1] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || device_login_screen_extensions_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_device_login_screen_extensions() const {
  return _internal_has_device_login_screen_extensions();
}
inline void ChromeDeviceSettingsProto::clear_device_login_screen_extensions() {
  if (device_login_screen_extensions_ != nullptr) device_login_screen_extensions_->Clear();
  _has_bits_[1] &= ~0x00002000u;
}
inline const ::enterprise_management::DeviceLoginScreenExtensionsProto& ChromeDeviceSettingsProto::_internal_device_login_screen_extensions() const {
  const ::enterprise_management::DeviceLoginScreenExtensionsProto* p = device_login_screen_extensions_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::DeviceLoginScreenExtensionsProto*>(
      &::enterprise_management::_DeviceLoginScreenExtensionsProto_default_instance_);
}
inline const ::enterprise_management::DeviceLoginScreenExtensionsProto& ChromeDeviceSettingsProto::device_login_screen_extensions() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.device_login_screen_extensions)
  return _internal_device_login_screen_extensions();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_device_login_screen_extensions(
    ::enterprise_management::DeviceLoginScreenExtensionsProto* device_login_screen_extensions) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_login_screen_extensions_);
  }
  device_login_screen_extensions_ = device_login_screen_extensions;
  if (device_login_screen_extensions) {
    _has_bits_[1] |= 0x00002000u;
  } else {
    _has_bits_[1] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_login_screen_extensions)
}
inline ::enterprise_management::DeviceLoginScreenExtensionsProto* ChromeDeviceSettingsProto::release_device_login_screen_extensions() {
  auto temp = unsafe_arena_release_device_login_screen_extensions();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::DeviceLoginScreenExtensionsProto* ChromeDeviceSettingsProto::unsafe_arena_release_device_login_screen_extensions() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.device_login_screen_extensions)
  _has_bits_[1] &= ~0x00002000u;
  ::enterprise_management::DeviceLoginScreenExtensionsProto* temp = device_login_screen_extensions_;
  device_login_screen_extensions_ = nullptr;
  return temp;
}
inline ::enterprise_management::DeviceLoginScreenExtensionsProto* ChromeDeviceSettingsProto::_internal_mutable_device_login_screen_extensions() {
  _has_bits_[1] |= 0x00002000u;
  if (device_login_screen_extensions_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::DeviceLoginScreenExtensionsProto>(GetArena());
    device_login_screen_extensions_ = p;
  }
  return device_login_screen_extensions_;
}
inline ::enterprise_management::DeviceLoginScreenExtensionsProto* ChromeDeviceSettingsProto::mutable_device_login_screen_extensions() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.device_login_screen_extensions)
  return _internal_mutable_device_login_screen_extensions();
}
inline void ChromeDeviceSettingsProto::set_allocated_device_login_screen_extensions(::enterprise_management::DeviceLoginScreenExtensionsProto* device_login_screen_extensions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_login_screen_extensions_;
  }
  if (device_login_screen_extensions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_login_screen_extensions);
    if (message_arena != submessage_arena) {
      device_login_screen_extensions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_login_screen_extensions, submessage_arena);
    }
    _has_bits_[1] |= 0x00002000u;
  } else {
    _has_bits_[1] &= ~0x00002000u;
  }
  device_login_screen_extensions_ = device_login_screen_extensions;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_login_screen_extensions)
}

// optional .enterprise_management.NetworkThrottlingEnabledProto network_throttling = 47;
inline bool ChromeDeviceSettingsProto::_internal_has_network_throttling() const {
  bool value = (_has_bits_[1] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || network_throttling_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_network_throttling() const {
  return _internal_has_network_throttling();
}
inline void ChromeDeviceSettingsProto::clear_network_throttling() {
  if (network_throttling_ != nullptr) network_throttling_->Clear();
  _has_bits_[1] &= ~0x00004000u;
}
inline const ::enterprise_management::NetworkThrottlingEnabledProto& ChromeDeviceSettingsProto::_internal_network_throttling() const {
  const ::enterprise_management::NetworkThrottlingEnabledProto* p = network_throttling_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::NetworkThrottlingEnabledProto*>(
      &::enterprise_management::_NetworkThrottlingEnabledProto_default_instance_);
}
inline const ::enterprise_management::NetworkThrottlingEnabledProto& ChromeDeviceSettingsProto::network_throttling() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.network_throttling)
  return _internal_network_throttling();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_network_throttling(
    ::enterprise_management::NetworkThrottlingEnabledProto* network_throttling) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(network_throttling_);
  }
  network_throttling_ = network_throttling;
  if (network_throttling) {
    _has_bits_[1] |= 0x00004000u;
  } else {
    _has_bits_[1] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.network_throttling)
}
inline ::enterprise_management::NetworkThrottlingEnabledProto* ChromeDeviceSettingsProto::release_network_throttling() {
  auto temp = unsafe_arena_release_network_throttling();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::NetworkThrottlingEnabledProto* ChromeDeviceSettingsProto::unsafe_arena_release_network_throttling() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.network_throttling)
  _has_bits_[1] &= ~0x00004000u;
  ::enterprise_management::NetworkThrottlingEnabledProto* temp = network_throttling_;
  network_throttling_ = nullptr;
  return temp;
}
inline ::enterprise_management::NetworkThrottlingEnabledProto* ChromeDeviceSettingsProto::_internal_mutable_network_throttling() {
  _has_bits_[1] |= 0x00004000u;
  if (network_throttling_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::NetworkThrottlingEnabledProto>(GetArena());
    network_throttling_ = p;
  }
  return network_throttling_;
}
inline ::enterprise_management::NetworkThrottlingEnabledProto* ChromeDeviceSettingsProto::mutable_network_throttling() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.network_throttling)
  return _internal_mutable_network_throttling();
}
inline void ChromeDeviceSettingsProto::set_allocated_network_throttling(::enterprise_management::NetworkThrottlingEnabledProto* network_throttling) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete network_throttling_;
  }
  if (network_throttling) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(network_throttling);
    if (message_arena != submessage_arena) {
      network_throttling = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network_throttling, submessage_arena);
    }
    _has_bits_[1] |= 0x00004000u;
  } else {
    _has_bits_[1] &= ~0x00004000u;
  }
  network_throttling_ = network_throttling;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.network_throttling)
}

// optional .enterprise_management.DeviceWallpaperImageProto device_wallpaper_image = 48;
inline bool ChromeDeviceSettingsProto::_internal_has_device_wallpaper_image() const {
  bool value = (_has_bits_[1] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || device_wallpaper_image_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_device_wallpaper_image() const {
  return _internal_has_device_wallpaper_image();
}
inline void ChromeDeviceSettingsProto::clear_device_wallpaper_image() {
  if (device_wallpaper_image_ != nullptr) device_wallpaper_image_->Clear();
  _has_bits_[1] &= ~0x00008000u;
}
inline const ::enterprise_management::DeviceWallpaperImageProto& ChromeDeviceSettingsProto::_internal_device_wallpaper_image() const {
  const ::enterprise_management::DeviceWallpaperImageProto* p = device_wallpaper_image_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::DeviceWallpaperImageProto*>(
      &::enterprise_management::_DeviceWallpaperImageProto_default_instance_);
}
inline const ::enterprise_management::DeviceWallpaperImageProto& ChromeDeviceSettingsProto::device_wallpaper_image() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.device_wallpaper_image)
  return _internal_device_wallpaper_image();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_device_wallpaper_image(
    ::enterprise_management::DeviceWallpaperImageProto* device_wallpaper_image) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_wallpaper_image_);
  }
  device_wallpaper_image_ = device_wallpaper_image;
  if (device_wallpaper_image) {
    _has_bits_[1] |= 0x00008000u;
  } else {
    _has_bits_[1] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_wallpaper_image)
}
inline ::enterprise_management::DeviceWallpaperImageProto* ChromeDeviceSettingsProto::release_device_wallpaper_image() {
  auto temp = unsafe_arena_release_device_wallpaper_image();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::DeviceWallpaperImageProto* ChromeDeviceSettingsProto::unsafe_arena_release_device_wallpaper_image() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.device_wallpaper_image)
  _has_bits_[1] &= ~0x00008000u;
  ::enterprise_management::DeviceWallpaperImageProto* temp = device_wallpaper_image_;
  device_wallpaper_image_ = nullptr;
  return temp;
}
inline ::enterprise_management::DeviceWallpaperImageProto* ChromeDeviceSettingsProto::_internal_mutable_device_wallpaper_image() {
  _has_bits_[1] |= 0x00008000u;
  if (device_wallpaper_image_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::DeviceWallpaperImageProto>(GetArena());
    device_wallpaper_image_ = p;
  }
  return device_wallpaper_image_;
}
inline ::enterprise_management::DeviceWallpaperImageProto* ChromeDeviceSettingsProto::mutable_device_wallpaper_image() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.device_wallpaper_image)
  return _internal_mutable_device_wallpaper_image();
}
inline void ChromeDeviceSettingsProto::set_allocated_device_wallpaper_image(::enterprise_management::DeviceWallpaperImageProto* device_wallpaper_image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_wallpaper_image_;
  }
  if (device_wallpaper_image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_wallpaper_image);
    if (message_arena != submessage_arena) {
      device_wallpaper_image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_wallpaper_image, submessage_arena);
    }
    _has_bits_[1] |= 0x00008000u;
  } else {
    _has_bits_[1] &= ~0x00008000u;
  }
  device_wallpaper_image_ = device_wallpaper_image;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_wallpaper_image)
}

// optional .enterprise_management.LoginScreenLocalesProto login_screen_locales = 49;
inline bool ChromeDeviceSettingsProto::_internal_has_login_screen_locales() const {
  bool value = (_has_bits_[1] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || login_screen_locales_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_login_screen_locales() const {
  return _internal_has_login_screen_locales();
}
inline void ChromeDeviceSettingsProto::clear_login_screen_locales() {
  if (login_screen_locales_ != nullptr) login_screen_locales_->Clear();
  _has_bits_[1] &= ~0x00010000u;
}
inline const ::enterprise_management::LoginScreenLocalesProto& ChromeDeviceSettingsProto::_internal_login_screen_locales() const {
  const ::enterprise_management::LoginScreenLocalesProto* p = login_screen_locales_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::LoginScreenLocalesProto*>(
      &::enterprise_management::_LoginScreenLocalesProto_default_instance_);
}
inline const ::enterprise_management::LoginScreenLocalesProto& ChromeDeviceSettingsProto::login_screen_locales() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.login_screen_locales)
  return _internal_login_screen_locales();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_login_screen_locales(
    ::enterprise_management::LoginScreenLocalesProto* login_screen_locales) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_locales_);
  }
  login_screen_locales_ = login_screen_locales;
  if (login_screen_locales) {
    _has_bits_[1] |= 0x00010000u;
  } else {
    _has_bits_[1] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.login_screen_locales)
}
inline ::enterprise_management::LoginScreenLocalesProto* ChromeDeviceSettingsProto::release_login_screen_locales() {
  auto temp = unsafe_arena_release_login_screen_locales();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::LoginScreenLocalesProto* ChromeDeviceSettingsProto::unsafe_arena_release_login_screen_locales() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.login_screen_locales)
  _has_bits_[1] &= ~0x00010000u;
  ::enterprise_management::LoginScreenLocalesProto* temp = login_screen_locales_;
  login_screen_locales_ = nullptr;
  return temp;
}
inline ::enterprise_management::LoginScreenLocalesProto* ChromeDeviceSettingsProto::_internal_mutable_login_screen_locales() {
  _has_bits_[1] |= 0x00010000u;
  if (login_screen_locales_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::LoginScreenLocalesProto>(GetArena());
    login_screen_locales_ = p;
  }
  return login_screen_locales_;
}
inline ::enterprise_management::LoginScreenLocalesProto* ChromeDeviceSettingsProto::mutable_login_screen_locales() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.login_screen_locales)
  return _internal_mutable_login_screen_locales();
}
inline void ChromeDeviceSettingsProto::set_allocated_login_screen_locales(::enterprise_management::LoginScreenLocalesProto* login_screen_locales) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete login_screen_locales_;
  }
  if (login_screen_locales) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(login_screen_locales);
    if (message_arena != submessage_arena) {
      login_screen_locales = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_screen_locales, submessage_arena);
    }
    _has_bits_[1] |= 0x00010000u;
  } else {
    _has_bits_[1] &= ~0x00010000u;
  }
  login_screen_locales_ = login_screen_locales;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.login_screen_locales)
}

// optional .enterprise_management.LoginScreenInputMethodsProto login_screen_input_methods = 50;
inline bool ChromeDeviceSettingsProto::_internal_has_login_screen_input_methods() const {
  bool value = (_has_bits_[1] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || login_screen_input_methods_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_login_screen_input_methods() const {
  return _internal_has_login_screen_input_methods();
}
inline void ChromeDeviceSettingsProto::clear_login_screen_input_methods() {
  if (login_screen_input_methods_ != nullptr) login_screen_input_methods_->Clear();
  _has_bits_[1] &= ~0x00020000u;
}
inline const ::enterprise_management::LoginScreenInputMethodsProto& ChromeDeviceSettingsProto::_internal_login_screen_input_methods() const {
  const ::enterprise_management::LoginScreenInputMethodsProto* p = login_screen_input_methods_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::LoginScreenInputMethodsProto*>(
      &::enterprise_management::_LoginScreenInputMethodsProto_default_instance_);
}
inline const ::enterprise_management::LoginScreenInputMethodsProto& ChromeDeviceSettingsProto::login_screen_input_methods() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.login_screen_input_methods)
  return _internal_login_screen_input_methods();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_login_screen_input_methods(
    ::enterprise_management::LoginScreenInputMethodsProto* login_screen_input_methods) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_input_methods_);
  }
  login_screen_input_methods_ = login_screen_input_methods;
  if (login_screen_input_methods) {
    _has_bits_[1] |= 0x00020000u;
  } else {
    _has_bits_[1] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.login_screen_input_methods)
}
inline ::enterprise_management::LoginScreenInputMethodsProto* ChromeDeviceSettingsProto::release_login_screen_input_methods() {
  auto temp = unsafe_arena_release_login_screen_input_methods();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::LoginScreenInputMethodsProto* ChromeDeviceSettingsProto::unsafe_arena_release_login_screen_input_methods() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.login_screen_input_methods)
  _has_bits_[1] &= ~0x00020000u;
  ::enterprise_management::LoginScreenInputMethodsProto* temp = login_screen_input_methods_;
  login_screen_input_methods_ = nullptr;
  return temp;
}
inline ::enterprise_management::LoginScreenInputMethodsProto* ChromeDeviceSettingsProto::_internal_mutable_login_screen_input_methods() {
  _has_bits_[1] |= 0x00020000u;
  if (login_screen_input_methods_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::LoginScreenInputMethodsProto>(GetArena());
    login_screen_input_methods_ = p;
  }
  return login_screen_input_methods_;
}
inline ::enterprise_management::LoginScreenInputMethodsProto* ChromeDeviceSettingsProto::mutable_login_screen_input_methods() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.login_screen_input_methods)
  return _internal_mutable_login_screen_input_methods();
}
inline void ChromeDeviceSettingsProto::set_allocated_login_screen_input_methods(::enterprise_management::LoginScreenInputMethodsProto* login_screen_input_methods) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete login_screen_input_methods_;
  }
  if (login_screen_input_methods) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(login_screen_input_methods);
    if (message_arena != submessage_arena) {
      login_screen_input_methods = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_screen_input_methods, submessage_arena);
    }
    _has_bits_[1] |= 0x00020000u;
  } else {
    _has_bits_[1] &= ~0x00020000u;
  }
  login_screen_input_methods_ = login_screen_input_methods;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.login_screen_input_methods)
}

// optional .enterprise_management.DeviceEcryptfsMigrationStrategyProto device_ecryptfs_migration_strategy = 51 [deprecated = true];
inline bool ChromeDeviceSettingsProto::_internal_has_device_ecryptfs_migration_strategy() const {
  bool value = (_has_bits_[1] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || device_ecryptfs_migration_strategy_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_device_ecryptfs_migration_strategy() const {
  return _internal_has_device_ecryptfs_migration_strategy();
}
inline void ChromeDeviceSettingsProto::clear_device_ecryptfs_migration_strategy() {
  if (device_ecryptfs_migration_strategy_ != nullptr) device_ecryptfs_migration_strategy_->Clear();
  _has_bits_[1] &= ~0x00040000u;
}
inline const ::enterprise_management::DeviceEcryptfsMigrationStrategyProto& ChromeDeviceSettingsProto::_internal_device_ecryptfs_migration_strategy() const {
  const ::enterprise_management::DeviceEcryptfsMigrationStrategyProto* p = device_ecryptfs_migration_strategy_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::DeviceEcryptfsMigrationStrategyProto*>(
      &::enterprise_management::_DeviceEcryptfsMigrationStrategyProto_default_instance_);
}
inline const ::enterprise_management::DeviceEcryptfsMigrationStrategyProto& ChromeDeviceSettingsProto::device_ecryptfs_migration_strategy() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.device_ecryptfs_migration_strategy)
  return _internal_device_ecryptfs_migration_strategy();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_device_ecryptfs_migration_strategy(
    ::enterprise_management::DeviceEcryptfsMigrationStrategyProto* device_ecryptfs_migration_strategy) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_ecryptfs_migration_strategy_);
  }
  device_ecryptfs_migration_strategy_ = device_ecryptfs_migration_strategy;
  if (device_ecryptfs_migration_strategy) {
    _has_bits_[1] |= 0x00040000u;
  } else {
    _has_bits_[1] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_ecryptfs_migration_strategy)
}
inline ::enterprise_management::DeviceEcryptfsMigrationStrategyProto* ChromeDeviceSettingsProto::release_device_ecryptfs_migration_strategy() {
  auto temp = unsafe_arena_release_device_ecryptfs_migration_strategy();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::DeviceEcryptfsMigrationStrategyProto* ChromeDeviceSettingsProto::unsafe_arena_release_device_ecryptfs_migration_strategy() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.device_ecryptfs_migration_strategy)
  _has_bits_[1] &= ~0x00040000u;
  ::enterprise_management::DeviceEcryptfsMigrationStrategyProto* temp = device_ecryptfs_migration_strategy_;
  device_ecryptfs_migration_strategy_ = nullptr;
  return temp;
}
inline ::enterprise_management::DeviceEcryptfsMigrationStrategyProto* ChromeDeviceSettingsProto::_internal_mutable_device_ecryptfs_migration_strategy() {
  _has_bits_[1] |= 0x00040000u;
  if (device_ecryptfs_migration_strategy_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::DeviceEcryptfsMigrationStrategyProto>(GetArena());
    device_ecryptfs_migration_strategy_ = p;
  }
  return device_ecryptfs_migration_strategy_;
}
inline ::enterprise_management::DeviceEcryptfsMigrationStrategyProto* ChromeDeviceSettingsProto::mutable_device_ecryptfs_migration_strategy() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.device_ecryptfs_migration_strategy)
  return _internal_mutable_device_ecryptfs_migration_strategy();
}
inline void ChromeDeviceSettingsProto::set_allocated_device_ecryptfs_migration_strategy(::enterprise_management::DeviceEcryptfsMigrationStrategyProto* device_ecryptfs_migration_strategy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_ecryptfs_migration_strategy_;
  }
  if (device_ecryptfs_migration_strategy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_ecryptfs_migration_strategy);
    if (message_arena != submessage_arena) {
      device_ecryptfs_migration_strategy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_ecryptfs_migration_strategy, submessage_arena);
    }
    _has_bits_[1] |= 0x00040000u;
  } else {
    _has_bits_[1] &= ~0x00040000u;
  }
  device_ecryptfs_migration_strategy_ = device_ecryptfs_migration_strategy;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_ecryptfs_migration_strategy)
}

// optional .enterprise_management.DeviceSecondFactorAuthenticationProto device_second_factor_authentication = 52;
inline bool ChromeDeviceSettingsProto::_internal_has_device_second_factor_authentication() const {
  bool value = (_has_bits_[1] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || device_second_factor_authentication_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_device_second_factor_authentication() const {
  return _internal_has_device_second_factor_authentication();
}
inline void ChromeDeviceSettingsProto::clear_device_second_factor_authentication() {
  if (device_second_factor_authentication_ != nullptr) device_second_factor_authentication_->Clear();
  _has_bits_[1] &= ~0x00080000u;
}
inline const ::enterprise_management::DeviceSecondFactorAuthenticationProto& ChromeDeviceSettingsProto::_internal_device_second_factor_authentication() const {
  const ::enterprise_management::DeviceSecondFactorAuthenticationProto* p = device_second_factor_authentication_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::DeviceSecondFactorAuthenticationProto*>(
      &::enterprise_management::_DeviceSecondFactorAuthenticationProto_default_instance_);
}
inline const ::enterprise_management::DeviceSecondFactorAuthenticationProto& ChromeDeviceSettingsProto::device_second_factor_authentication() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.device_second_factor_authentication)
  return _internal_device_second_factor_authentication();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_device_second_factor_authentication(
    ::enterprise_management::DeviceSecondFactorAuthenticationProto* device_second_factor_authentication) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_second_factor_authentication_);
  }
  device_second_factor_authentication_ = device_second_factor_authentication;
  if (device_second_factor_authentication) {
    _has_bits_[1] |= 0x00080000u;
  } else {
    _has_bits_[1] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_second_factor_authentication)
}
inline ::enterprise_management::DeviceSecondFactorAuthenticationProto* ChromeDeviceSettingsProto::release_device_second_factor_authentication() {
  auto temp = unsafe_arena_release_device_second_factor_authentication();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::DeviceSecondFactorAuthenticationProto* ChromeDeviceSettingsProto::unsafe_arena_release_device_second_factor_authentication() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.device_second_factor_authentication)
  _has_bits_[1] &= ~0x00080000u;
  ::enterprise_management::DeviceSecondFactorAuthenticationProto* temp = device_second_factor_authentication_;
  device_second_factor_authentication_ = nullptr;
  return temp;
}
inline ::enterprise_management::DeviceSecondFactorAuthenticationProto* ChromeDeviceSettingsProto::_internal_mutable_device_second_factor_authentication() {
  _has_bits_[1] |= 0x00080000u;
  if (device_second_factor_authentication_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::DeviceSecondFactorAuthenticationProto>(GetArena());
    device_second_factor_authentication_ = p;
  }
  return device_second_factor_authentication_;
}
inline ::enterprise_management::DeviceSecondFactorAuthenticationProto* ChromeDeviceSettingsProto::mutable_device_second_factor_authentication() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.device_second_factor_authentication)
  return _internal_mutable_device_second_factor_authentication();
}
inline void ChromeDeviceSettingsProto::set_allocated_device_second_factor_authentication(::enterprise_management::DeviceSecondFactorAuthenticationProto* device_second_factor_authentication) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_second_factor_authentication_;
  }
  if (device_second_factor_authentication) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_second_factor_authentication);
    if (message_arena != submessage_arena) {
      device_second_factor_authentication = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_second_factor_authentication, submessage_arena);
    }
    _has_bits_[1] |= 0x00080000u;
  } else {
    _has_bits_[1] &= ~0x00080000u;
  }
  device_second_factor_authentication_ = device_second_factor_authentication;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_second_factor_authentication)
}

// optional .enterprise_management.CastReceiverNameProto cast_receiver_name = 53;
inline bool ChromeDeviceSettingsProto::_internal_has_cast_receiver_name() const {
  bool value = (_has_bits_[1] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || cast_receiver_name_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_cast_receiver_name() const {
  return _internal_has_cast_receiver_name();
}
inline void ChromeDeviceSettingsProto::clear_cast_receiver_name() {
  if (cast_receiver_name_ != nullptr) cast_receiver_name_->Clear();
  _has_bits_[1] &= ~0x00100000u;
}
inline const ::enterprise_management::CastReceiverNameProto& ChromeDeviceSettingsProto::_internal_cast_receiver_name() const {
  const ::enterprise_management::CastReceiverNameProto* p = cast_receiver_name_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::CastReceiverNameProto*>(
      &::enterprise_management::_CastReceiverNameProto_default_instance_);
}
inline const ::enterprise_management::CastReceiverNameProto& ChromeDeviceSettingsProto::cast_receiver_name() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.cast_receiver_name)
  return _internal_cast_receiver_name();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_cast_receiver_name(
    ::enterprise_management::CastReceiverNameProto* cast_receiver_name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cast_receiver_name_);
  }
  cast_receiver_name_ = cast_receiver_name;
  if (cast_receiver_name) {
    _has_bits_[1] |= 0x00100000u;
  } else {
    _has_bits_[1] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.cast_receiver_name)
}
inline ::enterprise_management::CastReceiverNameProto* ChromeDeviceSettingsProto::release_cast_receiver_name() {
  auto temp = unsafe_arena_release_cast_receiver_name();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::CastReceiverNameProto* ChromeDeviceSettingsProto::unsafe_arena_release_cast_receiver_name() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.cast_receiver_name)
  _has_bits_[1] &= ~0x00100000u;
  ::enterprise_management::CastReceiverNameProto* temp = cast_receiver_name_;
  cast_receiver_name_ = nullptr;
  return temp;
}
inline ::enterprise_management::CastReceiverNameProto* ChromeDeviceSettingsProto::_internal_mutable_cast_receiver_name() {
  _has_bits_[1] |= 0x00100000u;
  if (cast_receiver_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::CastReceiverNameProto>(GetArena());
    cast_receiver_name_ = p;
  }
  return cast_receiver_name_;
}
inline ::enterprise_management::CastReceiverNameProto* ChromeDeviceSettingsProto::mutable_cast_receiver_name() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.cast_receiver_name)
  return _internal_mutable_cast_receiver_name();
}
inline void ChromeDeviceSettingsProto::set_allocated_cast_receiver_name(::enterprise_management::CastReceiverNameProto* cast_receiver_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cast_receiver_name_;
  }
  if (cast_receiver_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cast_receiver_name);
    if (message_arena != submessage_arena) {
      cast_receiver_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cast_receiver_name, submessage_arena);
    }
    _has_bits_[1] |= 0x00100000u;
  } else {
    _has_bits_[1] &= ~0x00100000u;
  }
  cast_receiver_name_ = cast_receiver_name;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.cast_receiver_name)
}

// optional .enterprise_management.DeviceOffHoursProto device_off_hours = 54;
inline bool ChromeDeviceSettingsProto::_internal_has_device_off_hours() const {
  bool value = (_has_bits_[1] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || device_off_hours_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_device_off_hours() const {
  return _internal_has_device_off_hours();
}
inline void ChromeDeviceSettingsProto::clear_device_off_hours() {
  if (device_off_hours_ != nullptr) device_off_hours_->Clear();
  _has_bits_[1] &= ~0x00200000u;
}
inline const ::enterprise_management::DeviceOffHoursProto& ChromeDeviceSettingsProto::_internal_device_off_hours() const {
  const ::enterprise_management::DeviceOffHoursProto* p = device_off_hours_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::DeviceOffHoursProto*>(
      &::enterprise_management::_DeviceOffHoursProto_default_instance_);
}
inline const ::enterprise_management::DeviceOffHoursProto& ChromeDeviceSettingsProto::device_off_hours() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.device_off_hours)
  return _internal_device_off_hours();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_device_off_hours(
    ::enterprise_management::DeviceOffHoursProto* device_off_hours) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_off_hours_);
  }
  device_off_hours_ = device_off_hours;
  if (device_off_hours) {
    _has_bits_[1] |= 0x00200000u;
  } else {
    _has_bits_[1] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_off_hours)
}
inline ::enterprise_management::DeviceOffHoursProto* ChromeDeviceSettingsProto::release_device_off_hours() {
  auto temp = unsafe_arena_release_device_off_hours();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::DeviceOffHoursProto* ChromeDeviceSettingsProto::unsafe_arena_release_device_off_hours() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.device_off_hours)
  _has_bits_[1] &= ~0x00200000u;
  ::enterprise_management::DeviceOffHoursProto* temp = device_off_hours_;
  device_off_hours_ = nullptr;
  return temp;
}
inline ::enterprise_management::DeviceOffHoursProto* ChromeDeviceSettingsProto::_internal_mutable_device_off_hours() {
  _has_bits_[1] |= 0x00200000u;
  if (device_off_hours_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::DeviceOffHoursProto>(GetArena());
    device_off_hours_ = p;
  }
  return device_off_hours_;
}
inline ::enterprise_management::DeviceOffHoursProto* ChromeDeviceSettingsProto::mutable_device_off_hours() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.device_off_hours)
  return _internal_mutable_device_off_hours();
}
inline void ChromeDeviceSettingsProto::set_allocated_device_off_hours(::enterprise_management::DeviceOffHoursProto* device_off_hours) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_off_hours_;
  }
  if (device_off_hours) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_off_hours);
    if (message_arena != submessage_arena) {
      device_off_hours = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_off_hours, submessage_arena);
    }
    _has_bits_[1] |= 0x00200000u;
  } else {
    _has_bits_[1] &= ~0x00200000u;
  }
  device_off_hours_ = device_off_hours;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_off_hours)
}

// optional .enterprise_management.DeviceNativePrintersProto native_device_printers = 55;
inline bool ChromeDeviceSettingsProto::_internal_has_native_device_printers() const {
  bool value = (_has_bits_[1] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || native_device_printers_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_native_device_printers() const {
  return _internal_has_native_device_printers();
}
inline void ChromeDeviceSettingsProto::clear_native_device_printers() {
  if (native_device_printers_ != nullptr) native_device_printers_->Clear();
  _has_bits_[1] &= ~0x00400000u;
}
inline const ::enterprise_management::DeviceNativePrintersProto& ChromeDeviceSettingsProto::_internal_native_device_printers() const {
  const ::enterprise_management::DeviceNativePrintersProto* p = native_device_printers_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::DeviceNativePrintersProto*>(
      &::enterprise_management::_DeviceNativePrintersProto_default_instance_);
}
inline const ::enterprise_management::DeviceNativePrintersProto& ChromeDeviceSettingsProto::native_device_printers() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.native_device_printers)
  return _internal_native_device_printers();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_native_device_printers(
    ::enterprise_management::DeviceNativePrintersProto* native_device_printers) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(native_device_printers_);
  }
  native_device_printers_ = native_device_printers;
  if (native_device_printers) {
    _has_bits_[1] |= 0x00400000u;
  } else {
    _has_bits_[1] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.native_device_printers)
}
inline ::enterprise_management::DeviceNativePrintersProto* ChromeDeviceSettingsProto::release_native_device_printers() {
  auto temp = unsafe_arena_release_native_device_printers();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::DeviceNativePrintersProto* ChromeDeviceSettingsProto::unsafe_arena_release_native_device_printers() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.native_device_printers)
  _has_bits_[1] &= ~0x00400000u;
  ::enterprise_management::DeviceNativePrintersProto* temp = native_device_printers_;
  native_device_printers_ = nullptr;
  return temp;
}
inline ::enterprise_management::DeviceNativePrintersProto* ChromeDeviceSettingsProto::_internal_mutable_native_device_printers() {
  _has_bits_[1] |= 0x00400000u;
  if (native_device_printers_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::DeviceNativePrintersProto>(GetArena());
    native_device_printers_ = p;
  }
  return native_device_printers_;
}
inline ::enterprise_management::DeviceNativePrintersProto* ChromeDeviceSettingsProto::mutable_native_device_printers() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.native_device_printers)
  return _internal_mutable_native_device_printers();
}
inline void ChromeDeviceSettingsProto::set_allocated_native_device_printers(::enterprise_management::DeviceNativePrintersProto* native_device_printers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete native_device_printers_;
  }
  if (native_device_printers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(native_device_printers);
    if (message_arena != submessage_arena) {
      native_device_printers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, native_device_printers, submessage_arena);
    }
    _has_bits_[1] |= 0x00400000u;
  } else {
    _has_bits_[1] &= ~0x00400000u;
  }
  native_device_printers_ = native_device_printers;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.native_device_printers)
}

// optional .enterprise_management.DeviceNativePrintersAccessModeProto native_device_printers_access_mode = 56;
inline bool ChromeDeviceSettingsProto::_internal_has_native_device_printers_access_mode() const {
  bool value = (_has_bits_[1] & 0x00800000u) != 0;
  PROTOBUF_ASSUME(!value || native_device_printers_access_mode_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_native_device_printers_access_mode() const {
  return _internal_has_native_device_printers_access_mode();
}
inline void ChromeDeviceSettingsProto::clear_native_device_printers_access_mode() {
  if (native_device_printers_access_mode_ != nullptr) native_device_printers_access_mode_->Clear();
  _has_bits_[1] &= ~0x00800000u;
}
inline const ::enterprise_management::DeviceNativePrintersAccessModeProto& ChromeDeviceSettingsProto::_internal_native_device_printers_access_mode() const {
  const ::enterprise_management::DeviceNativePrintersAccessModeProto* p = native_device_printers_access_mode_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::DeviceNativePrintersAccessModeProto*>(
      &::enterprise_management::_DeviceNativePrintersAccessModeProto_default_instance_);
}
inline const ::enterprise_management::DeviceNativePrintersAccessModeProto& ChromeDeviceSettingsProto::native_device_printers_access_mode() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.native_device_printers_access_mode)
  return _internal_native_device_printers_access_mode();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_native_device_printers_access_mode(
    ::enterprise_management::DeviceNativePrintersAccessModeProto* native_device_printers_access_mode) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(native_device_printers_access_mode_);
  }
  native_device_printers_access_mode_ = native_device_printers_access_mode;
  if (native_device_printers_access_mode) {
    _has_bits_[1] |= 0x00800000u;
  } else {
    _has_bits_[1] &= ~0x00800000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.native_device_printers_access_mode)
}
inline ::enterprise_management::DeviceNativePrintersAccessModeProto* ChromeDeviceSettingsProto::release_native_device_printers_access_mode() {
  auto temp = unsafe_arena_release_native_device_printers_access_mode();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::DeviceNativePrintersAccessModeProto* ChromeDeviceSettingsProto::unsafe_arena_release_native_device_printers_access_mode() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.native_device_printers_access_mode)
  _has_bits_[1] &= ~0x00800000u;
  ::enterprise_management::DeviceNativePrintersAccessModeProto* temp = native_device_printers_access_mode_;
  native_device_printers_access_mode_ = nullptr;
  return temp;
}
inline ::enterprise_management::DeviceNativePrintersAccessModeProto* ChromeDeviceSettingsProto::_internal_mutable_native_device_printers_access_mode() {
  _has_bits_[1] |= 0x00800000u;
  if (native_device_printers_access_mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::DeviceNativePrintersAccessModeProto>(GetArena());
    native_device_printers_access_mode_ = p;
  }
  return native_device_printers_access_mode_;
}
inline ::enterprise_management::DeviceNativePrintersAccessModeProto* ChromeDeviceSettingsProto::mutable_native_device_printers_access_mode() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.native_device_printers_access_mode)
  return _internal_mutable_native_device_printers_access_mode();
}
inline void ChromeDeviceSettingsProto::set_allocated_native_device_printers_access_mode(::enterprise_management::DeviceNativePrintersAccessModeProto* native_device_printers_access_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete native_device_printers_access_mode_;
  }
  if (native_device_printers_access_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(native_device_printers_access_mode);
    if (message_arena != submessage_arena) {
      native_device_printers_access_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, native_device_printers_access_mode, submessage_arena);
    }
    _has_bits_[1] |= 0x00800000u;
  } else {
    _has_bits_[1] &= ~0x00800000u;
  }
  native_device_printers_access_mode_ = native_device_printers_access_mode;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.native_device_printers_access_mode)
}

// optional .enterprise_management.DeviceNativePrintersBlacklistProto native_device_printers_blacklist = 57;
inline bool ChromeDeviceSettingsProto::_internal_has_native_device_printers_blacklist() const {
  bool value = (_has_bits_[1] & 0x01000000u) != 0;
  PROTOBUF_ASSUME(!value || native_device_printers_blacklist_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_native_device_printers_blacklist() const {
  return _internal_has_native_device_printers_blacklist();
}
inline void ChromeDeviceSettingsProto::clear_native_device_printers_blacklist() {
  if (native_device_printers_blacklist_ != nullptr) native_device_printers_blacklist_->Clear();
  _has_bits_[1] &= ~0x01000000u;
}
inline const ::enterprise_management::DeviceNativePrintersBlacklistProto& ChromeDeviceSettingsProto::_internal_native_device_printers_blacklist() const {
  const ::enterprise_management::DeviceNativePrintersBlacklistProto* p = native_device_printers_blacklist_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::DeviceNativePrintersBlacklistProto*>(
      &::enterprise_management::_DeviceNativePrintersBlacklistProto_default_instance_);
}
inline const ::enterprise_management::DeviceNativePrintersBlacklistProto& ChromeDeviceSettingsProto::native_device_printers_blacklist() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.native_device_printers_blacklist)
  return _internal_native_device_printers_blacklist();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_native_device_printers_blacklist(
    ::enterprise_management::DeviceNativePrintersBlacklistProto* native_device_printers_blacklist) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(native_device_printers_blacklist_);
  }
  native_device_printers_blacklist_ = native_device_printers_blacklist;
  if (native_device_printers_blacklist) {
    _has_bits_[1] |= 0x01000000u;
  } else {
    _has_bits_[1] &= ~0x01000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.native_device_printers_blacklist)
}
inline ::enterprise_management::DeviceNativePrintersBlacklistProto* ChromeDeviceSettingsProto::release_native_device_printers_blacklist() {
  auto temp = unsafe_arena_release_native_device_printers_blacklist();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::DeviceNativePrintersBlacklistProto* ChromeDeviceSettingsProto::unsafe_arena_release_native_device_printers_blacklist() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.native_device_printers_blacklist)
  _has_bits_[1] &= ~0x01000000u;
  ::enterprise_management::DeviceNativePrintersBlacklistProto* temp = native_device_printers_blacklist_;
  native_device_printers_blacklist_ = nullptr;
  return temp;
}
inline ::enterprise_management::DeviceNativePrintersBlacklistProto* ChromeDeviceSettingsProto::_internal_mutable_native_device_printers_blacklist() {
  _has_bits_[1] |= 0x01000000u;
  if (native_device_printers_blacklist_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::DeviceNativePrintersBlacklistProto>(GetArena());
    native_device_printers_blacklist_ = p;
  }
  return native_device_printers_blacklist_;
}
inline ::enterprise_management::DeviceNativePrintersBlacklistProto* ChromeDeviceSettingsProto::mutable_native_device_printers_blacklist() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.native_device_printers_blacklist)
  return _internal_mutable_native_device_printers_blacklist();
}
inline void ChromeDeviceSettingsProto::set_allocated_native_device_printers_blacklist(::enterprise_management::DeviceNativePrintersBlacklistProto* native_device_printers_blacklist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete native_device_printers_blacklist_;
  }
  if (native_device_printers_blacklist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(native_device_printers_blacklist);
    if (message_arena != submessage_arena) {
      native_device_printers_blacklist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, native_device_printers_blacklist, submessage_arena);
    }
    _has_bits_[1] |= 0x01000000u;
  } else {
    _has_bits_[1] &= ~0x01000000u;
  }
  native_device_printers_blacklist_ = native_device_printers_blacklist;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.native_device_printers_blacklist)
}

// optional .enterprise_management.DeviceNativePrintersWhitelistProto native_device_printers_whitelist = 58;
inline bool ChromeDeviceSettingsProto::_internal_has_native_device_printers_whitelist() const {
  bool value = (_has_bits_[1] & 0x02000000u) != 0;
  PROTOBUF_ASSUME(!value || native_device_printers_whitelist_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_native_device_printers_whitelist() const {
  return _internal_has_native_device_printers_whitelist();
}
inline void ChromeDeviceSettingsProto::clear_native_device_printers_whitelist() {
  if (native_device_printers_whitelist_ != nullptr) native_device_printers_whitelist_->Clear();
  _has_bits_[1] &= ~0x02000000u;
}
inline const ::enterprise_management::DeviceNativePrintersWhitelistProto& ChromeDeviceSettingsProto::_internal_native_device_printers_whitelist() const {
  const ::enterprise_management::DeviceNativePrintersWhitelistProto* p = native_device_printers_whitelist_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::DeviceNativePrintersWhitelistProto*>(
      &::enterprise_management::_DeviceNativePrintersWhitelistProto_default_instance_);
}
inline const ::enterprise_management::DeviceNativePrintersWhitelistProto& ChromeDeviceSettingsProto::native_device_printers_whitelist() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.native_device_printers_whitelist)
  return _internal_native_device_printers_whitelist();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_native_device_printers_whitelist(
    ::enterprise_management::DeviceNativePrintersWhitelistProto* native_device_printers_whitelist) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(native_device_printers_whitelist_);
  }
  native_device_printers_whitelist_ = native_device_printers_whitelist;
  if (native_device_printers_whitelist) {
    _has_bits_[1] |= 0x02000000u;
  } else {
    _has_bits_[1] &= ~0x02000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.native_device_printers_whitelist)
}
inline ::enterprise_management::DeviceNativePrintersWhitelistProto* ChromeDeviceSettingsProto::release_native_device_printers_whitelist() {
  auto temp = unsafe_arena_release_native_device_printers_whitelist();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::DeviceNativePrintersWhitelistProto* ChromeDeviceSettingsProto::unsafe_arena_release_native_device_printers_whitelist() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.native_device_printers_whitelist)
  _has_bits_[1] &= ~0x02000000u;
  ::enterprise_management::DeviceNativePrintersWhitelistProto* temp = native_device_printers_whitelist_;
  native_device_printers_whitelist_ = nullptr;
  return temp;
}
inline ::enterprise_management::DeviceNativePrintersWhitelistProto* ChromeDeviceSettingsProto::_internal_mutable_native_device_printers_whitelist() {
  _has_bits_[1] |= 0x02000000u;
  if (native_device_printers_whitelist_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::DeviceNativePrintersWhitelistProto>(GetArena());
    native_device_printers_whitelist_ = p;
  }
  return native_device_printers_whitelist_;
}
inline ::enterprise_management::DeviceNativePrintersWhitelistProto* ChromeDeviceSettingsProto::mutable_native_device_printers_whitelist() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.native_device_printers_whitelist)
  return _internal_mutable_native_device_printers_whitelist();
}
inline void ChromeDeviceSettingsProto::set_allocated_native_device_printers_whitelist(::enterprise_management::DeviceNativePrintersWhitelistProto* native_device_printers_whitelist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete native_device_printers_whitelist_;
  }
  if (native_device_printers_whitelist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(native_device_printers_whitelist);
    if (message_arena != submessage_arena) {
      native_device_printers_whitelist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, native_device_printers_whitelist, submessage_arena);
    }
    _has_bits_[1] |= 0x02000000u;
  } else {
    _has_bits_[1] &= ~0x02000000u;
  }
  native_device_printers_whitelist_ = native_device_printers_whitelist;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.native_device_printers_whitelist)
}

// optional .enterprise_management.TPMFirmwareUpdateSettingsProto tpm_firmware_update_settings = 59;
inline bool ChromeDeviceSettingsProto::_internal_has_tpm_firmware_update_settings() const {
  bool value = (_has_bits_[1] & 0x04000000u) != 0;
  PROTOBUF_ASSUME(!value || tpm_firmware_update_settings_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_tpm_firmware_update_settings() const {
  return _internal_has_tpm_firmware_update_settings();
}
inline void ChromeDeviceSettingsProto::clear_tpm_firmware_update_settings() {
  if (tpm_firmware_update_settings_ != nullptr) tpm_firmware_update_settings_->Clear();
  _has_bits_[1] &= ~0x04000000u;
}
inline const ::enterprise_management::TPMFirmwareUpdateSettingsProto& ChromeDeviceSettingsProto::_internal_tpm_firmware_update_settings() const {
  const ::enterprise_management::TPMFirmwareUpdateSettingsProto* p = tpm_firmware_update_settings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::TPMFirmwareUpdateSettingsProto*>(
      &::enterprise_management::_TPMFirmwareUpdateSettingsProto_default_instance_);
}
inline const ::enterprise_management::TPMFirmwareUpdateSettingsProto& ChromeDeviceSettingsProto::tpm_firmware_update_settings() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.tpm_firmware_update_settings)
  return _internal_tpm_firmware_update_settings();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_tpm_firmware_update_settings(
    ::enterprise_management::TPMFirmwareUpdateSettingsProto* tpm_firmware_update_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tpm_firmware_update_settings_);
  }
  tpm_firmware_update_settings_ = tpm_firmware_update_settings;
  if (tpm_firmware_update_settings) {
    _has_bits_[1] |= 0x04000000u;
  } else {
    _has_bits_[1] &= ~0x04000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.tpm_firmware_update_settings)
}
inline ::enterprise_management::TPMFirmwareUpdateSettingsProto* ChromeDeviceSettingsProto::release_tpm_firmware_update_settings() {
  auto temp = unsafe_arena_release_tpm_firmware_update_settings();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::TPMFirmwareUpdateSettingsProto* ChromeDeviceSettingsProto::unsafe_arena_release_tpm_firmware_update_settings() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.tpm_firmware_update_settings)
  _has_bits_[1] &= ~0x04000000u;
  ::enterprise_management::TPMFirmwareUpdateSettingsProto* temp = tpm_firmware_update_settings_;
  tpm_firmware_update_settings_ = nullptr;
  return temp;
}
inline ::enterprise_management::TPMFirmwareUpdateSettingsProto* ChromeDeviceSettingsProto::_internal_mutable_tpm_firmware_update_settings() {
  _has_bits_[1] |= 0x04000000u;
  if (tpm_firmware_update_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::TPMFirmwareUpdateSettingsProto>(GetArena());
    tpm_firmware_update_settings_ = p;
  }
  return tpm_firmware_update_settings_;
}
inline ::enterprise_management::TPMFirmwareUpdateSettingsProto* ChromeDeviceSettingsProto::mutable_tpm_firmware_update_settings() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.tpm_firmware_update_settings)
  return _internal_mutable_tpm_firmware_update_settings();
}
inline void ChromeDeviceSettingsProto::set_allocated_tpm_firmware_update_settings(::enterprise_management::TPMFirmwareUpdateSettingsProto* tpm_firmware_update_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tpm_firmware_update_settings_;
  }
  if (tpm_firmware_update_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tpm_firmware_update_settings);
    if (message_arena != submessage_arena) {
      tpm_firmware_update_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tpm_firmware_update_settings, submessage_arena);
    }
    _has_bits_[1] |= 0x04000000u;
  } else {
    _has_bits_[1] &= ~0x04000000u;
  }
  tpm_firmware_update_settings_ = tpm_firmware_update_settings;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.tpm_firmware_update_settings)
}

// optional .enterprise_management.OBSOLETE_MinimumRequiredVersionProto minimum_required_version = 60 [deprecated = true];
inline bool ChromeDeviceSettingsProto::_internal_has_minimum_required_version() const {
  bool value = (_has_bits_[1] & 0x08000000u) != 0;
  PROTOBUF_ASSUME(!value || minimum_required_version_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_minimum_required_version() const {
  return _internal_has_minimum_required_version();
}
inline void ChromeDeviceSettingsProto::clear_minimum_required_version() {
  if (minimum_required_version_ != nullptr) minimum_required_version_->Clear();
  _has_bits_[1] &= ~0x08000000u;
}
inline const ::enterprise_management::OBSOLETE_MinimumRequiredVersionProto& ChromeDeviceSettingsProto::_internal_minimum_required_version() const {
  const ::enterprise_management::OBSOLETE_MinimumRequiredVersionProto* p = minimum_required_version_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::OBSOLETE_MinimumRequiredVersionProto*>(
      &::enterprise_management::_OBSOLETE_MinimumRequiredVersionProto_default_instance_);
}
inline const ::enterprise_management::OBSOLETE_MinimumRequiredVersionProto& ChromeDeviceSettingsProto::minimum_required_version() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.minimum_required_version)
  return _internal_minimum_required_version();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_minimum_required_version(
    ::enterprise_management::OBSOLETE_MinimumRequiredVersionProto* minimum_required_version) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(minimum_required_version_);
  }
  minimum_required_version_ = minimum_required_version;
  if (minimum_required_version) {
    _has_bits_[1] |= 0x08000000u;
  } else {
    _has_bits_[1] &= ~0x08000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.minimum_required_version)
}
inline ::enterprise_management::OBSOLETE_MinimumRequiredVersionProto* ChromeDeviceSettingsProto::release_minimum_required_version() {
  auto temp = unsafe_arena_release_minimum_required_version();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::OBSOLETE_MinimumRequiredVersionProto* ChromeDeviceSettingsProto::unsafe_arena_release_minimum_required_version() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.minimum_required_version)
  _has_bits_[1] &= ~0x08000000u;
  ::enterprise_management::OBSOLETE_MinimumRequiredVersionProto* temp = minimum_required_version_;
  minimum_required_version_ = nullptr;
  return temp;
}
inline ::enterprise_management::OBSOLETE_MinimumRequiredVersionProto* ChromeDeviceSettingsProto::_internal_mutable_minimum_required_version() {
  _has_bits_[1] |= 0x08000000u;
  if (minimum_required_version_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::OBSOLETE_MinimumRequiredVersionProto>(GetArena());
    minimum_required_version_ = p;
  }
  return minimum_required_version_;
}
inline ::enterprise_management::OBSOLETE_MinimumRequiredVersionProto* ChromeDeviceSettingsProto::mutable_minimum_required_version() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.minimum_required_version)
  return _internal_mutable_minimum_required_version();
}
inline void ChromeDeviceSettingsProto::set_allocated_minimum_required_version(::enterprise_management::OBSOLETE_MinimumRequiredVersionProto* minimum_required_version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete minimum_required_version_;
  }
  if (minimum_required_version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(minimum_required_version);
    if (message_arena != submessage_arena) {
      minimum_required_version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, minimum_required_version, submessage_arena);
    }
    _has_bits_[1] |= 0x08000000u;
  } else {
    _has_bits_[1] &= ~0x08000000u;
  }
  minimum_required_version_ = minimum_required_version;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.minimum_required_version)
}

// optional .enterprise_management.DeviceLoginScreenAutoSelectCertificateForUrls device_login_screen_auto_select_certificate_for_urls = 62;
inline bool ChromeDeviceSettingsProto::_internal_has_device_login_screen_auto_select_certificate_for_urls() const {
  bool value = (_has_bits_[1] & 0x10000000u) != 0;
  PROTOBUF_ASSUME(!value || device_login_screen_auto_select_certificate_for_urls_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_device_login_screen_auto_select_certificate_for_urls() const {
  return _internal_has_device_login_screen_auto_select_certificate_for_urls();
}
inline void ChromeDeviceSettingsProto::clear_device_login_screen_auto_select_certificate_for_urls() {
  if (device_login_screen_auto_select_certificate_for_urls_ != nullptr) device_login_screen_auto_select_certificate_for_urls_->Clear();
  _has_bits_[1] &= ~0x10000000u;
}
inline const ::enterprise_management::DeviceLoginScreenAutoSelectCertificateForUrls& ChromeDeviceSettingsProto::_internal_device_login_screen_auto_select_certificate_for_urls() const {
  const ::enterprise_management::DeviceLoginScreenAutoSelectCertificateForUrls* p = device_login_screen_auto_select_certificate_for_urls_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::DeviceLoginScreenAutoSelectCertificateForUrls*>(
      &::enterprise_management::_DeviceLoginScreenAutoSelectCertificateForUrls_default_instance_);
}
inline const ::enterprise_management::DeviceLoginScreenAutoSelectCertificateForUrls& ChromeDeviceSettingsProto::device_login_screen_auto_select_certificate_for_urls() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.device_login_screen_auto_select_certificate_for_urls)
  return _internal_device_login_screen_auto_select_certificate_for_urls();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_device_login_screen_auto_select_certificate_for_urls(
    ::enterprise_management::DeviceLoginScreenAutoSelectCertificateForUrls* device_login_screen_auto_select_certificate_for_urls) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_login_screen_auto_select_certificate_for_urls_);
  }
  device_login_screen_auto_select_certificate_for_urls_ = device_login_screen_auto_select_certificate_for_urls;
  if (device_login_screen_auto_select_certificate_for_urls) {
    _has_bits_[1] |= 0x10000000u;
  } else {
    _has_bits_[1] &= ~0x10000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_login_screen_auto_select_certificate_for_urls)
}
inline ::enterprise_management::DeviceLoginScreenAutoSelectCertificateForUrls* ChromeDeviceSettingsProto::release_device_login_screen_auto_select_certificate_for_urls() {
  auto temp = unsafe_arena_release_device_login_screen_auto_select_certificate_for_urls();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::DeviceLoginScreenAutoSelectCertificateForUrls* ChromeDeviceSettingsProto::unsafe_arena_release_device_login_screen_auto_select_certificate_for_urls() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.device_login_screen_auto_select_certificate_for_urls)
  _has_bits_[1] &= ~0x10000000u;
  ::enterprise_management::DeviceLoginScreenAutoSelectCertificateForUrls* temp = device_login_screen_auto_select_certificate_for_urls_;
  device_login_screen_auto_select_certificate_for_urls_ = nullptr;
  return temp;
}
inline ::enterprise_management::DeviceLoginScreenAutoSelectCertificateForUrls* ChromeDeviceSettingsProto::_internal_mutable_device_login_screen_auto_select_certificate_for_urls() {
  _has_bits_[1] |= 0x10000000u;
  if (device_login_screen_auto_select_certificate_for_urls_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::DeviceLoginScreenAutoSelectCertificateForUrls>(GetArena());
    device_login_screen_auto_select_certificate_for_urls_ = p;
  }
  return device_login_screen_auto_select_certificate_for_urls_;
}
inline ::enterprise_management::DeviceLoginScreenAutoSelectCertificateForUrls* ChromeDeviceSettingsProto::mutable_device_login_screen_auto_select_certificate_for_urls() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.device_login_screen_auto_select_certificate_for_urls)
  return _internal_mutable_device_login_screen_auto_select_certificate_for_urls();
}
inline void ChromeDeviceSettingsProto::set_allocated_device_login_screen_auto_select_certificate_for_urls(::enterprise_management::DeviceLoginScreenAutoSelectCertificateForUrls* device_login_screen_auto_select_certificate_for_urls) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_login_screen_auto_select_certificate_for_urls_;
  }
  if (device_login_screen_auto_select_certificate_for_urls) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_login_screen_auto_select_certificate_for_urls);
    if (message_arena != submessage_arena) {
      device_login_screen_auto_select_certificate_for_urls = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_login_screen_auto_select_certificate_for_urls, submessage_arena);
    }
    _has_bits_[1] |= 0x10000000u;
  } else {
    _has_bits_[1] &= ~0x10000000u;
  }
  device_login_screen_auto_select_certificate_for_urls_ = device_login_screen_auto_select_certificate_for_urls;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_login_screen_auto_select_certificate_for_urls)
}

// optional .enterprise_management.UnaffiliatedArcAllowedProto unaffiliated_arc_allowed = 63;
inline bool ChromeDeviceSettingsProto::_internal_has_unaffiliated_arc_allowed() const {
  bool value = (_has_bits_[1] & 0x20000000u) != 0;
  PROTOBUF_ASSUME(!value || unaffiliated_arc_allowed_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_unaffiliated_arc_allowed() const {
  return _internal_has_unaffiliated_arc_allowed();
}
inline void ChromeDeviceSettingsProto::clear_unaffiliated_arc_allowed() {
  if (unaffiliated_arc_allowed_ != nullptr) unaffiliated_arc_allowed_->Clear();
  _has_bits_[1] &= ~0x20000000u;
}
inline const ::enterprise_management::UnaffiliatedArcAllowedProto& ChromeDeviceSettingsProto::_internal_unaffiliated_arc_allowed() const {
  const ::enterprise_management::UnaffiliatedArcAllowedProto* p = unaffiliated_arc_allowed_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::UnaffiliatedArcAllowedProto*>(
      &::enterprise_management::_UnaffiliatedArcAllowedProto_default_instance_);
}
inline const ::enterprise_management::UnaffiliatedArcAllowedProto& ChromeDeviceSettingsProto::unaffiliated_arc_allowed() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.unaffiliated_arc_allowed)
  return _internal_unaffiliated_arc_allowed();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_unaffiliated_arc_allowed(
    ::enterprise_management::UnaffiliatedArcAllowedProto* unaffiliated_arc_allowed) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unaffiliated_arc_allowed_);
  }
  unaffiliated_arc_allowed_ = unaffiliated_arc_allowed;
  if (unaffiliated_arc_allowed) {
    _has_bits_[1] |= 0x20000000u;
  } else {
    _has_bits_[1] &= ~0x20000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.unaffiliated_arc_allowed)
}
inline ::enterprise_management::UnaffiliatedArcAllowedProto* ChromeDeviceSettingsProto::release_unaffiliated_arc_allowed() {
  auto temp = unsafe_arena_release_unaffiliated_arc_allowed();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::UnaffiliatedArcAllowedProto* ChromeDeviceSettingsProto::unsafe_arena_release_unaffiliated_arc_allowed() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.unaffiliated_arc_allowed)
  _has_bits_[1] &= ~0x20000000u;
  ::enterprise_management::UnaffiliatedArcAllowedProto* temp = unaffiliated_arc_allowed_;
  unaffiliated_arc_allowed_ = nullptr;
  return temp;
}
inline ::enterprise_management::UnaffiliatedArcAllowedProto* ChromeDeviceSettingsProto::_internal_mutable_unaffiliated_arc_allowed() {
  _has_bits_[1] |= 0x20000000u;
  if (unaffiliated_arc_allowed_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::UnaffiliatedArcAllowedProto>(GetArena());
    unaffiliated_arc_allowed_ = p;
  }
  return unaffiliated_arc_allowed_;
}
inline ::enterprise_management::UnaffiliatedArcAllowedProto* ChromeDeviceSettingsProto::mutable_unaffiliated_arc_allowed() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.unaffiliated_arc_allowed)
  return _internal_mutable_unaffiliated_arc_allowed();
}
inline void ChromeDeviceSettingsProto::set_allocated_unaffiliated_arc_allowed(::enterprise_management::UnaffiliatedArcAllowedProto* unaffiliated_arc_allowed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete unaffiliated_arc_allowed_;
  }
  if (unaffiliated_arc_allowed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(unaffiliated_arc_allowed);
    if (message_arena != submessage_arena) {
      unaffiliated_arc_allowed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unaffiliated_arc_allowed, submessage_arena);
    }
    _has_bits_[1] |= 0x20000000u;
  } else {
    _has_bits_[1] &= ~0x20000000u;
  }
  unaffiliated_arc_allowed_ = unaffiliated_arc_allowed;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.unaffiliated_arc_allowed)
}

// optional .enterprise_management.NetworkHostnameProto network_hostname = 64;
inline bool ChromeDeviceSettingsProto::_internal_has_network_hostname() const {
  bool value = (_has_bits_[1] & 0x40000000u) != 0;
  PROTOBUF_ASSUME(!value || network_hostname_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_network_hostname() const {
  return _internal_has_network_hostname();
}
inline void ChromeDeviceSettingsProto::clear_network_hostname() {
  if (network_hostname_ != nullptr) network_hostname_->Clear();
  _has_bits_[1] &= ~0x40000000u;
}
inline const ::enterprise_management::NetworkHostnameProto& ChromeDeviceSettingsProto::_internal_network_hostname() const {
  const ::enterprise_management::NetworkHostnameProto* p = network_hostname_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::NetworkHostnameProto*>(
      &::enterprise_management::_NetworkHostnameProto_default_instance_);
}
inline const ::enterprise_management::NetworkHostnameProto& ChromeDeviceSettingsProto::network_hostname() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.network_hostname)
  return _internal_network_hostname();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_network_hostname(
    ::enterprise_management::NetworkHostnameProto* network_hostname) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(network_hostname_);
  }
  network_hostname_ = network_hostname;
  if (network_hostname) {
    _has_bits_[1] |= 0x40000000u;
  } else {
    _has_bits_[1] &= ~0x40000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.network_hostname)
}
inline ::enterprise_management::NetworkHostnameProto* ChromeDeviceSettingsProto::release_network_hostname() {
  auto temp = unsafe_arena_release_network_hostname();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::NetworkHostnameProto* ChromeDeviceSettingsProto::unsafe_arena_release_network_hostname() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.network_hostname)
  _has_bits_[1] &= ~0x40000000u;
  ::enterprise_management::NetworkHostnameProto* temp = network_hostname_;
  network_hostname_ = nullptr;
  return temp;
}
inline ::enterprise_management::NetworkHostnameProto* ChromeDeviceSettingsProto::_internal_mutable_network_hostname() {
  _has_bits_[1] |= 0x40000000u;
  if (network_hostname_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::NetworkHostnameProto>(GetArena());
    network_hostname_ = p;
  }
  return network_hostname_;
}
inline ::enterprise_management::NetworkHostnameProto* ChromeDeviceSettingsProto::mutable_network_hostname() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.network_hostname)
  return _internal_mutable_network_hostname();
}
inline void ChromeDeviceSettingsProto::set_allocated_network_hostname(::enterprise_management::NetworkHostnameProto* network_hostname) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete network_hostname_;
  }
  if (network_hostname) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(network_hostname);
    if (message_arena != submessage_arena) {
      network_hostname = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network_hostname, submessage_arena);
    }
    _has_bits_[1] |= 0x40000000u;
  } else {
    _has_bits_[1] &= ~0x40000000u;
  }
  network_hostname_ = network_hostname;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.network_hostname)
}

// optional .enterprise_management.DeviceKerberosEncryptionTypesProto device_kerberos_encryption_types = 65;
inline bool ChromeDeviceSettingsProto::_internal_has_device_kerberos_encryption_types() const {
  bool value = (_has_bits_[1] & 0x80000000u) != 0;
  PROTOBUF_ASSUME(!value || device_kerberos_encryption_types_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_device_kerberos_encryption_types() const {
  return _internal_has_device_kerberos_encryption_types();
}
inline void ChromeDeviceSettingsProto::clear_device_kerberos_encryption_types() {
  if (device_kerberos_encryption_types_ != nullptr) device_kerberos_encryption_types_->Clear();
  _has_bits_[1] &= ~0x80000000u;
}
inline const ::enterprise_management::DeviceKerberosEncryptionTypesProto& ChromeDeviceSettingsProto::_internal_device_kerberos_encryption_types() const {
  const ::enterprise_management::DeviceKerberosEncryptionTypesProto* p = device_kerberos_encryption_types_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::DeviceKerberosEncryptionTypesProto*>(
      &::enterprise_management::_DeviceKerberosEncryptionTypesProto_default_instance_);
}
inline const ::enterprise_management::DeviceKerberosEncryptionTypesProto& ChromeDeviceSettingsProto::device_kerberos_encryption_types() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.device_kerberos_encryption_types)
  return _internal_device_kerberos_encryption_types();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_device_kerberos_encryption_types(
    ::enterprise_management::DeviceKerberosEncryptionTypesProto* device_kerberos_encryption_types) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_kerberos_encryption_types_);
  }
  device_kerberos_encryption_types_ = device_kerberos_encryption_types;
  if (device_kerberos_encryption_types) {
    _has_bits_[1] |= 0x80000000u;
  } else {
    _has_bits_[1] &= ~0x80000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_kerberos_encryption_types)
}
inline ::enterprise_management::DeviceKerberosEncryptionTypesProto* ChromeDeviceSettingsProto::release_device_kerberos_encryption_types() {
  auto temp = unsafe_arena_release_device_kerberos_encryption_types();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::DeviceKerberosEncryptionTypesProto* ChromeDeviceSettingsProto::unsafe_arena_release_device_kerberos_encryption_types() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.device_kerberos_encryption_types)
  _has_bits_[1] &= ~0x80000000u;
  ::enterprise_management::DeviceKerberosEncryptionTypesProto* temp = device_kerberos_encryption_types_;
  device_kerberos_encryption_types_ = nullptr;
  return temp;
}
inline ::enterprise_management::DeviceKerberosEncryptionTypesProto* ChromeDeviceSettingsProto::_internal_mutable_device_kerberos_encryption_types() {
  _has_bits_[1] |= 0x80000000u;
  if (device_kerberos_encryption_types_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::DeviceKerberosEncryptionTypesProto>(GetArena());
    device_kerberos_encryption_types_ = p;
  }
  return device_kerberos_encryption_types_;
}
inline ::enterprise_management::DeviceKerberosEncryptionTypesProto* ChromeDeviceSettingsProto::mutable_device_kerberos_encryption_types() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.device_kerberos_encryption_types)
  return _internal_mutable_device_kerberos_encryption_types();
}
inline void ChromeDeviceSettingsProto::set_allocated_device_kerberos_encryption_types(::enterprise_management::DeviceKerberosEncryptionTypesProto* device_kerberos_encryption_types) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_kerberos_encryption_types_;
  }
  if (device_kerberos_encryption_types) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_kerberos_encryption_types);
    if (message_arena != submessage_arena) {
      device_kerberos_encryption_types = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_kerberos_encryption_types, submessage_arena);
    }
    _has_bits_[1] |= 0x80000000u;
  } else {
    _has_bits_[1] &= ~0x80000000u;
  }
  device_kerberos_encryption_types_ = device_kerberos_encryption_types;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_kerberos_encryption_types)
}

// optional .enterprise_management.DeviceUserPolicyLoopbackProcessingModeProto device_user_policy_loopback_processing_mode = 66;
inline bool ChromeDeviceSettingsProto::_internal_has_device_user_policy_loopback_processing_mode() const {
  bool value = (_has_bits_[2] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || device_user_policy_loopback_processing_mode_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_device_user_policy_loopback_processing_mode() const {
  return _internal_has_device_user_policy_loopback_processing_mode();
}
inline void ChromeDeviceSettingsProto::clear_device_user_policy_loopback_processing_mode() {
  if (device_user_policy_loopback_processing_mode_ != nullptr) device_user_policy_loopback_processing_mode_->Clear();
  _has_bits_[2] &= ~0x00000001u;
}
inline const ::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto& ChromeDeviceSettingsProto::_internal_device_user_policy_loopback_processing_mode() const {
  const ::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto* p = device_user_policy_loopback_processing_mode_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto*>(
      &::enterprise_management::_DeviceUserPolicyLoopbackProcessingModeProto_default_instance_);
}
inline const ::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto& ChromeDeviceSettingsProto::device_user_policy_loopback_processing_mode() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.device_user_policy_loopback_processing_mode)
  return _internal_device_user_policy_loopback_processing_mode();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_device_user_policy_loopback_processing_mode(
    ::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto* device_user_policy_loopback_processing_mode) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_user_policy_loopback_processing_mode_);
  }
  device_user_policy_loopback_processing_mode_ = device_user_policy_loopback_processing_mode;
  if (device_user_policy_loopback_processing_mode) {
    _has_bits_[2] |= 0x00000001u;
  } else {
    _has_bits_[2] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_user_policy_loopback_processing_mode)
}
inline ::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto* ChromeDeviceSettingsProto::release_device_user_policy_loopback_processing_mode() {
  auto temp = unsafe_arena_release_device_user_policy_loopback_processing_mode();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto* ChromeDeviceSettingsProto::unsafe_arena_release_device_user_policy_loopback_processing_mode() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.device_user_policy_loopback_processing_mode)
  _has_bits_[2] &= ~0x00000001u;
  ::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto* temp = device_user_policy_loopback_processing_mode_;
  device_user_policy_loopback_processing_mode_ = nullptr;
  return temp;
}
inline ::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto* ChromeDeviceSettingsProto::_internal_mutable_device_user_policy_loopback_processing_mode() {
  _has_bits_[2] |= 0x00000001u;
  if (device_user_policy_loopback_processing_mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto>(GetArena());
    device_user_policy_loopback_processing_mode_ = p;
  }
  return device_user_policy_loopback_processing_mode_;
}
inline ::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto* ChromeDeviceSettingsProto::mutable_device_user_policy_loopback_processing_mode() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.device_user_policy_loopback_processing_mode)
  return _internal_mutable_device_user_policy_loopback_processing_mode();
}
inline void ChromeDeviceSettingsProto::set_allocated_device_user_policy_loopback_processing_mode(::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto* device_user_policy_loopback_processing_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_user_policy_loopback_processing_mode_;
  }
  if (device_user_policy_loopback_processing_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_user_policy_loopback_processing_mode);
    if (message_arena != submessage_arena) {
      device_user_policy_loopback_processing_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_user_policy_loopback_processing_mode, submessage_arena);
    }
    _has_bits_[2] |= 0x00000001u;
  } else {
    _has_bits_[2] &= ~0x00000001u;
  }
  device_user_policy_loopback_processing_mode_ = device_user_policy_loopback_processing_mode;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_user_policy_loopback_processing_mode)
}

// optional .enterprise_management.DeviceLoginScreenIsolateOriginsProto device_login_screen_isolate_origins = 67;
inline bool ChromeDeviceSettingsProto::_internal_has_device_login_screen_isolate_origins() const {
  bool value = (_has_bits_[2] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || device_login_screen_isolate_origins_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_device_login_screen_isolate_origins() const {
  return _internal_has_device_login_screen_isolate_origins();
}
inline void ChromeDeviceSettingsProto::clear_device_login_screen_isolate_origins() {
  if (device_login_screen_isolate_origins_ != nullptr) device_login_screen_isolate_origins_->Clear();
  _has_bits_[2] &= ~0x00000002u;
}
inline const ::enterprise_management::DeviceLoginScreenIsolateOriginsProto& ChromeDeviceSettingsProto::_internal_device_login_screen_isolate_origins() const {
  const ::enterprise_management::DeviceLoginScreenIsolateOriginsProto* p = device_login_screen_isolate_origins_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::DeviceLoginScreenIsolateOriginsProto*>(
      &::enterprise_management::_DeviceLoginScreenIsolateOriginsProto_default_instance_);
}
inline const ::enterprise_management::DeviceLoginScreenIsolateOriginsProto& ChromeDeviceSettingsProto::device_login_screen_isolate_origins() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.device_login_screen_isolate_origins)
  return _internal_device_login_screen_isolate_origins();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_device_login_screen_isolate_origins(
    ::enterprise_management::DeviceLoginScreenIsolateOriginsProto* device_login_screen_isolate_origins) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_login_screen_isolate_origins_);
  }
  device_login_screen_isolate_origins_ = device_login_screen_isolate_origins;
  if (device_login_screen_isolate_origins) {
    _has_bits_[2] |= 0x00000002u;
  } else {
    _has_bits_[2] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_login_screen_isolate_origins)
}
inline ::enterprise_management::DeviceLoginScreenIsolateOriginsProto* ChromeDeviceSettingsProto::release_device_login_screen_isolate_origins() {
  auto temp = unsafe_arena_release_device_login_screen_isolate_origins();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::DeviceLoginScreenIsolateOriginsProto* ChromeDeviceSettingsProto::unsafe_arena_release_device_login_screen_isolate_origins() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.device_login_screen_isolate_origins)
  _has_bits_[2] &= ~0x00000002u;
  ::enterprise_management::DeviceLoginScreenIsolateOriginsProto* temp = device_login_screen_isolate_origins_;
  device_login_screen_isolate_origins_ = nullptr;
  return temp;
}
inline ::enterprise_management::DeviceLoginScreenIsolateOriginsProto* ChromeDeviceSettingsProto::_internal_mutable_device_login_screen_isolate_origins() {
  _has_bits_[2] |= 0x00000002u;
  if (device_login_screen_isolate_origins_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::DeviceLoginScreenIsolateOriginsProto>(GetArena());
    device_login_screen_isolate_origins_ = p;
  }
  return device_login_screen_isolate_origins_;
}
inline ::enterprise_management::DeviceLoginScreenIsolateOriginsProto* ChromeDeviceSettingsProto::mutable_device_login_screen_isolate_origins() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.device_login_screen_isolate_origins)
  return _internal_mutable_device_login_screen_isolate_origins();
}
inline void ChromeDeviceSettingsProto::set_allocated_device_login_screen_isolate_origins(::enterprise_management::DeviceLoginScreenIsolateOriginsProto* device_login_screen_isolate_origins) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_login_screen_isolate_origins_;
  }
  if (device_login_screen_isolate_origins) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_login_screen_isolate_origins);
    if (message_arena != submessage_arena) {
      device_login_screen_isolate_origins = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_login_screen_isolate_origins, submessage_arena);
    }
    _has_bits_[2] |= 0x00000002u;
  } else {
    _has_bits_[2] &= ~0x00000002u;
  }
  device_login_screen_isolate_origins_ = device_login_screen_isolate_origins;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_login_screen_isolate_origins)
}

// optional .enterprise_management.DeviceLoginScreenSitePerProcessProto device_login_screen_site_per_process = 68;
inline bool ChromeDeviceSettingsProto::_internal_has_device_login_screen_site_per_process() const {
  bool value = (_has_bits_[2] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || device_login_screen_site_per_process_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_device_login_screen_site_per_process() const {
  return _internal_has_device_login_screen_site_per_process();
}
inline void ChromeDeviceSettingsProto::clear_device_login_screen_site_per_process() {
  if (device_login_screen_site_per_process_ != nullptr) device_login_screen_site_per_process_->Clear();
  _has_bits_[2] &= ~0x00000004u;
}
inline const ::enterprise_management::DeviceLoginScreenSitePerProcessProto& ChromeDeviceSettingsProto::_internal_device_login_screen_site_per_process() const {
  const ::enterprise_management::DeviceLoginScreenSitePerProcessProto* p = device_login_screen_site_per_process_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::DeviceLoginScreenSitePerProcessProto*>(
      &::enterprise_management::_DeviceLoginScreenSitePerProcessProto_default_instance_);
}
inline const ::enterprise_management::DeviceLoginScreenSitePerProcessProto& ChromeDeviceSettingsProto::device_login_screen_site_per_process() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.device_login_screen_site_per_process)
  return _internal_device_login_screen_site_per_process();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_device_login_screen_site_per_process(
    ::enterprise_management::DeviceLoginScreenSitePerProcessProto* device_login_screen_site_per_process) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_login_screen_site_per_process_);
  }
  device_login_screen_site_per_process_ = device_login_screen_site_per_process;
  if (device_login_screen_site_per_process) {
    _has_bits_[2] |= 0x00000004u;
  } else {
    _has_bits_[2] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_login_screen_site_per_process)
}
inline ::enterprise_management::DeviceLoginScreenSitePerProcessProto* ChromeDeviceSettingsProto::release_device_login_screen_site_per_process() {
  auto temp = unsafe_arena_release_device_login_screen_site_per_process();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::DeviceLoginScreenSitePerProcessProto* ChromeDeviceSettingsProto::unsafe_arena_release_device_login_screen_site_per_process() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.device_login_screen_site_per_process)
  _has_bits_[2] &= ~0x00000004u;
  ::enterprise_management::DeviceLoginScreenSitePerProcessProto* temp = device_login_screen_site_per_process_;
  device_login_screen_site_per_process_ = nullptr;
  return temp;
}
inline ::enterprise_management::DeviceLoginScreenSitePerProcessProto* ChromeDeviceSettingsProto::_internal_mutable_device_login_screen_site_per_process() {
  _has_bits_[2] |= 0x00000004u;
  if (device_login_screen_site_per_process_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::DeviceLoginScreenSitePerProcessProto>(GetArena());
    device_login_screen_site_per_process_ = p;
  }
  return device_login_screen_site_per_process_;
}
inline ::enterprise_management::DeviceLoginScreenSitePerProcessProto* ChromeDeviceSettingsProto::mutable_device_login_screen_site_per_process() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.device_login_screen_site_per_process)
  return _internal_mutable_device_login_screen_site_per_process();
}
inline void ChromeDeviceSettingsProto::set_allocated_device_login_screen_site_per_process(::enterprise_management::DeviceLoginScreenSitePerProcessProto* device_login_screen_site_per_process) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_login_screen_site_per_process_;
  }
  if (device_login_screen_site_per_process) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_login_screen_site_per_process);
    if (message_arena != submessage_arena) {
      device_login_screen_site_per_process = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_login_screen_site_per_process, submessage_arena);
    }
    _has_bits_[2] |= 0x00000004u;
  } else {
    _has_bits_[2] &= ~0x00000004u;
  }
  device_login_screen_site_per_process_ = device_login_screen_site_per_process;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_login_screen_site_per_process)
}

// optional .enterprise_management.VirtualMachinesAllowedProto virtual_machines_allowed = 69;
inline bool ChromeDeviceSettingsProto::_internal_has_virtual_machines_allowed() const {
  bool value = (_has_bits_[2] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || virtual_machines_allowed_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_virtual_machines_allowed() const {
  return _internal_has_virtual_machines_allowed();
}
inline void ChromeDeviceSettingsProto::clear_virtual_machines_allowed() {
  if (virtual_machines_allowed_ != nullptr) virtual_machines_allowed_->Clear();
  _has_bits_[2] &= ~0x00000008u;
}
inline const ::enterprise_management::VirtualMachinesAllowedProto& ChromeDeviceSettingsProto::_internal_virtual_machines_allowed() const {
  const ::enterprise_management::VirtualMachinesAllowedProto* p = virtual_machines_allowed_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::VirtualMachinesAllowedProto*>(
      &::enterprise_management::_VirtualMachinesAllowedProto_default_instance_);
}
inline const ::enterprise_management::VirtualMachinesAllowedProto& ChromeDeviceSettingsProto::virtual_machines_allowed() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.virtual_machines_allowed)
  return _internal_virtual_machines_allowed();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_virtual_machines_allowed(
    ::enterprise_management::VirtualMachinesAllowedProto* virtual_machines_allowed) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(virtual_machines_allowed_);
  }
  virtual_machines_allowed_ = virtual_machines_allowed;
  if (virtual_machines_allowed) {
    _has_bits_[2] |= 0x00000008u;
  } else {
    _has_bits_[2] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.virtual_machines_allowed)
}
inline ::enterprise_management::VirtualMachinesAllowedProto* ChromeDeviceSettingsProto::release_virtual_machines_allowed() {
  auto temp = unsafe_arena_release_virtual_machines_allowed();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::VirtualMachinesAllowedProto* ChromeDeviceSettingsProto::unsafe_arena_release_virtual_machines_allowed() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.virtual_machines_allowed)
  _has_bits_[2] &= ~0x00000008u;
  ::enterprise_management::VirtualMachinesAllowedProto* temp = virtual_machines_allowed_;
  virtual_machines_allowed_ = nullptr;
  return temp;
}
inline ::enterprise_management::VirtualMachinesAllowedProto* ChromeDeviceSettingsProto::_internal_mutable_virtual_machines_allowed() {
  _has_bits_[2] |= 0x00000008u;
  if (virtual_machines_allowed_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::VirtualMachinesAllowedProto>(GetArena());
    virtual_machines_allowed_ = p;
  }
  return virtual_machines_allowed_;
}
inline ::enterprise_management::VirtualMachinesAllowedProto* ChromeDeviceSettingsProto::mutable_virtual_machines_allowed() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.virtual_machines_allowed)
  return _internal_mutable_virtual_machines_allowed();
}
inline void ChromeDeviceSettingsProto::set_allocated_virtual_machines_allowed(::enterprise_management::VirtualMachinesAllowedProto* virtual_machines_allowed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete virtual_machines_allowed_;
  }
  if (virtual_machines_allowed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(virtual_machines_allowed);
    if (message_arena != submessage_arena) {
      virtual_machines_allowed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, virtual_machines_allowed, submessage_arena);
    }
    _has_bits_[2] |= 0x00000008u;
  } else {
    _has_bits_[2] &= ~0x00000008u;
  }
  virtual_machines_allowed_ = virtual_machines_allowed;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.virtual_machines_allowed)
}

// optional .enterprise_management.DeviceMachinePasswordChangeRateProto device_machine_password_change_rate = 70;
inline bool ChromeDeviceSettingsProto::_internal_has_device_machine_password_change_rate() const {
  bool value = (_has_bits_[2] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || device_machine_password_change_rate_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_device_machine_password_change_rate() const {
  return _internal_has_device_machine_password_change_rate();
}
inline void ChromeDeviceSettingsProto::clear_device_machine_password_change_rate() {
  if (device_machine_password_change_rate_ != nullptr) device_machine_password_change_rate_->Clear();
  _has_bits_[2] &= ~0x00000010u;
}
inline const ::enterprise_management::DeviceMachinePasswordChangeRateProto& ChromeDeviceSettingsProto::_internal_device_machine_password_change_rate() const {
  const ::enterprise_management::DeviceMachinePasswordChangeRateProto* p = device_machine_password_change_rate_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::DeviceMachinePasswordChangeRateProto*>(
      &::enterprise_management::_DeviceMachinePasswordChangeRateProto_default_instance_);
}
inline const ::enterprise_management::DeviceMachinePasswordChangeRateProto& ChromeDeviceSettingsProto::device_machine_password_change_rate() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.device_machine_password_change_rate)
  return _internal_device_machine_password_change_rate();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_device_machine_password_change_rate(
    ::enterprise_management::DeviceMachinePasswordChangeRateProto* device_machine_password_change_rate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_machine_password_change_rate_);
  }
  device_machine_password_change_rate_ = device_machine_password_change_rate;
  if (device_machine_password_change_rate) {
    _has_bits_[2] |= 0x00000010u;
  } else {
    _has_bits_[2] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_machine_password_change_rate)
}
inline ::enterprise_management::DeviceMachinePasswordChangeRateProto* ChromeDeviceSettingsProto::release_device_machine_password_change_rate() {
  auto temp = unsafe_arena_release_device_machine_password_change_rate();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::DeviceMachinePasswordChangeRateProto* ChromeDeviceSettingsProto::unsafe_arena_release_device_machine_password_change_rate() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.device_machine_password_change_rate)
  _has_bits_[2] &= ~0x00000010u;
  ::enterprise_management::DeviceMachinePasswordChangeRateProto* temp = device_machine_password_change_rate_;
  device_machine_password_change_rate_ = nullptr;
  return temp;
}
inline ::enterprise_management::DeviceMachinePasswordChangeRateProto* ChromeDeviceSettingsProto::_internal_mutable_device_machine_password_change_rate() {
  _has_bits_[2] |= 0x00000010u;
  if (device_machine_password_change_rate_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::DeviceMachinePasswordChangeRateProto>(GetArena());
    device_machine_password_change_rate_ = p;
  }
  return device_machine_password_change_rate_;
}
inline ::enterprise_management::DeviceMachinePasswordChangeRateProto* ChromeDeviceSettingsProto::mutable_device_machine_password_change_rate() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.device_machine_password_change_rate)
  return _internal_mutable_device_machine_password_change_rate();
}
inline void ChromeDeviceSettingsProto::set_allocated_device_machine_password_change_rate(::enterprise_management::DeviceMachinePasswordChangeRateProto* device_machine_password_change_rate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_machine_password_change_rate_;
  }
  if (device_machine_password_change_rate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_machine_password_change_rate);
    if (message_arena != submessage_arena) {
      device_machine_password_change_rate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_machine_password_change_rate, submessage_arena);
    }
    _has_bits_[2] |= 0x00000010u;
  } else {
    _has_bits_[2] &= ~0x00000010u;
  }
  device_machine_password_change_rate_ = device_machine_password_change_rate;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_machine_password_change_rate)
}

// optional .enterprise_management.SamlLoginAuthenticationTypeProto saml_login_authentication_type = 71;
inline bool ChromeDeviceSettingsProto::_internal_has_saml_login_authentication_type() const {
  bool value = (_has_bits_[2] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || saml_login_authentication_type_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_saml_login_authentication_type() const {
  return _internal_has_saml_login_authentication_type();
}
inline void ChromeDeviceSettingsProto::clear_saml_login_authentication_type() {
  if (saml_login_authentication_type_ != nullptr) saml_login_authentication_type_->Clear();
  _has_bits_[2] &= ~0x00000020u;
}
inline const ::enterprise_management::SamlLoginAuthenticationTypeProto& ChromeDeviceSettingsProto::_internal_saml_login_authentication_type() const {
  const ::enterprise_management::SamlLoginAuthenticationTypeProto* p = saml_login_authentication_type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::SamlLoginAuthenticationTypeProto*>(
      &::enterprise_management::_SamlLoginAuthenticationTypeProto_default_instance_);
}
inline const ::enterprise_management::SamlLoginAuthenticationTypeProto& ChromeDeviceSettingsProto::saml_login_authentication_type() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.saml_login_authentication_type)
  return _internal_saml_login_authentication_type();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_saml_login_authentication_type(
    ::enterprise_management::SamlLoginAuthenticationTypeProto* saml_login_authentication_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(saml_login_authentication_type_);
  }
  saml_login_authentication_type_ = saml_login_authentication_type;
  if (saml_login_authentication_type) {
    _has_bits_[2] |= 0x00000020u;
  } else {
    _has_bits_[2] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.saml_login_authentication_type)
}
inline ::enterprise_management::SamlLoginAuthenticationTypeProto* ChromeDeviceSettingsProto::release_saml_login_authentication_type() {
  auto temp = unsafe_arena_release_saml_login_authentication_type();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::SamlLoginAuthenticationTypeProto* ChromeDeviceSettingsProto::unsafe_arena_release_saml_login_authentication_type() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.saml_login_authentication_type)
  _has_bits_[2] &= ~0x00000020u;
  ::enterprise_management::SamlLoginAuthenticationTypeProto* temp = saml_login_authentication_type_;
  saml_login_authentication_type_ = nullptr;
  return temp;
}
inline ::enterprise_management::SamlLoginAuthenticationTypeProto* ChromeDeviceSettingsProto::_internal_mutable_saml_login_authentication_type() {
  _has_bits_[2] |= 0x00000020u;
  if (saml_login_authentication_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::SamlLoginAuthenticationTypeProto>(GetArena());
    saml_login_authentication_type_ = p;
  }
  return saml_login_authentication_type_;
}
inline ::enterprise_management::SamlLoginAuthenticationTypeProto* ChromeDeviceSettingsProto::mutable_saml_login_authentication_type() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.saml_login_authentication_type)
  return _internal_mutable_saml_login_authentication_type();
}
inline void ChromeDeviceSettingsProto::set_allocated_saml_login_authentication_type(::enterprise_management::SamlLoginAuthenticationTypeProto* saml_login_authentication_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete saml_login_authentication_type_;
  }
  if (saml_login_authentication_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(saml_login_authentication_type);
    if (message_arena != submessage_arena) {
      saml_login_authentication_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, saml_login_authentication_type, submessage_arena);
    }
    _has_bits_[2] |= 0x00000020u;
  } else {
    _has_bits_[2] &= ~0x00000020u;
  }
  saml_login_authentication_type_ = saml_login_authentication_type;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.saml_login_authentication_type)
}

// optional .enterprise_management.DeviceUnaffiliatedCrostiniAllowedProto device_unaffiliated_crostini_allowed = 72;
inline bool ChromeDeviceSettingsProto::_internal_has_device_unaffiliated_crostini_allowed() const {
  bool value = (_has_bits_[2] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || device_unaffiliated_crostini_allowed_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_device_unaffiliated_crostini_allowed() const {
  return _internal_has_device_unaffiliated_crostini_allowed();
}
inline void ChromeDeviceSettingsProto::clear_device_unaffiliated_crostini_allowed() {
  if (device_unaffiliated_crostini_allowed_ != nullptr) device_unaffiliated_crostini_allowed_->Clear();
  _has_bits_[2] &= ~0x00000040u;
}
inline const ::enterprise_management::DeviceUnaffiliatedCrostiniAllowedProto& ChromeDeviceSettingsProto::_internal_device_unaffiliated_crostini_allowed() const {
  const ::enterprise_management::DeviceUnaffiliatedCrostiniAllowedProto* p = device_unaffiliated_crostini_allowed_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::DeviceUnaffiliatedCrostiniAllowedProto*>(
      &::enterprise_management::_DeviceUnaffiliatedCrostiniAllowedProto_default_instance_);
}
inline const ::enterprise_management::DeviceUnaffiliatedCrostiniAllowedProto& ChromeDeviceSettingsProto::device_unaffiliated_crostini_allowed() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.device_unaffiliated_crostini_allowed)
  return _internal_device_unaffiliated_crostini_allowed();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_device_unaffiliated_crostini_allowed(
    ::enterprise_management::DeviceUnaffiliatedCrostiniAllowedProto* device_unaffiliated_crostini_allowed) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_unaffiliated_crostini_allowed_);
  }
  device_unaffiliated_crostini_allowed_ = device_unaffiliated_crostini_allowed;
  if (device_unaffiliated_crostini_allowed) {
    _has_bits_[2] |= 0x00000040u;
  } else {
    _has_bits_[2] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_unaffiliated_crostini_allowed)
}
inline ::enterprise_management::DeviceUnaffiliatedCrostiniAllowedProto* ChromeDeviceSettingsProto::release_device_unaffiliated_crostini_allowed() {
  auto temp = unsafe_arena_release_device_unaffiliated_crostini_allowed();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::DeviceUnaffiliatedCrostiniAllowedProto* ChromeDeviceSettingsProto::unsafe_arena_release_device_unaffiliated_crostini_allowed() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.device_unaffiliated_crostini_allowed)
  _has_bits_[2] &= ~0x00000040u;
  ::enterprise_management::DeviceUnaffiliatedCrostiniAllowedProto* temp = device_unaffiliated_crostini_allowed_;
  device_unaffiliated_crostini_allowed_ = nullptr;
  return temp;
}
inline ::enterprise_management::DeviceUnaffiliatedCrostiniAllowedProto* ChromeDeviceSettingsProto::_internal_mutable_device_unaffiliated_crostini_allowed() {
  _has_bits_[2] |= 0x00000040u;
  if (device_unaffiliated_crostini_allowed_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::DeviceUnaffiliatedCrostiniAllowedProto>(GetArena());
    device_unaffiliated_crostini_allowed_ = p;
  }
  return device_unaffiliated_crostini_allowed_;
}
inline ::enterprise_management::DeviceUnaffiliatedCrostiniAllowedProto* ChromeDeviceSettingsProto::mutable_device_unaffiliated_crostini_allowed() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.device_unaffiliated_crostini_allowed)
  return _internal_mutable_device_unaffiliated_crostini_allowed();
}
inline void ChromeDeviceSettingsProto::set_allocated_device_unaffiliated_crostini_allowed(::enterprise_management::DeviceUnaffiliatedCrostiniAllowedProto* device_unaffiliated_crostini_allowed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_unaffiliated_crostini_allowed_;
  }
  if (device_unaffiliated_crostini_allowed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_unaffiliated_crostini_allowed);
    if (message_arena != submessage_arena) {
      device_unaffiliated_crostini_allowed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_unaffiliated_crostini_allowed, submessage_arena);
    }
    _has_bits_[2] |= 0x00000040u;
  } else {
    _has_bits_[2] &= ~0x00000040u;
  }
  device_unaffiliated_crostini_allowed_ = device_unaffiliated_crostini_allowed;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_unaffiliated_crostini_allowed)
}

// optional .enterprise_management.DeviceWiFiFastTransitionEnabledProto device_wifi_fast_transition_enabled = 73;
inline bool ChromeDeviceSettingsProto::_internal_has_device_wifi_fast_transition_enabled() const {
  bool value = (_has_bits_[2] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || device_wifi_fast_transition_enabled_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_device_wifi_fast_transition_enabled() const {
  return _internal_has_device_wifi_fast_transition_enabled();
}
inline void ChromeDeviceSettingsProto::clear_device_wifi_fast_transition_enabled() {
  if (device_wifi_fast_transition_enabled_ != nullptr) device_wifi_fast_transition_enabled_->Clear();
  _has_bits_[2] &= ~0x00000080u;
}
inline const ::enterprise_management::DeviceWiFiFastTransitionEnabledProto& ChromeDeviceSettingsProto::_internal_device_wifi_fast_transition_enabled() const {
  const ::enterprise_management::DeviceWiFiFastTransitionEnabledProto* p = device_wifi_fast_transition_enabled_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::DeviceWiFiFastTransitionEnabledProto*>(
      &::enterprise_management::_DeviceWiFiFastTransitionEnabledProto_default_instance_);
}
inline const ::enterprise_management::DeviceWiFiFastTransitionEnabledProto& ChromeDeviceSettingsProto::device_wifi_fast_transition_enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.device_wifi_fast_transition_enabled)
  return _internal_device_wifi_fast_transition_enabled();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_device_wifi_fast_transition_enabled(
    ::enterprise_management::DeviceWiFiFastTransitionEnabledProto* device_wifi_fast_transition_enabled) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_wifi_fast_transition_enabled_);
  }
  device_wifi_fast_transition_enabled_ = device_wifi_fast_transition_enabled;
  if (device_wifi_fast_transition_enabled) {
    _has_bits_[2] |= 0x00000080u;
  } else {
    _has_bits_[2] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_wifi_fast_transition_enabled)
}
inline ::enterprise_management::DeviceWiFiFastTransitionEnabledProto* ChromeDeviceSettingsProto::release_device_wifi_fast_transition_enabled() {
  auto temp = unsafe_arena_release_device_wifi_fast_transition_enabled();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::DeviceWiFiFastTransitionEnabledProto* ChromeDeviceSettingsProto::unsafe_arena_release_device_wifi_fast_transition_enabled() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.device_wifi_fast_transition_enabled)
  _has_bits_[2] &= ~0x00000080u;
  ::enterprise_management::DeviceWiFiFastTransitionEnabledProto* temp = device_wifi_fast_transition_enabled_;
  device_wifi_fast_transition_enabled_ = nullptr;
  return temp;
}
inline ::enterprise_management::DeviceWiFiFastTransitionEnabledProto* ChromeDeviceSettingsProto::_internal_mutable_device_wifi_fast_transition_enabled() {
  _has_bits_[2] |= 0x00000080u;
  if (device_wifi_fast_transition_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::DeviceWiFiFastTransitionEnabledProto>(GetArena());
    device_wifi_fast_transition_enabled_ = p;
  }
  return device_wifi_fast_transition_enabled_;
}
inline ::enterprise_management::DeviceWiFiFastTransitionEnabledProto* ChromeDeviceSettingsProto::mutable_device_wifi_fast_transition_enabled() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.device_wifi_fast_transition_enabled)
  return _internal_mutable_device_wifi_fast_transition_enabled();
}
inline void ChromeDeviceSettingsProto::set_allocated_device_wifi_fast_transition_enabled(::enterprise_management::DeviceWiFiFastTransitionEnabledProto* device_wifi_fast_transition_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_wifi_fast_transition_enabled_;
  }
  if (device_wifi_fast_transition_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_wifi_fast_transition_enabled);
    if (message_arena != submessage_arena) {
      device_wifi_fast_transition_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_wifi_fast_transition_enabled, submessage_arena);
    }
    _has_bits_[2] |= 0x00000080u;
  } else {
    _has_bits_[2] &= ~0x00000080u;
  }
  device_wifi_fast_transition_enabled_ = device_wifi_fast_transition_enabled;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_wifi_fast_transition_enabled)
}

// optional .enterprise_management.DeviceDisplayResolutionProto device_display_resolution = 74;
inline bool ChromeDeviceSettingsProto::_internal_has_device_display_resolution() const {
  bool value = (_has_bits_[2] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || device_display_resolution_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_device_display_resolution() const {
  return _internal_has_device_display_resolution();
}
inline void ChromeDeviceSettingsProto::clear_device_display_resolution() {
  if (device_display_resolution_ != nullptr) device_display_resolution_->Clear();
  _has_bits_[2] &= ~0x00000100u;
}
inline const ::enterprise_management::DeviceDisplayResolutionProto& ChromeDeviceSettingsProto::_internal_device_display_resolution() const {
  const ::enterprise_management::DeviceDisplayResolutionProto* p = device_display_resolution_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::DeviceDisplayResolutionProto*>(
      &::enterprise_management::_DeviceDisplayResolutionProto_default_instance_);
}
inline const ::enterprise_management::DeviceDisplayResolutionProto& ChromeDeviceSettingsProto::device_display_resolution() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.device_display_resolution)
  return _internal_device_display_resolution();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_device_display_resolution(
    ::enterprise_management::DeviceDisplayResolutionProto* device_display_resolution) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_display_resolution_);
  }
  device_display_resolution_ = device_display_resolution;
  if (device_display_resolution) {
    _has_bits_[2] |= 0x00000100u;
  } else {
    _has_bits_[2] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_display_resolution)
}
inline ::enterprise_management::DeviceDisplayResolutionProto* ChromeDeviceSettingsProto::release_device_display_resolution() {
  auto temp = unsafe_arena_release_device_display_resolution();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::DeviceDisplayResolutionProto* ChromeDeviceSettingsProto::unsafe_arena_release_device_display_resolution() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.device_display_resolution)
  _has_bits_[2] &= ~0x00000100u;
  ::enterprise_management::DeviceDisplayResolutionProto* temp = device_display_resolution_;
  device_display_resolution_ = nullptr;
  return temp;
}
inline ::enterprise_management::DeviceDisplayResolutionProto* ChromeDeviceSettingsProto::_internal_mutable_device_display_resolution() {
  _has_bits_[2] |= 0x00000100u;
  if (device_display_resolution_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::DeviceDisplayResolutionProto>(GetArena());
    device_display_resolution_ = p;
  }
  return device_display_resolution_;
}
inline ::enterprise_management::DeviceDisplayResolutionProto* ChromeDeviceSettingsProto::mutable_device_display_resolution() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.device_display_resolution)
  return _internal_mutable_device_display_resolution();
}
inline void ChromeDeviceSettingsProto::set_allocated_device_display_resolution(::enterprise_management::DeviceDisplayResolutionProto* device_display_resolution) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_display_resolution_;
  }
  if (device_display_resolution) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_display_resolution);
    if (message_arena != submessage_arena) {
      device_display_resolution = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_display_resolution, submessage_arena);
    }
    _has_bits_[2] |= 0x00000100u;
  } else {
    _has_bits_[2] &= ~0x00000100u;
  }
  device_display_resolution_ = device_display_resolution;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_display_resolution)
}

// optional .enterprise_management.PluginVmAllowedProto plugin_vm_allowed = 75;
inline bool ChromeDeviceSettingsProto::_internal_has_plugin_vm_allowed() const {
  bool value = (_has_bits_[2] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || plugin_vm_allowed_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_plugin_vm_allowed() const {
  return _internal_has_plugin_vm_allowed();
}
inline void ChromeDeviceSettingsProto::clear_plugin_vm_allowed() {
  if (plugin_vm_allowed_ != nullptr) plugin_vm_allowed_->Clear();
  _has_bits_[2] &= ~0x00000200u;
}
inline const ::enterprise_management::PluginVmAllowedProto& ChromeDeviceSettingsProto::_internal_plugin_vm_allowed() const {
  const ::enterprise_management::PluginVmAllowedProto* p = plugin_vm_allowed_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::PluginVmAllowedProto*>(
      &::enterprise_management::_PluginVmAllowedProto_default_instance_);
}
inline const ::enterprise_management::PluginVmAllowedProto& ChromeDeviceSettingsProto::plugin_vm_allowed() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.plugin_vm_allowed)
  return _internal_plugin_vm_allowed();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_plugin_vm_allowed(
    ::enterprise_management::PluginVmAllowedProto* plugin_vm_allowed) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(plugin_vm_allowed_);
  }
  plugin_vm_allowed_ = plugin_vm_allowed;
  if (plugin_vm_allowed) {
    _has_bits_[2] |= 0x00000200u;
  } else {
    _has_bits_[2] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.plugin_vm_allowed)
}
inline ::enterprise_management::PluginVmAllowedProto* ChromeDeviceSettingsProto::release_plugin_vm_allowed() {
  auto temp = unsafe_arena_release_plugin_vm_allowed();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::PluginVmAllowedProto* ChromeDeviceSettingsProto::unsafe_arena_release_plugin_vm_allowed() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.plugin_vm_allowed)
  _has_bits_[2] &= ~0x00000200u;
  ::enterprise_management::PluginVmAllowedProto* temp = plugin_vm_allowed_;
  plugin_vm_allowed_ = nullptr;
  return temp;
}
inline ::enterprise_management::PluginVmAllowedProto* ChromeDeviceSettingsProto::_internal_mutable_plugin_vm_allowed() {
  _has_bits_[2] |= 0x00000200u;
  if (plugin_vm_allowed_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::PluginVmAllowedProto>(GetArena());
    plugin_vm_allowed_ = p;
  }
  return plugin_vm_allowed_;
}
inline ::enterprise_management::PluginVmAllowedProto* ChromeDeviceSettingsProto::mutable_plugin_vm_allowed() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.plugin_vm_allowed)
  return _internal_mutable_plugin_vm_allowed();
}
inline void ChromeDeviceSettingsProto::set_allocated_plugin_vm_allowed(::enterprise_management::PluginVmAllowedProto* plugin_vm_allowed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete plugin_vm_allowed_;
  }
  if (plugin_vm_allowed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(plugin_vm_allowed);
    if (message_arena != submessage_arena) {
      plugin_vm_allowed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plugin_vm_allowed, submessage_arena);
    }
    _has_bits_[2] |= 0x00000200u;
  } else {
    _has_bits_[2] &= ~0x00000200u;
  }
  plugin_vm_allowed_ = plugin_vm_allowed;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.plugin_vm_allowed)
}

// optional .enterprise_management.DeviceGpoCacheLifetimeProto device_gpo_cache_lifetime = 76;
inline bool ChromeDeviceSettingsProto::_internal_has_device_gpo_cache_lifetime() const {
  bool value = (_has_bits_[2] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || device_gpo_cache_lifetime_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_device_gpo_cache_lifetime() const {
  return _internal_has_device_gpo_cache_lifetime();
}
inline void ChromeDeviceSettingsProto::clear_device_gpo_cache_lifetime() {
  if (device_gpo_cache_lifetime_ != nullptr) device_gpo_cache_lifetime_->Clear();
  _has_bits_[2] &= ~0x00000400u;
}
inline const ::enterprise_management::DeviceGpoCacheLifetimeProto& ChromeDeviceSettingsProto::_internal_device_gpo_cache_lifetime() const {
  const ::enterprise_management::DeviceGpoCacheLifetimeProto* p = device_gpo_cache_lifetime_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::DeviceGpoCacheLifetimeProto*>(
      &::enterprise_management::_DeviceGpoCacheLifetimeProto_default_instance_);
}
inline const ::enterprise_management::DeviceGpoCacheLifetimeProto& ChromeDeviceSettingsProto::device_gpo_cache_lifetime() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.device_gpo_cache_lifetime)
  return _internal_device_gpo_cache_lifetime();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_device_gpo_cache_lifetime(
    ::enterprise_management::DeviceGpoCacheLifetimeProto* device_gpo_cache_lifetime) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_gpo_cache_lifetime_);
  }
  device_gpo_cache_lifetime_ = device_gpo_cache_lifetime;
  if (device_gpo_cache_lifetime) {
    _has_bits_[2] |= 0x00000400u;
  } else {
    _has_bits_[2] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_gpo_cache_lifetime)
}
inline ::enterprise_management::DeviceGpoCacheLifetimeProto* ChromeDeviceSettingsProto::release_device_gpo_cache_lifetime() {
  auto temp = unsafe_arena_release_device_gpo_cache_lifetime();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::DeviceGpoCacheLifetimeProto* ChromeDeviceSettingsProto::unsafe_arena_release_device_gpo_cache_lifetime() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.device_gpo_cache_lifetime)
  _has_bits_[2] &= ~0x00000400u;
  ::enterprise_management::DeviceGpoCacheLifetimeProto* temp = device_gpo_cache_lifetime_;
  device_gpo_cache_lifetime_ = nullptr;
  return temp;
}
inline ::enterprise_management::DeviceGpoCacheLifetimeProto* ChromeDeviceSettingsProto::_internal_mutable_device_gpo_cache_lifetime() {
  _has_bits_[2] |= 0x00000400u;
  if (device_gpo_cache_lifetime_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::DeviceGpoCacheLifetimeProto>(GetArena());
    device_gpo_cache_lifetime_ = p;
  }
  return device_gpo_cache_lifetime_;
}
inline ::enterprise_management::DeviceGpoCacheLifetimeProto* ChromeDeviceSettingsProto::mutable_device_gpo_cache_lifetime() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.device_gpo_cache_lifetime)
  return _internal_mutable_device_gpo_cache_lifetime();
}
inline void ChromeDeviceSettingsProto::set_allocated_device_gpo_cache_lifetime(::enterprise_management::DeviceGpoCacheLifetimeProto* device_gpo_cache_lifetime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_gpo_cache_lifetime_;
  }
  if (device_gpo_cache_lifetime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_gpo_cache_lifetime);
    if (message_arena != submessage_arena) {
      device_gpo_cache_lifetime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_gpo_cache_lifetime, submessage_arena);
    }
    _has_bits_[2] |= 0x00000400u;
  } else {
    _has_bits_[2] &= ~0x00000400u;
  }
  device_gpo_cache_lifetime_ = device_gpo_cache_lifetime;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_gpo_cache_lifetime)
}

// optional .enterprise_management.DeviceAuthDataCacheLifetimeProto device_auth_data_cache_lifetime = 77;
inline bool ChromeDeviceSettingsProto::_internal_has_device_auth_data_cache_lifetime() const {
  bool value = (_has_bits_[2] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || device_auth_data_cache_lifetime_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_device_auth_data_cache_lifetime() const {
  return _internal_has_device_auth_data_cache_lifetime();
}
inline void ChromeDeviceSettingsProto::clear_device_auth_data_cache_lifetime() {
  if (device_auth_data_cache_lifetime_ != nullptr) device_auth_data_cache_lifetime_->Clear();
  _has_bits_[2] &= ~0x00000800u;
}
inline const ::enterprise_management::DeviceAuthDataCacheLifetimeProto& ChromeDeviceSettingsProto::_internal_device_auth_data_cache_lifetime() const {
  const ::enterprise_management::DeviceAuthDataCacheLifetimeProto* p = device_auth_data_cache_lifetime_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::DeviceAuthDataCacheLifetimeProto*>(
      &::enterprise_management::_DeviceAuthDataCacheLifetimeProto_default_instance_);
}
inline const ::enterprise_management::DeviceAuthDataCacheLifetimeProto& ChromeDeviceSettingsProto::device_auth_data_cache_lifetime() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.device_auth_data_cache_lifetime)
  return _internal_device_auth_data_cache_lifetime();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_device_auth_data_cache_lifetime(
    ::enterprise_management::DeviceAuthDataCacheLifetimeProto* device_auth_data_cache_lifetime) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_auth_data_cache_lifetime_);
  }
  device_auth_data_cache_lifetime_ = device_auth_data_cache_lifetime;
  if (device_auth_data_cache_lifetime) {
    _has_bits_[2] |= 0x00000800u;
  } else {
    _has_bits_[2] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_auth_data_cache_lifetime)
}
inline ::enterprise_management::DeviceAuthDataCacheLifetimeProto* ChromeDeviceSettingsProto::release_device_auth_data_cache_lifetime() {
  auto temp = unsafe_arena_release_device_auth_data_cache_lifetime();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::DeviceAuthDataCacheLifetimeProto* ChromeDeviceSettingsProto::unsafe_arena_release_device_auth_data_cache_lifetime() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.device_auth_data_cache_lifetime)
  _has_bits_[2] &= ~0x00000800u;
  ::enterprise_management::DeviceAuthDataCacheLifetimeProto* temp = device_auth_data_cache_lifetime_;
  device_auth_data_cache_lifetime_ = nullptr;
  return temp;
}
inline ::enterprise_management::DeviceAuthDataCacheLifetimeProto* ChromeDeviceSettingsProto::_internal_mutable_device_auth_data_cache_lifetime() {
  _has_bits_[2] |= 0x00000800u;
  if (device_auth_data_cache_lifetime_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::DeviceAuthDataCacheLifetimeProto>(GetArena());
    device_auth_data_cache_lifetime_ = p;
  }
  return device_auth_data_cache_lifetime_;
}
inline ::enterprise_management::DeviceAuthDataCacheLifetimeProto* ChromeDeviceSettingsProto::mutable_device_auth_data_cache_lifetime() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.device_auth_data_cache_lifetime)
  return _internal_mutable_device_auth_data_cache_lifetime();
}
inline void ChromeDeviceSettingsProto::set_allocated_device_auth_data_cache_lifetime(::enterprise_management::DeviceAuthDataCacheLifetimeProto* device_auth_data_cache_lifetime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_auth_data_cache_lifetime_;
  }
  if (device_auth_data_cache_lifetime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_auth_data_cache_lifetime);
    if (message_arena != submessage_arena) {
      device_auth_data_cache_lifetime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_auth_data_cache_lifetime, submessage_arena);
    }
    _has_bits_[2] |= 0x00000800u;
  } else {
    _has_bits_[2] &= ~0x00000800u;
  }
  device_auth_data_cache_lifetime_ = device_auth_data_cache_lifetime;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_auth_data_cache_lifetime)
}

// optional .enterprise_management.PluginVmLicenseKeyProto plugin_vm_license_key = 78;
inline bool ChromeDeviceSettingsProto::_internal_has_plugin_vm_license_key() const {
  bool value = (_has_bits_[2] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || plugin_vm_license_key_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_plugin_vm_license_key() const {
  return _internal_has_plugin_vm_license_key();
}
inline void ChromeDeviceSettingsProto::clear_plugin_vm_license_key() {
  if (plugin_vm_license_key_ != nullptr) plugin_vm_license_key_->Clear();
  _has_bits_[2] &= ~0x00001000u;
}
inline const ::enterprise_management::PluginVmLicenseKeyProto& ChromeDeviceSettingsProto::_internal_plugin_vm_license_key() const {
  const ::enterprise_management::PluginVmLicenseKeyProto* p = plugin_vm_license_key_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::PluginVmLicenseKeyProto*>(
      &::enterprise_management::_PluginVmLicenseKeyProto_default_instance_);
}
inline const ::enterprise_management::PluginVmLicenseKeyProto& ChromeDeviceSettingsProto::plugin_vm_license_key() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.plugin_vm_license_key)
  return _internal_plugin_vm_license_key();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_plugin_vm_license_key(
    ::enterprise_management::PluginVmLicenseKeyProto* plugin_vm_license_key) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(plugin_vm_license_key_);
  }
  plugin_vm_license_key_ = plugin_vm_license_key;
  if (plugin_vm_license_key) {
    _has_bits_[2] |= 0x00001000u;
  } else {
    _has_bits_[2] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.plugin_vm_license_key)
}
inline ::enterprise_management::PluginVmLicenseKeyProto* ChromeDeviceSettingsProto::release_plugin_vm_license_key() {
  auto temp = unsafe_arena_release_plugin_vm_license_key();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::PluginVmLicenseKeyProto* ChromeDeviceSettingsProto::unsafe_arena_release_plugin_vm_license_key() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.plugin_vm_license_key)
  _has_bits_[2] &= ~0x00001000u;
  ::enterprise_management::PluginVmLicenseKeyProto* temp = plugin_vm_license_key_;
  plugin_vm_license_key_ = nullptr;
  return temp;
}
inline ::enterprise_management::PluginVmLicenseKeyProto* ChromeDeviceSettingsProto::_internal_mutable_plugin_vm_license_key() {
  _has_bits_[2] |= 0x00001000u;
  if (plugin_vm_license_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::PluginVmLicenseKeyProto>(GetArena());
    plugin_vm_license_key_ = p;
  }
  return plugin_vm_license_key_;
}
inline ::enterprise_management::PluginVmLicenseKeyProto* ChromeDeviceSettingsProto::mutable_plugin_vm_license_key() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.plugin_vm_license_key)
  return _internal_mutable_plugin_vm_license_key();
}
inline void ChromeDeviceSettingsProto::set_allocated_plugin_vm_license_key(::enterprise_management::PluginVmLicenseKeyProto* plugin_vm_license_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete plugin_vm_license_key_;
  }
  if (plugin_vm_license_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(plugin_vm_license_key);
    if (message_arena != submessage_arena) {
      plugin_vm_license_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plugin_vm_license_key, submessage_arena);
    }
    _has_bits_[2] |= 0x00001000u;
  } else {
    _has_bits_[2] &= ~0x00001000u;
  }
  plugin_vm_license_key_ = plugin_vm_license_key;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.plugin_vm_license_key)
}

// optional .enterprise_management.DeviceRebootOnUserSignoutProto device_reboot_on_user_signout = 79;
inline bool ChromeDeviceSettingsProto::_internal_has_device_reboot_on_user_signout() const {
  bool value = (_has_bits_[2] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || device_reboot_on_user_signout_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_device_reboot_on_user_signout() const {
  return _internal_has_device_reboot_on_user_signout();
}
inline void ChromeDeviceSettingsProto::clear_device_reboot_on_user_signout() {
  if (device_reboot_on_user_signout_ != nullptr) device_reboot_on_user_signout_->Clear();
  _has_bits_[2] &= ~0x00002000u;
}
inline const ::enterprise_management::DeviceRebootOnUserSignoutProto& ChromeDeviceSettingsProto::_internal_device_reboot_on_user_signout() const {
  const ::enterprise_management::DeviceRebootOnUserSignoutProto* p = device_reboot_on_user_signout_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::DeviceRebootOnUserSignoutProto*>(
      &::enterprise_management::_DeviceRebootOnUserSignoutProto_default_instance_);
}
inline const ::enterprise_management::DeviceRebootOnUserSignoutProto& ChromeDeviceSettingsProto::device_reboot_on_user_signout() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.device_reboot_on_user_signout)
  return _internal_device_reboot_on_user_signout();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_device_reboot_on_user_signout(
    ::enterprise_management::DeviceRebootOnUserSignoutProto* device_reboot_on_user_signout) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_reboot_on_user_signout_);
  }
  device_reboot_on_user_signout_ = device_reboot_on_user_signout;
  if (device_reboot_on_user_signout) {
    _has_bits_[2] |= 0x00002000u;
  } else {
    _has_bits_[2] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_reboot_on_user_signout)
}
inline ::enterprise_management::DeviceRebootOnUserSignoutProto* ChromeDeviceSettingsProto::release_device_reboot_on_user_signout() {
  auto temp = unsafe_arena_release_device_reboot_on_user_signout();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::DeviceRebootOnUserSignoutProto* ChromeDeviceSettingsProto::unsafe_arena_release_device_reboot_on_user_signout() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.device_reboot_on_user_signout)
  _has_bits_[2] &= ~0x00002000u;
  ::enterprise_management::DeviceRebootOnUserSignoutProto* temp = device_reboot_on_user_signout_;
  device_reboot_on_user_signout_ = nullptr;
  return temp;
}
inline ::enterprise_management::DeviceRebootOnUserSignoutProto* ChromeDeviceSettingsProto::_internal_mutable_device_reboot_on_user_signout() {
  _has_bits_[2] |= 0x00002000u;
  if (device_reboot_on_user_signout_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::DeviceRebootOnUserSignoutProto>(GetArena());
    device_reboot_on_user_signout_ = p;
  }
  return device_reboot_on_user_signout_;
}
inline ::enterprise_management::DeviceRebootOnUserSignoutProto* ChromeDeviceSettingsProto::mutable_device_reboot_on_user_signout() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.device_reboot_on_user_signout)
  return _internal_mutable_device_reboot_on_user_signout();
}
inline void ChromeDeviceSettingsProto::set_allocated_device_reboot_on_user_signout(::enterprise_management::DeviceRebootOnUserSignoutProto* device_reboot_on_user_signout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_reboot_on_user_signout_;
  }
  if (device_reboot_on_user_signout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_reboot_on_user_signout);
    if (message_arena != submessage_arena) {
      device_reboot_on_user_signout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_reboot_on_user_signout, submessage_arena);
    }
    _has_bits_[2] |= 0x00002000u;
  } else {
    _has_bits_[2] &= ~0x00002000u;
  }
  device_reboot_on_user_signout_ = device_reboot_on_user_signout;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_reboot_on_user_signout)
}

// optional .enterprise_management.DeviceWilcoDtcAllowedProto device_wilco_dtc_allowed = 80;
inline bool ChromeDeviceSettingsProto::_internal_has_device_wilco_dtc_allowed() const {
  bool value = (_has_bits_[2] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || device_wilco_dtc_allowed_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_device_wilco_dtc_allowed() const {
  return _internal_has_device_wilco_dtc_allowed();
}
inline void ChromeDeviceSettingsProto::clear_device_wilco_dtc_allowed() {
  if (device_wilco_dtc_allowed_ != nullptr) device_wilco_dtc_allowed_->Clear();
  _has_bits_[2] &= ~0x00004000u;
}
inline const ::enterprise_management::DeviceWilcoDtcAllowedProto& ChromeDeviceSettingsProto::_internal_device_wilco_dtc_allowed() const {
  const ::enterprise_management::DeviceWilcoDtcAllowedProto* p = device_wilco_dtc_allowed_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::DeviceWilcoDtcAllowedProto*>(
      &::enterprise_management::_DeviceWilcoDtcAllowedProto_default_instance_);
}
inline const ::enterprise_management::DeviceWilcoDtcAllowedProto& ChromeDeviceSettingsProto::device_wilco_dtc_allowed() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.device_wilco_dtc_allowed)
  return _internal_device_wilco_dtc_allowed();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_device_wilco_dtc_allowed(
    ::enterprise_management::DeviceWilcoDtcAllowedProto* device_wilco_dtc_allowed) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_wilco_dtc_allowed_);
  }
  device_wilco_dtc_allowed_ = device_wilco_dtc_allowed;
  if (device_wilco_dtc_allowed) {
    _has_bits_[2] |= 0x00004000u;
  } else {
    _has_bits_[2] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_wilco_dtc_allowed)
}
inline ::enterprise_management::DeviceWilcoDtcAllowedProto* ChromeDeviceSettingsProto::release_device_wilco_dtc_allowed() {
  auto temp = unsafe_arena_release_device_wilco_dtc_allowed();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::DeviceWilcoDtcAllowedProto* ChromeDeviceSettingsProto::unsafe_arena_release_device_wilco_dtc_allowed() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.device_wilco_dtc_allowed)
  _has_bits_[2] &= ~0x00004000u;
  ::enterprise_management::DeviceWilcoDtcAllowedProto* temp = device_wilco_dtc_allowed_;
  device_wilco_dtc_allowed_ = nullptr;
  return temp;
}
inline ::enterprise_management::DeviceWilcoDtcAllowedProto* ChromeDeviceSettingsProto::_internal_mutable_device_wilco_dtc_allowed() {
  _has_bits_[2] |= 0x00004000u;
  if (device_wilco_dtc_allowed_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::DeviceWilcoDtcAllowedProto>(GetArena());
    device_wilco_dtc_allowed_ = p;
  }
  return device_wilco_dtc_allowed_;
}
inline ::enterprise_management::DeviceWilcoDtcAllowedProto* ChromeDeviceSettingsProto::mutable_device_wilco_dtc_allowed() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.device_wilco_dtc_allowed)
  return _internal_mutable_device_wilco_dtc_allowed();
}
inline void ChromeDeviceSettingsProto::set_allocated_device_wilco_dtc_allowed(::enterprise_management::DeviceWilcoDtcAllowedProto* device_wilco_dtc_allowed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_wilco_dtc_allowed_;
  }
  if (device_wilco_dtc_allowed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_wilco_dtc_allowed);
    if (message_arena != submessage_arena) {
      device_wilco_dtc_allowed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_wilco_dtc_allowed, submessage_arena);
    }
    _has_bits_[2] |= 0x00004000u;
  } else {
    _has_bits_[2] &= ~0x00004000u;
  }
  device_wilco_dtc_allowed_ = device_wilco_dtc_allowed;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_wilco_dtc_allowed)
}

// optional .enterprise_management.DeviceWilcoDtcConfigurationProto device_wilco_dtc_configuration = 81;
inline bool ChromeDeviceSettingsProto::_internal_has_device_wilco_dtc_configuration() const {
  bool value = (_has_bits_[2] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || device_wilco_dtc_configuration_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_device_wilco_dtc_configuration() const {
  return _internal_has_device_wilco_dtc_configuration();
}
inline void ChromeDeviceSettingsProto::clear_device_wilco_dtc_configuration() {
  if (device_wilco_dtc_configuration_ != nullptr) device_wilco_dtc_configuration_->Clear();
  _has_bits_[2] &= ~0x00008000u;
}
inline const ::enterprise_management::DeviceWilcoDtcConfigurationProto& ChromeDeviceSettingsProto::_internal_device_wilco_dtc_configuration() const {
  const ::enterprise_management::DeviceWilcoDtcConfigurationProto* p = device_wilco_dtc_configuration_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::DeviceWilcoDtcConfigurationProto*>(
      &::enterprise_management::_DeviceWilcoDtcConfigurationProto_default_instance_);
}
inline const ::enterprise_management::DeviceWilcoDtcConfigurationProto& ChromeDeviceSettingsProto::device_wilco_dtc_configuration() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.device_wilco_dtc_configuration)
  return _internal_device_wilco_dtc_configuration();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_device_wilco_dtc_configuration(
    ::enterprise_management::DeviceWilcoDtcConfigurationProto* device_wilco_dtc_configuration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_wilco_dtc_configuration_);
  }
  device_wilco_dtc_configuration_ = device_wilco_dtc_configuration;
  if (device_wilco_dtc_configuration) {
    _has_bits_[2] |= 0x00008000u;
  } else {
    _has_bits_[2] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_wilco_dtc_configuration)
}
inline ::enterprise_management::DeviceWilcoDtcConfigurationProto* ChromeDeviceSettingsProto::release_device_wilco_dtc_configuration() {
  auto temp = unsafe_arena_release_device_wilco_dtc_configuration();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::DeviceWilcoDtcConfigurationProto* ChromeDeviceSettingsProto::unsafe_arena_release_device_wilco_dtc_configuration() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.device_wilco_dtc_configuration)
  _has_bits_[2] &= ~0x00008000u;
  ::enterprise_management::DeviceWilcoDtcConfigurationProto* temp = device_wilco_dtc_configuration_;
  device_wilco_dtc_configuration_ = nullptr;
  return temp;
}
inline ::enterprise_management::DeviceWilcoDtcConfigurationProto* ChromeDeviceSettingsProto::_internal_mutable_device_wilco_dtc_configuration() {
  _has_bits_[2] |= 0x00008000u;
  if (device_wilco_dtc_configuration_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::DeviceWilcoDtcConfigurationProto>(GetArena());
    device_wilco_dtc_configuration_ = p;
  }
  return device_wilco_dtc_configuration_;
}
inline ::enterprise_management::DeviceWilcoDtcConfigurationProto* ChromeDeviceSettingsProto::mutable_device_wilco_dtc_configuration() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.device_wilco_dtc_configuration)
  return _internal_mutable_device_wilco_dtc_configuration();
}
inline void ChromeDeviceSettingsProto::set_allocated_device_wilco_dtc_configuration(::enterprise_management::DeviceWilcoDtcConfigurationProto* device_wilco_dtc_configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_wilco_dtc_configuration_;
  }
  if (device_wilco_dtc_configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_wilco_dtc_configuration);
    if (message_arena != submessage_arena) {
      device_wilco_dtc_configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_wilco_dtc_configuration, submessage_arena);
    }
    _has_bits_[2] |= 0x00008000u;
  } else {
    _has_bits_[2] &= ~0x00008000u;
  }
  device_wilco_dtc_configuration_ = device_wilco_dtc_configuration;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_wilco_dtc_configuration)
}

// optional .enterprise_management.DeviceWiFiAllowedProto device_wifi_allowed = 82;
inline bool ChromeDeviceSettingsProto::_internal_has_device_wifi_allowed() const {
  bool value = (_has_bits_[2] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || device_wifi_allowed_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_device_wifi_allowed() const {
  return _internal_has_device_wifi_allowed();
}
inline void ChromeDeviceSettingsProto::clear_device_wifi_allowed() {
  if (device_wifi_allowed_ != nullptr) device_wifi_allowed_->Clear();
  _has_bits_[2] &= ~0x00010000u;
}
inline const ::enterprise_management::DeviceWiFiAllowedProto& ChromeDeviceSettingsProto::_internal_device_wifi_allowed() const {
  const ::enterprise_management::DeviceWiFiAllowedProto* p = device_wifi_allowed_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::DeviceWiFiAllowedProto*>(
      &::enterprise_management::_DeviceWiFiAllowedProto_default_instance_);
}
inline const ::enterprise_management::DeviceWiFiAllowedProto& ChromeDeviceSettingsProto::device_wifi_allowed() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.device_wifi_allowed)
  return _internal_device_wifi_allowed();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_device_wifi_allowed(
    ::enterprise_management::DeviceWiFiAllowedProto* device_wifi_allowed) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_wifi_allowed_);
  }
  device_wifi_allowed_ = device_wifi_allowed;
  if (device_wifi_allowed) {
    _has_bits_[2] |= 0x00010000u;
  } else {
    _has_bits_[2] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_wifi_allowed)
}
inline ::enterprise_management::DeviceWiFiAllowedProto* ChromeDeviceSettingsProto::release_device_wifi_allowed() {
  auto temp = unsafe_arena_release_device_wifi_allowed();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::DeviceWiFiAllowedProto* ChromeDeviceSettingsProto::unsafe_arena_release_device_wifi_allowed() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.device_wifi_allowed)
  _has_bits_[2] &= ~0x00010000u;
  ::enterprise_management::DeviceWiFiAllowedProto* temp = device_wifi_allowed_;
  device_wifi_allowed_ = nullptr;
  return temp;
}
inline ::enterprise_management::DeviceWiFiAllowedProto* ChromeDeviceSettingsProto::_internal_mutable_device_wifi_allowed() {
  _has_bits_[2] |= 0x00010000u;
  if (device_wifi_allowed_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::DeviceWiFiAllowedProto>(GetArena());
    device_wifi_allowed_ = p;
  }
  return device_wifi_allowed_;
}
inline ::enterprise_management::DeviceWiFiAllowedProto* ChromeDeviceSettingsProto::mutable_device_wifi_allowed() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.device_wifi_allowed)
  return _internal_mutable_device_wifi_allowed();
}
inline void ChromeDeviceSettingsProto::set_allocated_device_wifi_allowed(::enterprise_management::DeviceWiFiAllowedProto* device_wifi_allowed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_wifi_allowed_;
  }
  if (device_wifi_allowed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_wifi_allowed);
    if (message_arena != submessage_arena) {
      device_wifi_allowed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_wifi_allowed, submessage_arena);
    }
    _has_bits_[2] |= 0x00010000u;
  } else {
    _has_bits_[2] &= ~0x00010000u;
  }
  device_wifi_allowed_ = device_wifi_allowed;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_wifi_allowed)
}

// optional .enterprise_management.DevicePowerPeakShiftProto device_power_peak_shift = 83;
inline bool ChromeDeviceSettingsProto::_internal_has_device_power_peak_shift() const {
  bool value = (_has_bits_[2] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || device_power_peak_shift_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_device_power_peak_shift() const {
  return _internal_has_device_power_peak_shift();
}
inline void ChromeDeviceSettingsProto::clear_device_power_peak_shift() {
  if (device_power_peak_shift_ != nullptr) device_power_peak_shift_->Clear();
  _has_bits_[2] &= ~0x00020000u;
}
inline const ::enterprise_management::DevicePowerPeakShiftProto& ChromeDeviceSettingsProto::_internal_device_power_peak_shift() const {
  const ::enterprise_management::DevicePowerPeakShiftProto* p = device_power_peak_shift_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::DevicePowerPeakShiftProto*>(
      &::enterprise_management::_DevicePowerPeakShiftProto_default_instance_);
}
inline const ::enterprise_management::DevicePowerPeakShiftProto& ChromeDeviceSettingsProto::device_power_peak_shift() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.device_power_peak_shift)
  return _internal_device_power_peak_shift();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_device_power_peak_shift(
    ::enterprise_management::DevicePowerPeakShiftProto* device_power_peak_shift) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_power_peak_shift_);
  }
  device_power_peak_shift_ = device_power_peak_shift;
  if (device_power_peak_shift) {
    _has_bits_[2] |= 0x00020000u;
  } else {
    _has_bits_[2] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_power_peak_shift)
}
inline ::enterprise_management::DevicePowerPeakShiftProto* ChromeDeviceSettingsProto::release_device_power_peak_shift() {
  auto temp = unsafe_arena_release_device_power_peak_shift();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::DevicePowerPeakShiftProto* ChromeDeviceSettingsProto::unsafe_arena_release_device_power_peak_shift() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.device_power_peak_shift)
  _has_bits_[2] &= ~0x00020000u;
  ::enterprise_management::DevicePowerPeakShiftProto* temp = device_power_peak_shift_;
  device_power_peak_shift_ = nullptr;
  return temp;
}
inline ::enterprise_management::DevicePowerPeakShiftProto* ChromeDeviceSettingsProto::_internal_mutable_device_power_peak_shift() {
  _has_bits_[2] |= 0x00020000u;
  if (device_power_peak_shift_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::DevicePowerPeakShiftProto>(GetArena());
    device_power_peak_shift_ = p;
  }
  return device_power_peak_shift_;
}
inline ::enterprise_management::DevicePowerPeakShiftProto* ChromeDeviceSettingsProto::mutable_device_power_peak_shift() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.device_power_peak_shift)
  return _internal_mutable_device_power_peak_shift();
}
inline void ChromeDeviceSettingsProto::set_allocated_device_power_peak_shift(::enterprise_management::DevicePowerPeakShiftProto* device_power_peak_shift) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_power_peak_shift_;
  }
  if (device_power_peak_shift) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_power_peak_shift);
    if (message_arena != submessage_arena) {
      device_power_peak_shift = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_power_peak_shift, submessage_arena);
    }
    _has_bits_[2] |= 0x00020000u;
  } else {
    _has_bits_[2] &= ~0x00020000u;
  }
  device_power_peak_shift_ = device_power_peak_shift;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_power_peak_shift)
}

// optional .enterprise_management.DeviceBootOnAcProto device_boot_on_ac = 84;
inline bool ChromeDeviceSettingsProto::_internal_has_device_boot_on_ac() const {
  bool value = (_has_bits_[2] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || device_boot_on_ac_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_device_boot_on_ac() const {
  return _internal_has_device_boot_on_ac();
}
inline void ChromeDeviceSettingsProto::clear_device_boot_on_ac() {
  if (device_boot_on_ac_ != nullptr) device_boot_on_ac_->Clear();
  _has_bits_[2] &= ~0x00040000u;
}
inline const ::enterprise_management::DeviceBootOnAcProto& ChromeDeviceSettingsProto::_internal_device_boot_on_ac() const {
  const ::enterprise_management::DeviceBootOnAcProto* p = device_boot_on_ac_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::DeviceBootOnAcProto*>(
      &::enterprise_management::_DeviceBootOnAcProto_default_instance_);
}
inline const ::enterprise_management::DeviceBootOnAcProto& ChromeDeviceSettingsProto::device_boot_on_ac() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.device_boot_on_ac)
  return _internal_device_boot_on_ac();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_device_boot_on_ac(
    ::enterprise_management::DeviceBootOnAcProto* device_boot_on_ac) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_boot_on_ac_);
  }
  device_boot_on_ac_ = device_boot_on_ac;
  if (device_boot_on_ac) {
    _has_bits_[2] |= 0x00040000u;
  } else {
    _has_bits_[2] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_boot_on_ac)
}
inline ::enterprise_management::DeviceBootOnAcProto* ChromeDeviceSettingsProto::release_device_boot_on_ac() {
  auto temp = unsafe_arena_release_device_boot_on_ac();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::DeviceBootOnAcProto* ChromeDeviceSettingsProto::unsafe_arena_release_device_boot_on_ac() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.device_boot_on_ac)
  _has_bits_[2] &= ~0x00040000u;
  ::enterprise_management::DeviceBootOnAcProto* temp = device_boot_on_ac_;
  device_boot_on_ac_ = nullptr;
  return temp;
}
inline ::enterprise_management::DeviceBootOnAcProto* ChromeDeviceSettingsProto::_internal_mutable_device_boot_on_ac() {
  _has_bits_[2] |= 0x00040000u;
  if (device_boot_on_ac_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::DeviceBootOnAcProto>(GetArena());
    device_boot_on_ac_ = p;
  }
  return device_boot_on_ac_;
}
inline ::enterprise_management::DeviceBootOnAcProto* ChromeDeviceSettingsProto::mutable_device_boot_on_ac() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.device_boot_on_ac)
  return _internal_mutable_device_boot_on_ac();
}
inline void ChromeDeviceSettingsProto::set_allocated_device_boot_on_ac(::enterprise_management::DeviceBootOnAcProto* device_boot_on_ac) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_boot_on_ac_;
  }
  if (device_boot_on_ac) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_boot_on_ac);
    if (message_arena != submessage_arena) {
      device_boot_on_ac = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_boot_on_ac, submessage_arena);
    }
    _has_bits_[2] |= 0x00040000u;
  } else {
    _has_bits_[2] &= ~0x00040000u;
  }
  device_boot_on_ac_ = device_boot_on_ac;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_boot_on_ac)
}

// optional .enterprise_management.DeviceDockMacAddressSourceProto device_dock_mac_address_source = 85;
inline bool ChromeDeviceSettingsProto::_internal_has_device_dock_mac_address_source() const {
  bool value = (_has_bits_[2] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || device_dock_mac_address_source_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_device_dock_mac_address_source() const {
  return _internal_has_device_dock_mac_address_source();
}
inline void ChromeDeviceSettingsProto::clear_device_dock_mac_address_source() {
  if (device_dock_mac_address_source_ != nullptr) device_dock_mac_address_source_->Clear();
  _has_bits_[2] &= ~0x00080000u;
}
inline const ::enterprise_management::DeviceDockMacAddressSourceProto& ChromeDeviceSettingsProto::_internal_device_dock_mac_address_source() const {
  const ::enterprise_management::DeviceDockMacAddressSourceProto* p = device_dock_mac_address_source_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::DeviceDockMacAddressSourceProto*>(
      &::enterprise_management::_DeviceDockMacAddressSourceProto_default_instance_);
}
inline const ::enterprise_management::DeviceDockMacAddressSourceProto& ChromeDeviceSettingsProto::device_dock_mac_address_source() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.device_dock_mac_address_source)
  return _internal_device_dock_mac_address_source();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_device_dock_mac_address_source(
    ::enterprise_management::DeviceDockMacAddressSourceProto* device_dock_mac_address_source) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_dock_mac_address_source_);
  }
  device_dock_mac_address_source_ = device_dock_mac_address_source;
  if (device_dock_mac_address_source) {
    _has_bits_[2] |= 0x00080000u;
  } else {
    _has_bits_[2] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_dock_mac_address_source)
}
inline ::enterprise_management::DeviceDockMacAddressSourceProto* ChromeDeviceSettingsProto::release_device_dock_mac_address_source() {
  auto temp = unsafe_arena_release_device_dock_mac_address_source();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::DeviceDockMacAddressSourceProto* ChromeDeviceSettingsProto::unsafe_arena_release_device_dock_mac_address_source() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.device_dock_mac_address_source)
  _has_bits_[2] &= ~0x00080000u;
  ::enterprise_management::DeviceDockMacAddressSourceProto* temp = device_dock_mac_address_source_;
  device_dock_mac_address_source_ = nullptr;
  return temp;
}
inline ::enterprise_management::DeviceDockMacAddressSourceProto* ChromeDeviceSettingsProto::_internal_mutable_device_dock_mac_address_source() {
  _has_bits_[2] |= 0x00080000u;
  if (device_dock_mac_address_source_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::DeviceDockMacAddressSourceProto>(GetArena());
    device_dock_mac_address_source_ = p;
  }
  return device_dock_mac_address_source_;
}
inline ::enterprise_management::DeviceDockMacAddressSourceProto* ChromeDeviceSettingsProto::mutable_device_dock_mac_address_source() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.device_dock_mac_address_source)
  return _internal_mutable_device_dock_mac_address_source();
}
inline void ChromeDeviceSettingsProto::set_allocated_device_dock_mac_address_source(::enterprise_management::DeviceDockMacAddressSourceProto* device_dock_mac_address_source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_dock_mac_address_source_;
  }
  if (device_dock_mac_address_source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_dock_mac_address_source);
    if (message_arena != submessage_arena) {
      device_dock_mac_address_source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_dock_mac_address_source, submessage_arena);
    }
    _has_bits_[2] |= 0x00080000u;
  } else {
    _has_bits_[2] &= ~0x00080000u;
  }
  device_dock_mac_address_source_ = device_dock_mac_address_source;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_dock_mac_address_source)
}

// optional .enterprise_management.DeviceAdvancedBatteryChargeModeProto device_advanced_battery_charge_mode = 86;
inline bool ChromeDeviceSettingsProto::_internal_has_device_advanced_battery_charge_mode() const {
  bool value = (_has_bits_[2] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || device_advanced_battery_charge_mode_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_device_advanced_battery_charge_mode() const {
  return _internal_has_device_advanced_battery_charge_mode();
}
inline void ChromeDeviceSettingsProto::clear_device_advanced_battery_charge_mode() {
  if (device_advanced_battery_charge_mode_ != nullptr) device_advanced_battery_charge_mode_->Clear();
  _has_bits_[2] &= ~0x00100000u;
}
inline const ::enterprise_management::DeviceAdvancedBatteryChargeModeProto& ChromeDeviceSettingsProto::_internal_device_advanced_battery_charge_mode() const {
  const ::enterprise_management::DeviceAdvancedBatteryChargeModeProto* p = device_advanced_battery_charge_mode_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::DeviceAdvancedBatteryChargeModeProto*>(
      &::enterprise_management::_DeviceAdvancedBatteryChargeModeProto_default_instance_);
}
inline const ::enterprise_management::DeviceAdvancedBatteryChargeModeProto& ChromeDeviceSettingsProto::device_advanced_battery_charge_mode() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.device_advanced_battery_charge_mode)
  return _internal_device_advanced_battery_charge_mode();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_device_advanced_battery_charge_mode(
    ::enterprise_management::DeviceAdvancedBatteryChargeModeProto* device_advanced_battery_charge_mode) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_advanced_battery_charge_mode_);
  }
  device_advanced_battery_charge_mode_ = device_advanced_battery_charge_mode;
  if (device_advanced_battery_charge_mode) {
    _has_bits_[2] |= 0x00100000u;
  } else {
    _has_bits_[2] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_advanced_battery_charge_mode)
}
inline ::enterprise_management::DeviceAdvancedBatteryChargeModeProto* ChromeDeviceSettingsProto::release_device_advanced_battery_charge_mode() {
  auto temp = unsafe_arena_release_device_advanced_battery_charge_mode();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::DeviceAdvancedBatteryChargeModeProto* ChromeDeviceSettingsProto::unsafe_arena_release_device_advanced_battery_charge_mode() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.device_advanced_battery_charge_mode)
  _has_bits_[2] &= ~0x00100000u;
  ::enterprise_management::DeviceAdvancedBatteryChargeModeProto* temp = device_advanced_battery_charge_mode_;
  device_advanced_battery_charge_mode_ = nullptr;
  return temp;
}
inline ::enterprise_management::DeviceAdvancedBatteryChargeModeProto* ChromeDeviceSettingsProto::_internal_mutable_device_advanced_battery_charge_mode() {
  _has_bits_[2] |= 0x00100000u;
  if (device_advanced_battery_charge_mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::DeviceAdvancedBatteryChargeModeProto>(GetArena());
    device_advanced_battery_charge_mode_ = p;
  }
  return device_advanced_battery_charge_mode_;
}
inline ::enterprise_management::DeviceAdvancedBatteryChargeModeProto* ChromeDeviceSettingsProto::mutable_device_advanced_battery_charge_mode() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.device_advanced_battery_charge_mode)
  return _internal_mutable_device_advanced_battery_charge_mode();
}
inline void ChromeDeviceSettingsProto::set_allocated_device_advanced_battery_charge_mode(::enterprise_management::DeviceAdvancedBatteryChargeModeProto* device_advanced_battery_charge_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_advanced_battery_charge_mode_;
  }
  if (device_advanced_battery_charge_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_advanced_battery_charge_mode);
    if (message_arena != submessage_arena) {
      device_advanced_battery_charge_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_advanced_battery_charge_mode, submessage_arena);
    }
    _has_bits_[2] |= 0x00100000u;
  } else {
    _has_bits_[2] &= ~0x00100000u;
  }
  device_advanced_battery_charge_mode_ = device_advanced_battery_charge_mode;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_advanced_battery_charge_mode)
}

// optional .enterprise_management.DeviceBatteryChargeModeProto device_battery_charge_mode = 87;
inline bool ChromeDeviceSettingsProto::_internal_has_device_battery_charge_mode() const {
  bool value = (_has_bits_[2] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || device_battery_charge_mode_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_device_battery_charge_mode() const {
  return _internal_has_device_battery_charge_mode();
}
inline void ChromeDeviceSettingsProto::clear_device_battery_charge_mode() {
  if (device_battery_charge_mode_ != nullptr) device_battery_charge_mode_->Clear();
  _has_bits_[2] &= ~0x00200000u;
}
inline const ::enterprise_management::DeviceBatteryChargeModeProto& ChromeDeviceSettingsProto::_internal_device_battery_charge_mode() const {
  const ::enterprise_management::DeviceBatteryChargeModeProto* p = device_battery_charge_mode_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::DeviceBatteryChargeModeProto*>(
      &::enterprise_management::_DeviceBatteryChargeModeProto_default_instance_);
}
inline const ::enterprise_management::DeviceBatteryChargeModeProto& ChromeDeviceSettingsProto::device_battery_charge_mode() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.device_battery_charge_mode)
  return _internal_device_battery_charge_mode();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_device_battery_charge_mode(
    ::enterprise_management::DeviceBatteryChargeModeProto* device_battery_charge_mode) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_battery_charge_mode_);
  }
  device_battery_charge_mode_ = device_battery_charge_mode;
  if (device_battery_charge_mode) {
    _has_bits_[2] |= 0x00200000u;
  } else {
    _has_bits_[2] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_battery_charge_mode)
}
inline ::enterprise_management::DeviceBatteryChargeModeProto* ChromeDeviceSettingsProto::release_device_battery_charge_mode() {
  auto temp = unsafe_arena_release_device_battery_charge_mode();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::DeviceBatteryChargeModeProto* ChromeDeviceSettingsProto::unsafe_arena_release_device_battery_charge_mode() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.device_battery_charge_mode)
  _has_bits_[2] &= ~0x00200000u;
  ::enterprise_management::DeviceBatteryChargeModeProto* temp = device_battery_charge_mode_;
  device_battery_charge_mode_ = nullptr;
  return temp;
}
inline ::enterprise_management::DeviceBatteryChargeModeProto* ChromeDeviceSettingsProto::_internal_mutable_device_battery_charge_mode() {
  _has_bits_[2] |= 0x00200000u;
  if (device_battery_charge_mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::DeviceBatteryChargeModeProto>(GetArena());
    device_battery_charge_mode_ = p;
  }
  return device_battery_charge_mode_;
}
inline ::enterprise_management::DeviceBatteryChargeModeProto* ChromeDeviceSettingsProto::mutable_device_battery_charge_mode() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.device_battery_charge_mode)
  return _internal_mutable_device_battery_charge_mode();
}
inline void ChromeDeviceSettingsProto::set_allocated_device_battery_charge_mode(::enterprise_management::DeviceBatteryChargeModeProto* device_battery_charge_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_battery_charge_mode_;
  }
  if (device_battery_charge_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_battery_charge_mode);
    if (message_arena != submessage_arena) {
      device_battery_charge_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_battery_charge_mode, submessage_arena);
    }
    _has_bits_[2] |= 0x00200000u;
  } else {
    _has_bits_[2] &= ~0x00200000u;
  }
  device_battery_charge_mode_ = device_battery_charge_mode;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_battery_charge_mode)
}

// optional .enterprise_management.DeviceUsbPowerShareProto device_usb_power_share = 88;
inline bool ChromeDeviceSettingsProto::_internal_has_device_usb_power_share() const {
  bool value = (_has_bits_[2] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || device_usb_power_share_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_device_usb_power_share() const {
  return _internal_has_device_usb_power_share();
}
inline void ChromeDeviceSettingsProto::clear_device_usb_power_share() {
  if (device_usb_power_share_ != nullptr) device_usb_power_share_->Clear();
  _has_bits_[2] &= ~0x00400000u;
}
inline const ::enterprise_management::DeviceUsbPowerShareProto& ChromeDeviceSettingsProto::_internal_device_usb_power_share() const {
  const ::enterprise_management::DeviceUsbPowerShareProto* p = device_usb_power_share_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::DeviceUsbPowerShareProto*>(
      &::enterprise_management::_DeviceUsbPowerShareProto_default_instance_);
}
inline const ::enterprise_management::DeviceUsbPowerShareProto& ChromeDeviceSettingsProto::device_usb_power_share() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.device_usb_power_share)
  return _internal_device_usb_power_share();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_device_usb_power_share(
    ::enterprise_management::DeviceUsbPowerShareProto* device_usb_power_share) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_usb_power_share_);
  }
  device_usb_power_share_ = device_usb_power_share;
  if (device_usb_power_share) {
    _has_bits_[2] |= 0x00400000u;
  } else {
    _has_bits_[2] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_usb_power_share)
}
inline ::enterprise_management::DeviceUsbPowerShareProto* ChromeDeviceSettingsProto::release_device_usb_power_share() {
  auto temp = unsafe_arena_release_device_usb_power_share();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::DeviceUsbPowerShareProto* ChromeDeviceSettingsProto::unsafe_arena_release_device_usb_power_share() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.device_usb_power_share)
  _has_bits_[2] &= ~0x00400000u;
  ::enterprise_management::DeviceUsbPowerShareProto* temp = device_usb_power_share_;
  device_usb_power_share_ = nullptr;
  return temp;
}
inline ::enterprise_management::DeviceUsbPowerShareProto* ChromeDeviceSettingsProto::_internal_mutable_device_usb_power_share() {
  _has_bits_[2] |= 0x00400000u;
  if (device_usb_power_share_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::DeviceUsbPowerShareProto>(GetArena());
    device_usb_power_share_ = p;
  }
  return device_usb_power_share_;
}
inline ::enterprise_management::DeviceUsbPowerShareProto* ChromeDeviceSettingsProto::mutable_device_usb_power_share() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.device_usb_power_share)
  return _internal_mutable_device_usb_power_share();
}
inline void ChromeDeviceSettingsProto::set_allocated_device_usb_power_share(::enterprise_management::DeviceUsbPowerShareProto* device_usb_power_share) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_usb_power_share_;
  }
  if (device_usb_power_share) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_usb_power_share);
    if (message_arena != submessage_arena) {
      device_usb_power_share = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_usb_power_share, submessage_arena);
    }
    _has_bits_[2] |= 0x00400000u;
  } else {
    _has_bits_[2] &= ~0x00400000u;
  }
  device_usb_power_share_ = device_usb_power_share;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_usb_power_share)
}

// optional .enterprise_management.DeviceScheduledUpdateCheckProto device_scheduled_update_check = 89;
inline bool ChromeDeviceSettingsProto::_internal_has_device_scheduled_update_check() const {
  bool value = (_has_bits_[2] & 0x00800000u) != 0;
  PROTOBUF_ASSUME(!value || device_scheduled_update_check_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_device_scheduled_update_check() const {
  return _internal_has_device_scheduled_update_check();
}
inline void ChromeDeviceSettingsProto::clear_device_scheduled_update_check() {
  if (device_scheduled_update_check_ != nullptr) device_scheduled_update_check_->Clear();
  _has_bits_[2] &= ~0x00800000u;
}
inline const ::enterprise_management::DeviceScheduledUpdateCheckProto& ChromeDeviceSettingsProto::_internal_device_scheduled_update_check() const {
  const ::enterprise_management::DeviceScheduledUpdateCheckProto* p = device_scheduled_update_check_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::DeviceScheduledUpdateCheckProto*>(
      &::enterprise_management::_DeviceScheduledUpdateCheckProto_default_instance_);
}
inline const ::enterprise_management::DeviceScheduledUpdateCheckProto& ChromeDeviceSettingsProto::device_scheduled_update_check() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.device_scheduled_update_check)
  return _internal_device_scheduled_update_check();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_device_scheduled_update_check(
    ::enterprise_management::DeviceScheduledUpdateCheckProto* device_scheduled_update_check) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_scheduled_update_check_);
  }
  device_scheduled_update_check_ = device_scheduled_update_check;
  if (device_scheduled_update_check) {
    _has_bits_[2] |= 0x00800000u;
  } else {
    _has_bits_[2] &= ~0x00800000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_scheduled_update_check)
}
inline ::enterprise_management::DeviceScheduledUpdateCheckProto* ChromeDeviceSettingsProto::release_device_scheduled_update_check() {
  auto temp = unsafe_arena_release_device_scheduled_update_check();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::DeviceScheduledUpdateCheckProto* ChromeDeviceSettingsProto::unsafe_arena_release_device_scheduled_update_check() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.device_scheduled_update_check)
  _has_bits_[2] &= ~0x00800000u;
  ::enterprise_management::DeviceScheduledUpdateCheckProto* temp = device_scheduled_update_check_;
  device_scheduled_update_check_ = nullptr;
  return temp;
}
inline ::enterprise_management::DeviceScheduledUpdateCheckProto* ChromeDeviceSettingsProto::_internal_mutable_device_scheduled_update_check() {
  _has_bits_[2] |= 0x00800000u;
  if (device_scheduled_update_check_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::DeviceScheduledUpdateCheckProto>(GetArena());
    device_scheduled_update_check_ = p;
  }
  return device_scheduled_update_check_;
}
inline ::enterprise_management::DeviceScheduledUpdateCheckProto* ChromeDeviceSettingsProto::mutable_device_scheduled_update_check() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.device_scheduled_update_check)
  return _internal_mutable_device_scheduled_update_check();
}
inline void ChromeDeviceSettingsProto::set_allocated_device_scheduled_update_check(::enterprise_management::DeviceScheduledUpdateCheckProto* device_scheduled_update_check) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_scheduled_update_check_;
  }
  if (device_scheduled_update_check) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_scheduled_update_check);
    if (message_arena != submessage_arena) {
      device_scheduled_update_check = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_scheduled_update_check, submessage_arena);
    }
    _has_bits_[2] |= 0x00800000u;
  } else {
    _has_bits_[2] &= ~0x00800000u;
  }
  device_scheduled_update_check_ = device_scheduled_update_check;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_scheduled_update_check)
}

// optional .enterprise_management.DevicePowerwashAllowedProto device_powerwash_allowed = 91;
inline bool ChromeDeviceSettingsProto::_internal_has_device_powerwash_allowed() const {
  bool value = (_has_bits_[2] & 0x01000000u) != 0;
  PROTOBUF_ASSUME(!value || device_powerwash_allowed_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_device_powerwash_allowed() const {
  return _internal_has_device_powerwash_allowed();
}
inline void ChromeDeviceSettingsProto::clear_device_powerwash_allowed() {
  if (device_powerwash_allowed_ != nullptr) device_powerwash_allowed_->Clear();
  _has_bits_[2] &= ~0x01000000u;
}
inline const ::enterprise_management::DevicePowerwashAllowedProto& ChromeDeviceSettingsProto::_internal_device_powerwash_allowed() const {
  const ::enterprise_management::DevicePowerwashAllowedProto* p = device_powerwash_allowed_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::DevicePowerwashAllowedProto*>(
      &::enterprise_management::_DevicePowerwashAllowedProto_default_instance_);
}
inline const ::enterprise_management::DevicePowerwashAllowedProto& ChromeDeviceSettingsProto::device_powerwash_allowed() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.device_powerwash_allowed)
  return _internal_device_powerwash_allowed();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_device_powerwash_allowed(
    ::enterprise_management::DevicePowerwashAllowedProto* device_powerwash_allowed) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_powerwash_allowed_);
  }
  device_powerwash_allowed_ = device_powerwash_allowed;
  if (device_powerwash_allowed) {
    _has_bits_[2] |= 0x01000000u;
  } else {
    _has_bits_[2] &= ~0x01000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_powerwash_allowed)
}
inline ::enterprise_management::DevicePowerwashAllowedProto* ChromeDeviceSettingsProto::release_device_powerwash_allowed() {
  auto temp = unsafe_arena_release_device_powerwash_allowed();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::DevicePowerwashAllowedProto* ChromeDeviceSettingsProto::unsafe_arena_release_device_powerwash_allowed() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.device_powerwash_allowed)
  _has_bits_[2] &= ~0x01000000u;
  ::enterprise_management::DevicePowerwashAllowedProto* temp = device_powerwash_allowed_;
  device_powerwash_allowed_ = nullptr;
  return temp;
}
inline ::enterprise_management::DevicePowerwashAllowedProto* ChromeDeviceSettingsProto::_internal_mutable_device_powerwash_allowed() {
  _has_bits_[2] |= 0x01000000u;
  if (device_powerwash_allowed_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::DevicePowerwashAllowedProto>(GetArena());
    device_powerwash_allowed_ = p;
  }
  return device_powerwash_allowed_;
}
inline ::enterprise_management::DevicePowerwashAllowedProto* ChromeDeviceSettingsProto::mutable_device_powerwash_allowed() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.device_powerwash_allowed)
  return _internal_mutable_device_powerwash_allowed();
}
inline void ChromeDeviceSettingsProto::set_allocated_device_powerwash_allowed(::enterprise_management::DevicePowerwashAllowedProto* device_powerwash_allowed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_powerwash_allowed_;
  }
  if (device_powerwash_allowed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_powerwash_allowed);
    if (message_arena != submessage_arena) {
      device_powerwash_allowed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_powerwash_allowed, submessage_arena);
    }
    _has_bits_[2] |= 0x01000000u;
  } else {
    _has_bits_[2] &= ~0x01000000u;
  }
  device_powerwash_allowed_ = device_powerwash_allowed;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_powerwash_allowed)
}

// optional .enterprise_management.DeviceLoginScreenWebUsbAllowDevicesForUrlsProto device_login_screen_webusb_allow_devices_for_urls = 92;
inline bool ChromeDeviceSettingsProto::_internal_has_device_login_screen_webusb_allow_devices_for_urls() const {
  bool value = (_has_bits_[2] & 0x02000000u) != 0;
  PROTOBUF_ASSUME(!value || device_login_screen_webusb_allow_devices_for_urls_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_device_login_screen_webusb_allow_devices_for_urls() const {
  return _internal_has_device_login_screen_webusb_allow_devices_for_urls();
}
inline void ChromeDeviceSettingsProto::clear_device_login_screen_webusb_allow_devices_for_urls() {
  if (device_login_screen_webusb_allow_devices_for_urls_ != nullptr) device_login_screen_webusb_allow_devices_for_urls_->Clear();
  _has_bits_[2] &= ~0x02000000u;
}
inline const ::enterprise_management::DeviceLoginScreenWebUsbAllowDevicesForUrlsProto& ChromeDeviceSettingsProto::_internal_device_login_screen_webusb_allow_devices_for_urls() const {
  const ::enterprise_management::DeviceLoginScreenWebUsbAllowDevicesForUrlsProto* p = device_login_screen_webusb_allow_devices_for_urls_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::DeviceLoginScreenWebUsbAllowDevicesForUrlsProto*>(
      &::enterprise_management::_DeviceLoginScreenWebUsbAllowDevicesForUrlsProto_default_instance_);
}
inline const ::enterprise_management::DeviceLoginScreenWebUsbAllowDevicesForUrlsProto& ChromeDeviceSettingsProto::device_login_screen_webusb_allow_devices_for_urls() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.device_login_screen_webusb_allow_devices_for_urls)
  return _internal_device_login_screen_webusb_allow_devices_for_urls();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_device_login_screen_webusb_allow_devices_for_urls(
    ::enterprise_management::DeviceLoginScreenWebUsbAllowDevicesForUrlsProto* device_login_screen_webusb_allow_devices_for_urls) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_login_screen_webusb_allow_devices_for_urls_);
  }
  device_login_screen_webusb_allow_devices_for_urls_ = device_login_screen_webusb_allow_devices_for_urls;
  if (device_login_screen_webusb_allow_devices_for_urls) {
    _has_bits_[2] |= 0x02000000u;
  } else {
    _has_bits_[2] &= ~0x02000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_login_screen_webusb_allow_devices_for_urls)
}
inline ::enterprise_management::DeviceLoginScreenWebUsbAllowDevicesForUrlsProto* ChromeDeviceSettingsProto::release_device_login_screen_webusb_allow_devices_for_urls() {
  auto temp = unsafe_arena_release_device_login_screen_webusb_allow_devices_for_urls();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::DeviceLoginScreenWebUsbAllowDevicesForUrlsProto* ChromeDeviceSettingsProto::unsafe_arena_release_device_login_screen_webusb_allow_devices_for_urls() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.device_login_screen_webusb_allow_devices_for_urls)
  _has_bits_[2] &= ~0x02000000u;
  ::enterprise_management::DeviceLoginScreenWebUsbAllowDevicesForUrlsProto* temp = device_login_screen_webusb_allow_devices_for_urls_;
  device_login_screen_webusb_allow_devices_for_urls_ = nullptr;
  return temp;
}
inline ::enterprise_management::DeviceLoginScreenWebUsbAllowDevicesForUrlsProto* ChromeDeviceSettingsProto::_internal_mutable_device_login_screen_webusb_allow_devices_for_urls() {
  _has_bits_[2] |= 0x02000000u;
  if (device_login_screen_webusb_allow_devices_for_urls_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::DeviceLoginScreenWebUsbAllowDevicesForUrlsProto>(GetArena());
    device_login_screen_webusb_allow_devices_for_urls_ = p;
  }
  return device_login_screen_webusb_allow_devices_for_urls_;
}
inline ::enterprise_management::DeviceLoginScreenWebUsbAllowDevicesForUrlsProto* ChromeDeviceSettingsProto::mutable_device_login_screen_webusb_allow_devices_for_urls() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.device_login_screen_webusb_allow_devices_for_urls)
  return _internal_mutable_device_login_screen_webusb_allow_devices_for_urls();
}
inline void ChromeDeviceSettingsProto::set_allocated_device_login_screen_webusb_allow_devices_for_urls(::enterprise_management::DeviceLoginScreenWebUsbAllowDevicesForUrlsProto* device_login_screen_webusb_allow_devices_for_urls) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_login_screen_webusb_allow_devices_for_urls_;
  }
  if (device_login_screen_webusb_allow_devices_for_urls) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_login_screen_webusb_allow_devices_for_urls);
    if (message_arena != submessage_arena) {
      device_login_screen_webusb_allow_devices_for_urls = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_login_screen_webusb_allow_devices_for_urls, submessage_arena);
    }
    _has_bits_[2] |= 0x02000000u;
  } else {
    _has_bits_[2] &= ~0x02000000u;
  }
  device_login_screen_webusb_allow_devices_for_urls_ = device_login_screen_webusb_allow_devices_for_urls;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_login_screen_webusb_allow_devices_for_urls)
}

// optional .enterprise_management.BooleanPolicyProto device_login_screen_system_info_enforced = 93;
inline bool ChromeDeviceSettingsProto::_internal_has_device_login_screen_system_info_enforced() const {
  bool value = (_has_bits_[2] & 0x04000000u) != 0;
  PROTOBUF_ASSUME(!value || device_login_screen_system_info_enforced_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_device_login_screen_system_info_enforced() const {
  return _internal_has_device_login_screen_system_info_enforced();
}
inline const ::enterprise_management::BooleanPolicyProto& ChromeDeviceSettingsProto::_internal_device_login_screen_system_info_enforced() const {
  const ::enterprise_management::BooleanPolicyProto* p = device_login_screen_system_info_enforced_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::BooleanPolicyProto*>(
      &::enterprise_management::_BooleanPolicyProto_default_instance_);
}
inline const ::enterprise_management::BooleanPolicyProto& ChromeDeviceSettingsProto::device_login_screen_system_info_enforced() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.device_login_screen_system_info_enforced)
  return _internal_device_login_screen_system_info_enforced();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_device_login_screen_system_info_enforced(
    ::enterprise_management::BooleanPolicyProto* device_login_screen_system_info_enforced) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_login_screen_system_info_enforced_);
  }
  device_login_screen_system_info_enforced_ = device_login_screen_system_info_enforced;
  if (device_login_screen_system_info_enforced) {
    _has_bits_[2] |= 0x04000000u;
  } else {
    _has_bits_[2] &= ~0x04000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_login_screen_system_info_enforced)
}
inline ::enterprise_management::BooleanPolicyProto* ChromeDeviceSettingsProto::release_device_login_screen_system_info_enforced() {
  auto temp = unsafe_arena_release_device_login_screen_system_info_enforced();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::BooleanPolicyProto* ChromeDeviceSettingsProto::unsafe_arena_release_device_login_screen_system_info_enforced() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.device_login_screen_system_info_enforced)
  _has_bits_[2] &= ~0x04000000u;
  ::enterprise_management::BooleanPolicyProto* temp = device_login_screen_system_info_enforced_;
  device_login_screen_system_info_enforced_ = nullptr;
  return temp;
}
inline ::enterprise_management::BooleanPolicyProto* ChromeDeviceSettingsProto::_internal_mutable_device_login_screen_system_info_enforced() {
  _has_bits_[2] |= 0x04000000u;
  if (device_login_screen_system_info_enforced_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::BooleanPolicyProto>(GetArena());
    device_login_screen_system_info_enforced_ = p;
  }
  return device_login_screen_system_info_enforced_;
}
inline ::enterprise_management::BooleanPolicyProto* ChromeDeviceSettingsProto::mutable_device_login_screen_system_info_enforced() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.device_login_screen_system_info_enforced)
  return _internal_mutable_device_login_screen_system_info_enforced();
}
inline void ChromeDeviceSettingsProto::set_allocated_device_login_screen_system_info_enforced(::enterprise_management::BooleanPolicyProto* device_login_screen_system_info_enforced) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_login_screen_system_info_enforced_);
  }
  if (device_login_screen_system_info_enforced) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_login_screen_system_info_enforced)->GetArena();
    if (message_arena != submessage_arena) {
      device_login_screen_system_info_enforced = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_login_screen_system_info_enforced, submessage_arena);
    }
    _has_bits_[2] |= 0x04000000u;
  } else {
    _has_bits_[2] &= ~0x04000000u;
  }
  device_login_screen_system_info_enforced_ = device_login_screen_system_info_enforced;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_login_screen_system_info_enforced)
}

// optional .enterprise_management.StringListPolicyProto device_web_based_attestation_allowed_urls = 94;
inline bool ChromeDeviceSettingsProto::_internal_has_device_web_based_attestation_allowed_urls() const {
  bool value = (_has_bits_[2] & 0x08000000u) != 0;
  PROTOBUF_ASSUME(!value || device_web_based_attestation_allowed_urls_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_device_web_based_attestation_allowed_urls() const {
  return _internal_has_device_web_based_attestation_allowed_urls();
}
inline const ::enterprise_management::StringListPolicyProto& ChromeDeviceSettingsProto::_internal_device_web_based_attestation_allowed_urls() const {
  const ::enterprise_management::StringListPolicyProto* p = device_web_based_attestation_allowed_urls_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::StringListPolicyProto*>(
      &::enterprise_management::_StringListPolicyProto_default_instance_);
}
inline const ::enterprise_management::StringListPolicyProto& ChromeDeviceSettingsProto::device_web_based_attestation_allowed_urls() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.device_web_based_attestation_allowed_urls)
  return _internal_device_web_based_attestation_allowed_urls();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_device_web_based_attestation_allowed_urls(
    ::enterprise_management::StringListPolicyProto* device_web_based_attestation_allowed_urls) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_web_based_attestation_allowed_urls_);
  }
  device_web_based_attestation_allowed_urls_ = device_web_based_attestation_allowed_urls;
  if (device_web_based_attestation_allowed_urls) {
    _has_bits_[2] |= 0x08000000u;
  } else {
    _has_bits_[2] &= ~0x08000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_web_based_attestation_allowed_urls)
}
inline ::enterprise_management::StringListPolicyProto* ChromeDeviceSettingsProto::release_device_web_based_attestation_allowed_urls() {
  auto temp = unsafe_arena_release_device_web_based_attestation_allowed_urls();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::StringListPolicyProto* ChromeDeviceSettingsProto::unsafe_arena_release_device_web_based_attestation_allowed_urls() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.device_web_based_attestation_allowed_urls)
  _has_bits_[2] &= ~0x08000000u;
  ::enterprise_management::StringListPolicyProto* temp = device_web_based_attestation_allowed_urls_;
  device_web_based_attestation_allowed_urls_ = nullptr;
  return temp;
}
inline ::enterprise_management::StringListPolicyProto* ChromeDeviceSettingsProto::_internal_mutable_device_web_based_attestation_allowed_urls() {
  _has_bits_[2] |= 0x08000000u;
  if (device_web_based_attestation_allowed_urls_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::StringListPolicyProto>(GetArena());
    device_web_based_attestation_allowed_urls_ = p;
  }
  return device_web_based_attestation_allowed_urls_;
}
inline ::enterprise_management::StringListPolicyProto* ChromeDeviceSettingsProto::mutable_device_web_based_attestation_allowed_urls() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.device_web_based_attestation_allowed_urls)
  return _internal_mutable_device_web_based_attestation_allowed_urls();
}
inline void ChromeDeviceSettingsProto::set_allocated_device_web_based_attestation_allowed_urls(::enterprise_management::StringListPolicyProto* device_web_based_attestation_allowed_urls) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_web_based_attestation_allowed_urls_);
  }
  if (device_web_based_attestation_allowed_urls) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_web_based_attestation_allowed_urls)->GetArena();
    if (message_arena != submessage_arena) {
      device_web_based_attestation_allowed_urls = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_web_based_attestation_allowed_urls, submessage_arena);
    }
    _has_bits_[2] |= 0x08000000u;
  } else {
    _has_bits_[2] &= ~0x08000000u;
  }
  device_web_based_attestation_allowed_urls_ = device_web_based_attestation_allowed_urls;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_web_based_attestation_allowed_urls)
}

// optional .enterprise_management.BooleanPolicyProto device_show_numeric_keyboard_for_password = 95;
inline bool ChromeDeviceSettingsProto::_internal_has_device_show_numeric_keyboard_for_password() const {
  bool value = (_has_bits_[2] & 0x10000000u) != 0;
  PROTOBUF_ASSUME(!value || device_show_numeric_keyboard_for_password_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_device_show_numeric_keyboard_for_password() const {
  return _internal_has_device_show_numeric_keyboard_for_password();
}
inline const ::enterprise_management::BooleanPolicyProto& ChromeDeviceSettingsProto::_internal_device_show_numeric_keyboard_for_password() const {
  const ::enterprise_management::BooleanPolicyProto* p = device_show_numeric_keyboard_for_password_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::BooleanPolicyProto*>(
      &::enterprise_management::_BooleanPolicyProto_default_instance_);
}
inline const ::enterprise_management::BooleanPolicyProto& ChromeDeviceSettingsProto::device_show_numeric_keyboard_for_password() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.device_show_numeric_keyboard_for_password)
  return _internal_device_show_numeric_keyboard_for_password();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_device_show_numeric_keyboard_for_password(
    ::enterprise_management::BooleanPolicyProto* device_show_numeric_keyboard_for_password) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_show_numeric_keyboard_for_password_);
  }
  device_show_numeric_keyboard_for_password_ = device_show_numeric_keyboard_for_password;
  if (device_show_numeric_keyboard_for_password) {
    _has_bits_[2] |= 0x10000000u;
  } else {
    _has_bits_[2] &= ~0x10000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_show_numeric_keyboard_for_password)
}
inline ::enterprise_management::BooleanPolicyProto* ChromeDeviceSettingsProto::release_device_show_numeric_keyboard_for_password() {
  auto temp = unsafe_arena_release_device_show_numeric_keyboard_for_password();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::BooleanPolicyProto* ChromeDeviceSettingsProto::unsafe_arena_release_device_show_numeric_keyboard_for_password() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.device_show_numeric_keyboard_for_password)
  _has_bits_[2] &= ~0x10000000u;
  ::enterprise_management::BooleanPolicyProto* temp = device_show_numeric_keyboard_for_password_;
  device_show_numeric_keyboard_for_password_ = nullptr;
  return temp;
}
inline ::enterprise_management::BooleanPolicyProto* ChromeDeviceSettingsProto::_internal_mutable_device_show_numeric_keyboard_for_password() {
  _has_bits_[2] |= 0x10000000u;
  if (device_show_numeric_keyboard_for_password_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::BooleanPolicyProto>(GetArena());
    device_show_numeric_keyboard_for_password_ = p;
  }
  return device_show_numeric_keyboard_for_password_;
}
inline ::enterprise_management::BooleanPolicyProto* ChromeDeviceSettingsProto::mutable_device_show_numeric_keyboard_for_password() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.device_show_numeric_keyboard_for_password)
  return _internal_mutable_device_show_numeric_keyboard_for_password();
}
inline void ChromeDeviceSettingsProto::set_allocated_device_show_numeric_keyboard_for_password(::enterprise_management::BooleanPolicyProto* device_show_numeric_keyboard_for_password) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_show_numeric_keyboard_for_password_);
  }
  if (device_show_numeric_keyboard_for_password) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_show_numeric_keyboard_for_password)->GetArena();
    if (message_arena != submessage_arena) {
      device_show_numeric_keyboard_for_password = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_show_numeric_keyboard_for_password, submessage_arena);
    }
    _has_bits_[2] |= 0x10000000u;
  } else {
    _has_bits_[2] &= ~0x10000000u;
  }
  device_show_numeric_keyboard_for_password_ = device_show_numeric_keyboard_for_password;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_show_numeric_keyboard_for_password)
}

// optional .enterprise_management.BooleanPolicyProto login_screen_primary_mouse_button_switch = 96;
inline bool ChromeDeviceSettingsProto::_internal_has_login_screen_primary_mouse_button_switch() const {
  bool value = (_has_bits_[2] & 0x20000000u) != 0;
  PROTOBUF_ASSUME(!value || login_screen_primary_mouse_button_switch_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_login_screen_primary_mouse_button_switch() const {
  return _internal_has_login_screen_primary_mouse_button_switch();
}
inline const ::enterprise_management::BooleanPolicyProto& ChromeDeviceSettingsProto::_internal_login_screen_primary_mouse_button_switch() const {
  const ::enterprise_management::BooleanPolicyProto* p = login_screen_primary_mouse_button_switch_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::BooleanPolicyProto*>(
      &::enterprise_management::_BooleanPolicyProto_default_instance_);
}
inline const ::enterprise_management::BooleanPolicyProto& ChromeDeviceSettingsProto::login_screen_primary_mouse_button_switch() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.login_screen_primary_mouse_button_switch)
  return _internal_login_screen_primary_mouse_button_switch();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_login_screen_primary_mouse_button_switch(
    ::enterprise_management::BooleanPolicyProto* login_screen_primary_mouse_button_switch) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_primary_mouse_button_switch_);
  }
  login_screen_primary_mouse_button_switch_ = login_screen_primary_mouse_button_switch;
  if (login_screen_primary_mouse_button_switch) {
    _has_bits_[2] |= 0x20000000u;
  } else {
    _has_bits_[2] &= ~0x20000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.login_screen_primary_mouse_button_switch)
}
inline ::enterprise_management::BooleanPolicyProto* ChromeDeviceSettingsProto::release_login_screen_primary_mouse_button_switch() {
  auto temp = unsafe_arena_release_login_screen_primary_mouse_button_switch();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::BooleanPolicyProto* ChromeDeviceSettingsProto::unsafe_arena_release_login_screen_primary_mouse_button_switch() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.login_screen_primary_mouse_button_switch)
  _has_bits_[2] &= ~0x20000000u;
  ::enterprise_management::BooleanPolicyProto* temp = login_screen_primary_mouse_button_switch_;
  login_screen_primary_mouse_button_switch_ = nullptr;
  return temp;
}
inline ::enterprise_management::BooleanPolicyProto* ChromeDeviceSettingsProto::_internal_mutable_login_screen_primary_mouse_button_switch() {
  _has_bits_[2] |= 0x20000000u;
  if (login_screen_primary_mouse_button_switch_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::BooleanPolicyProto>(GetArena());
    login_screen_primary_mouse_button_switch_ = p;
  }
  return login_screen_primary_mouse_button_switch_;
}
inline ::enterprise_management::BooleanPolicyProto* ChromeDeviceSettingsProto::mutable_login_screen_primary_mouse_button_switch() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.login_screen_primary_mouse_button_switch)
  return _internal_mutable_login_screen_primary_mouse_button_switch();
}
inline void ChromeDeviceSettingsProto::set_allocated_login_screen_primary_mouse_button_switch(::enterprise_management::BooleanPolicyProto* login_screen_primary_mouse_button_switch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_primary_mouse_button_switch_);
  }
  if (login_screen_primary_mouse_button_switch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_screen_primary_mouse_button_switch)->GetArena();
    if (message_arena != submessage_arena) {
      login_screen_primary_mouse_button_switch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_screen_primary_mouse_button_switch, submessage_arena);
    }
    _has_bits_[2] |= 0x20000000u;
  } else {
    _has_bits_[2] &= ~0x20000000u;
  }
  login_screen_primary_mouse_button_switch_ = login_screen_primary_mouse_button_switch;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.login_screen_primary_mouse_button_switch)
}

// optional .enterprise_management.StringPolicyProto minimum_chrome_version_enforced = 97;
inline bool ChromeDeviceSettingsProto::_internal_has_minimum_chrome_version_enforced() const {
  bool value = (_has_bits_[2] & 0x40000000u) != 0;
  PROTOBUF_ASSUME(!value || minimum_chrome_version_enforced_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_minimum_chrome_version_enforced() const {
  return _internal_has_minimum_chrome_version_enforced();
}
inline const ::enterprise_management::StringPolicyProto& ChromeDeviceSettingsProto::_internal_minimum_chrome_version_enforced() const {
  const ::enterprise_management::StringPolicyProto* p = minimum_chrome_version_enforced_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::StringPolicyProto*>(
      &::enterprise_management::_StringPolicyProto_default_instance_);
}
inline const ::enterprise_management::StringPolicyProto& ChromeDeviceSettingsProto::minimum_chrome_version_enforced() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.minimum_chrome_version_enforced)
  return _internal_minimum_chrome_version_enforced();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_minimum_chrome_version_enforced(
    ::enterprise_management::StringPolicyProto* minimum_chrome_version_enforced) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(minimum_chrome_version_enforced_);
  }
  minimum_chrome_version_enforced_ = minimum_chrome_version_enforced;
  if (minimum_chrome_version_enforced) {
    _has_bits_[2] |= 0x40000000u;
  } else {
    _has_bits_[2] &= ~0x40000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.minimum_chrome_version_enforced)
}
inline ::enterprise_management::StringPolicyProto* ChromeDeviceSettingsProto::release_minimum_chrome_version_enforced() {
  auto temp = unsafe_arena_release_minimum_chrome_version_enforced();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::StringPolicyProto* ChromeDeviceSettingsProto::unsafe_arena_release_minimum_chrome_version_enforced() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.minimum_chrome_version_enforced)
  _has_bits_[2] &= ~0x40000000u;
  ::enterprise_management::StringPolicyProto* temp = minimum_chrome_version_enforced_;
  minimum_chrome_version_enforced_ = nullptr;
  return temp;
}
inline ::enterprise_management::StringPolicyProto* ChromeDeviceSettingsProto::_internal_mutable_minimum_chrome_version_enforced() {
  _has_bits_[2] |= 0x40000000u;
  if (minimum_chrome_version_enforced_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::StringPolicyProto>(GetArena());
    minimum_chrome_version_enforced_ = p;
  }
  return minimum_chrome_version_enforced_;
}
inline ::enterprise_management::StringPolicyProto* ChromeDeviceSettingsProto::mutable_minimum_chrome_version_enforced() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.minimum_chrome_version_enforced)
  return _internal_mutable_minimum_chrome_version_enforced();
}
inline void ChromeDeviceSettingsProto::set_allocated_minimum_chrome_version_enforced(::enterprise_management::StringPolicyProto* minimum_chrome_version_enforced) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(minimum_chrome_version_enforced_);
  }
  if (minimum_chrome_version_enforced) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(minimum_chrome_version_enforced)->GetArena();
    if (message_arena != submessage_arena) {
      minimum_chrome_version_enforced = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, minimum_chrome_version_enforced, submessage_arena);
    }
    _has_bits_[2] |= 0x40000000u;
  } else {
    _has_bits_[2] &= ~0x40000000u;
  }
  minimum_chrome_version_enforced_ = minimum_chrome_version_enforced;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.minimum_chrome_version_enforced)
}

// optional .enterprise_management.SystemProxySettingsProto system_proxy_settings = 98;
inline bool ChromeDeviceSettingsProto::_internal_has_system_proxy_settings() const {
  bool value = (_has_bits_[2] & 0x80000000u) != 0;
  PROTOBUF_ASSUME(!value || system_proxy_settings_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_system_proxy_settings() const {
  return _internal_has_system_proxy_settings();
}
inline void ChromeDeviceSettingsProto::clear_system_proxy_settings() {
  if (system_proxy_settings_ != nullptr) system_proxy_settings_->Clear();
  _has_bits_[2] &= ~0x80000000u;
}
inline const ::enterprise_management::SystemProxySettingsProto& ChromeDeviceSettingsProto::_internal_system_proxy_settings() const {
  const ::enterprise_management::SystemProxySettingsProto* p = system_proxy_settings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::SystemProxySettingsProto*>(
      &::enterprise_management::_SystemProxySettingsProto_default_instance_);
}
inline const ::enterprise_management::SystemProxySettingsProto& ChromeDeviceSettingsProto::system_proxy_settings() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.system_proxy_settings)
  return _internal_system_proxy_settings();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_system_proxy_settings(
    ::enterprise_management::SystemProxySettingsProto* system_proxy_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(system_proxy_settings_);
  }
  system_proxy_settings_ = system_proxy_settings;
  if (system_proxy_settings) {
    _has_bits_[2] |= 0x80000000u;
  } else {
    _has_bits_[2] &= ~0x80000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.system_proxy_settings)
}
inline ::enterprise_management::SystemProxySettingsProto* ChromeDeviceSettingsProto::release_system_proxy_settings() {
  auto temp = unsafe_arena_release_system_proxy_settings();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::SystemProxySettingsProto* ChromeDeviceSettingsProto::unsafe_arena_release_system_proxy_settings() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.system_proxy_settings)
  _has_bits_[2] &= ~0x80000000u;
  ::enterprise_management::SystemProxySettingsProto* temp = system_proxy_settings_;
  system_proxy_settings_ = nullptr;
  return temp;
}
inline ::enterprise_management::SystemProxySettingsProto* ChromeDeviceSettingsProto::_internal_mutable_system_proxy_settings() {
  _has_bits_[2] |= 0x80000000u;
  if (system_proxy_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::SystemProxySettingsProto>(GetArena());
    system_proxy_settings_ = p;
  }
  return system_proxy_settings_;
}
inline ::enterprise_management::SystemProxySettingsProto* ChromeDeviceSettingsProto::mutable_system_proxy_settings() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.system_proxy_settings)
  return _internal_mutable_system_proxy_settings();
}
inline void ChromeDeviceSettingsProto::set_allocated_system_proxy_settings(::enterprise_management::SystemProxySettingsProto* system_proxy_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete system_proxy_settings_;
  }
  if (system_proxy_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(system_proxy_settings);
    if (message_arena != submessage_arena) {
      system_proxy_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, system_proxy_settings, submessage_arena);
    }
    _has_bits_[2] |= 0x80000000u;
  } else {
    _has_bits_[2] &= ~0x80000000u;
  }
  system_proxy_settings_ = system_proxy_settings;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.system_proxy_settings)
}

// optional .enterprise_management.IntegerPolicyProto device_chrome_variations_type = 99;
inline bool ChromeDeviceSettingsProto::_internal_has_device_chrome_variations_type() const {
  bool value = (_has_bits_[3] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || device_chrome_variations_type_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_device_chrome_variations_type() const {
  return _internal_has_device_chrome_variations_type();
}
inline const ::enterprise_management::IntegerPolicyProto& ChromeDeviceSettingsProto::_internal_device_chrome_variations_type() const {
  const ::enterprise_management::IntegerPolicyProto* p = device_chrome_variations_type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::IntegerPolicyProto*>(
      &::enterprise_management::_IntegerPolicyProto_default_instance_);
}
inline const ::enterprise_management::IntegerPolicyProto& ChromeDeviceSettingsProto::device_chrome_variations_type() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.device_chrome_variations_type)
  return _internal_device_chrome_variations_type();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_device_chrome_variations_type(
    ::enterprise_management::IntegerPolicyProto* device_chrome_variations_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_chrome_variations_type_);
  }
  device_chrome_variations_type_ = device_chrome_variations_type;
  if (device_chrome_variations_type) {
    _has_bits_[3] |= 0x00000001u;
  } else {
    _has_bits_[3] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_chrome_variations_type)
}
inline ::enterprise_management::IntegerPolicyProto* ChromeDeviceSettingsProto::release_device_chrome_variations_type() {
  auto temp = unsafe_arena_release_device_chrome_variations_type();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::IntegerPolicyProto* ChromeDeviceSettingsProto::unsafe_arena_release_device_chrome_variations_type() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.device_chrome_variations_type)
  _has_bits_[3] &= ~0x00000001u;
  ::enterprise_management::IntegerPolicyProto* temp = device_chrome_variations_type_;
  device_chrome_variations_type_ = nullptr;
  return temp;
}
inline ::enterprise_management::IntegerPolicyProto* ChromeDeviceSettingsProto::_internal_mutable_device_chrome_variations_type() {
  _has_bits_[3] |= 0x00000001u;
  if (device_chrome_variations_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::IntegerPolicyProto>(GetArena());
    device_chrome_variations_type_ = p;
  }
  return device_chrome_variations_type_;
}
inline ::enterprise_management::IntegerPolicyProto* ChromeDeviceSettingsProto::mutable_device_chrome_variations_type() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.device_chrome_variations_type)
  return _internal_mutable_device_chrome_variations_type();
}
inline void ChromeDeviceSettingsProto::set_allocated_device_chrome_variations_type(::enterprise_management::IntegerPolicyProto* device_chrome_variations_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_chrome_variations_type_);
  }
  if (device_chrome_variations_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_chrome_variations_type)->GetArena();
    if (message_arena != submessage_arena) {
      device_chrome_variations_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_chrome_variations_type, submessage_arena);
    }
    _has_bits_[3] |= 0x00000001u;
  } else {
    _has_bits_[3] &= ~0x00000001u;
  }
  device_chrome_variations_type_ = device_chrome_variations_type;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_chrome_variations_type)
}

// optional .enterprise_management.DeviceLoginScreenPrivacyScreenEnabledProto device_login_screen_privacy_screen_enabled = 100;
inline bool ChromeDeviceSettingsProto::_internal_has_device_login_screen_privacy_screen_enabled() const {
  bool value = (_has_bits_[3] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || device_login_screen_privacy_screen_enabled_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_device_login_screen_privacy_screen_enabled() const {
  return _internal_has_device_login_screen_privacy_screen_enabled();
}
inline void ChromeDeviceSettingsProto::clear_device_login_screen_privacy_screen_enabled() {
  if (device_login_screen_privacy_screen_enabled_ != nullptr) device_login_screen_privacy_screen_enabled_->Clear();
  _has_bits_[3] &= ~0x00000002u;
}
inline const ::enterprise_management::DeviceLoginScreenPrivacyScreenEnabledProto& ChromeDeviceSettingsProto::_internal_device_login_screen_privacy_screen_enabled() const {
  const ::enterprise_management::DeviceLoginScreenPrivacyScreenEnabledProto* p = device_login_screen_privacy_screen_enabled_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::DeviceLoginScreenPrivacyScreenEnabledProto*>(
      &::enterprise_management::_DeviceLoginScreenPrivacyScreenEnabledProto_default_instance_);
}
inline const ::enterprise_management::DeviceLoginScreenPrivacyScreenEnabledProto& ChromeDeviceSettingsProto::device_login_screen_privacy_screen_enabled() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.device_login_screen_privacy_screen_enabled)
  return _internal_device_login_screen_privacy_screen_enabled();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_device_login_screen_privacy_screen_enabled(
    ::enterprise_management::DeviceLoginScreenPrivacyScreenEnabledProto* device_login_screen_privacy_screen_enabled) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_login_screen_privacy_screen_enabled_);
  }
  device_login_screen_privacy_screen_enabled_ = device_login_screen_privacy_screen_enabled;
  if (device_login_screen_privacy_screen_enabled) {
    _has_bits_[3] |= 0x00000002u;
  } else {
    _has_bits_[3] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_login_screen_privacy_screen_enabled)
}
inline ::enterprise_management::DeviceLoginScreenPrivacyScreenEnabledProto* ChromeDeviceSettingsProto::release_device_login_screen_privacy_screen_enabled() {
  auto temp = unsafe_arena_release_device_login_screen_privacy_screen_enabled();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::DeviceLoginScreenPrivacyScreenEnabledProto* ChromeDeviceSettingsProto::unsafe_arena_release_device_login_screen_privacy_screen_enabled() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.device_login_screen_privacy_screen_enabled)
  _has_bits_[3] &= ~0x00000002u;
  ::enterprise_management::DeviceLoginScreenPrivacyScreenEnabledProto* temp = device_login_screen_privacy_screen_enabled_;
  device_login_screen_privacy_screen_enabled_ = nullptr;
  return temp;
}
inline ::enterprise_management::DeviceLoginScreenPrivacyScreenEnabledProto* ChromeDeviceSettingsProto::_internal_mutable_device_login_screen_privacy_screen_enabled() {
  _has_bits_[3] |= 0x00000002u;
  if (device_login_screen_privacy_screen_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::DeviceLoginScreenPrivacyScreenEnabledProto>(GetArena());
    device_login_screen_privacy_screen_enabled_ = p;
  }
  return device_login_screen_privacy_screen_enabled_;
}
inline ::enterprise_management::DeviceLoginScreenPrivacyScreenEnabledProto* ChromeDeviceSettingsProto::mutable_device_login_screen_privacy_screen_enabled() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.device_login_screen_privacy_screen_enabled)
  return _internal_mutable_device_login_screen_privacy_screen_enabled();
}
inline void ChromeDeviceSettingsProto::set_allocated_device_login_screen_privacy_screen_enabled(::enterprise_management::DeviceLoginScreenPrivacyScreenEnabledProto* device_login_screen_privacy_screen_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_login_screen_privacy_screen_enabled_;
  }
  if (device_login_screen_privacy_screen_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_login_screen_privacy_screen_enabled);
    if (message_arena != submessage_arena) {
      device_login_screen_privacy_screen_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_login_screen_privacy_screen_enabled, submessage_arena);
    }
    _has_bits_[3] |= 0x00000002u;
  } else {
    _has_bits_[3] &= ~0x00000002u;
  }
  device_login_screen_privacy_screen_enabled_ = device_login_screen_privacy_screen_enabled;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.device_login_screen_privacy_screen_enabled)
}

// optional .enterprise_management.RequiredClientCertificateForDeviceProto required_client_certificate_for_device = 101;
inline bool ChromeDeviceSettingsProto::_internal_has_required_client_certificate_for_device() const {
  bool value = (_has_bits_[3] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || required_client_certificate_for_device_ != nullptr);
  return value;
}
inline bool ChromeDeviceSettingsProto::has_required_client_certificate_for_device() const {
  return _internal_has_required_client_certificate_for_device();
}
inline void ChromeDeviceSettingsProto::clear_required_client_certificate_for_device() {
  if (required_client_certificate_for_device_ != nullptr) required_client_certificate_for_device_->Clear();
  _has_bits_[3] &= ~0x00000004u;
}
inline const ::enterprise_management::RequiredClientCertificateForDeviceProto& ChromeDeviceSettingsProto::_internal_required_client_certificate_for_device() const {
  const ::enterprise_management::RequiredClientCertificateForDeviceProto* p = required_client_certificate_for_device_;
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_management::RequiredClientCertificateForDeviceProto*>(
      &::enterprise_management::_RequiredClientCertificateForDeviceProto_default_instance_);
}
inline const ::enterprise_management::RequiredClientCertificateForDeviceProto& ChromeDeviceSettingsProto::required_client_certificate_for_device() const {
  // @@protoc_insertion_point(field_get:enterprise_management.ChromeDeviceSettingsProto.required_client_certificate_for_device)
  return _internal_required_client_certificate_for_device();
}
inline void ChromeDeviceSettingsProto::unsafe_arena_set_allocated_required_client_certificate_for_device(
    ::enterprise_management::RequiredClientCertificateForDeviceProto* required_client_certificate_for_device) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(required_client_certificate_for_device_);
  }
  required_client_certificate_for_device_ = required_client_certificate_for_device;
  if (required_client_certificate_for_device) {
    _has_bits_[3] |= 0x00000004u;
  } else {
    _has_bits_[3] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_management.ChromeDeviceSettingsProto.required_client_certificate_for_device)
}
inline ::enterprise_management::RequiredClientCertificateForDeviceProto* ChromeDeviceSettingsProto::release_required_client_certificate_for_device() {
  auto temp = unsafe_arena_release_required_client_certificate_for_device();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::enterprise_management::RequiredClientCertificateForDeviceProto* ChromeDeviceSettingsProto::unsafe_arena_release_required_client_certificate_for_device() {
  // @@protoc_insertion_point(field_release:enterprise_management.ChromeDeviceSettingsProto.required_client_certificate_for_device)
  _has_bits_[3] &= ~0x00000004u;
  ::enterprise_management::RequiredClientCertificateForDeviceProto* temp = required_client_certificate_for_device_;
  required_client_certificate_for_device_ = nullptr;
  return temp;
}
inline ::enterprise_management::RequiredClientCertificateForDeviceProto* ChromeDeviceSettingsProto::_internal_mutable_required_client_certificate_for_device() {
  _has_bits_[3] |= 0x00000004u;
  if (required_client_certificate_for_device_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_management::RequiredClientCertificateForDeviceProto>(GetArena());
    required_client_certificate_for_device_ = p;
  }
  return required_client_certificate_for_device_;
}
inline ::enterprise_management::RequiredClientCertificateForDeviceProto* ChromeDeviceSettingsProto::mutable_required_client_certificate_for_device() {
  // @@protoc_insertion_point(field_mutable:enterprise_management.ChromeDeviceSettingsProto.required_client_certificate_for_device)
  return _internal_mutable_required_client_certificate_for_device();
}
inline void ChromeDeviceSettingsProto::set_allocated_required_client_certificate_for_device(::enterprise_management::RequiredClientCertificateForDeviceProto* required_client_certificate_for_device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete required_client_certificate_for_device_;
  }
  if (required_client_certificate_for_device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(required_client_certificate_for_device);
    if (message_arena != submessage_arena) {
      required_client_certificate_for_device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, required_client_certificate_for_device, submessage_arena);
    }
    _has_bits_[3] |= 0x00000004u;
  } else {
    _has_bits_[3] &= ~0x00000004u;
  }
  required_client_certificate_for_device_ = required_client_certificate_for_device;
  // @@protoc_insertion_point(field_set_allocated:enterprise_management.ChromeDeviceSettingsProto.required_client_certificate_for_device)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace enterprise_management

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::enterprise_management::AutoUpdateSettingsProto_ConnectionType> : ::std::true_type {};
template <> struct is_proto_enum< ::enterprise_management::AutoUpdateSettingsProto_RollbackToTargetVersion> : ::std::true_type {};
template <> struct is_proto_enum< ::enterprise_management::SystemTimezoneProto_AutomaticTimezoneDetectionType> : ::std::true_type {};
template <> struct is_proto_enum< ::enterprise_management::DeviceLocalAccountInfoProto_AccountType> : ::std::true_type {};
template <> struct is_proto_enum< ::enterprise_management::AccessibilitySettingsProto_ScreenMagnifierType> : ::std::true_type {};
template <> struct is_proto_enum< ::enterprise_management::DisplayRotationDefaultProto_Rotation> : ::std::true_type {};
template <> struct is_proto_enum< ::enterprise_management::LoginAuthenticationBehaviorProto_LoginBehavior> : ::std::true_type {};
template <> struct is_proto_enum< ::enterprise_management::DeviceEcryptfsMigrationStrategyProto_MigrationStrategy> : ::std::true_type {};
template <> struct is_proto_enum< ::enterprise_management::DeviceSecondFactorAuthenticationProto_U2fMode> : ::std::true_type {};
template <> struct is_proto_enum< ::enterprise_management::WeeklyTimeProto_DayOfWeek> : ::std::true_type {};
template <> struct is_proto_enum< ::enterprise_management::DeviceNativePrintersAccessModeProto_AccessMode> : ::std::true_type {};
template <> struct is_proto_enum< ::enterprise_management::TPMFirmwareUpdateSettingsProto_AutoUpdateMode> : ::std::true_type {};
template <> struct is_proto_enum< ::enterprise_management::DeviceKerberosEncryptionTypesProto_Types> : ::std::true_type {};
template <> struct is_proto_enum< ::enterprise_management::DeviceUserPolicyLoopbackProcessingModeProto_Mode> : ::std::true_type {};
template <> struct is_proto_enum< ::enterprise_management::SamlLoginAuthenticationTypeProto_Type> : ::std::true_type {};
template <> struct is_proto_enum< ::enterprise_management::DeviceRebootOnUserSignoutProto_RebootOnSignoutMode> : ::std::true_type {};
template <> struct is_proto_enum< ::enterprise_management::DeviceDockMacAddressSourceProto_Source> : ::std::true_type {};
template <> struct is_proto_enum< ::enterprise_management::DeviceBatteryChargeModeProto_BatteryChargeMode> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chrome_5fdevice_5fpolicy_2eproto
